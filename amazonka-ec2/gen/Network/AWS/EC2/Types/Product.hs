{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# LANGUAGE RecordWildCards    #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.EC2.Types.Product
-- Copyright   : (c) 2013-2018 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
module Network.AWS.EC2.Types.Product where

import Network.AWS.EC2.Internal
import Network.AWS.EC2.Types.Sum
import Network.AWS.Lens
import Network.AWS.Prelude

-- | Describes an account attribute.
--
--
--
-- /See:/ 'accountAttribute' smart constructor.
data AccountAttribute = AccountAttribute'
  { _aaAttributeValues :: !(Maybe [AccountAttributeValue])
  , _aaAttributeName   :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AccountAttribute' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'aaAttributeValues' - The values for the account attribute.
--
-- * 'aaAttributeName' - The name of the account attribute.
accountAttribute
    :: AccountAttribute
accountAttribute =
  AccountAttribute' {_aaAttributeValues = Nothing, _aaAttributeName = Nothing}


-- | The values for the account attribute.
aaAttributeValues :: Lens' AccountAttribute [AccountAttributeValue]
aaAttributeValues = lens _aaAttributeValues (\ s a -> s{_aaAttributeValues = a}) . _Default . _Coerce

-- | The name of the account attribute.
aaAttributeName :: Lens' AccountAttribute (Maybe Text)
aaAttributeName = lens _aaAttributeName (\ s a -> s{_aaAttributeName = a})

instance FromXML AccountAttribute where
        parseXML x
          = AccountAttribute' <$>
              (x .@? "attributeValueSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "attributeName")

instance Hashable AccountAttribute where

instance NFData AccountAttribute where

-- | Describes a value of an account attribute.
--
--
--
-- /See:/ 'accountAttributeValue' smart constructor.
newtype AccountAttributeValue = AccountAttributeValue'
  { _aavAttributeValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AccountAttributeValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'aavAttributeValue' - The value of the attribute.
accountAttributeValue
    :: AccountAttributeValue
accountAttributeValue = AccountAttributeValue' {_aavAttributeValue = Nothing}


-- | The value of the attribute.
aavAttributeValue :: Lens' AccountAttributeValue (Maybe Text)
aavAttributeValue = lens _aavAttributeValue (\ s a -> s{_aavAttributeValue = a})

instance FromXML AccountAttributeValue where
        parseXML x
          = AccountAttributeValue' <$> (x .@? "attributeValue")

instance Hashable AccountAttributeValue where

instance NFData AccountAttributeValue where

-- | Describes a running instance in a Spot Fleet.
--
--
--
-- /See:/ 'activeInstance' smart constructor.
data ActiveInstance = ActiveInstance'
  { _aiInstanceId            :: !(Maybe Text)
  , _aiInstanceHealth        :: !(Maybe InstanceHealthStatus)
  , _aiInstanceType          :: !(Maybe Text)
  , _aiSpotInstanceRequestId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ActiveInstance' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'aiInstanceId' - The ID of the instance.
--
-- * 'aiInstanceHealth' - The health status of the instance. If the status of either the instance status check or the system status check is @impaired@ , the health status of the instance is @unhealthy@ . Otherwise, the health status is @healthy@ .
--
-- * 'aiInstanceType' - The instance type.
--
-- * 'aiSpotInstanceRequestId' - The ID of the Spot Instance request.
activeInstance
    :: ActiveInstance
activeInstance =
  ActiveInstance'
    { _aiInstanceId = Nothing
    , _aiInstanceHealth = Nothing
    , _aiInstanceType = Nothing
    , _aiSpotInstanceRequestId = Nothing
    }


-- | The ID of the instance.
aiInstanceId :: Lens' ActiveInstance (Maybe Text)
aiInstanceId = lens _aiInstanceId (\ s a -> s{_aiInstanceId = a})

-- | The health status of the instance. If the status of either the instance status check or the system status check is @impaired@ , the health status of the instance is @unhealthy@ . Otherwise, the health status is @healthy@ .
aiInstanceHealth :: Lens' ActiveInstance (Maybe InstanceHealthStatus)
aiInstanceHealth = lens _aiInstanceHealth (\ s a -> s{_aiInstanceHealth = a})

-- | The instance type.
aiInstanceType :: Lens' ActiveInstance (Maybe Text)
aiInstanceType = lens _aiInstanceType (\ s a -> s{_aiInstanceType = a})

-- | The ID of the Spot Instance request.
aiSpotInstanceRequestId :: Lens' ActiveInstance (Maybe Text)
aiSpotInstanceRequestId = lens _aiSpotInstanceRequestId (\ s a -> s{_aiSpotInstanceRequestId = a})

instance FromXML ActiveInstance where
        parseXML x
          = ActiveInstance' <$>
              (x .@? "instanceId") <*> (x .@? "instanceHealth") <*>
                (x .@? "instanceType")
                <*> (x .@? "spotInstanceRequestId")

instance Hashable ActiveInstance where

instance NFData ActiveInstance where

-- | An entry for a prefix list.
--
--
--
-- /See:/ 'addPrefixListEntry' smart constructor.
data AddPrefixListEntry = AddPrefixListEntry'
  { _apleDescription :: !(Maybe Text)
  , _apleCidr        :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AddPrefixListEntry' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'apleDescription' - A description for the entry. Constraints: Up to 255 characters in length.
--
-- * 'apleCidr' - The CIDR block.
addPrefixListEntry
    :: Text -- ^ 'apleCidr'
    -> AddPrefixListEntry
addPrefixListEntry pCidr_ =
  AddPrefixListEntry' {_apleDescription = Nothing, _apleCidr = pCidr_}


-- | A description for the entry. Constraints: Up to 255 characters in length.
apleDescription :: Lens' AddPrefixListEntry (Maybe Text)
apleDescription = lens _apleDescription (\ s a -> s{_apleDescription = a})

-- | The CIDR block.
apleCidr :: Lens' AddPrefixListEntry Text
apleCidr = lens _apleCidr (\ s a -> s{_apleCidr = a})

instance Hashable AddPrefixListEntry where

instance NFData AddPrefixListEntry where

instance ToQuery AddPrefixListEntry where
        toQuery AddPrefixListEntry'{..}
          = mconcat
              ["Description" =: _apleDescription,
               "Cidr" =: _apleCidr]

-- | Describes an Elastic IP address, or a carrier IP address.
--
--
--
-- /See:/ 'address' smart constructor.
data Address = Address'
  { _aAssociationId           :: !(Maybe Text)
  , _aInstanceId              :: !(Maybe Text)
  , _aNetworkInterfaceOwnerId :: !(Maybe Text)
  , _aAllocationId            :: !(Maybe Text)
  , _aCarrierIP               :: !(Maybe Text)
  , _aNetworkBorderGroup      :: !(Maybe Text)
  , _aDomain                  :: !(Maybe DomainType)
  , _aNetworkInterfaceId      :: !(Maybe Text)
  , _aPublicIPv4Pool          :: !(Maybe Text)
  , _aCustomerOwnedIPv4Pool   :: !(Maybe Text)
  , _aCustomerOwnedIP         :: !(Maybe Text)
  , _aPrivateIPAddress        :: !(Maybe Text)
  , _aPublicIP                :: !(Maybe Text)
  , _aTags                    :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Address' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'aAssociationId' - The ID representing the association of the address with an instance in a VPC.
--
-- * 'aInstanceId' - The ID of the instance that the address is associated with (if any).
--
-- * 'aNetworkInterfaceOwnerId' - The ID of the AWS account that owns the network interface.
--
-- * 'aAllocationId' - The ID representing the allocation of the address for use with EC2-VPC.
--
-- * 'aCarrierIP' - The carrier IP address associated. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance).
--
-- * 'aNetworkBorderGroup' - The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses.
--
-- * 'aDomain' - Indicates whether this Elastic IP address is for use with instances in EC2-Classic (@standard@ ) or instances in a VPC (@vpc@ ).
--
-- * 'aNetworkInterfaceId' - The ID of the network interface.
--
-- * 'aPublicIPv4Pool' - The ID of an address pool.
--
-- * 'aCustomerOwnedIPv4Pool' - The ID of the customer-owned address pool.
--
-- * 'aCustomerOwnedIP' - The customer-owned IP address.
--
-- * 'aPrivateIPAddress' - The private IP address associated with the Elastic IP address.
--
-- * 'aPublicIP' - The Elastic IP address.
--
-- * 'aTags' - Any tags assigned to the Elastic IP address.
address
    :: Address
address =
  Address'
    { _aAssociationId = Nothing
    , _aInstanceId = Nothing
    , _aNetworkInterfaceOwnerId = Nothing
    , _aAllocationId = Nothing
    , _aCarrierIP = Nothing
    , _aNetworkBorderGroup = Nothing
    , _aDomain = Nothing
    , _aNetworkInterfaceId = Nothing
    , _aPublicIPv4Pool = Nothing
    , _aCustomerOwnedIPv4Pool = Nothing
    , _aCustomerOwnedIP = Nothing
    , _aPrivateIPAddress = Nothing
    , _aPublicIP = Nothing
    , _aTags = Nothing
    }


-- | The ID representing the association of the address with an instance in a VPC.
aAssociationId :: Lens' Address (Maybe Text)
aAssociationId = lens _aAssociationId (\ s a -> s{_aAssociationId = a})

-- | The ID of the instance that the address is associated with (if any).
aInstanceId :: Lens' Address (Maybe Text)
aInstanceId = lens _aInstanceId (\ s a -> s{_aInstanceId = a})

-- | The ID of the AWS account that owns the network interface.
aNetworkInterfaceOwnerId :: Lens' Address (Maybe Text)
aNetworkInterfaceOwnerId = lens _aNetworkInterfaceOwnerId (\ s a -> s{_aNetworkInterfaceOwnerId = a})

-- | The ID representing the allocation of the address for use with EC2-VPC.
aAllocationId :: Lens' Address (Maybe Text)
aAllocationId = lens _aAllocationId (\ s a -> s{_aAllocationId = a})

-- | The carrier IP address associated. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance).
aCarrierIP :: Lens' Address (Maybe Text)
aCarrierIP = lens _aCarrierIP (\ s a -> s{_aCarrierIP = a})

-- | The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses.
aNetworkBorderGroup :: Lens' Address (Maybe Text)
aNetworkBorderGroup = lens _aNetworkBorderGroup (\ s a -> s{_aNetworkBorderGroup = a})

-- | Indicates whether this Elastic IP address is for use with instances in EC2-Classic (@standard@ ) or instances in a VPC (@vpc@ ).
aDomain :: Lens' Address (Maybe DomainType)
aDomain = lens _aDomain (\ s a -> s{_aDomain = a})

-- | The ID of the network interface.
aNetworkInterfaceId :: Lens' Address (Maybe Text)
aNetworkInterfaceId = lens _aNetworkInterfaceId (\ s a -> s{_aNetworkInterfaceId = a})

-- | The ID of an address pool.
aPublicIPv4Pool :: Lens' Address (Maybe Text)
aPublicIPv4Pool = lens _aPublicIPv4Pool (\ s a -> s{_aPublicIPv4Pool = a})

-- | The ID of the customer-owned address pool.
aCustomerOwnedIPv4Pool :: Lens' Address (Maybe Text)
aCustomerOwnedIPv4Pool = lens _aCustomerOwnedIPv4Pool (\ s a -> s{_aCustomerOwnedIPv4Pool = a})

-- | The customer-owned IP address.
aCustomerOwnedIP :: Lens' Address (Maybe Text)
aCustomerOwnedIP = lens _aCustomerOwnedIP (\ s a -> s{_aCustomerOwnedIP = a})

-- | The private IP address associated with the Elastic IP address.
aPrivateIPAddress :: Lens' Address (Maybe Text)
aPrivateIPAddress = lens _aPrivateIPAddress (\ s a -> s{_aPrivateIPAddress = a})

-- | The Elastic IP address.
aPublicIP :: Lens' Address (Maybe Text)
aPublicIP = lens _aPublicIP (\ s a -> s{_aPublicIP = a})

-- | Any tags assigned to the Elastic IP address.
aTags :: Lens' Address [Tag]
aTags = lens _aTags (\ s a -> s{_aTags = a}) . _Default . _Coerce

instance FromXML Address where
        parseXML x
          = Address' <$>
              (x .@? "associationId") <*> (x .@? "instanceId") <*>
                (x .@? "networkInterfaceOwnerId")
                <*> (x .@? "allocationId")
                <*> (x .@? "carrierIp")
                <*> (x .@? "networkBorderGroup")
                <*> (x .@? "domain")
                <*> (x .@? "networkInterfaceId")
                <*> (x .@? "publicIpv4Pool")
                <*> (x .@? "customerOwnedIpv4Pool")
                <*> (x .@? "customerOwnedIp")
                <*> (x .@? "privateIpAddress")
                <*> (x .@? "publicIp")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable Address where

instance NFData Address where

-- | The attributes associated with an Elastic IP address.
--
--
--
-- /See:/ 'addressAttribute' smart constructor.
data AddressAttribute = AddressAttribute'
  { _aaPtrRecordUpdate :: !(Maybe PtrUpdateStatus)
  , _aaAllocationId    :: !(Maybe Text)
  , _aaPublicIP        :: !(Maybe Text)
  , _aaPtrRecord       :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AddressAttribute' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'aaPtrRecordUpdate' - The updated PTR record for the IP address.
--
-- * 'aaAllocationId' - [EC2-VPC] The allocation ID.
--
-- * 'aaPublicIP' - The public IP address.
--
-- * 'aaPtrRecord' - The pointer (PTR) record for the IP address.
addressAttribute
    :: AddressAttribute
addressAttribute =
  AddressAttribute'
    { _aaPtrRecordUpdate = Nothing
    , _aaAllocationId = Nothing
    , _aaPublicIP = Nothing
    , _aaPtrRecord = Nothing
    }


-- | The updated PTR record for the IP address.
aaPtrRecordUpdate :: Lens' AddressAttribute (Maybe PtrUpdateStatus)
aaPtrRecordUpdate = lens _aaPtrRecordUpdate (\ s a -> s{_aaPtrRecordUpdate = a})

-- | [EC2-VPC] The allocation ID.
aaAllocationId :: Lens' AddressAttribute (Maybe Text)
aaAllocationId = lens _aaAllocationId (\ s a -> s{_aaAllocationId = a})

-- | The public IP address.
aaPublicIP :: Lens' AddressAttribute (Maybe Text)
aaPublicIP = lens _aaPublicIP (\ s a -> s{_aaPublicIP = a})

-- | The pointer (PTR) record for the IP address.
aaPtrRecord :: Lens' AddressAttribute (Maybe Text)
aaPtrRecord = lens _aaPtrRecord (\ s a -> s{_aaPtrRecord = a})

instance FromXML AddressAttribute where
        parseXML x
          = AddressAttribute' <$>
              (x .@? "ptrRecordUpdate") <*> (x .@? "allocationId")
                <*> (x .@? "publicIp")
                <*> (x .@? "ptrRecord")

instance Hashable AddressAttribute where

instance NFData AddressAttribute where

-- | Describes a principal.
--
--
--
-- /See:/ 'allowedPrincipal' smart constructor.
data AllowedPrincipal = AllowedPrincipal'
  { _apPrincipalType :: !(Maybe PrincipalType)
  , _apPrincipal     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AllowedPrincipal' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'apPrincipalType' - The type of principal.
--
-- * 'apPrincipal' - The Amazon Resource Name (ARN) of the principal.
allowedPrincipal
    :: AllowedPrincipal
allowedPrincipal =
  AllowedPrincipal' {_apPrincipalType = Nothing, _apPrincipal = Nothing}


-- | The type of principal.
apPrincipalType :: Lens' AllowedPrincipal (Maybe PrincipalType)
apPrincipalType = lens _apPrincipalType (\ s a -> s{_apPrincipalType = a})

-- | The Amazon Resource Name (ARN) of the principal.
apPrincipal :: Lens' AllowedPrincipal (Maybe Text)
apPrincipal = lens _apPrincipal (\ s a -> s{_apPrincipal = a})

instance FromXML AllowedPrincipal where
        parseXML x
          = AllowedPrincipal' <$>
              (x .@? "principalType") <*> (x .@? "principal")

instance Hashable AllowedPrincipal where

instance NFData AllowedPrincipal where

-- | Describes an potential intermediate component of a feasible path.
--
--
--
-- /See:/ 'alternatePathHint' smart constructor.
data AlternatePathHint = AlternatePathHint'
  { _aphComponentARN :: !(Maybe Text)
  , _aphComponentId  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AlternatePathHint' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'aphComponentARN' - The Amazon Resource Name (ARN) of the component.
--
-- * 'aphComponentId' - The ID of the component.
alternatePathHint
    :: AlternatePathHint
alternatePathHint =
  AlternatePathHint' {_aphComponentARN = Nothing, _aphComponentId = Nothing}


-- | The Amazon Resource Name (ARN) of the component.
aphComponentARN :: Lens' AlternatePathHint (Maybe Text)
aphComponentARN = lens _aphComponentARN (\ s a -> s{_aphComponentARN = a})

-- | The ID of the component.
aphComponentId :: Lens' AlternatePathHint (Maybe Text)
aphComponentId = lens _aphComponentId (\ s a -> s{_aphComponentId = a})

instance FromXML AlternatePathHint where
        parseXML x
          = AlternatePathHint' <$>
              (x .@? "componentArn") <*> (x .@? "componentId")

instance Hashable AlternatePathHint where

instance NFData AlternatePathHint where

-- | Describes a network access control (ACL) rule.
--
--
--
-- /See:/ 'analysisACLRule' smart constructor.
data AnalysisACLRule = AnalysisACLRule'
  { _aarRuleNumber :: !(Maybe Int)
  , _aarRuleAction :: !(Maybe Text)
  , _aarProtocol   :: !(Maybe Text)
  , _aarPortRange  :: !(Maybe PortRange)
  , _aarCidr       :: !(Maybe Text)
  , _aarEgress     :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AnalysisACLRule' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'aarRuleNumber' - The rule number.
--
-- * 'aarRuleAction' - Indicates whether to allow or deny traffic that matches the rule.
--
-- * 'aarProtocol' - The protocol.
--
-- * 'aarPortRange' - The range of ports.
--
-- * 'aarCidr' - The IPv4 address range, in CIDR notation.
--
-- * 'aarEgress' - Indicates whether the rule is an outbound rule.
analysisACLRule
    :: AnalysisACLRule
analysisACLRule =
  AnalysisACLRule'
    { _aarRuleNumber = Nothing
    , _aarRuleAction = Nothing
    , _aarProtocol = Nothing
    , _aarPortRange = Nothing
    , _aarCidr = Nothing
    , _aarEgress = Nothing
    }


-- | The rule number.
aarRuleNumber :: Lens' AnalysisACLRule (Maybe Int)
aarRuleNumber = lens _aarRuleNumber (\ s a -> s{_aarRuleNumber = a})

-- | Indicates whether to allow or deny traffic that matches the rule.
aarRuleAction :: Lens' AnalysisACLRule (Maybe Text)
aarRuleAction = lens _aarRuleAction (\ s a -> s{_aarRuleAction = a})

-- | The protocol.
aarProtocol :: Lens' AnalysisACLRule (Maybe Text)
aarProtocol = lens _aarProtocol (\ s a -> s{_aarProtocol = a})

-- | The range of ports.
aarPortRange :: Lens' AnalysisACLRule (Maybe PortRange)
aarPortRange = lens _aarPortRange (\ s a -> s{_aarPortRange = a})

-- | The IPv4 address range, in CIDR notation.
aarCidr :: Lens' AnalysisACLRule (Maybe Text)
aarCidr = lens _aarCidr (\ s a -> s{_aarCidr = a})

-- | Indicates whether the rule is an outbound rule.
aarEgress :: Lens' AnalysisACLRule (Maybe Bool)
aarEgress = lens _aarEgress (\ s a -> s{_aarEgress = a})

instance FromXML AnalysisACLRule where
        parseXML x
          = AnalysisACLRule' <$>
              (x .@? "ruleNumber") <*> (x .@? "ruleAction") <*>
                (x .@? "protocol")
                <*> (x .@? "portRange")
                <*> (x .@? "cidr")
                <*> (x .@? "egress")

instance Hashable AnalysisACLRule where

instance NFData AnalysisACLRule where

-- | Describes a path component.
--
--
--
-- /See:/ 'analysisComponent' smart constructor.
data AnalysisComponent = AnalysisComponent'
  { _acARN :: !(Maybe Text)
  , _acId  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AnalysisComponent' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'acARN' - The Amazon Resource Name (ARN) of the component.
--
-- * 'acId' - The ID of the component.
analysisComponent
    :: AnalysisComponent
analysisComponent = AnalysisComponent' {_acARN = Nothing, _acId = Nothing}


-- | The Amazon Resource Name (ARN) of the component.
acARN :: Lens' AnalysisComponent (Maybe Text)
acARN = lens _acARN (\ s a -> s{_acARN = a})

-- | The ID of the component.
acId :: Lens' AnalysisComponent (Maybe Text)
acId = lens _acId (\ s a -> s{_acId = a})

instance FromXML AnalysisComponent where
        parseXML x
          = AnalysisComponent' <$>
              (x .@? "arn") <*> (x .@? "id")

instance Hashable AnalysisComponent where

instance NFData AnalysisComponent where

-- | Describes a load balancer listener.
--
--
--
-- /See:/ 'analysisLoadBalancerListener' smart constructor.
data AnalysisLoadBalancerListener = AnalysisLoadBalancerListener'
  { _alblInstancePort     :: !(Maybe Nat)
  , _alblLoadBalancerPort :: !(Maybe Nat)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AnalysisLoadBalancerListener' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'alblInstancePort' - [Classic Load Balancers] The back-end port for the listener.
--
-- * 'alblLoadBalancerPort' - The port on which the load balancer is listening.
analysisLoadBalancerListener
    :: AnalysisLoadBalancerListener
analysisLoadBalancerListener =
  AnalysisLoadBalancerListener'
    {_alblInstancePort = Nothing, _alblLoadBalancerPort = Nothing}


-- | [Classic Load Balancers] The back-end port for the listener.
alblInstancePort :: Lens' AnalysisLoadBalancerListener (Maybe Natural)
alblInstancePort = lens _alblInstancePort (\ s a -> s{_alblInstancePort = a}) . mapping _Nat

-- | The port on which the load balancer is listening.
alblLoadBalancerPort :: Lens' AnalysisLoadBalancerListener (Maybe Natural)
alblLoadBalancerPort = lens _alblLoadBalancerPort (\ s a -> s{_alblLoadBalancerPort = a}) . mapping _Nat

instance FromXML AnalysisLoadBalancerListener where
        parseXML x
          = AnalysisLoadBalancerListener' <$>
              (x .@? "instancePort") <*> (x .@? "loadBalancerPort")

instance Hashable AnalysisLoadBalancerListener where

instance NFData AnalysisLoadBalancerListener where

-- | Describes a load balancer target.
--
--
--
-- /See:/ 'analysisLoadBalancerTarget' smart constructor.
data AnalysisLoadBalancerTarget = AnalysisLoadBalancerTarget'
  { _albtAddress          :: !(Maybe Text)
  , _albtAvailabilityZone :: !(Maybe Text)
  , _albtPort             :: !(Maybe Nat)
  , _albtInstance         :: !(Maybe AnalysisComponent)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AnalysisLoadBalancerTarget' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'albtAddress' - The IP address.
--
-- * 'albtAvailabilityZone' - The Availability Zone.
--
-- * 'albtPort' - The port on which the target is listening.
--
-- * 'albtInstance' - Information about the instance.
analysisLoadBalancerTarget
    :: AnalysisLoadBalancerTarget
analysisLoadBalancerTarget =
  AnalysisLoadBalancerTarget'
    { _albtAddress = Nothing
    , _albtAvailabilityZone = Nothing
    , _albtPort = Nothing
    , _albtInstance = Nothing
    }


-- | The IP address.
albtAddress :: Lens' AnalysisLoadBalancerTarget (Maybe Text)
albtAddress = lens _albtAddress (\ s a -> s{_albtAddress = a})

-- | The Availability Zone.
albtAvailabilityZone :: Lens' AnalysisLoadBalancerTarget (Maybe Text)
albtAvailabilityZone = lens _albtAvailabilityZone (\ s a -> s{_albtAvailabilityZone = a})

-- | The port on which the target is listening.
albtPort :: Lens' AnalysisLoadBalancerTarget (Maybe Natural)
albtPort = lens _albtPort (\ s a -> s{_albtPort = a}) . mapping _Nat

-- | Information about the instance.
albtInstance :: Lens' AnalysisLoadBalancerTarget (Maybe AnalysisComponent)
albtInstance = lens _albtInstance (\ s a -> s{_albtInstance = a})

instance FromXML AnalysisLoadBalancerTarget where
        parseXML x
          = AnalysisLoadBalancerTarget' <$>
              (x .@? "address") <*> (x .@? "availabilityZone") <*>
                (x .@? "port")
                <*> (x .@? "instance")

instance Hashable AnalysisLoadBalancerTarget where

instance NFData AnalysisLoadBalancerTarget where

-- | Describes a header. Reflects any changes made by a component as traffic passes through. The fields of an inbound header are null except for the first component of a path.
--
--
--
-- /See:/ 'analysisPacketHeader' smart constructor.
data AnalysisPacketHeader = AnalysisPacketHeader'
  { _aphDestinationAddresses  :: !(Maybe [Text])
  , _aphSourceAddresses       :: !(Maybe [Text])
  , _aphProtocol              :: !(Maybe Text)
  , _aphDestinationPortRanges :: !(Maybe [PortRange])
  , _aphSourcePortRanges      :: !(Maybe [PortRange])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AnalysisPacketHeader' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'aphDestinationAddresses' - The destination addresses.
--
-- * 'aphSourceAddresses' - The source addresses.
--
-- * 'aphProtocol' - The protocol.
--
-- * 'aphDestinationPortRanges' - The destination port ranges.
--
-- * 'aphSourcePortRanges' - The source port ranges.
analysisPacketHeader
    :: AnalysisPacketHeader
analysisPacketHeader =
  AnalysisPacketHeader'
    { _aphDestinationAddresses = Nothing
    , _aphSourceAddresses = Nothing
    , _aphProtocol = Nothing
    , _aphDestinationPortRanges = Nothing
    , _aphSourcePortRanges = Nothing
    }


-- | The destination addresses.
aphDestinationAddresses :: Lens' AnalysisPacketHeader [Text]
aphDestinationAddresses = lens _aphDestinationAddresses (\ s a -> s{_aphDestinationAddresses = a}) . _Default . _Coerce

-- | The source addresses.
aphSourceAddresses :: Lens' AnalysisPacketHeader [Text]
aphSourceAddresses = lens _aphSourceAddresses (\ s a -> s{_aphSourceAddresses = a}) . _Default . _Coerce

-- | The protocol.
aphProtocol :: Lens' AnalysisPacketHeader (Maybe Text)
aphProtocol = lens _aphProtocol (\ s a -> s{_aphProtocol = a})

-- | The destination port ranges.
aphDestinationPortRanges :: Lens' AnalysisPacketHeader [PortRange]
aphDestinationPortRanges = lens _aphDestinationPortRanges (\ s a -> s{_aphDestinationPortRanges = a}) . _Default . _Coerce

-- | The source port ranges.
aphSourcePortRanges :: Lens' AnalysisPacketHeader [PortRange]
aphSourcePortRanges = lens _aphSourcePortRanges (\ s a -> s{_aphSourcePortRanges = a}) . _Default . _Coerce

instance FromXML AnalysisPacketHeader where
        parseXML x
          = AnalysisPacketHeader' <$>
              (x .@? "destinationAddressSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*>
                (x .@? "sourceAddressSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "protocol")
                <*>
                (x .@? "destinationPortRangeSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "sourcePortRangeSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable AnalysisPacketHeader where

instance NFData AnalysisPacketHeader where

-- | Describes a route table route.
--
--
--
-- /See:/ 'analysisRouteTableRoute' smart constructor.
data AnalysisRouteTableRoute = AnalysisRouteTableRoute'
  { _artrVPCPeeringConnectionId      :: !(Maybe Text)
  , _artrInstanceId                  :: !(Maybe Text)
  , _artrOrigin                      :: !(Maybe Text)
  , _artrEgressOnlyInternetGatewayId :: !(Maybe Text)
  , _artrNatGatewayId                :: !(Maybe Text)
  , _artrNetworkInterfaceId          :: !(Maybe Text)
  , _artrTransitGatewayId            :: !(Maybe Text)
  , _artrGatewayId                   :: !(Maybe Text)
  , _artrDestinationCidr             :: !(Maybe Text)
  , _artrDestinationPrefixListId     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AnalysisRouteTableRoute' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'artrVPCPeeringConnectionId' - The ID of a VPC peering connection.
--
-- * 'artrInstanceId' - The ID of the instance, such as a NAT instance.
--
-- * 'artrOrigin' - Describes how the route was created. The following are possible values:     * @CreateRouteTable@ - The route was automatically created when the route table was created.     * @CreateRoute@ - The route was manually added to the route table.     * @EnableVgwRoutePropagation@ - The route was propagated by route propagation.
--
-- * 'artrEgressOnlyInternetGatewayId' - The ID of an egress-only internet gateway.
--
-- * 'artrNatGatewayId' - The ID of a NAT gateway.
--
-- * 'artrNetworkInterfaceId' - The ID of a network interface.
--
-- * 'artrTransitGatewayId' - The ID of a transit gateway.
--
-- * 'artrGatewayId' - The ID of the gateway, such as an internet gateway or virtual private gateway.
--
-- * 'artrDestinationCidr' - The destination IPv4 address, in CIDR notation.
--
-- * 'artrDestinationPrefixListId' - The prefix of the AWS service.
analysisRouteTableRoute
    :: AnalysisRouteTableRoute
analysisRouteTableRoute =
  AnalysisRouteTableRoute'
    { _artrVPCPeeringConnectionId = Nothing
    , _artrInstanceId = Nothing
    , _artrOrigin = Nothing
    , _artrEgressOnlyInternetGatewayId = Nothing
    , _artrNatGatewayId = Nothing
    , _artrNetworkInterfaceId = Nothing
    , _artrTransitGatewayId = Nothing
    , _artrGatewayId = Nothing
    , _artrDestinationCidr = Nothing
    , _artrDestinationPrefixListId = Nothing
    }


-- | The ID of a VPC peering connection.
artrVPCPeeringConnectionId :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrVPCPeeringConnectionId = lens _artrVPCPeeringConnectionId (\ s a -> s{_artrVPCPeeringConnectionId = a})

-- | The ID of the instance, such as a NAT instance.
artrInstanceId :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrInstanceId = lens _artrInstanceId (\ s a -> s{_artrInstanceId = a})

-- | Describes how the route was created. The following are possible values:     * @CreateRouteTable@ - The route was automatically created when the route table was created.     * @CreateRoute@ - The route was manually added to the route table.     * @EnableVgwRoutePropagation@ - The route was propagated by route propagation.
artrOrigin :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrOrigin = lens _artrOrigin (\ s a -> s{_artrOrigin = a})

-- | The ID of an egress-only internet gateway.
artrEgressOnlyInternetGatewayId :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrEgressOnlyInternetGatewayId = lens _artrEgressOnlyInternetGatewayId (\ s a -> s{_artrEgressOnlyInternetGatewayId = a})

-- | The ID of a NAT gateway.
artrNatGatewayId :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrNatGatewayId = lens _artrNatGatewayId (\ s a -> s{_artrNatGatewayId = a})

-- | The ID of a network interface.
artrNetworkInterfaceId :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrNetworkInterfaceId = lens _artrNetworkInterfaceId (\ s a -> s{_artrNetworkInterfaceId = a})

-- | The ID of a transit gateway.
artrTransitGatewayId :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrTransitGatewayId = lens _artrTransitGatewayId (\ s a -> s{_artrTransitGatewayId = a})

-- | The ID of the gateway, such as an internet gateway or virtual private gateway.
artrGatewayId :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrGatewayId = lens _artrGatewayId (\ s a -> s{_artrGatewayId = a})

-- | The destination IPv4 address, in CIDR notation.
artrDestinationCidr :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrDestinationCidr = lens _artrDestinationCidr (\ s a -> s{_artrDestinationCidr = a})

-- | The prefix of the AWS service.
artrDestinationPrefixListId :: Lens' AnalysisRouteTableRoute (Maybe Text)
artrDestinationPrefixListId = lens _artrDestinationPrefixListId (\ s a -> s{_artrDestinationPrefixListId = a})

instance FromXML AnalysisRouteTableRoute where
        parseXML x
          = AnalysisRouteTableRoute' <$>
              (x .@? "vpcPeeringConnectionId") <*>
                (x .@? "instanceId")
                <*> (x .@? "origin")
                <*> (x .@? "egressOnlyInternetGatewayId")
                <*> (x .@? "natGatewayId")
                <*> (x .@? "networkInterfaceId")
                <*> (x .@? "transitGatewayId")
                <*> (x .@? "gatewayId")
                <*> (x .@? "destinationCidr")
                <*> (x .@? "destinationPrefixListId")

instance Hashable AnalysisRouteTableRoute where

instance NFData AnalysisRouteTableRoute where

-- | Describes a security group rule.
--
--
--
-- /See:/ 'analysisSecurityGroupRule' smart constructor.
data AnalysisSecurityGroupRule = AnalysisSecurityGroupRule'
  { _asgrDirection       :: !(Maybe Text)
  , _asgrProtocol        :: !(Maybe Text)
  , _asgrPortRange       :: !(Maybe PortRange)
  , _asgrSecurityGroupId :: !(Maybe Text)
  , _asgrCidr            :: !(Maybe Text)
  , _asgrPrefixListId    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AnalysisSecurityGroupRule' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'asgrDirection' - The direction. The following are possible values:     * egress     * ingress
--
-- * 'asgrProtocol' - The protocol name.
--
-- * 'asgrPortRange' - The port range.
--
-- * 'asgrSecurityGroupId' - The security group ID.
--
-- * 'asgrCidr' - The IPv4 address range, in CIDR notation.
--
-- * 'asgrPrefixListId' - The prefix list ID.
analysisSecurityGroupRule
    :: AnalysisSecurityGroupRule
analysisSecurityGroupRule =
  AnalysisSecurityGroupRule'
    { _asgrDirection = Nothing
    , _asgrProtocol = Nothing
    , _asgrPortRange = Nothing
    , _asgrSecurityGroupId = Nothing
    , _asgrCidr = Nothing
    , _asgrPrefixListId = Nothing
    }


-- | The direction. The following are possible values:     * egress     * ingress
asgrDirection :: Lens' AnalysisSecurityGroupRule (Maybe Text)
asgrDirection = lens _asgrDirection (\ s a -> s{_asgrDirection = a})

-- | The protocol name.
asgrProtocol :: Lens' AnalysisSecurityGroupRule (Maybe Text)
asgrProtocol = lens _asgrProtocol (\ s a -> s{_asgrProtocol = a})

-- | The port range.
asgrPortRange :: Lens' AnalysisSecurityGroupRule (Maybe PortRange)
asgrPortRange = lens _asgrPortRange (\ s a -> s{_asgrPortRange = a})

-- | The security group ID.
asgrSecurityGroupId :: Lens' AnalysisSecurityGroupRule (Maybe Text)
asgrSecurityGroupId = lens _asgrSecurityGroupId (\ s a -> s{_asgrSecurityGroupId = a})

-- | The IPv4 address range, in CIDR notation.
asgrCidr :: Lens' AnalysisSecurityGroupRule (Maybe Text)
asgrCidr = lens _asgrCidr (\ s a -> s{_asgrCidr = a})

-- | The prefix list ID.
asgrPrefixListId :: Lens' AnalysisSecurityGroupRule (Maybe Text)
asgrPrefixListId = lens _asgrPrefixListId (\ s a -> s{_asgrPrefixListId = a})

instance FromXML AnalysisSecurityGroupRule where
        parseXML x
          = AnalysisSecurityGroupRule' <$>
              (x .@? "direction") <*> (x .@? "protocol") <*>
                (x .@? "portRange")
                <*> (x .@? "securityGroupId")
                <*> (x .@? "cidr")
                <*> (x .@? "prefixListId")

instance Hashable AnalysisSecurityGroupRule where

instance NFData AnalysisSecurityGroupRule where

-- | Describes the private IP addresses assigned to a network interface.
--
--
--
-- /See:/ 'assignedPrivateIPAddress' smart constructor.
newtype AssignedPrivateIPAddress = AssignedPrivateIPAddress'
  { _apiaPrivateIPAddress :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AssignedPrivateIPAddress' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'apiaPrivateIPAddress' - The private IP address assigned to the network interface.
assignedPrivateIPAddress
    :: AssignedPrivateIPAddress
assignedPrivateIPAddress =
  AssignedPrivateIPAddress' {_apiaPrivateIPAddress = Nothing}


-- | The private IP address assigned to the network interface.
apiaPrivateIPAddress :: Lens' AssignedPrivateIPAddress (Maybe Text)
apiaPrivateIPAddress = lens _apiaPrivateIPAddress (\ s a -> s{_apiaPrivateIPAddress = a})

instance FromXML AssignedPrivateIPAddress where
        parseXML x
          = AssignedPrivateIPAddress' <$>
              (x .@? "privateIpAddress")

instance Hashable AssignedPrivateIPAddress where

instance NFData AssignedPrivateIPAddress where

-- | Information about the associated IAM roles.
--
--
--
-- /See:/ 'associatedRole' smart constructor.
data AssociatedRole = AssociatedRole'
  { _arCertificateS3BucketName :: !(Maybe Text)
  , _arCertificateS3ObjectKey  :: !(Maybe Text)
  , _arEncryptionKMSKeyId      :: !(Maybe Text)
  , _arAssociatedRoleARN       :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AssociatedRole' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'arCertificateS3BucketName' - The name of the Amazon S3 bucket in which the Amazon S3 object is stored.
--
-- * 'arCertificateS3ObjectKey' - The key of the Amazon S3 object ey where the certificate, certificate chain, and encrypted private key bundle is stored. The object key is formated as follows: @certificate_arn@ /@role_arn@ .
--
-- * 'arEncryptionKMSKeyId' - The ID of the KMS customer master key (CMK) used to encrypt the private key.
--
-- * 'arAssociatedRoleARN' - The ARN of the associated IAM role.
associatedRole
    :: AssociatedRole
associatedRole =
  AssociatedRole'
    { _arCertificateS3BucketName = Nothing
    , _arCertificateS3ObjectKey = Nothing
    , _arEncryptionKMSKeyId = Nothing
    , _arAssociatedRoleARN = Nothing
    }


-- | The name of the Amazon S3 bucket in which the Amazon S3 object is stored.
arCertificateS3BucketName :: Lens' AssociatedRole (Maybe Text)
arCertificateS3BucketName = lens _arCertificateS3BucketName (\ s a -> s{_arCertificateS3BucketName = a})

-- | The key of the Amazon S3 object ey where the certificate, certificate chain, and encrypted private key bundle is stored. The object key is formated as follows: @certificate_arn@ /@role_arn@ .
arCertificateS3ObjectKey :: Lens' AssociatedRole (Maybe Text)
arCertificateS3ObjectKey = lens _arCertificateS3ObjectKey (\ s a -> s{_arCertificateS3ObjectKey = a})

-- | The ID of the KMS customer master key (CMK) used to encrypt the private key.
arEncryptionKMSKeyId :: Lens' AssociatedRole (Maybe Text)
arEncryptionKMSKeyId = lens _arEncryptionKMSKeyId (\ s a -> s{_arEncryptionKMSKeyId = a})

-- | The ARN of the associated IAM role.
arAssociatedRoleARN :: Lens' AssociatedRole (Maybe Text)
arAssociatedRoleARN = lens _arAssociatedRoleARN (\ s a -> s{_arAssociatedRoleARN = a})

instance FromXML AssociatedRole where
        parseXML x
          = AssociatedRole' <$>
              (x .@? "certificateS3BucketName") <*>
                (x .@? "certificateS3ObjectKey")
                <*> (x .@? "encryptionKmsKeyId")
                <*> (x .@? "associatedRoleArn")

instance Hashable AssociatedRole where

instance NFData AssociatedRole where

-- | Describes a target network that is associated with a Client VPN endpoint. A target network is a subnet in a VPC.
--
--
--
-- /See:/ 'associatedTargetNetwork' smart constructor.
data AssociatedTargetNetwork = AssociatedTargetNetwork'
  { _atnNetworkId   :: !(Maybe Text)
  , _atnNetworkType :: !(Maybe AssociatedNetworkType)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AssociatedTargetNetwork' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'atnNetworkId' - The ID of the subnet.
--
-- * 'atnNetworkType' - The target network type.
associatedTargetNetwork
    :: AssociatedTargetNetwork
associatedTargetNetwork =
  AssociatedTargetNetwork' {_atnNetworkId = Nothing, _atnNetworkType = Nothing}


-- | The ID of the subnet.
atnNetworkId :: Lens' AssociatedTargetNetwork (Maybe Text)
atnNetworkId = lens _atnNetworkId (\ s a -> s{_atnNetworkId = a})

-- | The target network type.
atnNetworkType :: Lens' AssociatedTargetNetwork (Maybe AssociatedNetworkType)
atnNetworkType = lens _atnNetworkType (\ s a -> s{_atnNetworkType = a})

instance FromXML AssociatedTargetNetwork where
        parseXML x
          = AssociatedTargetNetwork' <$>
              (x .@? "networkId") <*> (x .@? "networkType")

instance Hashable AssociatedTargetNetwork where

instance NFData AssociatedTargetNetwork where

-- | Describes the state of a target network association.
--
--
--
-- /See:/ 'associationStatus' smart constructor.
data AssociationStatus = AssociationStatus'
  { _asCode    :: !(Maybe AssociationStatusCode)
  , _asMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AssociationStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'asCode' - The state of the target network association.
--
-- * 'asMessage' - A message about the status of the target network association, if applicable.
associationStatus
    :: AssociationStatus
associationStatus = AssociationStatus' {_asCode = Nothing, _asMessage = Nothing}


-- | The state of the target network association.
asCode :: Lens' AssociationStatus (Maybe AssociationStatusCode)
asCode = lens _asCode (\ s a -> s{_asCode = a})

-- | A message about the status of the target network association, if applicable.
asMessage :: Lens' AssociationStatus (Maybe Text)
asMessage = lens _asMessage (\ s a -> s{_asMessage = a})

instance FromXML AssociationStatus where
        parseXML x
          = AssociationStatus' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable AssociationStatus where

instance NFData AssociationStatus where

-- | Describes a value for a resource attribute that is a Boolean value.
--
--
--
-- /See:/ 'attributeBooleanValue' smart constructor.
newtype AttributeBooleanValue = AttributeBooleanValue'
  { _abvValue :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AttributeBooleanValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'abvValue' - The attribute value. The valid values are @true@ or @false@ .
attributeBooleanValue
    :: AttributeBooleanValue
attributeBooleanValue = AttributeBooleanValue' {_abvValue = Nothing}


-- | The attribute value. The valid values are @true@ or @false@ .
abvValue :: Lens' AttributeBooleanValue (Maybe Bool)
abvValue = lens _abvValue (\ s a -> s{_abvValue = a})

instance FromXML AttributeBooleanValue where
        parseXML x
          = AttributeBooleanValue' <$> (x .@? "value")

instance Hashable AttributeBooleanValue where

instance NFData AttributeBooleanValue where

instance ToQuery AttributeBooleanValue where
        toQuery AttributeBooleanValue'{..}
          = mconcat ["Value" =: _abvValue]

-- | Describes a value for a resource attribute that is a String.
--
--
--
-- /See:/ 'attributeValue' smart constructor.
newtype AttributeValue = AttributeValue'
  { _avValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AttributeValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'avValue' - The attribute value. The value is case-sensitive.
attributeValue
    :: AttributeValue
attributeValue = AttributeValue' {_avValue = Nothing}


-- | The attribute value. The value is case-sensitive.
avValue :: Lens' AttributeValue (Maybe Text)
avValue = lens _avValue (\ s a -> s{_avValue = a})

instance FromXML AttributeValue where
        parseXML x = AttributeValue' <$> (x .@? "value")

instance Hashable AttributeValue where

instance NFData AttributeValue where

instance ToQuery AttributeValue where
        toQuery AttributeValue'{..}
          = mconcat ["Value" =: _avValue]

-- | Information about an authorization rule.
--
--
--
-- /See:/ 'authorizationRule' smart constructor.
data AuthorizationRule = AuthorizationRule'
  { _arStatus              :: !(Maybe ClientVPNAuthorizationRuleStatus)
  , _arAccessAll           :: !(Maybe Bool)
  , _arClientVPNEndpointId :: !(Maybe Text)
  , _arGroupId             :: !(Maybe Text)
  , _arDestinationCidr     :: !(Maybe Text)
  , _arDescription         :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AuthorizationRule' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'arStatus' - The current state of the authorization rule.
--
-- * 'arAccessAll' - Indicates whether the authorization rule grants access to all clients.
--
-- * 'arClientVPNEndpointId' - The ID of the Client VPN endpoint with which the authorization rule is associated.
--
-- * 'arGroupId' - The ID of the Active Directory group to which the authorization rule grants access.
--
-- * 'arDestinationCidr' - The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
--
-- * 'arDescription' - A brief description of the authorization rule.
authorizationRule
    :: AuthorizationRule
authorizationRule =
  AuthorizationRule'
    { _arStatus = Nothing
    , _arAccessAll = Nothing
    , _arClientVPNEndpointId = Nothing
    , _arGroupId = Nothing
    , _arDestinationCidr = Nothing
    , _arDescription = Nothing
    }


-- | The current state of the authorization rule.
arStatus :: Lens' AuthorizationRule (Maybe ClientVPNAuthorizationRuleStatus)
arStatus = lens _arStatus (\ s a -> s{_arStatus = a})

-- | Indicates whether the authorization rule grants access to all clients.
arAccessAll :: Lens' AuthorizationRule (Maybe Bool)
arAccessAll = lens _arAccessAll (\ s a -> s{_arAccessAll = a})

-- | The ID of the Client VPN endpoint with which the authorization rule is associated.
arClientVPNEndpointId :: Lens' AuthorizationRule (Maybe Text)
arClientVPNEndpointId = lens _arClientVPNEndpointId (\ s a -> s{_arClientVPNEndpointId = a})

-- | The ID of the Active Directory group to which the authorization rule grants access.
arGroupId :: Lens' AuthorizationRule (Maybe Text)
arGroupId = lens _arGroupId (\ s a -> s{_arGroupId = a})

-- | The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
arDestinationCidr :: Lens' AuthorizationRule (Maybe Text)
arDestinationCidr = lens _arDestinationCidr (\ s a -> s{_arDestinationCidr = a})

-- | A brief description of the authorization rule.
arDescription :: Lens' AuthorizationRule (Maybe Text)
arDescription = lens _arDescription (\ s a -> s{_arDescription = a})

instance FromXML AuthorizationRule where
        parseXML x
          = AuthorizationRule' <$>
              (x .@? "status") <*> (x .@? "accessAll") <*>
                (x .@? "clientVpnEndpointId")
                <*> (x .@? "groupId")
                <*> (x .@? "destinationCidr")
                <*> (x .@? "description")

instance Hashable AuthorizationRule where

instance NFData AuthorizationRule where

-- | Describes Availability Zones, Local Zones, and Wavelength Zones.
--
--
--
-- /See:/ 'availabilityZone' smart constructor.
data AvailabilityZone = AvailabilityZone'
  { _azState              :: !(Maybe AvailabilityZoneState)
  , _azParentZoneId       :: !(Maybe Text)
  , _azRegionName         :: !(Maybe Text)
  , _azParentZoneName     :: !(Maybe Text)
  , _azNetworkBorderGroup :: !(Maybe Text)
  , _azZoneId             :: !(Maybe Text)
  , _azZoneName           :: !(Maybe Text)
  , _azOptInStatus        :: !(Maybe AvailabilityZoneOptInStatus)
  , _azMessages           :: !(Maybe [AvailabilityZoneMessage])
  , _azGroupName          :: !(Maybe Text)
  , _azZoneType           :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AvailabilityZone' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'azState' - The state of the Availability Zone, Local Zone, or Wavelength Zone.
--
-- * 'azParentZoneId' - The ID of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
--
-- * 'azRegionName' - The name of the Region.
--
-- * 'azParentZoneName' - The name of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
--
-- * 'azNetworkBorderGroup' - The name of the network border group.
--
-- * 'azZoneId' - The ID of the Availability Zone, Local Zone, or Wavelength Zone.
--
-- * 'azZoneName' - The name of the Availability Zone, Local Zone, or Wavelength Zone.
--
-- * 'azOptInStatus' - For Availability Zones, this parameter always has the value of @opt-in-not-required@ . For Local Zones and Wavelength Zones, this parameter is the opt-in status. The possible values are @opted-in@ , and @not-opted-in@ .
--
-- * 'azMessages' - Any messages about the Availability Zone, Local Zone, or Wavelength Zone.
--
-- * 'azGroupName' - For Availability Zones, this parameter has the same value as the Region name. For Local Zones, the name of the associated group, for example @us-west-2-lax-1@ . For Wavelength Zones, the name of the associated group, for example @us-east-1-wl1-bos-wlz-1@ .
--
-- * 'azZoneType' - The type of zone. The valid values are @availability-zone@ , @local-zone@ , and @wavelength-zone@ .
availabilityZone
    :: AvailabilityZone
availabilityZone =
  AvailabilityZone'
    { _azState = Nothing
    , _azParentZoneId = Nothing
    , _azRegionName = Nothing
    , _azParentZoneName = Nothing
    , _azNetworkBorderGroup = Nothing
    , _azZoneId = Nothing
    , _azZoneName = Nothing
    , _azOptInStatus = Nothing
    , _azMessages = Nothing
    , _azGroupName = Nothing
    , _azZoneType = Nothing
    }


-- | The state of the Availability Zone, Local Zone, or Wavelength Zone.
azState :: Lens' AvailabilityZone (Maybe AvailabilityZoneState)
azState = lens _azState (\ s a -> s{_azState = a})

-- | The ID of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
azParentZoneId :: Lens' AvailabilityZone (Maybe Text)
azParentZoneId = lens _azParentZoneId (\ s a -> s{_azParentZoneId = a})

-- | The name of the Region.
azRegionName :: Lens' AvailabilityZone (Maybe Text)
azRegionName = lens _azRegionName (\ s a -> s{_azRegionName = a})

-- | The name of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
azParentZoneName :: Lens' AvailabilityZone (Maybe Text)
azParentZoneName = lens _azParentZoneName (\ s a -> s{_azParentZoneName = a})

-- | The name of the network border group.
azNetworkBorderGroup :: Lens' AvailabilityZone (Maybe Text)
azNetworkBorderGroup = lens _azNetworkBorderGroup (\ s a -> s{_azNetworkBorderGroup = a})

-- | The ID of the Availability Zone, Local Zone, or Wavelength Zone.
azZoneId :: Lens' AvailabilityZone (Maybe Text)
azZoneId = lens _azZoneId (\ s a -> s{_azZoneId = a})

-- | The name of the Availability Zone, Local Zone, or Wavelength Zone.
azZoneName :: Lens' AvailabilityZone (Maybe Text)
azZoneName = lens _azZoneName (\ s a -> s{_azZoneName = a})

-- | For Availability Zones, this parameter always has the value of @opt-in-not-required@ . For Local Zones and Wavelength Zones, this parameter is the opt-in status. The possible values are @opted-in@ , and @not-opted-in@ .
azOptInStatus :: Lens' AvailabilityZone (Maybe AvailabilityZoneOptInStatus)
azOptInStatus = lens _azOptInStatus (\ s a -> s{_azOptInStatus = a})

-- | Any messages about the Availability Zone, Local Zone, or Wavelength Zone.
azMessages :: Lens' AvailabilityZone [AvailabilityZoneMessage]
azMessages = lens _azMessages (\ s a -> s{_azMessages = a}) . _Default . _Coerce

-- | For Availability Zones, this parameter has the same value as the Region name. For Local Zones, the name of the associated group, for example @us-west-2-lax-1@ . For Wavelength Zones, the name of the associated group, for example @us-east-1-wl1-bos-wlz-1@ .
azGroupName :: Lens' AvailabilityZone (Maybe Text)
azGroupName = lens _azGroupName (\ s a -> s{_azGroupName = a})

-- | The type of zone. The valid values are @availability-zone@ , @local-zone@ , and @wavelength-zone@ .
azZoneType :: Lens' AvailabilityZone (Maybe Text)
azZoneType = lens _azZoneType (\ s a -> s{_azZoneType = a})

instance FromXML AvailabilityZone where
        parseXML x
          = AvailabilityZone' <$>
              (x .@? "zoneState") <*> (x .@? "parentZoneId") <*>
                (x .@? "regionName")
                <*> (x .@? "parentZoneName")
                <*> (x .@? "networkBorderGroup")
                <*> (x .@? "zoneId")
                <*> (x .@? "zoneName")
                <*> (x .@? "optInStatus")
                <*>
                (x .@? "messageSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "groupName")
                <*> (x .@? "zoneType")

instance Hashable AvailabilityZone where

instance NFData AvailabilityZone where

-- | Describes a message about an Availability Zone, Local Zone, or Wavelength Zone.
--
--
--
-- /See:/ 'availabilityZoneMessage' smart constructor.
newtype AvailabilityZoneMessage = AvailabilityZoneMessage'
  { _azmMessage :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AvailabilityZoneMessage' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'azmMessage' - The message about the Availability Zone, Local Zone, or Wavelength Zone.
availabilityZoneMessage
    :: AvailabilityZoneMessage
availabilityZoneMessage = AvailabilityZoneMessage' {_azmMessage = Nothing}


-- | The message about the Availability Zone, Local Zone, or Wavelength Zone.
azmMessage :: Lens' AvailabilityZoneMessage (Maybe Text)
azmMessage = lens _azmMessage (\ s a -> s{_azmMessage = a})

instance FromXML AvailabilityZoneMessage where
        parseXML x
          = AvailabilityZoneMessage' <$> (x .@? "message")

instance Hashable AvailabilityZoneMessage where

instance NFData AvailabilityZoneMessage where

-- | The capacity information for instances that can be launched onto the Dedicated Host.
--
--
--
-- /See:/ 'availableCapacity' smart constructor.
data AvailableCapacity = AvailableCapacity'
  { _acAvailableInstanceCapacity :: !(Maybe [InstanceCapacity])
  , _acAvailableVCPUs            :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'AvailableCapacity' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'acAvailableInstanceCapacity' - The number of instances that can be launched onto the Dedicated Host depending on the host's available capacity. For Dedicated Hosts that support multiple instance types, this parameter represents the number of instances for each instance size that is supported on the host.
--
-- * 'acAvailableVCPUs' - The number of vCPUs available for launching instances onto the Dedicated Host.
availableCapacity
    :: AvailableCapacity
availableCapacity =
  AvailableCapacity'
    {_acAvailableInstanceCapacity = Nothing, _acAvailableVCPUs = Nothing}


-- | The number of instances that can be launched onto the Dedicated Host depending on the host's available capacity. For Dedicated Hosts that support multiple instance types, this parameter represents the number of instances for each instance size that is supported on the host.
acAvailableInstanceCapacity :: Lens' AvailableCapacity [InstanceCapacity]
acAvailableInstanceCapacity = lens _acAvailableInstanceCapacity (\ s a -> s{_acAvailableInstanceCapacity = a}) . _Default . _Coerce

-- | The number of vCPUs available for launching instances onto the Dedicated Host.
acAvailableVCPUs :: Lens' AvailableCapacity (Maybe Int)
acAvailableVCPUs = lens _acAvailableVCPUs (\ s a -> s{_acAvailableVCPUs = a})

instance FromXML AvailableCapacity where
        parseXML x
          = AvailableCapacity' <$>
              (x .@? "availableInstanceCapacity" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "availableVCpus")

instance Hashable AvailableCapacity where

instance NFData AvailableCapacity where

-- | /See:/ 'blobAttributeValue' smart constructor.
newtype BlobAttributeValue = BlobAttributeValue'
  { _bavValue :: Maybe Base64
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'BlobAttributeValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'bavValue' - Undocumented member.-- /Note:/ This 'Lens' automatically encodes and decodes Base64 data. The underlying isomorphism will encode to Base64 representation during serialisation, and decode from Base64 representation during deserialisation. This 'Lens' accepts and returns only raw unencoded data.
blobAttributeValue
    :: BlobAttributeValue
blobAttributeValue = BlobAttributeValue' {_bavValue = Nothing}


-- | Undocumented member.-- /Note:/ This 'Lens' automatically encodes and decodes Base64 data. The underlying isomorphism will encode to Base64 representation during serialisation, and decode from Base64 representation during deserialisation. This 'Lens' accepts and returns only raw unencoded data.
bavValue :: Lens' BlobAttributeValue (Maybe ByteString)
bavValue = lens _bavValue (\ s a -> s{_bavValue = a}) . mapping _Base64

instance Hashable BlobAttributeValue where

instance NFData BlobAttributeValue where

instance ToQuery BlobAttributeValue where
        toQuery BlobAttributeValue'{..}
          = mconcat ["Value" =: _bavValue]

-- | Describes a block device mapping.
--
--
--
-- /See:/ 'blockDeviceMapping' smart constructor.
data BlockDeviceMapping = BlockDeviceMapping'
  { _bdmVirtualName :: !(Maybe Text)
  , _bdmNoDevice    :: !(Maybe Text)
  , _bdmEBS         :: !(Maybe EBSBlockDevice)
  , _bdmDeviceName  :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'BlockDeviceMapping' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'bdmVirtualName' - The virtual device name (@ephemeral@ N). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for @ephemeral0@ and @ephemeral1@ . The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
--
-- * 'bdmNoDevice' - To omit the device from the block device mapping, specify an empty string.
--
-- * 'bdmEBS' - Parameters used to automatically set up EBS volumes when the instance is launched.
--
-- * 'bdmDeviceName' - The device name (for example, @/dev/sdh@ or @xvdh@ ).
blockDeviceMapping
    :: Text -- ^ 'bdmDeviceName'
    -> BlockDeviceMapping
blockDeviceMapping pDeviceName_ =
  BlockDeviceMapping'
    { _bdmVirtualName = Nothing
    , _bdmNoDevice = Nothing
    , _bdmEBS = Nothing
    , _bdmDeviceName = pDeviceName_
    }


-- | The virtual device name (@ephemeral@ N). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for @ephemeral0@ and @ephemeral1@ . The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
bdmVirtualName :: Lens' BlockDeviceMapping (Maybe Text)
bdmVirtualName = lens _bdmVirtualName (\ s a -> s{_bdmVirtualName = a})

-- | To omit the device from the block device mapping, specify an empty string.
bdmNoDevice :: Lens' BlockDeviceMapping (Maybe Text)
bdmNoDevice = lens _bdmNoDevice (\ s a -> s{_bdmNoDevice = a})

-- | Parameters used to automatically set up EBS volumes when the instance is launched.
bdmEBS :: Lens' BlockDeviceMapping (Maybe EBSBlockDevice)
bdmEBS = lens _bdmEBS (\ s a -> s{_bdmEBS = a})

-- | The device name (for example, @/dev/sdh@ or @xvdh@ ).
bdmDeviceName :: Lens' BlockDeviceMapping Text
bdmDeviceName = lens _bdmDeviceName (\ s a -> s{_bdmDeviceName = a})

instance FromXML BlockDeviceMapping where
        parseXML x
          = BlockDeviceMapping' <$>
              (x .@? "virtualName") <*> (x .@? "noDevice") <*>
                (x .@? "ebs")
                <*> (x .@ "deviceName")

instance Hashable BlockDeviceMapping where

instance NFData BlockDeviceMapping where

instance ToQuery BlockDeviceMapping where
        toQuery BlockDeviceMapping'{..}
          = mconcat
              ["VirtualName" =: _bdmVirtualName,
               "NoDevice" =: _bdmNoDevice, "Ebs" =: _bdmEBS,
               "DeviceName" =: _bdmDeviceName]

-- | Describes a bundle task.
--
--
--
-- /See:/ 'bundleTask' smart constructor.
data BundleTask = BundleTask'
  { _btBundleTaskError :: !(Maybe BundleTaskError)
  , _btBundleId        :: !Text
  , _btInstanceId      :: !Text
  , _btProgress        :: !Text
  , _btStartTime       :: !ISO8601
  , _btState           :: !BundleTaskState
  , _btStorage         :: !Storage
  , _btUpdateTime      :: !ISO8601
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'BundleTask' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'btBundleTaskError' - If the task fails, a description of the error.
--
-- * 'btBundleId' - The ID of the bundle task.
--
-- * 'btInstanceId' - The ID of the instance associated with this bundle task.
--
-- * 'btProgress' - The level of task completion, as a percent (for example, 20%).
--
-- * 'btStartTime' - The time this task started.
--
-- * 'btState' - The state of the task.
--
-- * 'btStorage' - The Amazon S3 storage locations.
--
-- * 'btUpdateTime' - The time of the most recent update for the task.
bundleTask
    :: Text -- ^ 'btBundleId'
    -> Text -- ^ 'btInstanceId'
    -> Text -- ^ 'btProgress'
    -> UTCTime -- ^ 'btStartTime'
    -> BundleTaskState -- ^ 'btState'
    -> Storage -- ^ 'btStorage'
    -> UTCTime -- ^ 'btUpdateTime'
    -> BundleTask
bundleTask pBundleId_ pInstanceId_ pProgress_ pStartTime_ pState_ pStorage_ pUpdateTime_ =
  BundleTask'
    { _btBundleTaskError = Nothing
    , _btBundleId = pBundleId_
    , _btInstanceId = pInstanceId_
    , _btProgress = pProgress_
    , _btStartTime = _Time # pStartTime_
    , _btState = pState_
    , _btStorage = pStorage_
    , _btUpdateTime = _Time # pUpdateTime_
    }


-- | If the task fails, a description of the error.
btBundleTaskError :: Lens' BundleTask (Maybe BundleTaskError)
btBundleTaskError = lens _btBundleTaskError (\ s a -> s{_btBundleTaskError = a})

-- | The ID of the bundle task.
btBundleId :: Lens' BundleTask Text
btBundleId = lens _btBundleId (\ s a -> s{_btBundleId = a})

-- | The ID of the instance associated with this bundle task.
btInstanceId :: Lens' BundleTask Text
btInstanceId = lens _btInstanceId (\ s a -> s{_btInstanceId = a})

-- | The level of task completion, as a percent (for example, 20%).
btProgress :: Lens' BundleTask Text
btProgress = lens _btProgress (\ s a -> s{_btProgress = a})

-- | The time this task started.
btStartTime :: Lens' BundleTask UTCTime
btStartTime = lens _btStartTime (\ s a -> s{_btStartTime = a}) . _Time

-- | The state of the task.
btState :: Lens' BundleTask BundleTaskState
btState = lens _btState (\ s a -> s{_btState = a})

-- | The Amazon S3 storage locations.
btStorage :: Lens' BundleTask Storage
btStorage = lens _btStorage (\ s a -> s{_btStorage = a})

-- | The time of the most recent update for the task.
btUpdateTime :: Lens' BundleTask UTCTime
btUpdateTime = lens _btUpdateTime (\ s a -> s{_btUpdateTime = a}) . _Time

instance FromXML BundleTask where
        parseXML x
          = BundleTask' <$>
              (x .@? "error") <*> (x .@ "bundleId") <*>
                (x .@ "instanceId")
                <*> (x .@ "progress")
                <*> (x .@ "startTime")
                <*> (x .@ "state")
                <*> (x .@ "storage")
                <*> (x .@ "updateTime")

instance Hashable BundleTask where

instance NFData BundleTask where

-- | Describes an error for 'BundleInstance' .
--
--
--
-- /See:/ 'bundleTaskError' smart constructor.
data BundleTaskError = BundleTaskError'
  { _bteCode    :: !(Maybe Text)
  , _bteMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'BundleTaskError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'bteCode' - The error code.
--
-- * 'bteMessage' - The error message.
bundleTaskError
    :: BundleTaskError
bundleTaskError = BundleTaskError' {_bteCode = Nothing, _bteMessage = Nothing}


-- | The error code.
bteCode :: Lens' BundleTaskError (Maybe Text)
bteCode = lens _bteCode (\ s a -> s{_bteCode = a})

-- | The error message.
bteMessage :: Lens' BundleTaskError (Maybe Text)
bteMessage = lens _bteMessage (\ s a -> s{_bteMessage = a})

instance FromXML BundleTaskError where
        parseXML x
          = BundleTaskError' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable BundleTaskError where

instance NFData BundleTaskError where

-- | Information about an address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).
--
--
--
-- /See:/ 'byoipCidr' smart constructor.
data ByoipCidr = ByoipCidr'
  { _bcState         :: !(Maybe ByoipCidrState)
  , _bcCidr          :: !(Maybe Text)
  , _bcStatusMessage :: !(Maybe Text)
  , _bcDescription   :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ByoipCidr' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'bcState' - The state of the address pool.
--
-- * 'bcCidr' - The address range, in CIDR notation.
--
-- * 'bcStatusMessage' - Upon success, contains the ID of the address pool. Otherwise, contains an error message.
--
-- * 'bcDescription' - The description of the address range.
byoipCidr
    :: ByoipCidr
byoipCidr =
  ByoipCidr'
    { _bcState = Nothing
    , _bcCidr = Nothing
    , _bcStatusMessage = Nothing
    , _bcDescription = Nothing
    }


-- | The state of the address pool.
bcState :: Lens' ByoipCidr (Maybe ByoipCidrState)
bcState = lens _bcState (\ s a -> s{_bcState = a})

-- | The address range, in CIDR notation.
bcCidr :: Lens' ByoipCidr (Maybe Text)
bcCidr = lens _bcCidr (\ s a -> s{_bcCidr = a})

-- | Upon success, contains the ID of the address pool. Otherwise, contains an error message.
bcStatusMessage :: Lens' ByoipCidr (Maybe Text)
bcStatusMessage = lens _bcStatusMessage (\ s a -> s{_bcStatusMessage = a})

-- | The description of the address range.
bcDescription :: Lens' ByoipCidr (Maybe Text)
bcDescription = lens _bcDescription (\ s a -> s{_bcDescription = a})

instance FromXML ByoipCidr where
        parseXML x
          = ByoipCidr' <$>
              (x .@? "state") <*> (x .@? "cidr") <*>
                (x .@? "statusMessage")
                <*> (x .@? "description")

instance Hashable ByoipCidr where

instance NFData ByoipCidr where

-- | The CPU options for the instance.
--
--
--
-- /See:/ 'cpuOptions' smart constructor.
data CPUOptions = CPUOptions'
  { _coCoreCount      :: !(Maybe Int)
  , _coThreadsPerCore :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CPUOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'coCoreCount' - The number of CPU cores for the instance.
--
-- * 'coThreadsPerCore' - The number of threads per CPU core.
cpuOptions
    :: CPUOptions
cpuOptions = CPUOptions' {_coCoreCount = Nothing, _coThreadsPerCore = Nothing}


-- | The number of CPU cores for the instance.
coCoreCount :: Lens' CPUOptions (Maybe Int)
coCoreCount = lens _coCoreCount (\ s a -> s{_coCoreCount = a})

-- | The number of threads per CPU core.
coThreadsPerCore :: Lens' CPUOptions (Maybe Int)
coThreadsPerCore = lens _coThreadsPerCore (\ s a -> s{_coThreadsPerCore = a})

instance FromXML CPUOptions where
        parseXML x
          = CPUOptions' <$>
              (x .@? "coreCount") <*> (x .@? "threadsPerCore")

instance Hashable CPUOptions where

instance NFData CPUOptions where

-- | The CPU options for the instance. Both the core count and threads per core must be specified in the request.
--
--
--
-- /See:/ 'cpuOptionsRequest' smart constructor.
data CPUOptionsRequest = CPUOptionsRequest'
  { _corCoreCount      :: !(Maybe Int)
  , _corThreadsPerCore :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CPUOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'corCoreCount' - The number of CPU cores for the instance.
--
-- * 'corThreadsPerCore' - The number of threads per CPU core. To disable multithreading for the instance, specify a value of @1@ . Otherwise, specify the default value of @2@ .
cpuOptionsRequest
    :: CPUOptionsRequest
cpuOptionsRequest =
  CPUOptionsRequest' {_corCoreCount = Nothing, _corThreadsPerCore = Nothing}


-- | The number of CPU cores for the instance.
corCoreCount :: Lens' CPUOptionsRequest (Maybe Int)
corCoreCount = lens _corCoreCount (\ s a -> s{_corCoreCount = a})

-- | The number of threads per CPU core. To disable multithreading for the instance, specify a value of @1@ . Otherwise, specify the default value of @2@ .
corThreadsPerCore :: Lens' CPUOptionsRequest (Maybe Int)
corThreadsPerCore = lens _corThreadsPerCore (\ s a -> s{_corThreadsPerCore = a})

instance Hashable CPUOptionsRequest where

instance NFData CPUOptionsRequest where

instance ToQuery CPUOptionsRequest where
        toQuery CPUOptionsRequest'{..}
          = mconcat
              ["CoreCount" =: _corCoreCount,
               "ThreadsPerCore" =: _corThreadsPerCore]

-- | Describes a Spot Fleet error.
--
--
--
-- /See:/ 'cancelSpotFleetRequestsError' smart constructor.
data CancelSpotFleetRequestsError = CancelSpotFleetRequestsError'
  { _csfreCode    :: !(Maybe CancelBatchErrorCode)
  , _csfreMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CancelSpotFleetRequestsError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'csfreCode' - The error code.
--
-- * 'csfreMessage' - The description for the error code.
cancelSpotFleetRequestsError
    :: CancelSpotFleetRequestsError
cancelSpotFleetRequestsError =
  CancelSpotFleetRequestsError' {_csfreCode = Nothing, _csfreMessage = Nothing}


-- | The error code.
csfreCode :: Lens' CancelSpotFleetRequestsError (Maybe CancelBatchErrorCode)
csfreCode = lens _csfreCode (\ s a -> s{_csfreCode = a})

-- | The description for the error code.
csfreMessage :: Lens' CancelSpotFleetRequestsError (Maybe Text)
csfreMessage = lens _csfreMessage (\ s a -> s{_csfreMessage = a})

instance FromXML CancelSpotFleetRequestsError where
        parseXML x
          = CancelSpotFleetRequestsError' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable CancelSpotFleetRequestsError where

instance NFData CancelSpotFleetRequestsError where

-- | Describes a Spot Fleet request that was not successfully canceled.
--
--
--
-- /See:/ 'cancelSpotFleetRequestsErrorItem' smart constructor.
data CancelSpotFleetRequestsErrorItem = CancelSpotFleetRequestsErrorItem'
  { _csfreiError              :: !(Maybe CancelSpotFleetRequestsError)
  , _csfreiSpotFleetRequestId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CancelSpotFleetRequestsErrorItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'csfreiError' - The error.
--
-- * 'csfreiSpotFleetRequestId' - The ID of the Spot Fleet request.
cancelSpotFleetRequestsErrorItem
    :: CancelSpotFleetRequestsErrorItem
cancelSpotFleetRequestsErrorItem =
  CancelSpotFleetRequestsErrorItem'
    {_csfreiError = Nothing, _csfreiSpotFleetRequestId = Nothing}


-- | The error.
csfreiError :: Lens' CancelSpotFleetRequestsErrorItem (Maybe CancelSpotFleetRequestsError)
csfreiError = lens _csfreiError (\ s a -> s{_csfreiError = a})

-- | The ID of the Spot Fleet request.
csfreiSpotFleetRequestId :: Lens' CancelSpotFleetRequestsErrorItem (Maybe Text)
csfreiSpotFleetRequestId = lens _csfreiSpotFleetRequestId (\ s a -> s{_csfreiSpotFleetRequestId = a})

instance FromXML CancelSpotFleetRequestsErrorItem
         where
        parseXML x
          = CancelSpotFleetRequestsErrorItem' <$>
              (x .@? "error") <*> (x .@? "spotFleetRequestId")

instance Hashable CancelSpotFleetRequestsErrorItem
         where

instance NFData CancelSpotFleetRequestsErrorItem
         where

-- | Describes a Spot Fleet request that was successfully canceled.
--
--
--
-- /See:/ 'cancelSpotFleetRequestsSuccessItem' smart constructor.
data CancelSpotFleetRequestsSuccessItem = CancelSpotFleetRequestsSuccessItem'
  { _csfrsiCurrentSpotFleetRequestState  :: !(Maybe BatchState)
  , _csfrsiSpotFleetRequestId            :: !(Maybe Text)
  , _csfrsiPreviousSpotFleetRequestState :: !(Maybe BatchState)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CancelSpotFleetRequestsSuccessItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'csfrsiCurrentSpotFleetRequestState' - The current state of the Spot Fleet request.
--
-- * 'csfrsiSpotFleetRequestId' - The ID of the Spot Fleet request.
--
-- * 'csfrsiPreviousSpotFleetRequestState' - The previous state of the Spot Fleet request.
cancelSpotFleetRequestsSuccessItem
    :: CancelSpotFleetRequestsSuccessItem
cancelSpotFleetRequestsSuccessItem =
  CancelSpotFleetRequestsSuccessItem'
    { _csfrsiCurrentSpotFleetRequestState = Nothing
    , _csfrsiSpotFleetRequestId = Nothing
    , _csfrsiPreviousSpotFleetRequestState = Nothing
    }


-- | The current state of the Spot Fleet request.
csfrsiCurrentSpotFleetRequestState :: Lens' CancelSpotFleetRequestsSuccessItem (Maybe BatchState)
csfrsiCurrentSpotFleetRequestState = lens _csfrsiCurrentSpotFleetRequestState (\ s a -> s{_csfrsiCurrentSpotFleetRequestState = a})

-- | The ID of the Spot Fleet request.
csfrsiSpotFleetRequestId :: Lens' CancelSpotFleetRequestsSuccessItem (Maybe Text)
csfrsiSpotFleetRequestId = lens _csfrsiSpotFleetRequestId (\ s a -> s{_csfrsiSpotFleetRequestId = a})

-- | The previous state of the Spot Fleet request.
csfrsiPreviousSpotFleetRequestState :: Lens' CancelSpotFleetRequestsSuccessItem (Maybe BatchState)
csfrsiPreviousSpotFleetRequestState = lens _csfrsiPreviousSpotFleetRequestState (\ s a -> s{_csfrsiPreviousSpotFleetRequestState = a})

instance FromXML CancelSpotFleetRequestsSuccessItem
         where
        parseXML x
          = CancelSpotFleetRequestsSuccessItem' <$>
              (x .@? "currentSpotFleetRequestState") <*>
                (x .@? "spotFleetRequestId")
                <*> (x .@? "previousSpotFleetRequestState")

instance Hashable CancelSpotFleetRequestsSuccessItem
         where

instance NFData CancelSpotFleetRequestsSuccessItem
         where

-- | Describes a request to cancel a Spot Instance.
--
--
--
-- /See:/ 'cancelledSpotInstanceRequest' smart constructor.
data CancelledSpotInstanceRequest = CancelledSpotInstanceRequest'
  { _csirState                 :: !(Maybe CancelSpotInstanceRequestState)
  , _csirSpotInstanceRequestId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CancelledSpotInstanceRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'csirState' - The state of the Spot Instance request.
--
-- * 'csirSpotInstanceRequestId' - The ID of the Spot Instance request.
cancelledSpotInstanceRequest
    :: CancelledSpotInstanceRequest
cancelledSpotInstanceRequest =
  CancelledSpotInstanceRequest'
    {_csirState = Nothing, _csirSpotInstanceRequestId = Nothing}


-- | The state of the Spot Instance request.
csirState :: Lens' CancelledSpotInstanceRequest (Maybe CancelSpotInstanceRequestState)
csirState = lens _csirState (\ s a -> s{_csirState = a})

-- | The ID of the Spot Instance request.
csirSpotInstanceRequestId :: Lens' CancelledSpotInstanceRequest (Maybe Text)
csirSpotInstanceRequestId = lens _csirSpotInstanceRequestId (\ s a -> s{_csirSpotInstanceRequestId = a})

instance FromXML CancelledSpotInstanceRequest where
        parseXML x
          = CancelledSpotInstanceRequest' <$>
              (x .@? "state") <*> (x .@? "spotInstanceRequestId")

instance Hashable CancelledSpotInstanceRequest where

instance NFData CancelledSpotInstanceRequest where

-- | Describes a Capacity Reservation.
--
--
--
-- /See:/ 'capacityReservation' smart constructor.
data CapacityReservation = CapacityReservation'
  { _crState                  :: !(Maybe CapacityReservationState)
  , _crAvailabilityZoneId     :: !(Maybe Text)
  , _crCreateDate             :: !(Maybe ISO8601)
  , _crEndDate                :: !(Maybe ISO8601)
  , _crAvailableInstanceCount :: !(Maybe Int)
  , _crEphemeralStorage       :: !(Maybe Bool)
  , _crInstancePlatform       :: !(Maybe CapacityReservationInstancePlatform)
  , _crInstanceMatchCriteria  :: !(Maybe InstanceMatchCriteria)
  , _crCapacityReservationId  :: !(Maybe Text)
  , _crInstanceType           :: !(Maybe Text)
  , _crEBSOptimized           :: !(Maybe Bool)
  , _crOwnerId                :: !(Maybe Text)
  , _crStartDate              :: !(Maybe ISO8601)
  , _crAvailabilityZone       :: !(Maybe Text)
  , _crTenancy                :: !(Maybe CapacityReservationTenancy)
  , _crTotalInstanceCount     :: !(Maybe Int)
  , _crEndDateType            :: !(Maybe EndDateType)
  , _crTags                   :: !(Maybe [Tag])
  , _crCapacityReservationARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CapacityReservation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'crState' - The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:     * @active@ - The Capacity Reservation is active and the capacity is available for your use.     * @expired@ - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.     * @cancelled@ - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.     * @pending@ - The Capacity Reservation request was successful but the capacity provisioning is still pending.     * @failed@ - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.
--
-- * 'crAvailabilityZoneId' - The Availability Zone ID of the Capacity Reservation.
--
-- * 'crCreateDate' - The date and time at which the Capacity Reservation was created.
--
-- * 'crEndDate' - The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to @expired@ when it reaches its end date and time.
--
-- * 'crAvailableInstanceCount' - The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
--
-- * 'crEphemeralStorage' - Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
--
-- * 'crInstancePlatform' - The type of operating system for which the Capacity Reservation reserves capacity.
--
-- * 'crInstanceMatchCriteria' - Indicates the type of instance launches that the Capacity Reservation accepts. The options include:     * @open@ - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.     * @targeted@ - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
--
-- * 'crCapacityReservationId' - The ID of the Capacity Reservation.
--
-- * 'crInstanceType' - The type of instance for which the Capacity Reservation reserves capacity.
--
-- * 'crEBSOptimized' - Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
--
-- * 'crOwnerId' - The ID of the AWS account that owns the Capacity Reservation.
--
-- * 'crStartDate' - The date and time at which the Capacity Reservation was started.
--
-- * 'crAvailabilityZone' - The Availability Zone in which the capacity is reserved.
--
-- * 'crTenancy' - Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:     * @default@ - The Capacity Reservation is created on hardware that is shared with other AWS accounts.     * @dedicated@ - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.
--
-- * 'crTotalInstanceCount' - The total number of instances for which the Capacity Reservation reserves capacity.
--
-- * 'crEndDateType' - Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:     * @unlimited@ - The Capacity Reservation remains active until you explicitly cancel it.     * @limited@ - The Capacity Reservation expires automatically at a specified date and time.
--
-- * 'crTags' - Any tags assigned to the Capacity Reservation.
--
-- * 'crCapacityReservationARN' - The Amazon Resource Name (ARN) of the Capacity Reservation.
capacityReservation
    :: CapacityReservation
capacityReservation =
  CapacityReservation'
    { _crState = Nothing
    , _crAvailabilityZoneId = Nothing
    , _crCreateDate = Nothing
    , _crEndDate = Nothing
    , _crAvailableInstanceCount = Nothing
    , _crEphemeralStorage = Nothing
    , _crInstancePlatform = Nothing
    , _crInstanceMatchCriteria = Nothing
    , _crCapacityReservationId = Nothing
    , _crInstanceType = Nothing
    , _crEBSOptimized = Nothing
    , _crOwnerId = Nothing
    , _crStartDate = Nothing
    , _crAvailabilityZone = Nothing
    , _crTenancy = Nothing
    , _crTotalInstanceCount = Nothing
    , _crEndDateType = Nothing
    , _crTags = Nothing
    , _crCapacityReservationARN = Nothing
    }


-- | The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:     * @active@ - The Capacity Reservation is active and the capacity is available for your use.     * @expired@ - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.     * @cancelled@ - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.     * @pending@ - The Capacity Reservation request was successful but the capacity provisioning is still pending.     * @failed@ - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.
crState :: Lens' CapacityReservation (Maybe CapacityReservationState)
crState = lens _crState (\ s a -> s{_crState = a})

-- | The Availability Zone ID of the Capacity Reservation.
crAvailabilityZoneId :: Lens' CapacityReservation (Maybe Text)
crAvailabilityZoneId = lens _crAvailabilityZoneId (\ s a -> s{_crAvailabilityZoneId = a})

-- | The date and time at which the Capacity Reservation was created.
crCreateDate :: Lens' CapacityReservation (Maybe UTCTime)
crCreateDate = lens _crCreateDate (\ s a -> s{_crCreateDate = a}) . mapping _Time

-- | The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to @expired@ when it reaches its end date and time.
crEndDate :: Lens' CapacityReservation (Maybe UTCTime)
crEndDate = lens _crEndDate (\ s a -> s{_crEndDate = a}) . mapping _Time

-- | The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
crAvailableInstanceCount :: Lens' CapacityReservation (Maybe Int)
crAvailableInstanceCount = lens _crAvailableInstanceCount (\ s a -> s{_crAvailableInstanceCount = a})

-- | Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
crEphemeralStorage :: Lens' CapacityReservation (Maybe Bool)
crEphemeralStorage = lens _crEphemeralStorage (\ s a -> s{_crEphemeralStorage = a})

-- | The type of operating system for which the Capacity Reservation reserves capacity.
crInstancePlatform :: Lens' CapacityReservation (Maybe CapacityReservationInstancePlatform)
crInstancePlatform = lens _crInstancePlatform (\ s a -> s{_crInstancePlatform = a})

-- | Indicates the type of instance launches that the Capacity Reservation accepts. The options include:     * @open@ - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.     * @targeted@ - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
crInstanceMatchCriteria :: Lens' CapacityReservation (Maybe InstanceMatchCriteria)
crInstanceMatchCriteria = lens _crInstanceMatchCriteria (\ s a -> s{_crInstanceMatchCriteria = a})

-- | The ID of the Capacity Reservation.
crCapacityReservationId :: Lens' CapacityReservation (Maybe Text)
crCapacityReservationId = lens _crCapacityReservationId (\ s a -> s{_crCapacityReservationId = a})

-- | The type of instance for which the Capacity Reservation reserves capacity.
crInstanceType :: Lens' CapacityReservation (Maybe Text)
crInstanceType = lens _crInstanceType (\ s a -> s{_crInstanceType = a})

-- | Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
crEBSOptimized :: Lens' CapacityReservation (Maybe Bool)
crEBSOptimized = lens _crEBSOptimized (\ s a -> s{_crEBSOptimized = a})

-- | The ID of the AWS account that owns the Capacity Reservation.
crOwnerId :: Lens' CapacityReservation (Maybe Text)
crOwnerId = lens _crOwnerId (\ s a -> s{_crOwnerId = a})

-- | The date and time at which the Capacity Reservation was started.
crStartDate :: Lens' CapacityReservation (Maybe UTCTime)
crStartDate = lens _crStartDate (\ s a -> s{_crStartDate = a}) . mapping _Time

-- | The Availability Zone in which the capacity is reserved.
crAvailabilityZone :: Lens' CapacityReservation (Maybe Text)
crAvailabilityZone = lens _crAvailabilityZone (\ s a -> s{_crAvailabilityZone = a})

-- | Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:     * @default@ - The Capacity Reservation is created on hardware that is shared with other AWS accounts.     * @dedicated@ - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.
crTenancy :: Lens' CapacityReservation (Maybe CapacityReservationTenancy)
crTenancy = lens _crTenancy (\ s a -> s{_crTenancy = a})

-- | The total number of instances for which the Capacity Reservation reserves capacity.
crTotalInstanceCount :: Lens' CapacityReservation (Maybe Int)
crTotalInstanceCount = lens _crTotalInstanceCount (\ s a -> s{_crTotalInstanceCount = a})

-- | Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:     * @unlimited@ - The Capacity Reservation remains active until you explicitly cancel it.     * @limited@ - The Capacity Reservation expires automatically at a specified date and time.
crEndDateType :: Lens' CapacityReservation (Maybe EndDateType)
crEndDateType = lens _crEndDateType (\ s a -> s{_crEndDateType = a})

-- | Any tags assigned to the Capacity Reservation.
crTags :: Lens' CapacityReservation [Tag]
crTags = lens _crTags (\ s a -> s{_crTags = a}) . _Default . _Coerce

-- | The Amazon Resource Name (ARN) of the Capacity Reservation.
crCapacityReservationARN :: Lens' CapacityReservation (Maybe Text)
crCapacityReservationARN = lens _crCapacityReservationARN (\ s a -> s{_crCapacityReservationARN = a})

instance FromXML CapacityReservation where
        parseXML x
          = CapacityReservation' <$>
              (x .@? "state") <*> (x .@? "availabilityZoneId") <*>
                (x .@? "createDate")
                <*> (x .@? "endDate")
                <*> (x .@? "availableInstanceCount")
                <*> (x .@? "ephemeralStorage")
                <*> (x .@? "instancePlatform")
                <*> (x .@? "instanceMatchCriteria")
                <*> (x .@? "capacityReservationId")
                <*> (x .@? "instanceType")
                <*> (x .@? "ebsOptimized")
                <*> (x .@? "ownerId")
                <*> (x .@? "startDate")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "tenancy")
                <*> (x .@? "totalInstanceCount")
                <*> (x .@? "endDateType")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "capacityReservationArn")

instance Hashable CapacityReservation where

instance NFData CapacityReservation where

-- | Describes a resource group to which a Capacity Reservation has been added.
--
--
--
-- /See:/ 'capacityReservationGroup' smart constructor.
data CapacityReservationGroup = CapacityReservationGroup'
  { _crgOwnerId  :: !(Maybe Text)
  , _crgGroupARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CapacityReservationGroup' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'crgOwnerId' - The ID of the AWS account that owns the resource group.
--
-- * 'crgGroupARN' - The ARN of the resource group.
capacityReservationGroup
    :: CapacityReservationGroup
capacityReservationGroup =
  CapacityReservationGroup' {_crgOwnerId = Nothing, _crgGroupARN = Nothing}


-- | The ID of the AWS account that owns the resource group.
crgOwnerId :: Lens' CapacityReservationGroup (Maybe Text)
crgOwnerId = lens _crgOwnerId (\ s a -> s{_crgOwnerId = a})

-- | The ARN of the resource group.
crgGroupARN :: Lens' CapacityReservationGroup (Maybe Text)
crgGroupARN = lens _crgGroupARN (\ s a -> s{_crgGroupARN = a})

instance FromXML CapacityReservationGroup where
        parseXML x
          = CapacityReservationGroup' <$>
              (x .@? "ownerId") <*> (x .@? "groupArn")

instance Hashable CapacityReservationGroup where

instance NFData CapacityReservationGroup where

-- | Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
--
--
-- For more information about Capacity Reservations, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html On-Demand Capacity Reservations> in the /Amazon EC2 User Guide/ . For examples of using Capacity Reservations in an EC2 Fleet, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html EC2 Fleet example configurations> in the /Amazon EC2 User Guide/ .
--
--
-- /See:/ 'capacityReservationOptions' smart constructor.
newtype CapacityReservationOptions = CapacityReservationOptions'
  { _croUsageStrategy :: Maybe FleetCapacityReservationUsageStrategy
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CapacityReservationOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'croUsageStrategy' - Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify @use-capacity-reservations-first@ , the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (@lowest-price@ or @prioritized@ ) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (@lowest-price@ or @prioritized@ ). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
capacityReservationOptions
    :: CapacityReservationOptions
capacityReservationOptions =
  CapacityReservationOptions' {_croUsageStrategy = Nothing}


-- | Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify @use-capacity-reservations-first@ , the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (@lowest-price@ or @prioritized@ ) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (@lowest-price@ or @prioritized@ ). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
croUsageStrategy :: Lens' CapacityReservationOptions (Maybe FleetCapacityReservationUsageStrategy)
croUsageStrategy = lens _croUsageStrategy (\ s a -> s{_croUsageStrategy = a})

instance FromXML CapacityReservationOptions where
        parseXML x
          = CapacityReservationOptions' <$>
              (x .@? "usageStrategy")

instance Hashable CapacityReservationOptions where

instance NFData CapacityReservationOptions where

-- | Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity.
--
--
-- For more information about Capacity Reservations, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html On-Demand Capacity Reservations> in the /Amazon EC2 User Guide/ . For examples of using Capacity Reservations in an EC2 Fleet, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-examples.html EC2 Fleet example configurations> in the /Amazon EC2 User Guide/ .
--
--
-- /See:/ 'capacityReservationOptionsRequest' smart constructor.
newtype CapacityReservationOptionsRequest = CapacityReservationOptionsRequest'
  { _crorUsageStrategy :: Maybe FleetCapacityReservationUsageStrategy
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CapacityReservationOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'crorUsageStrategy' - Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify @use-capacity-reservations-first@ , the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (@lowest-price@ or @prioritized@ ) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (@lowest-price@ or @prioritized@ ). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
capacityReservationOptionsRequest
    :: CapacityReservationOptionsRequest
capacityReservationOptionsRequest =
  CapacityReservationOptionsRequest' {_crorUsageStrategy = Nothing}


-- | Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify @use-capacity-reservations-first@ , the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (@lowest-price@ or @prioritized@ ) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (@lowest-price@ or @prioritized@ ). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
crorUsageStrategy :: Lens' CapacityReservationOptionsRequest (Maybe FleetCapacityReservationUsageStrategy)
crorUsageStrategy = lens _crorUsageStrategy (\ s a -> s{_crorUsageStrategy = a})

instance Hashable CapacityReservationOptionsRequest
         where

instance NFData CapacityReservationOptionsRequest
         where

instance ToQuery CapacityReservationOptionsRequest
         where
        toQuery CapacityReservationOptionsRequest'{..}
          = mconcat ["UsageStrategy" =: _crorUsageStrategy]

-- | Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify @CapacityReservationPreference@ and @CapacityReservationTarget@ , the request fails.
--
--
-- Use the @CapacityReservationPreference@ parameter to configure the instance to run as an On-Demand Instance or to run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the @CapacityReservationTarget@ parameter to explicitly target a specific Capacity Reservation or a Capacity Reservation group.
--
--
-- /See:/ 'capacityReservationSpecification' smart constructor.
data CapacityReservationSpecification = CapacityReservationSpecification'
  { _cCapacityReservationTarget     :: !(Maybe CapacityReservationTarget)
  , _cCapacityReservationPreference :: !(Maybe CapacityReservationPreference)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CapacityReservationSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cCapacityReservationTarget' - Information about the target Capacity Reservation or Capacity Reservation group.
--
-- * 'cCapacityReservationPreference' - Indicates the instance's Capacity Reservation preferences. Possible preferences include:     * @open@ - The instance can run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).     * @none@ - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.
capacityReservationSpecification
    :: CapacityReservationSpecification
capacityReservationSpecification =
  CapacityReservationSpecification'
    { _cCapacityReservationTarget = Nothing
    , _cCapacityReservationPreference = Nothing
    }


-- | Information about the target Capacity Reservation or Capacity Reservation group.
cCapacityReservationTarget :: Lens' CapacityReservationSpecification (Maybe CapacityReservationTarget)
cCapacityReservationTarget = lens _cCapacityReservationTarget (\ s a -> s{_cCapacityReservationTarget = a})

-- | Indicates the instance's Capacity Reservation preferences. Possible preferences include:     * @open@ - The instance can run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).     * @none@ - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.
cCapacityReservationPreference :: Lens' CapacityReservationSpecification (Maybe CapacityReservationPreference)
cCapacityReservationPreference = lens _cCapacityReservationPreference (\ s a -> s{_cCapacityReservationPreference = a})

instance Hashable CapacityReservationSpecification
         where

instance NFData CapacityReservationSpecification
         where

instance ToQuery CapacityReservationSpecification
         where
        toQuery CapacityReservationSpecification'{..}
          = mconcat
              ["CapacityReservationTarget" =:
                 _cCapacityReservationTarget,
               "CapacityReservationPreference" =:
                 _cCapacityReservationPreference]

-- | Describes the instance's Capacity Reservation targeting preferences. The action returns the @capacityReservationPreference@ response element if the instance is configured to run in On-Demand capacity, or if it is configured in run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). The action returns the @capacityReservationTarget@ response element if the instance explicily targets a specific Capacity Reservation or Capacity Reservation group.
--
--
--
-- /See:/ 'capacityReservationSpecificationResponse' smart constructor.
data CapacityReservationSpecificationResponse = CapacityReservationSpecificationResponse'
  { _crsCapacityReservationTarget :: !(Maybe CapacityReservationTargetResponse)
  , _crsCapacityReservationPreference :: !(Maybe CapacityReservationPreference)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CapacityReservationSpecificationResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'crsCapacityReservationTarget' - Information about the targeted Capacity Reservation or Capacity Reservation group.
--
-- * 'crsCapacityReservationPreference' - Describes the instance's Capacity Reservation preferences. Possible preferences include:     * @open@ - The instance can run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).     * @none@ - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
capacityReservationSpecificationResponse
    :: CapacityReservationSpecificationResponse
capacityReservationSpecificationResponse =
  CapacityReservationSpecificationResponse'
    { _crsCapacityReservationTarget = Nothing
    , _crsCapacityReservationPreference = Nothing
    }


-- | Information about the targeted Capacity Reservation or Capacity Reservation group.
crsCapacityReservationTarget :: Lens' CapacityReservationSpecificationResponse (Maybe CapacityReservationTargetResponse)
crsCapacityReservationTarget = lens _crsCapacityReservationTarget (\ s a -> s{_crsCapacityReservationTarget = a})

-- | Describes the instance's Capacity Reservation preferences. Possible preferences include:     * @open@ - The instance can run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).     * @none@ - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
crsCapacityReservationPreference :: Lens' CapacityReservationSpecificationResponse (Maybe CapacityReservationPreference)
crsCapacityReservationPreference = lens _crsCapacityReservationPreference (\ s a -> s{_crsCapacityReservationPreference = a})

instance FromXML
           CapacityReservationSpecificationResponse
         where
        parseXML x
          = CapacityReservationSpecificationResponse' <$>
              (x .@? "capacityReservationTarget") <*>
                (x .@? "capacityReservationPreference")

instance Hashable
           CapacityReservationSpecificationResponse
         where

instance NFData
           CapacityReservationSpecificationResponse
         where

-- | Describes a target Capacity Reservation or Capacity Reservation group.
--
--
--
-- /See:/ 'capacityReservationTarget' smart constructor.
data CapacityReservationTarget = CapacityReservationTarget'
  { _crtCapacityReservationId               :: !(Maybe Text)
  , _crtCapacityReservationResourceGroupARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CapacityReservationTarget' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'crtCapacityReservationId' - The ID of the Capacity Reservation in which to run the instance.
--
-- * 'crtCapacityReservationResourceGroupARN' - The ARN of the Capacity Reservation resource group in which to run the instance.
capacityReservationTarget
    :: CapacityReservationTarget
capacityReservationTarget =
  CapacityReservationTarget'
    { _crtCapacityReservationId = Nothing
    , _crtCapacityReservationResourceGroupARN = Nothing
    }


-- | The ID of the Capacity Reservation in which to run the instance.
crtCapacityReservationId :: Lens' CapacityReservationTarget (Maybe Text)
crtCapacityReservationId = lens _crtCapacityReservationId (\ s a -> s{_crtCapacityReservationId = a})

-- | The ARN of the Capacity Reservation resource group in which to run the instance.
crtCapacityReservationResourceGroupARN :: Lens' CapacityReservationTarget (Maybe Text)
crtCapacityReservationResourceGroupARN = lens _crtCapacityReservationResourceGroupARN (\ s a -> s{_crtCapacityReservationResourceGroupARN = a})

instance Hashable CapacityReservationTarget where

instance NFData CapacityReservationTarget where

instance ToQuery CapacityReservationTarget where
        toQuery CapacityReservationTarget'{..}
          = mconcat
              ["CapacityReservationId" =:
                 _crtCapacityReservationId,
               "CapacityReservationResourceGroupArn" =:
                 _crtCapacityReservationResourceGroupARN]

-- | Describes a target Capacity Reservation or Capacity Reservation group.
--
--
--
-- /See:/ 'capacityReservationTargetResponse' smart constructor.
data CapacityReservationTargetResponse = CapacityReservationTargetResponse'
  { _cCapacityReservationId               :: !(Maybe Text)
  , _cCapacityReservationResourceGroupARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CapacityReservationTargetResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cCapacityReservationId' - The ID of the targeted Capacity Reservation.
--
-- * 'cCapacityReservationResourceGroupARN' - The ARN of the targeted Capacity Reservation group.
capacityReservationTargetResponse
    :: CapacityReservationTargetResponse
capacityReservationTargetResponse =
  CapacityReservationTargetResponse'
    { _cCapacityReservationId = Nothing
    , _cCapacityReservationResourceGroupARN = Nothing
    }


-- | The ID of the targeted Capacity Reservation.
cCapacityReservationId :: Lens' CapacityReservationTargetResponse (Maybe Text)
cCapacityReservationId = lens _cCapacityReservationId (\ s a -> s{_cCapacityReservationId = a})

-- | The ARN of the targeted Capacity Reservation group.
cCapacityReservationResourceGroupARN :: Lens' CapacityReservationTargetResponse (Maybe Text)
cCapacityReservationResourceGroupARN = lens _cCapacityReservationResourceGroupARN (\ s a -> s{_cCapacityReservationResourceGroupARN = a})

instance FromXML CapacityReservationTargetResponse
         where
        parseXML x
          = CapacityReservationTargetResponse' <$>
              (x .@? "capacityReservationId") <*>
                (x .@? "capacityReservationResourceGroupArn")

instance Hashable CapacityReservationTargetResponse
         where

instance NFData CapacityReservationTargetResponse
         where

-- | Describes a carrier gateway.
--
--
--
-- /See:/ 'carrierGateway' smart constructor.
data CarrierGateway = CarrierGateway'
  { _cgState            :: !(Maybe CarrierGatewayState)
  , _cgVPCId            :: !(Maybe Text)
  , _cgOwnerId          :: !(Maybe Text)
  , _cgTags             :: !(Maybe [Tag])
  , _cgCarrierGatewayId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CarrierGateway' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cgState' - The state of the carrier gateway.
--
-- * 'cgVPCId' - The ID of the VPC associated with the carrier gateway.
--
-- * 'cgOwnerId' - The AWS account ID of the owner of the carrier gateway.
--
-- * 'cgTags' - The tags assigned to the carrier gateway.
--
-- * 'cgCarrierGatewayId' - The ID of the carrier gateway.
carrierGateway
    :: CarrierGateway
carrierGateway =
  CarrierGateway'
    { _cgState = Nothing
    , _cgVPCId = Nothing
    , _cgOwnerId = Nothing
    , _cgTags = Nothing
    , _cgCarrierGatewayId = Nothing
    }


-- | The state of the carrier gateway.
cgState :: Lens' CarrierGateway (Maybe CarrierGatewayState)
cgState = lens _cgState (\ s a -> s{_cgState = a})

-- | The ID of the VPC associated with the carrier gateway.
cgVPCId :: Lens' CarrierGateway (Maybe Text)
cgVPCId = lens _cgVPCId (\ s a -> s{_cgVPCId = a})

-- | The AWS account ID of the owner of the carrier gateway.
cgOwnerId :: Lens' CarrierGateway (Maybe Text)
cgOwnerId = lens _cgOwnerId (\ s a -> s{_cgOwnerId = a})

-- | The tags assigned to the carrier gateway.
cgTags :: Lens' CarrierGateway [Tag]
cgTags = lens _cgTags (\ s a -> s{_cgTags = a}) . _Default . _Coerce

-- | The ID of the carrier gateway.
cgCarrierGatewayId :: Lens' CarrierGateway (Maybe Text)
cgCarrierGatewayId = lens _cgCarrierGatewayId (\ s a -> s{_cgCarrierGatewayId = a})

instance FromXML CarrierGateway where
        parseXML x
          = CarrierGateway' <$>
              (x .@? "state") <*> (x .@? "vpcId") <*>
                (x .@? "ownerId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "carrierGatewayId")

instance Hashable CarrierGateway where

instance NFData CarrierGateway where

-- | Information about the client certificate used for authentication.
--
--
--
-- /See:/ 'certificateAuthentication' smart constructor.
newtype CertificateAuthentication = CertificateAuthentication'
  { _caClientRootCertificateChain :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CertificateAuthentication' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'caClientRootCertificateChain' - The ARN of the client certificate.
certificateAuthentication
    :: CertificateAuthentication
certificateAuthentication =
  CertificateAuthentication' {_caClientRootCertificateChain = Nothing}


-- | The ARN of the client certificate.
caClientRootCertificateChain :: Lens' CertificateAuthentication (Maybe Text)
caClientRootCertificateChain = lens _caClientRootCertificateChain (\ s a -> s{_caClientRootCertificateChain = a})

instance FromXML CertificateAuthentication where
        parseXML x
          = CertificateAuthentication' <$>
              (x .@? "clientRootCertificateChain")

instance Hashable CertificateAuthentication where

instance NFData CertificateAuthentication where

-- | Information about the client certificate to be used for authentication.
--
--
--
-- /See:/ 'certificateAuthenticationRequest' smart constructor.
newtype CertificateAuthenticationRequest = CertificateAuthenticationRequest'
  { _carClientRootCertificateChainARN :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CertificateAuthenticationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'carClientRootCertificateChainARN' - The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM).
certificateAuthenticationRequest
    :: CertificateAuthenticationRequest
certificateAuthenticationRequest =
  CertificateAuthenticationRequest'
    {_carClientRootCertificateChainARN = Nothing}


-- | The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM).
carClientRootCertificateChainARN :: Lens' CertificateAuthenticationRequest (Maybe Text)
carClientRootCertificateChainARN = lens _carClientRootCertificateChainARN (\ s a -> s{_carClientRootCertificateChainARN = a})

instance Hashable CertificateAuthenticationRequest
         where

instance NFData CertificateAuthenticationRequest
         where

instance ToQuery CertificateAuthenticationRequest
         where
        toQuery CertificateAuthenticationRequest'{..}
          = mconcat
              ["ClientRootCertificateChainArn" =:
                 _carClientRootCertificateChainARN]

-- | Provides authorization for Amazon to bring a specific IP address range to a specific AWS account using bring your own IP addresses (BYOIP). For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip Prepare to Bring Your Address Range to Your AWS Account> in the /Amazon Elastic Compute Cloud User Guide/ .
--
--
--
-- /See:/ 'cidrAuthorizationContext' smart constructor.
data CidrAuthorizationContext = CidrAuthorizationContext'
  { _cacMessage   :: !Text
  , _cacSignature :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CidrAuthorizationContext' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cacMessage' - The plain-text authorization message for the prefix and account.
--
-- * 'cacSignature' - The signed authorization message for the prefix and account.
cidrAuthorizationContext
    :: Text -- ^ 'cacMessage'
    -> Text -- ^ 'cacSignature'
    -> CidrAuthorizationContext
cidrAuthorizationContext pMessage_ pSignature_ =
  CidrAuthorizationContext'
    {_cacMessage = pMessage_, _cacSignature = pSignature_}


-- | The plain-text authorization message for the prefix and account.
cacMessage :: Lens' CidrAuthorizationContext Text
cacMessage = lens _cacMessage (\ s a -> s{_cacMessage = a})

-- | The signed authorization message for the prefix and account.
cacSignature :: Lens' CidrAuthorizationContext Text
cacSignature = lens _cacSignature (\ s a -> s{_cacSignature = a})

instance Hashable CidrAuthorizationContext where

instance NFData CidrAuthorizationContext where

instance ToQuery CidrAuthorizationContext where
        toQuery CidrAuthorizationContext'{..}
          = mconcat
              ["Message" =: _cacMessage,
               "Signature" =: _cacSignature]

-- | Describes an IPv4 CIDR block.
--
--
--
-- /See:/ 'cidrBlock' smart constructor.
newtype CidrBlock = CidrBlock'
  { _cbCidrBlock :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CidrBlock' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cbCidrBlock' - The IPv4 CIDR block.
cidrBlock
    :: CidrBlock
cidrBlock = CidrBlock' {_cbCidrBlock = Nothing}


-- | The IPv4 CIDR block.
cbCidrBlock :: Lens' CidrBlock (Maybe Text)
cbCidrBlock = lens _cbCidrBlock (\ s a -> s{_cbCidrBlock = a})

instance FromXML CidrBlock where
        parseXML x = CidrBlock' <$> (x .@? "cidrBlock")

instance Hashable CidrBlock where

instance NFData CidrBlock where

-- | Describes the ClassicLink DNS support status of a VPC.
--
--
--
-- /See:/ 'classicLinkDNSSupport' smart constructor.
data ClassicLinkDNSSupport = ClassicLinkDNSSupport'
  { _cldsVPCId                   :: !(Maybe Text)
  , _cldsClassicLinkDNSSupported :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClassicLinkDNSSupport' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cldsVPCId' - The ID of the VPC.
--
-- * 'cldsClassicLinkDNSSupported' - Indicates whether ClassicLink DNS support is enabled for the VPC.
classicLinkDNSSupport
    :: ClassicLinkDNSSupport
classicLinkDNSSupport =
  ClassicLinkDNSSupport'
    {_cldsVPCId = Nothing, _cldsClassicLinkDNSSupported = Nothing}


-- | The ID of the VPC.
cldsVPCId :: Lens' ClassicLinkDNSSupport (Maybe Text)
cldsVPCId = lens _cldsVPCId (\ s a -> s{_cldsVPCId = a})

-- | Indicates whether ClassicLink DNS support is enabled for the VPC.
cldsClassicLinkDNSSupported :: Lens' ClassicLinkDNSSupport (Maybe Bool)
cldsClassicLinkDNSSupported = lens _cldsClassicLinkDNSSupported (\ s a -> s{_cldsClassicLinkDNSSupported = a})

instance FromXML ClassicLinkDNSSupport where
        parseXML x
          = ClassicLinkDNSSupport' <$>
              (x .@? "vpcId") <*> (x .@? "classicLinkDnsSupported")

instance Hashable ClassicLinkDNSSupport where

instance NFData ClassicLinkDNSSupport where

-- | Describes a linked EC2-Classic instance.
--
--
--
-- /See:/ 'classicLinkInstance' smart constructor.
data ClassicLinkInstance = ClassicLinkInstance'
  { _cliInstanceId :: !(Maybe Text)
  , _cliGroups     :: !(Maybe [GroupIdentifier])
  , _cliVPCId      :: !(Maybe Text)
  , _cliTags       :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClassicLinkInstance' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cliInstanceId' - The ID of the instance.
--
-- * 'cliGroups' - A list of security groups.
--
-- * 'cliVPCId' - The ID of the VPC.
--
-- * 'cliTags' - Any tags assigned to the instance.
classicLinkInstance
    :: ClassicLinkInstance
classicLinkInstance =
  ClassicLinkInstance'
    { _cliInstanceId = Nothing
    , _cliGroups = Nothing
    , _cliVPCId = Nothing
    , _cliTags = Nothing
    }


-- | The ID of the instance.
cliInstanceId :: Lens' ClassicLinkInstance (Maybe Text)
cliInstanceId = lens _cliInstanceId (\ s a -> s{_cliInstanceId = a})

-- | A list of security groups.
cliGroups :: Lens' ClassicLinkInstance [GroupIdentifier]
cliGroups = lens _cliGroups (\ s a -> s{_cliGroups = a}) . _Default . _Coerce

-- | The ID of the VPC.
cliVPCId :: Lens' ClassicLinkInstance (Maybe Text)
cliVPCId = lens _cliVPCId (\ s a -> s{_cliVPCId = a})

-- | Any tags assigned to the instance.
cliTags :: Lens' ClassicLinkInstance [Tag]
cliTags = lens _cliTags (\ s a -> s{_cliTags = a}) . _Default . _Coerce

instance FromXML ClassicLinkInstance where
        parseXML x
          = ClassicLinkInstance' <$>
              (x .@? "instanceId") <*>
                (x .@? "groupSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpcId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ClassicLinkInstance where

instance NFData ClassicLinkInstance where

-- | Describes a Classic Load Balancer.
--
--
--
-- /See:/ 'classicLoadBalancer' smart constructor.
newtype ClassicLoadBalancer = ClassicLoadBalancer'
  { _clbName :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClassicLoadBalancer' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'clbName' - The name of the load balancer.
classicLoadBalancer
    :: ClassicLoadBalancer
classicLoadBalancer = ClassicLoadBalancer' {_clbName = Nothing}


-- | The name of the load balancer.
clbName :: Lens' ClassicLoadBalancer (Maybe Text)
clbName = lens _clbName (\ s a -> s{_clbName = a})

instance FromXML ClassicLoadBalancer where
        parseXML x = ClassicLoadBalancer' <$> (x .@? "name")

instance Hashable ClassicLoadBalancer where

instance NFData ClassicLoadBalancer where

instance ToQuery ClassicLoadBalancer where
        toQuery ClassicLoadBalancer'{..}
          = mconcat ["Name" =: _clbName]

-- | Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these Classic Load Balancers.
--
--
--
-- /See:/ 'classicLoadBalancersConfig' smart constructor.
newtype ClassicLoadBalancersConfig = ClassicLoadBalancersConfig'
  { _clbcClassicLoadBalancers :: Maybe (List1 ClassicLoadBalancer)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClassicLoadBalancersConfig' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'clbcClassicLoadBalancers' - One or more Classic Load Balancers.
classicLoadBalancersConfig
    :: ClassicLoadBalancersConfig
classicLoadBalancersConfig =
  ClassicLoadBalancersConfig' {_clbcClassicLoadBalancers = Nothing}


-- | One or more Classic Load Balancers.
clbcClassicLoadBalancers :: Lens' ClassicLoadBalancersConfig (Maybe (NonEmpty ClassicLoadBalancer))
clbcClassicLoadBalancers = lens _clbcClassicLoadBalancers (\ s a -> s{_clbcClassicLoadBalancers = a}) . mapping _List1

instance FromXML ClassicLoadBalancersConfig where
        parseXML x
          = ClassicLoadBalancersConfig' <$>
              (x .@? "classicLoadBalancers" .!@ mempty >>=
                 may (parseXMLList1 "item"))

instance Hashable ClassicLoadBalancersConfig where

instance NFData ClassicLoadBalancersConfig where

instance ToQuery ClassicLoadBalancersConfig where
        toQuery ClassicLoadBalancersConfig'{..}
          = mconcat
              [toQuery
                 (toQueryList "ClassicLoadBalancers" <$>
                    _clbcClassicLoadBalancers)]

-- | Describes the state of a client certificate revocation list.
--
--
--
-- /See:/ 'clientCertificateRevocationListStatus' smart constructor.
data ClientCertificateRevocationListStatus = ClientCertificateRevocationListStatus'
  { _ccrlsCode    :: !(Maybe ClientCertificateRevocationListStatusCode)
  , _ccrlsMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientCertificateRevocationListStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ccrlsCode' - The state of the client certificate revocation list.
--
-- * 'ccrlsMessage' - A message about the status of the client certificate revocation list, if applicable.
clientCertificateRevocationListStatus
    :: ClientCertificateRevocationListStatus
clientCertificateRevocationListStatus =
  ClientCertificateRevocationListStatus'
    {_ccrlsCode = Nothing, _ccrlsMessage = Nothing}


-- | The state of the client certificate revocation list.
ccrlsCode :: Lens' ClientCertificateRevocationListStatus (Maybe ClientCertificateRevocationListStatusCode)
ccrlsCode = lens _ccrlsCode (\ s a -> s{_ccrlsCode = a})

-- | A message about the status of the client certificate revocation list, if applicable.
ccrlsMessage :: Lens' ClientCertificateRevocationListStatus (Maybe Text)
ccrlsMessage = lens _ccrlsMessage (\ s a -> s{_ccrlsMessage = a})

instance FromXML
           ClientCertificateRevocationListStatus
         where
        parseXML x
          = ClientCertificateRevocationListStatus' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable
           ClientCertificateRevocationListStatus
         where

instance NFData ClientCertificateRevocationListStatus
         where

-- | The options for managing connection authorization for new client connections.
--
--
--
-- /See:/ 'clientConnectOptions' smart constructor.
data ClientConnectOptions = ClientConnectOptions'
  { _ccoEnabled           :: !(Maybe Bool)
  , _ccoLambdaFunctionARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientConnectOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ccoEnabled' - Indicates whether client connect options are enabled. The default is @false@ (not enabled).
--
-- * 'ccoLambdaFunctionARN' - The Amazon Resource Name (ARN) of the AWS Lambda function used for connection authorization.
clientConnectOptions
    :: ClientConnectOptions
clientConnectOptions =
  ClientConnectOptions' {_ccoEnabled = Nothing, _ccoLambdaFunctionARN = Nothing}


-- | Indicates whether client connect options are enabled. The default is @false@ (not enabled).
ccoEnabled :: Lens' ClientConnectOptions (Maybe Bool)
ccoEnabled = lens _ccoEnabled (\ s a -> s{_ccoEnabled = a})

-- | The Amazon Resource Name (ARN) of the AWS Lambda function used for connection authorization.
ccoLambdaFunctionARN :: Lens' ClientConnectOptions (Maybe Text)
ccoLambdaFunctionARN = lens _ccoLambdaFunctionARN (\ s a -> s{_ccoLambdaFunctionARN = a})

instance Hashable ClientConnectOptions where

instance NFData ClientConnectOptions where

instance ToQuery ClientConnectOptions where
        toQuery ClientConnectOptions'{..}
          = mconcat
              ["Enabled" =: _ccoEnabled,
               "LambdaFunctionArn" =: _ccoLambdaFunctionARN]

-- | The options for managing connection authorization for new client connections.
--
--
--
-- /See:/ 'clientConnectResponseOptions' smart constructor.
data ClientConnectResponseOptions = ClientConnectResponseOptions'
  { _ccroStatus            :: !(Maybe ClientVPNEndpointAttributeStatus)
  , _ccroEnabled           :: !(Maybe Bool)
  , _ccroLambdaFunctionARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientConnectResponseOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ccroStatus' - The status of any updates to the client connect options.
--
-- * 'ccroEnabled' - Indicates whether client connect options are enabled.
--
-- * 'ccroLambdaFunctionARN' - The Amazon Resource Name (ARN) of the AWS Lambda function used for connection authorization.
clientConnectResponseOptions
    :: ClientConnectResponseOptions
clientConnectResponseOptions =
  ClientConnectResponseOptions'
    { _ccroStatus = Nothing
    , _ccroEnabled = Nothing
    , _ccroLambdaFunctionARN = Nothing
    }


-- | The status of any updates to the client connect options.
ccroStatus :: Lens' ClientConnectResponseOptions (Maybe ClientVPNEndpointAttributeStatus)
ccroStatus = lens _ccroStatus (\ s a -> s{_ccroStatus = a})

-- | Indicates whether client connect options are enabled.
ccroEnabled :: Lens' ClientConnectResponseOptions (Maybe Bool)
ccroEnabled = lens _ccroEnabled (\ s a -> s{_ccroEnabled = a})

-- | The Amazon Resource Name (ARN) of the AWS Lambda function used for connection authorization.
ccroLambdaFunctionARN :: Lens' ClientConnectResponseOptions (Maybe Text)
ccroLambdaFunctionARN = lens _ccroLambdaFunctionARN (\ s a -> s{_ccroLambdaFunctionARN = a})

instance FromXML ClientConnectResponseOptions where
        parseXML x
          = ClientConnectResponseOptions' <$>
              (x .@? "status") <*> (x .@? "enabled") <*>
                (x .@? "lambdaFunctionArn")

instance Hashable ClientConnectResponseOptions where

instance NFData ClientConnectResponseOptions where

-- | Describes the client-specific data.
--
--
--
-- /See:/ 'clientData' smart constructor.
data ClientData = ClientData'
  { _cdUploadStart :: !(Maybe ISO8601)
  , _cdUploadSize  :: !(Maybe Double)
  , _cdUploadEnd   :: !(Maybe ISO8601)
  , _cdComment     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientData' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cdUploadStart' - The time that the disk upload starts.
--
-- * 'cdUploadSize' - The size of the uploaded disk image, in GiB.
--
-- * 'cdUploadEnd' - The time that the disk upload ends.
--
-- * 'cdComment' - A user-defined comment about the disk upload.
clientData
    :: ClientData
clientData =
  ClientData'
    { _cdUploadStart = Nothing
    , _cdUploadSize = Nothing
    , _cdUploadEnd = Nothing
    , _cdComment = Nothing
    }


-- | The time that the disk upload starts.
cdUploadStart :: Lens' ClientData (Maybe UTCTime)
cdUploadStart = lens _cdUploadStart (\ s a -> s{_cdUploadStart = a}) . mapping _Time

-- | The size of the uploaded disk image, in GiB.
cdUploadSize :: Lens' ClientData (Maybe Double)
cdUploadSize = lens _cdUploadSize (\ s a -> s{_cdUploadSize = a})

-- | The time that the disk upload ends.
cdUploadEnd :: Lens' ClientData (Maybe UTCTime)
cdUploadEnd = lens _cdUploadEnd (\ s a -> s{_cdUploadEnd = a}) . mapping _Time

-- | A user-defined comment about the disk upload.
cdComment :: Lens' ClientData (Maybe Text)
cdComment = lens _cdComment (\ s a -> s{_cdComment = a})

instance Hashable ClientData where

instance NFData ClientData where

instance ToQuery ClientData where
        toQuery ClientData'{..}
          = mconcat
              ["UploadStart" =: _cdUploadStart,
               "UploadSize" =: _cdUploadSize,
               "UploadEnd" =: _cdUploadEnd, "Comment" =: _cdComment]

-- | Describes the authentication methods used by a Client VPN endpoint. For more information, see <https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html Authentication> in the /AWS Client VPN Administrator Guide/ .
--
--
--
-- /See:/ 'clientVPNAuthentication' smart constructor.
data ClientVPNAuthentication = ClientVPNAuthentication'
  { _cvaActiveDirectory         :: !(Maybe DirectoryServiceAuthentication)
  , _cvaFederatedAuthentication :: !(Maybe FederatedAuthentication)
  , _cvaMutualAuthentication    :: !(Maybe CertificateAuthentication)
  , _cvaType                    :: !(Maybe ClientVPNAuthenticationType)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNAuthentication' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvaActiveDirectory' - Information about the Active Directory, if applicable.
--
-- * 'cvaFederatedAuthentication' - Information about the IAM SAML identity provider, if applicable.
--
-- * 'cvaMutualAuthentication' - Information about the authentication certificates, if applicable.
--
-- * 'cvaType' - The authentication type used.
clientVPNAuthentication
    :: ClientVPNAuthentication
clientVPNAuthentication =
  ClientVPNAuthentication'
    { _cvaActiveDirectory = Nothing
    , _cvaFederatedAuthentication = Nothing
    , _cvaMutualAuthentication = Nothing
    , _cvaType = Nothing
    }


-- | Information about the Active Directory, if applicable.
cvaActiveDirectory :: Lens' ClientVPNAuthentication (Maybe DirectoryServiceAuthentication)
cvaActiveDirectory = lens _cvaActiveDirectory (\ s a -> s{_cvaActiveDirectory = a})

-- | Information about the IAM SAML identity provider, if applicable.
cvaFederatedAuthentication :: Lens' ClientVPNAuthentication (Maybe FederatedAuthentication)
cvaFederatedAuthentication = lens _cvaFederatedAuthentication (\ s a -> s{_cvaFederatedAuthentication = a})

-- | Information about the authentication certificates, if applicable.
cvaMutualAuthentication :: Lens' ClientVPNAuthentication (Maybe CertificateAuthentication)
cvaMutualAuthentication = lens _cvaMutualAuthentication (\ s a -> s{_cvaMutualAuthentication = a})

-- | The authentication type used.
cvaType :: Lens' ClientVPNAuthentication (Maybe ClientVPNAuthenticationType)
cvaType = lens _cvaType (\ s a -> s{_cvaType = a})

instance FromXML ClientVPNAuthentication where
        parseXML x
          = ClientVPNAuthentication' <$>
              (x .@? "activeDirectory") <*>
                (x .@? "federatedAuthentication")
                <*> (x .@? "mutualAuthentication")
                <*> (x .@? "type")

instance Hashable ClientVPNAuthentication where

instance NFData ClientVPNAuthentication where

-- | Describes the authentication method to be used by a Client VPN endpoint. For more information, see <https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication Authentication> in the /AWS Client VPN Administrator Guide/ .
--
--
--
-- /See:/ 'clientVPNAuthenticationRequest' smart constructor.
data ClientVPNAuthenticationRequest = ClientVPNAuthenticationRequest'
  { _cvarActiveDirectory :: !(Maybe DirectoryServiceAuthenticationRequest)
  , _cvarFederatedAuthentication :: !(Maybe FederatedAuthenticationRequest)
  , _cvarMutualAuthentication :: !(Maybe CertificateAuthenticationRequest)
  , _cvarType :: !(Maybe ClientVPNAuthenticationType)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNAuthenticationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvarActiveDirectory' - Information about the Active Directory to be used, if applicable. You must provide this information if __Type__ is @directory-service-authentication@ .
--
-- * 'cvarFederatedAuthentication' - Information about the IAM SAML identity provider to be used, if applicable. You must provide this information if __Type__ is @federated-authentication@ .
--
-- * 'cvarMutualAuthentication' - Information about the authentication certificates to be used, if applicable. You must provide this information if __Type__ is @certificate-authentication@ .
--
-- * 'cvarType' - The type of client authentication to be used.
clientVPNAuthenticationRequest
    :: ClientVPNAuthenticationRequest
clientVPNAuthenticationRequest =
  ClientVPNAuthenticationRequest'
    { _cvarActiveDirectory = Nothing
    , _cvarFederatedAuthentication = Nothing
    , _cvarMutualAuthentication = Nothing
    , _cvarType = Nothing
    }


-- | Information about the Active Directory to be used, if applicable. You must provide this information if __Type__ is @directory-service-authentication@ .
cvarActiveDirectory :: Lens' ClientVPNAuthenticationRequest (Maybe DirectoryServiceAuthenticationRequest)
cvarActiveDirectory = lens _cvarActiveDirectory (\ s a -> s{_cvarActiveDirectory = a})

-- | Information about the IAM SAML identity provider to be used, if applicable. You must provide this information if __Type__ is @federated-authentication@ .
cvarFederatedAuthentication :: Lens' ClientVPNAuthenticationRequest (Maybe FederatedAuthenticationRequest)
cvarFederatedAuthentication = lens _cvarFederatedAuthentication (\ s a -> s{_cvarFederatedAuthentication = a})

-- | Information about the authentication certificates to be used, if applicable. You must provide this information if __Type__ is @certificate-authentication@ .
cvarMutualAuthentication :: Lens' ClientVPNAuthenticationRequest (Maybe CertificateAuthenticationRequest)
cvarMutualAuthentication = lens _cvarMutualAuthentication (\ s a -> s{_cvarMutualAuthentication = a})

-- | The type of client authentication to be used.
cvarType :: Lens' ClientVPNAuthenticationRequest (Maybe ClientVPNAuthenticationType)
cvarType = lens _cvarType (\ s a -> s{_cvarType = a})

instance Hashable ClientVPNAuthenticationRequest
         where

instance NFData ClientVPNAuthenticationRequest where

instance ToQuery ClientVPNAuthenticationRequest where
        toQuery ClientVPNAuthenticationRequest'{..}
          = mconcat
              ["ActiveDirectory" =: _cvarActiveDirectory,
               "FederatedAuthentication" =:
                 _cvarFederatedAuthentication,
               "MutualAuthentication" =: _cvarMutualAuthentication,
               "Type" =: _cvarType]

-- | Describes the state of an authorization rule.
--
--
--
-- /See:/ 'clientVPNAuthorizationRuleStatus' smart constructor.
data ClientVPNAuthorizationRuleStatus = ClientVPNAuthorizationRuleStatus'
  { _cvarsCode    :: !(Maybe ClientVPNAuthorizationRuleStatusCode)
  , _cvarsMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNAuthorizationRuleStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvarsCode' - The state of the authorization rule.
--
-- * 'cvarsMessage' - A message about the status of the authorization rule, if applicable.
clientVPNAuthorizationRuleStatus
    :: ClientVPNAuthorizationRuleStatus
clientVPNAuthorizationRuleStatus =
  ClientVPNAuthorizationRuleStatus'
    {_cvarsCode = Nothing, _cvarsMessage = Nothing}


-- | The state of the authorization rule.
cvarsCode :: Lens' ClientVPNAuthorizationRuleStatus (Maybe ClientVPNAuthorizationRuleStatusCode)
cvarsCode = lens _cvarsCode (\ s a -> s{_cvarsCode = a})

-- | A message about the status of the authorization rule, if applicable.
cvarsMessage :: Lens' ClientVPNAuthorizationRuleStatus (Maybe Text)
cvarsMessage = lens _cvarsMessage (\ s a -> s{_cvarsMessage = a})

instance FromXML ClientVPNAuthorizationRuleStatus
         where
        parseXML x
          = ClientVPNAuthorizationRuleStatus' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable ClientVPNAuthorizationRuleStatus
         where

instance NFData ClientVPNAuthorizationRuleStatus
         where

-- | Describes a client connection.
--
--
--
-- /See:/ 'clientVPNConnection' smart constructor.
data ClientVPNConnection = ClientVPNConnection'
  { _cvcIngressPackets            :: !(Maybe Text)
  , _cvcStatus                    :: !(Maybe ClientVPNConnectionStatus)
  , _cvcConnectionEndTime         :: !(Maybe Text)
  , _cvcCommonName                :: !(Maybe Text)
  , _cvcPostureComplianceStatuses :: !(Maybe [Text])
  , _cvcConnectionEstablishedTime :: !(Maybe Text)
  , _cvcConnectionId              :: !(Maybe Text)
  , _cvcIngressBytes              :: !(Maybe Text)
  , _cvcUsername                  :: !(Maybe Text)
  , _cvcEgressBytes               :: !(Maybe Text)
  , _cvcClientVPNEndpointId       :: !(Maybe Text)
  , _cvcClientIP                  :: !(Maybe Text)
  , _cvcEgressPackets             :: !(Maybe Text)
  , _cvcTimestamp                 :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNConnection' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvcIngressPackets' - The number of packets sent by the client.
--
-- * 'cvcStatus' - The current state of the client connection.
--
-- * 'cvcConnectionEndTime' - The date and time the client connection was terminated.
--
-- * 'cvcCommonName' - The common name associated with the client. This is either the name of the client certificate, or the Active Directory user name.
--
-- * 'cvcPostureComplianceStatuses' - The statuses returned by the client connect handler for posture compliance, if applicable.
--
-- * 'cvcConnectionEstablishedTime' - The date and time the client connection was established.
--
-- * 'cvcConnectionId' - The ID of the client connection.
--
-- * 'cvcIngressBytes' - The number of bytes sent by the client.
--
-- * 'cvcUsername' - The username of the client who established the client connection. This information is only provided if Active Directory client authentication is used.
--
-- * 'cvcEgressBytes' - The number of bytes received by the client.
--
-- * 'cvcClientVPNEndpointId' - The ID of the Client VPN endpoint to which the client is connected.
--
-- * 'cvcClientIP' - The IP address of the client.
--
-- * 'cvcEgressPackets' - The number of packets received by the client.
--
-- * 'cvcTimestamp' - The current date and time.
clientVPNConnection
    :: ClientVPNConnection
clientVPNConnection =
  ClientVPNConnection'
    { _cvcIngressPackets = Nothing
    , _cvcStatus = Nothing
    , _cvcConnectionEndTime = Nothing
    , _cvcCommonName = Nothing
    , _cvcPostureComplianceStatuses = Nothing
    , _cvcConnectionEstablishedTime = Nothing
    , _cvcConnectionId = Nothing
    , _cvcIngressBytes = Nothing
    , _cvcUsername = Nothing
    , _cvcEgressBytes = Nothing
    , _cvcClientVPNEndpointId = Nothing
    , _cvcClientIP = Nothing
    , _cvcEgressPackets = Nothing
    , _cvcTimestamp = Nothing
    }


-- | The number of packets sent by the client.
cvcIngressPackets :: Lens' ClientVPNConnection (Maybe Text)
cvcIngressPackets = lens _cvcIngressPackets (\ s a -> s{_cvcIngressPackets = a})

-- | The current state of the client connection.
cvcStatus :: Lens' ClientVPNConnection (Maybe ClientVPNConnectionStatus)
cvcStatus = lens _cvcStatus (\ s a -> s{_cvcStatus = a})

-- | The date and time the client connection was terminated.
cvcConnectionEndTime :: Lens' ClientVPNConnection (Maybe Text)
cvcConnectionEndTime = lens _cvcConnectionEndTime (\ s a -> s{_cvcConnectionEndTime = a})

-- | The common name associated with the client. This is either the name of the client certificate, or the Active Directory user name.
cvcCommonName :: Lens' ClientVPNConnection (Maybe Text)
cvcCommonName = lens _cvcCommonName (\ s a -> s{_cvcCommonName = a})

-- | The statuses returned by the client connect handler for posture compliance, if applicable.
cvcPostureComplianceStatuses :: Lens' ClientVPNConnection [Text]
cvcPostureComplianceStatuses = lens _cvcPostureComplianceStatuses (\ s a -> s{_cvcPostureComplianceStatuses = a}) . _Default . _Coerce

-- | The date and time the client connection was established.
cvcConnectionEstablishedTime :: Lens' ClientVPNConnection (Maybe Text)
cvcConnectionEstablishedTime = lens _cvcConnectionEstablishedTime (\ s a -> s{_cvcConnectionEstablishedTime = a})

-- | The ID of the client connection.
cvcConnectionId :: Lens' ClientVPNConnection (Maybe Text)
cvcConnectionId = lens _cvcConnectionId (\ s a -> s{_cvcConnectionId = a})

-- | The number of bytes sent by the client.
cvcIngressBytes :: Lens' ClientVPNConnection (Maybe Text)
cvcIngressBytes = lens _cvcIngressBytes (\ s a -> s{_cvcIngressBytes = a})

-- | The username of the client who established the client connection. This information is only provided if Active Directory client authentication is used.
cvcUsername :: Lens' ClientVPNConnection (Maybe Text)
cvcUsername = lens _cvcUsername (\ s a -> s{_cvcUsername = a})

-- | The number of bytes received by the client.
cvcEgressBytes :: Lens' ClientVPNConnection (Maybe Text)
cvcEgressBytes = lens _cvcEgressBytes (\ s a -> s{_cvcEgressBytes = a})

-- | The ID of the Client VPN endpoint to which the client is connected.
cvcClientVPNEndpointId :: Lens' ClientVPNConnection (Maybe Text)
cvcClientVPNEndpointId = lens _cvcClientVPNEndpointId (\ s a -> s{_cvcClientVPNEndpointId = a})

-- | The IP address of the client.
cvcClientIP :: Lens' ClientVPNConnection (Maybe Text)
cvcClientIP = lens _cvcClientIP (\ s a -> s{_cvcClientIP = a})

-- | The number of packets received by the client.
cvcEgressPackets :: Lens' ClientVPNConnection (Maybe Text)
cvcEgressPackets = lens _cvcEgressPackets (\ s a -> s{_cvcEgressPackets = a})

-- | The current date and time.
cvcTimestamp :: Lens' ClientVPNConnection (Maybe Text)
cvcTimestamp = lens _cvcTimestamp (\ s a -> s{_cvcTimestamp = a})

instance FromXML ClientVPNConnection where
        parseXML x
          = ClientVPNConnection' <$>
              (x .@? "ingressPackets") <*> (x .@? "status") <*>
                (x .@? "connectionEndTime")
                <*> (x .@? "commonName")
                <*>
                (x .@? "postureComplianceStatusSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "connectionEstablishedTime")
                <*> (x .@? "connectionId")
                <*> (x .@? "ingressBytes")
                <*> (x .@? "username")
                <*> (x .@? "egressBytes")
                <*> (x .@? "clientVpnEndpointId")
                <*> (x .@? "clientIp")
                <*> (x .@? "egressPackets")
                <*> (x .@? "timestamp")

instance Hashable ClientVPNConnection where

instance NFData ClientVPNConnection where

-- | Describes the status of a client connection.
--
--
--
-- /See:/ 'clientVPNConnectionStatus' smart constructor.
data ClientVPNConnectionStatus = ClientVPNConnectionStatus'
  { _cvcsCode    :: !(Maybe ClientVPNConnectionStatusCode)
  , _cvcsMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNConnectionStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvcsCode' - The state of the client connection.
--
-- * 'cvcsMessage' - A message about the status of the client connection, if applicable.
clientVPNConnectionStatus
    :: ClientVPNConnectionStatus
clientVPNConnectionStatus =
  ClientVPNConnectionStatus' {_cvcsCode = Nothing, _cvcsMessage = Nothing}


-- | The state of the client connection.
cvcsCode :: Lens' ClientVPNConnectionStatus (Maybe ClientVPNConnectionStatusCode)
cvcsCode = lens _cvcsCode (\ s a -> s{_cvcsCode = a})

-- | A message about the status of the client connection, if applicable.
cvcsMessage :: Lens' ClientVPNConnectionStatus (Maybe Text)
cvcsMessage = lens _cvcsMessage (\ s a -> s{_cvcsMessage = a})

instance FromXML ClientVPNConnectionStatus where
        parseXML x
          = ClientVPNConnectionStatus' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable ClientVPNConnectionStatus where

instance NFData ClientVPNConnectionStatus where

-- | Describes a Client VPN endpoint.
--
--
--
-- /See:/ 'clientVPNEndpoint' smart constructor.
data ClientVPNEndpoint = ClientVPNEndpoint'
  { _cveCreationTime             :: !(Maybe Text)
  , _cveStatus                   :: !(Maybe ClientVPNEndpointStatus)
  , _cveAssociatedTargetNetworks :: !(Maybe [AssociatedTargetNetwork])
  , _cveSecurityGroupIds         :: !(Maybe [Text])
  , _cveConnectionLogOptions     :: !(Maybe ConnectionLogResponseOptions)
  , _cveSplitTunnel              :: !(Maybe Bool)
  , _cveTransportProtocol        :: !(Maybe TransportProtocol)
  , _cveVPCId                    :: !(Maybe Text)
  , _cveVPNPort                  :: !(Maybe Int)
  , _cveDeletionTime             :: !(Maybe Text)
  , _cveClientCidrBlock          :: !(Maybe Text)
  , _cveDNSServers               :: !(Maybe [Text])
  , _cveClientVPNEndpointId      :: !(Maybe Text)
  , _cveClientConnectOptions     :: !(Maybe ClientConnectResponseOptions)
  , _cveServerCertificateARN     :: !(Maybe Text)
  , _cveAuthenticationOptions    :: !(Maybe [ClientVPNAuthentication])
  , _cveSelfServicePortalURL     :: !(Maybe Text)
  , _cveDescription              :: !(Maybe Text)
  , _cveDNSName                  :: !(Maybe Text)
  , _cveVPNProtocol              :: !(Maybe VPNProtocol)
  , _cveTags                     :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNEndpoint' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cveCreationTime' - The date and time the Client VPN endpoint was created.
--
-- * 'cveStatus' - The current state of the Client VPN endpoint.
--
-- * 'cveAssociatedTargetNetworks' - Information about the associated target networks. A target network is a subnet in a VPC.
--
-- * 'cveSecurityGroupIds' - The IDs of the security groups for the target network.
--
-- * 'cveConnectionLogOptions' - Information about the client connection logging options for the Client VPN endpoint.
--
-- * 'cveSplitTunnel' - Indicates whether split-tunnel is enabled in the AWS Client VPN endpoint. For information about split-tunnel VPN endpoints, see <https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html Split-Tunnel AWS Client VPN Endpoint> in the /AWS Client VPN Administrator Guide/ .
--
-- * 'cveTransportProtocol' - The transport protocol used by the Client VPN endpoint.
--
-- * 'cveVPCId' - The ID of the VPC.
--
-- * 'cveVPNPort' - The port number for the Client VPN endpoint.
--
-- * 'cveDeletionTime' - The date and time the Client VPN endpoint was deleted, if applicable.
--
-- * 'cveClientCidrBlock' - The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
--
-- * 'cveDNSServers' - Information about the DNS servers to be used for DNS resolution.
--
-- * 'cveClientVPNEndpointId' - The ID of the Client VPN endpoint.
--
-- * 'cveClientConnectOptions' - The options for managing connection authorization for new client connections.
--
-- * 'cveServerCertificateARN' - The ARN of the server certificate.
--
-- * 'cveAuthenticationOptions' - Information about the authentication method used by the Client VPN endpoint.
--
-- * 'cveSelfServicePortalURL' - The URL of the self-service portal.
--
-- * 'cveDescription' - A brief description of the endpoint.
--
-- * 'cveDNSName' - The DNS name to be used by clients when connecting to the Client VPN endpoint.
--
-- * 'cveVPNProtocol' - The protocol used by the VPN session.
--
-- * 'cveTags' - Any tags assigned to the Client VPN endpoint.
clientVPNEndpoint
    :: ClientVPNEndpoint
clientVPNEndpoint =
  ClientVPNEndpoint'
    { _cveCreationTime = Nothing
    , _cveStatus = Nothing
    , _cveAssociatedTargetNetworks = Nothing
    , _cveSecurityGroupIds = Nothing
    , _cveConnectionLogOptions = Nothing
    , _cveSplitTunnel = Nothing
    , _cveTransportProtocol = Nothing
    , _cveVPCId = Nothing
    , _cveVPNPort = Nothing
    , _cveDeletionTime = Nothing
    , _cveClientCidrBlock = Nothing
    , _cveDNSServers = Nothing
    , _cveClientVPNEndpointId = Nothing
    , _cveClientConnectOptions = Nothing
    , _cveServerCertificateARN = Nothing
    , _cveAuthenticationOptions = Nothing
    , _cveSelfServicePortalURL = Nothing
    , _cveDescription = Nothing
    , _cveDNSName = Nothing
    , _cveVPNProtocol = Nothing
    , _cveTags = Nothing
    }


-- | The date and time the Client VPN endpoint was created.
cveCreationTime :: Lens' ClientVPNEndpoint (Maybe Text)
cveCreationTime = lens _cveCreationTime (\ s a -> s{_cveCreationTime = a})

-- | The current state of the Client VPN endpoint.
cveStatus :: Lens' ClientVPNEndpoint (Maybe ClientVPNEndpointStatus)
cveStatus = lens _cveStatus (\ s a -> s{_cveStatus = a})

-- | Information about the associated target networks. A target network is a subnet in a VPC.
cveAssociatedTargetNetworks :: Lens' ClientVPNEndpoint [AssociatedTargetNetwork]
cveAssociatedTargetNetworks = lens _cveAssociatedTargetNetworks (\ s a -> s{_cveAssociatedTargetNetworks = a}) . _Default . _Coerce

-- | The IDs of the security groups for the target network.
cveSecurityGroupIds :: Lens' ClientVPNEndpoint [Text]
cveSecurityGroupIds = lens _cveSecurityGroupIds (\ s a -> s{_cveSecurityGroupIds = a}) . _Default . _Coerce

-- | Information about the client connection logging options for the Client VPN endpoint.
cveConnectionLogOptions :: Lens' ClientVPNEndpoint (Maybe ConnectionLogResponseOptions)
cveConnectionLogOptions = lens _cveConnectionLogOptions (\ s a -> s{_cveConnectionLogOptions = a})

-- | Indicates whether split-tunnel is enabled in the AWS Client VPN endpoint. For information about split-tunnel VPN endpoints, see <https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html Split-Tunnel AWS Client VPN Endpoint> in the /AWS Client VPN Administrator Guide/ .
cveSplitTunnel :: Lens' ClientVPNEndpoint (Maybe Bool)
cveSplitTunnel = lens _cveSplitTunnel (\ s a -> s{_cveSplitTunnel = a})

-- | The transport protocol used by the Client VPN endpoint.
cveTransportProtocol :: Lens' ClientVPNEndpoint (Maybe TransportProtocol)
cveTransportProtocol = lens _cveTransportProtocol (\ s a -> s{_cveTransportProtocol = a})

-- | The ID of the VPC.
cveVPCId :: Lens' ClientVPNEndpoint (Maybe Text)
cveVPCId = lens _cveVPCId (\ s a -> s{_cveVPCId = a})

-- | The port number for the Client VPN endpoint.
cveVPNPort :: Lens' ClientVPNEndpoint (Maybe Int)
cveVPNPort = lens _cveVPNPort (\ s a -> s{_cveVPNPort = a})

-- | The date and time the Client VPN endpoint was deleted, if applicable.
cveDeletionTime :: Lens' ClientVPNEndpoint (Maybe Text)
cveDeletionTime = lens _cveDeletionTime (\ s a -> s{_cveDeletionTime = a})

-- | The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
cveClientCidrBlock :: Lens' ClientVPNEndpoint (Maybe Text)
cveClientCidrBlock = lens _cveClientCidrBlock (\ s a -> s{_cveClientCidrBlock = a})

-- | Information about the DNS servers to be used for DNS resolution.
cveDNSServers :: Lens' ClientVPNEndpoint [Text]
cveDNSServers = lens _cveDNSServers (\ s a -> s{_cveDNSServers = a}) . _Default . _Coerce

-- | The ID of the Client VPN endpoint.
cveClientVPNEndpointId :: Lens' ClientVPNEndpoint (Maybe Text)
cveClientVPNEndpointId = lens _cveClientVPNEndpointId (\ s a -> s{_cveClientVPNEndpointId = a})

-- | The options for managing connection authorization for new client connections.
cveClientConnectOptions :: Lens' ClientVPNEndpoint (Maybe ClientConnectResponseOptions)
cveClientConnectOptions = lens _cveClientConnectOptions (\ s a -> s{_cveClientConnectOptions = a})

-- | The ARN of the server certificate.
cveServerCertificateARN :: Lens' ClientVPNEndpoint (Maybe Text)
cveServerCertificateARN = lens _cveServerCertificateARN (\ s a -> s{_cveServerCertificateARN = a})

-- | Information about the authentication method used by the Client VPN endpoint.
cveAuthenticationOptions :: Lens' ClientVPNEndpoint [ClientVPNAuthentication]
cveAuthenticationOptions = lens _cveAuthenticationOptions (\ s a -> s{_cveAuthenticationOptions = a}) . _Default . _Coerce

-- | The URL of the self-service portal.
cveSelfServicePortalURL :: Lens' ClientVPNEndpoint (Maybe Text)
cveSelfServicePortalURL = lens _cveSelfServicePortalURL (\ s a -> s{_cveSelfServicePortalURL = a})

-- | A brief description of the endpoint.
cveDescription :: Lens' ClientVPNEndpoint (Maybe Text)
cveDescription = lens _cveDescription (\ s a -> s{_cveDescription = a})

-- | The DNS name to be used by clients when connecting to the Client VPN endpoint.
cveDNSName :: Lens' ClientVPNEndpoint (Maybe Text)
cveDNSName = lens _cveDNSName (\ s a -> s{_cveDNSName = a})

-- | The protocol used by the VPN session.
cveVPNProtocol :: Lens' ClientVPNEndpoint (Maybe VPNProtocol)
cveVPNProtocol = lens _cveVPNProtocol (\ s a -> s{_cveVPNProtocol = a})

-- | Any tags assigned to the Client VPN endpoint.
cveTags :: Lens' ClientVPNEndpoint [Tag]
cveTags = lens _cveTags (\ s a -> s{_cveTags = a}) . _Default . _Coerce

instance FromXML ClientVPNEndpoint where
        parseXML x
          = ClientVPNEndpoint' <$>
              (x .@? "creationTime") <*> (x .@? "status") <*>
                (x .@? "associatedTargetNetwork" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "securityGroupIdSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "connectionLogOptions")
                <*> (x .@? "splitTunnel")
                <*> (x .@? "transportProtocol")
                <*> (x .@? "vpcId")
                <*> (x .@? "vpnPort")
                <*> (x .@? "deletionTime")
                <*> (x .@? "clientCidrBlock")
                <*>
                (x .@? "dnsServer" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "clientVpnEndpointId")
                <*> (x .@? "clientConnectOptions")
                <*> (x .@? "serverCertificateArn")
                <*>
                (x .@? "authenticationOptions" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "selfServicePortalUrl")
                <*> (x .@? "description")
                <*> (x .@? "dnsName")
                <*> (x .@? "vpnProtocol")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ClientVPNEndpoint where

instance NFData ClientVPNEndpoint where

-- | Describes the status of the Client VPN endpoint attribute.
--
--
--
-- /See:/ 'clientVPNEndpointAttributeStatus' smart constructor.
data ClientVPNEndpointAttributeStatus = ClientVPNEndpointAttributeStatus'
  { _cveasCode    :: !(Maybe ClientVPNEndpointAttributeStatusCode)
  , _cveasMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNEndpointAttributeStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cveasCode' - The status code.
--
-- * 'cveasMessage' - The status message.
clientVPNEndpointAttributeStatus
    :: ClientVPNEndpointAttributeStatus
clientVPNEndpointAttributeStatus =
  ClientVPNEndpointAttributeStatus'
    {_cveasCode = Nothing, _cveasMessage = Nothing}


-- | The status code.
cveasCode :: Lens' ClientVPNEndpointAttributeStatus (Maybe ClientVPNEndpointAttributeStatusCode)
cveasCode = lens _cveasCode (\ s a -> s{_cveasCode = a})

-- | The status message.
cveasMessage :: Lens' ClientVPNEndpointAttributeStatus (Maybe Text)
cveasMessage = lens _cveasMessage (\ s a -> s{_cveasMessage = a})

instance FromXML ClientVPNEndpointAttributeStatus
         where
        parseXML x
          = ClientVPNEndpointAttributeStatus' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable ClientVPNEndpointAttributeStatus
         where

instance NFData ClientVPNEndpointAttributeStatus
         where

-- | Describes the state of a Client VPN endpoint.
--
--
--
-- /See:/ 'clientVPNEndpointStatus' smart constructor.
data ClientVPNEndpointStatus = ClientVPNEndpointStatus'
  { _cvesCode    :: !(Maybe ClientVPNEndpointStatusCode)
  , _cvesMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNEndpointStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvesCode' - The state of the Client VPN endpoint. Possible states include:     * @pending-associate@ - The Client VPN endpoint has been created but no target networks have been associated. The Client VPN endpoint cannot accept connections.     * @available@ - The Client VPN endpoint has been created and a target network has been associated. The Client VPN endpoint can accept connections.     * @deleting@ - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept connections.     * @deleted@ - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept connections.
--
-- * 'cvesMessage' - A message about the status of the Client VPN endpoint.
clientVPNEndpointStatus
    :: ClientVPNEndpointStatus
clientVPNEndpointStatus =
  ClientVPNEndpointStatus' {_cvesCode = Nothing, _cvesMessage = Nothing}


-- | The state of the Client VPN endpoint. Possible states include:     * @pending-associate@ - The Client VPN endpoint has been created but no target networks have been associated. The Client VPN endpoint cannot accept connections.     * @available@ - The Client VPN endpoint has been created and a target network has been associated. The Client VPN endpoint can accept connections.     * @deleting@ - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept connections.     * @deleted@ - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept connections.
cvesCode :: Lens' ClientVPNEndpointStatus (Maybe ClientVPNEndpointStatusCode)
cvesCode = lens _cvesCode (\ s a -> s{_cvesCode = a})

-- | A message about the status of the Client VPN endpoint.
cvesMessage :: Lens' ClientVPNEndpointStatus (Maybe Text)
cvesMessage = lens _cvesMessage (\ s a -> s{_cvesMessage = a})

instance FromXML ClientVPNEndpointStatus where
        parseXML x
          = ClientVPNEndpointStatus' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable ClientVPNEndpointStatus where

instance NFData ClientVPNEndpointStatus where

-- | Information about a Client VPN endpoint route.
--
--
--
-- /See:/ 'clientVPNRoute' smart constructor.
data ClientVPNRoute = ClientVPNRoute'
  { _cvrStatus              :: !(Maybe ClientVPNRouteStatus)
  , _cvrOrigin              :: !(Maybe Text)
  , _cvrClientVPNEndpointId :: !(Maybe Text)
  , _cvrTargetSubnet        :: !(Maybe Text)
  , _cvrDestinationCidr     :: !(Maybe Text)
  , _cvrType                :: !(Maybe Text)
  , _cvrDescription         :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNRoute' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvrStatus' - The current state of the route.
--
-- * 'cvrOrigin' - Indicates how the route was associated with the Client VPN endpoint. @associate@ indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. @add-route@ indicates that the route was manually added using the __CreateClientVpnRoute__ action.
--
-- * 'cvrClientVPNEndpointId' - The ID of the Client VPN endpoint with which the route is associated.
--
-- * 'cvrTargetSubnet' - The ID of the subnet through which traffic is routed.
--
-- * 'cvrDestinationCidr' - The IPv4 address range, in CIDR notation, of the route destination.
--
-- * 'cvrType' - The route type.
--
-- * 'cvrDescription' - A brief description of the route.
clientVPNRoute
    :: ClientVPNRoute
clientVPNRoute =
  ClientVPNRoute'
    { _cvrStatus = Nothing
    , _cvrOrigin = Nothing
    , _cvrClientVPNEndpointId = Nothing
    , _cvrTargetSubnet = Nothing
    , _cvrDestinationCidr = Nothing
    , _cvrType = Nothing
    , _cvrDescription = Nothing
    }


-- | The current state of the route.
cvrStatus :: Lens' ClientVPNRoute (Maybe ClientVPNRouteStatus)
cvrStatus = lens _cvrStatus (\ s a -> s{_cvrStatus = a})

-- | Indicates how the route was associated with the Client VPN endpoint. @associate@ indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. @add-route@ indicates that the route was manually added using the __CreateClientVpnRoute__ action.
cvrOrigin :: Lens' ClientVPNRoute (Maybe Text)
cvrOrigin = lens _cvrOrigin (\ s a -> s{_cvrOrigin = a})

-- | The ID of the Client VPN endpoint with which the route is associated.
cvrClientVPNEndpointId :: Lens' ClientVPNRoute (Maybe Text)
cvrClientVPNEndpointId = lens _cvrClientVPNEndpointId (\ s a -> s{_cvrClientVPNEndpointId = a})

-- | The ID of the subnet through which traffic is routed.
cvrTargetSubnet :: Lens' ClientVPNRoute (Maybe Text)
cvrTargetSubnet = lens _cvrTargetSubnet (\ s a -> s{_cvrTargetSubnet = a})

-- | The IPv4 address range, in CIDR notation, of the route destination.
cvrDestinationCidr :: Lens' ClientVPNRoute (Maybe Text)
cvrDestinationCidr = lens _cvrDestinationCidr (\ s a -> s{_cvrDestinationCidr = a})

-- | The route type.
cvrType :: Lens' ClientVPNRoute (Maybe Text)
cvrType = lens _cvrType (\ s a -> s{_cvrType = a})

-- | A brief description of the route.
cvrDescription :: Lens' ClientVPNRoute (Maybe Text)
cvrDescription = lens _cvrDescription (\ s a -> s{_cvrDescription = a})

instance FromXML ClientVPNRoute where
        parseXML x
          = ClientVPNRoute' <$>
              (x .@? "status") <*> (x .@? "origin") <*>
                (x .@? "clientVpnEndpointId")
                <*> (x .@? "targetSubnet")
                <*> (x .@? "destinationCidr")
                <*> (x .@? "type")
                <*> (x .@? "description")

instance Hashable ClientVPNRoute where

instance NFData ClientVPNRoute where

-- | Describes the state of a Client VPN endpoint route.
--
--
--
-- /See:/ 'clientVPNRouteStatus' smart constructor.
data ClientVPNRouteStatus = ClientVPNRouteStatus'
  { _cvrsCode    :: !(Maybe ClientVPNRouteStatusCode)
  , _cvrsMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ClientVPNRouteStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvrsCode' - The state of the Client VPN endpoint route.
--
-- * 'cvrsMessage' - A message about the status of the Client VPN endpoint route, if applicable.
clientVPNRouteStatus
    :: ClientVPNRouteStatus
clientVPNRouteStatus =
  ClientVPNRouteStatus' {_cvrsCode = Nothing, _cvrsMessage = Nothing}


-- | The state of the Client VPN endpoint route.
cvrsCode :: Lens' ClientVPNRouteStatus (Maybe ClientVPNRouteStatusCode)
cvrsCode = lens _cvrsCode (\ s a -> s{_cvrsCode = a})

-- | A message about the status of the Client VPN endpoint route, if applicable.
cvrsMessage :: Lens' ClientVPNRouteStatus (Maybe Text)
cvrsMessage = lens _cvrsMessage (\ s a -> s{_cvrsMessage = a})

instance FromXML ClientVPNRouteStatus where
        parseXML x
          = ClientVPNRouteStatus' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable ClientVPNRouteStatus where

instance NFData ClientVPNRouteStatus where

-- | Describes address usage for a customer-owned address pool.
--
--
--
-- /See:/ 'coipAddressUsage' smart constructor.
data CoipAddressUsage = CoipAddressUsage'
  { _cauAllocationId :: !(Maybe Text)
  , _cauAWSAccountId :: !(Maybe Text)
  , _cauCoIP         :: !(Maybe Text)
  , _cauAWSService   :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CoipAddressUsage' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cauAllocationId' - The allocation ID of the address.
--
-- * 'cauAWSAccountId' - The AWS account ID.
--
-- * 'cauCoIP' - The customer-owned IP address.
--
-- * 'cauAWSService' - The AWS service.
coipAddressUsage
    :: CoipAddressUsage
coipAddressUsage =
  CoipAddressUsage'
    { _cauAllocationId = Nothing
    , _cauAWSAccountId = Nothing
    , _cauCoIP = Nothing
    , _cauAWSService = Nothing
    }


-- | The allocation ID of the address.
cauAllocationId :: Lens' CoipAddressUsage (Maybe Text)
cauAllocationId = lens _cauAllocationId (\ s a -> s{_cauAllocationId = a})

-- | The AWS account ID.
cauAWSAccountId :: Lens' CoipAddressUsage (Maybe Text)
cauAWSAccountId = lens _cauAWSAccountId (\ s a -> s{_cauAWSAccountId = a})

-- | The customer-owned IP address.
cauCoIP :: Lens' CoipAddressUsage (Maybe Text)
cauCoIP = lens _cauCoIP (\ s a -> s{_cauCoIP = a})

-- | The AWS service.
cauAWSService :: Lens' CoipAddressUsage (Maybe Text)
cauAWSService = lens _cauAWSService (\ s a -> s{_cauAWSService = a})

instance FromXML CoipAddressUsage where
        parseXML x
          = CoipAddressUsage' <$>
              (x .@? "allocationId") <*> (x .@? "awsAccountId") <*>
                (x .@? "coIp")
                <*> (x .@? "awsService")

instance Hashable CoipAddressUsage where

instance NFData CoipAddressUsage where

-- | Describes a customer-owned address pool.
--
--
--
-- /See:/ 'coipPool' smart constructor.
data CoipPool = CoipPool'
  { _cpPoolId                   :: !(Maybe Text)
  , _cpLocalGatewayRouteTableId :: !(Maybe Text)
  , _cpPoolCidrs                :: !(Maybe [Text])
  , _cpTags                     :: !(Maybe [Tag])
  , _cpPoolARN                  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CoipPool' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cpPoolId' - The ID of the address pool.
--
-- * 'cpLocalGatewayRouteTableId' - The ID of the local gateway route table.
--
-- * 'cpPoolCidrs' - The address ranges of the address pool.
--
-- * 'cpTags' - The tags.
--
-- * 'cpPoolARN' - The ARN of the address pool.
coipPool
    :: CoipPool
coipPool =
  CoipPool'
    { _cpPoolId = Nothing
    , _cpLocalGatewayRouteTableId = Nothing
    , _cpPoolCidrs = Nothing
    , _cpTags = Nothing
    , _cpPoolARN = Nothing
    }


-- | The ID of the address pool.
cpPoolId :: Lens' CoipPool (Maybe Text)
cpPoolId = lens _cpPoolId (\ s a -> s{_cpPoolId = a})

-- | The ID of the local gateway route table.
cpLocalGatewayRouteTableId :: Lens' CoipPool (Maybe Text)
cpLocalGatewayRouteTableId = lens _cpLocalGatewayRouteTableId (\ s a -> s{_cpLocalGatewayRouteTableId = a})

-- | The address ranges of the address pool.
cpPoolCidrs :: Lens' CoipPool [Text]
cpPoolCidrs = lens _cpPoolCidrs (\ s a -> s{_cpPoolCidrs = a}) . _Default . _Coerce

-- | The tags.
cpTags :: Lens' CoipPool [Tag]
cpTags = lens _cpTags (\ s a -> s{_cpTags = a}) . _Default . _Coerce

-- | The ARN of the address pool.
cpPoolARN :: Lens' CoipPool (Maybe Text)
cpPoolARN = lens _cpPoolARN (\ s a -> s{_cpPoolARN = a})

instance FromXML CoipPool where
        parseXML x
          = CoipPool' <$>
              (x .@? "poolId") <*>
                (x .@? "localGatewayRouteTableId")
                <*>
                (x .@? "poolCidrSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "poolArn")

instance Hashable CoipPool where

instance NFData CoipPool where

-- | Describes the client connection logging options for the Client VPN endpoint.
--
--
--
-- /See:/ 'connectionLogOptions' smart constructor.
data ConnectionLogOptions = ConnectionLogOptions'
  { _cloEnabled             :: !(Maybe Bool)
  , _cloCloudwatchLogStream :: !(Maybe Text)
  , _cloCloudwatchLogGroup  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ConnectionLogOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cloEnabled' - Indicates whether connection logging is enabled.
--
-- * 'cloCloudwatchLogStream' - The name of the CloudWatch Logs log stream to which the connection data is published.
--
-- * 'cloCloudwatchLogGroup' - The name of the CloudWatch Logs log group. Required if connection logging is enabled.
connectionLogOptions
    :: ConnectionLogOptions
connectionLogOptions =
  ConnectionLogOptions'
    { _cloEnabled = Nothing
    , _cloCloudwatchLogStream = Nothing
    , _cloCloudwatchLogGroup = Nothing
    }


-- | Indicates whether connection logging is enabled.
cloEnabled :: Lens' ConnectionLogOptions (Maybe Bool)
cloEnabled = lens _cloEnabled (\ s a -> s{_cloEnabled = a})

-- | The name of the CloudWatch Logs log stream to which the connection data is published.
cloCloudwatchLogStream :: Lens' ConnectionLogOptions (Maybe Text)
cloCloudwatchLogStream = lens _cloCloudwatchLogStream (\ s a -> s{_cloCloudwatchLogStream = a})

-- | The name of the CloudWatch Logs log group. Required if connection logging is enabled.
cloCloudwatchLogGroup :: Lens' ConnectionLogOptions (Maybe Text)
cloCloudwatchLogGroup = lens _cloCloudwatchLogGroup (\ s a -> s{_cloCloudwatchLogGroup = a})

instance Hashable ConnectionLogOptions where

instance NFData ConnectionLogOptions where

instance ToQuery ConnectionLogOptions where
        toQuery ConnectionLogOptions'{..}
          = mconcat
              ["Enabled" =: _cloEnabled,
               "CloudwatchLogStream" =: _cloCloudwatchLogStream,
               "CloudwatchLogGroup" =: _cloCloudwatchLogGroup]

-- | Information about the client connection logging options for a Client VPN endpoint.
--
--
--
-- /See:/ 'connectionLogResponseOptions' smart constructor.
data ConnectionLogResponseOptions = ConnectionLogResponseOptions'
  { _clroEnabled             :: !(Maybe Bool)
  , _clroCloudwatchLogStream :: !(Maybe Text)
  , _clroCloudwatchLogGroup  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ConnectionLogResponseOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'clroEnabled' - Indicates whether client connection logging is enabled for the Client VPN endpoint.
--
-- * 'clroCloudwatchLogStream' - The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.
--
-- * 'clroCloudwatchLogGroup' - The name of the Amazon CloudWatch Logs log group to which connection logging data is published.
connectionLogResponseOptions
    :: ConnectionLogResponseOptions
connectionLogResponseOptions =
  ConnectionLogResponseOptions'
    { _clroEnabled = Nothing
    , _clroCloudwatchLogStream = Nothing
    , _clroCloudwatchLogGroup = Nothing
    }


-- | Indicates whether client connection logging is enabled for the Client VPN endpoint.
clroEnabled :: Lens' ConnectionLogResponseOptions (Maybe Bool)
clroEnabled = lens _clroEnabled (\ s a -> s{_clroEnabled = a})

-- | The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.
clroCloudwatchLogStream :: Lens' ConnectionLogResponseOptions (Maybe Text)
clroCloudwatchLogStream = lens _clroCloudwatchLogStream (\ s a -> s{_clroCloudwatchLogStream = a})

-- | The name of the Amazon CloudWatch Logs log group to which connection logging data is published.
clroCloudwatchLogGroup :: Lens' ConnectionLogResponseOptions (Maybe Text)
clroCloudwatchLogGroup = lens _clroCloudwatchLogGroup (\ s a -> s{_clroCloudwatchLogGroup = a})

instance FromXML ConnectionLogResponseOptions where
        parseXML x
          = ConnectionLogResponseOptions' <$>
              (x .@? "Enabled") <*> (x .@? "CloudwatchLogStream")
                <*> (x .@? "CloudwatchLogGroup")

instance Hashable ConnectionLogResponseOptions where

instance NFData ConnectionLogResponseOptions where

-- | Describes a connection notification for a VPC endpoint or VPC endpoint service.
--
--
--
-- /See:/ 'connectionNotification' smart constructor.
data ConnectionNotification = ConnectionNotification'
  { _cnConnectionNotificationState :: !(Maybe ConnectionNotificationState)
  , _cnConnectionNotificationType  :: !(Maybe ConnectionNotificationType)
  , _cnConnectionEvents            :: !(Maybe [Text])
  , _cnServiceId                   :: !(Maybe Text)
  , _cnVPCEndpointId               :: !(Maybe Text)
  , _cnConnectionNotificationId    :: !(Maybe Text)
  , _cnConnectionNotificationARN   :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ConnectionNotification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cnConnectionNotificationState' - The state of the notification.
--
-- * 'cnConnectionNotificationType' - The type of notification.
--
-- * 'cnConnectionEvents' - The events for the notification. Valid values are @Accept@ , @Connect@ , @Delete@ , and @Reject@ .
--
-- * 'cnServiceId' - The ID of the endpoint service.
--
-- * 'cnVPCEndpointId' - The ID of the VPC endpoint.
--
-- * 'cnConnectionNotificationId' - The ID of the notification.
--
-- * 'cnConnectionNotificationARN' - The ARN of the SNS topic for the notification.
connectionNotification
    :: ConnectionNotification
connectionNotification =
  ConnectionNotification'
    { _cnConnectionNotificationState = Nothing
    , _cnConnectionNotificationType = Nothing
    , _cnConnectionEvents = Nothing
    , _cnServiceId = Nothing
    , _cnVPCEndpointId = Nothing
    , _cnConnectionNotificationId = Nothing
    , _cnConnectionNotificationARN = Nothing
    }


-- | The state of the notification.
cnConnectionNotificationState :: Lens' ConnectionNotification (Maybe ConnectionNotificationState)
cnConnectionNotificationState = lens _cnConnectionNotificationState (\ s a -> s{_cnConnectionNotificationState = a})

-- | The type of notification.
cnConnectionNotificationType :: Lens' ConnectionNotification (Maybe ConnectionNotificationType)
cnConnectionNotificationType = lens _cnConnectionNotificationType (\ s a -> s{_cnConnectionNotificationType = a})

-- | The events for the notification. Valid values are @Accept@ , @Connect@ , @Delete@ , and @Reject@ .
cnConnectionEvents :: Lens' ConnectionNotification [Text]
cnConnectionEvents = lens _cnConnectionEvents (\ s a -> s{_cnConnectionEvents = a}) . _Default . _Coerce

-- | The ID of the endpoint service.
cnServiceId :: Lens' ConnectionNotification (Maybe Text)
cnServiceId = lens _cnServiceId (\ s a -> s{_cnServiceId = a})

-- | The ID of the VPC endpoint.
cnVPCEndpointId :: Lens' ConnectionNotification (Maybe Text)
cnVPCEndpointId = lens _cnVPCEndpointId (\ s a -> s{_cnVPCEndpointId = a})

-- | The ID of the notification.
cnConnectionNotificationId :: Lens' ConnectionNotification (Maybe Text)
cnConnectionNotificationId = lens _cnConnectionNotificationId (\ s a -> s{_cnConnectionNotificationId = a})

-- | The ARN of the SNS topic for the notification.
cnConnectionNotificationARN :: Lens' ConnectionNotification (Maybe Text)
cnConnectionNotificationARN = lens _cnConnectionNotificationARN (\ s a -> s{_cnConnectionNotificationARN = a})

instance FromXML ConnectionNotification where
        parseXML x
          = ConnectionNotification' <$>
              (x .@? "connectionNotificationState") <*>
                (x .@? "connectionNotificationType")
                <*>
                (x .@? "connectionEvents" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "serviceId")
                <*> (x .@? "vpcEndpointId")
                <*> (x .@? "connectionNotificationId")
                <*> (x .@? "connectionNotificationArn")

instance Hashable ConnectionNotification where

instance NFData ConnectionNotification where

-- | Describes a conversion task.
--
--
--
-- /See:/ 'conversionTask' smart constructor.
data ConversionTask = ConversionTask'
  { _ctImportInstance   :: !(Maybe ImportInstanceTaskDetails)
  , _ctState            :: !(Maybe ConversionTaskState)
  , _ctStatusMessage    :: !(Maybe Text)
  , _ctImportVolume     :: !(Maybe ImportVolumeTaskDetails)
  , _ctConversionTaskId :: !(Maybe Text)
  , _ctExpirationTime   :: !(Maybe Text)
  , _ctTags             :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ConversionTask' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ctImportInstance' - If the task is for importing an instance, this contains information about the import instance task.
--
-- * 'ctState' - The state of the conversion task.
--
-- * 'ctStatusMessage' - The status message related to the conversion task.
--
-- * 'ctImportVolume' - If the task is for importing a volume, this contains information about the import volume task.
--
-- * 'ctConversionTaskId' - The ID of the conversion task.
--
-- * 'ctExpirationTime' - The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.
--
-- * 'ctTags' - Any tags assigned to the task.
conversionTask
    :: ConversionTask
conversionTask =
  ConversionTask'
    { _ctImportInstance = Nothing
    , _ctState = Nothing
    , _ctStatusMessage = Nothing
    , _ctImportVolume = Nothing
    , _ctConversionTaskId = Nothing
    , _ctExpirationTime = Nothing
    , _ctTags = Nothing
    }


-- | If the task is for importing an instance, this contains information about the import instance task.
ctImportInstance :: Lens' ConversionTask (Maybe ImportInstanceTaskDetails)
ctImportInstance = lens _ctImportInstance (\ s a -> s{_ctImportInstance = a})

-- | The state of the conversion task.
ctState :: Lens' ConversionTask (Maybe ConversionTaskState)
ctState = lens _ctState (\ s a -> s{_ctState = a})

-- | The status message related to the conversion task.
ctStatusMessage :: Lens' ConversionTask (Maybe Text)
ctStatusMessage = lens _ctStatusMessage (\ s a -> s{_ctStatusMessage = a})

-- | If the task is for importing a volume, this contains information about the import volume task.
ctImportVolume :: Lens' ConversionTask (Maybe ImportVolumeTaskDetails)
ctImportVolume = lens _ctImportVolume (\ s a -> s{_ctImportVolume = a})

-- | The ID of the conversion task.
ctConversionTaskId :: Lens' ConversionTask (Maybe Text)
ctConversionTaskId = lens _ctConversionTaskId (\ s a -> s{_ctConversionTaskId = a})

-- | The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.
ctExpirationTime :: Lens' ConversionTask (Maybe Text)
ctExpirationTime = lens _ctExpirationTime (\ s a -> s{_ctExpirationTime = a})

-- | Any tags assigned to the task.
ctTags :: Lens' ConversionTask [Tag]
ctTags = lens _ctTags (\ s a -> s{_ctTags = a}) . _Default . _Coerce

instance FromXML ConversionTask where
        parseXML x
          = ConversionTask' <$>
              (x .@? "importInstance") <*> (x .@? "state") <*>
                (x .@? "statusMessage")
                <*> (x .@? "importVolume")
                <*> (x .@? "conversionTaskId")
                <*> (x .@? "expirationTime")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ConversionTask where

instance NFData ConversionTask where

-- | Describes the instances that could not be launched by the fleet.
--
--
--
-- /See:/ 'createFleetError' smart constructor.
data CreateFleetError = CreateFleetError'
  { _cfeLifecycle :: !(Maybe InstanceLifecycle)
  , _cfeLaunchTemplateAndOverrides :: !(Maybe LaunchTemplateAndOverridesResponse)
  , _cfeErrorCode :: !(Maybe Text)
  , _cfeErrorMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CreateFleetError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cfeLifecycle' - Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
--
-- * 'cfeLaunchTemplateAndOverrides' - The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
--
-- * 'cfeErrorCode' - The error code that indicates why the instance could not be launched. For more information about error codes, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
--
-- * 'cfeErrorMessage' - The error message that describes why the instance could not be launched. For more information about error messages, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
createFleetError
    :: CreateFleetError
createFleetError =
  CreateFleetError'
    { _cfeLifecycle = Nothing
    , _cfeLaunchTemplateAndOverrides = Nothing
    , _cfeErrorCode = Nothing
    , _cfeErrorMessage = Nothing
    }


-- | Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
cfeLifecycle :: Lens' CreateFleetError (Maybe InstanceLifecycle)
cfeLifecycle = lens _cfeLifecycle (\ s a -> s{_cfeLifecycle = a})

-- | The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
cfeLaunchTemplateAndOverrides :: Lens' CreateFleetError (Maybe LaunchTemplateAndOverridesResponse)
cfeLaunchTemplateAndOverrides = lens _cfeLaunchTemplateAndOverrides (\ s a -> s{_cfeLaunchTemplateAndOverrides = a})

-- | The error code that indicates why the instance could not be launched. For more information about error codes, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
cfeErrorCode :: Lens' CreateFleetError (Maybe Text)
cfeErrorCode = lens _cfeErrorCode (\ s a -> s{_cfeErrorCode = a})

-- | The error message that describes why the instance could not be launched. For more information about error messages, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
cfeErrorMessage :: Lens' CreateFleetError (Maybe Text)
cfeErrorMessage = lens _cfeErrorMessage (\ s a -> s{_cfeErrorMessage = a})

instance FromXML CreateFleetError where
        parseXML x
          = CreateFleetError' <$>
              (x .@? "lifecycle") <*>
                (x .@? "launchTemplateAndOverrides")
                <*> (x .@? "errorCode")
                <*> (x .@? "errorMessage")

instance Hashable CreateFleetError where

instance NFData CreateFleetError where

-- | Describes the instances that were launched by the fleet.
--
--
--
-- /See:/ 'createFleetInstance' smart constructor.
data CreateFleetInstance = CreateFleetInstance'
  { _cfiPlatform :: !(Maybe PlatformValues)
  , _cfiLifecycle :: !(Maybe InstanceLifecycle)
  , _cfiLaunchTemplateAndOverrides :: !(Maybe LaunchTemplateAndOverridesResponse)
  , _cfiInstanceType :: !(Maybe InstanceType)
  , _cfiInstanceIds :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CreateFleetInstance' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cfiPlatform' - The value is @Windows@ for Windows instances. Otherwise, the value is blank.
--
-- * 'cfiLifecycle' - Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
--
-- * 'cfiLaunchTemplateAndOverrides' - The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
--
-- * 'cfiInstanceType' - The instance type.
--
-- * 'cfiInstanceIds' - The IDs of the instances.
createFleetInstance
    :: CreateFleetInstance
createFleetInstance =
  CreateFleetInstance'
    { _cfiPlatform = Nothing
    , _cfiLifecycle = Nothing
    , _cfiLaunchTemplateAndOverrides = Nothing
    , _cfiInstanceType = Nothing
    , _cfiInstanceIds = Nothing
    }


-- | The value is @Windows@ for Windows instances. Otherwise, the value is blank.
cfiPlatform :: Lens' CreateFleetInstance (Maybe PlatformValues)
cfiPlatform = lens _cfiPlatform (\ s a -> s{_cfiPlatform = a})

-- | Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
cfiLifecycle :: Lens' CreateFleetInstance (Maybe InstanceLifecycle)
cfiLifecycle = lens _cfiLifecycle (\ s a -> s{_cfiLifecycle = a})

-- | The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
cfiLaunchTemplateAndOverrides :: Lens' CreateFleetInstance (Maybe LaunchTemplateAndOverridesResponse)
cfiLaunchTemplateAndOverrides = lens _cfiLaunchTemplateAndOverrides (\ s a -> s{_cfiLaunchTemplateAndOverrides = a})

-- | The instance type.
cfiInstanceType :: Lens' CreateFleetInstance (Maybe InstanceType)
cfiInstanceType = lens _cfiInstanceType (\ s a -> s{_cfiInstanceType = a})

-- | The IDs of the instances.
cfiInstanceIds :: Lens' CreateFleetInstance [Text]
cfiInstanceIds = lens _cfiInstanceIds (\ s a -> s{_cfiInstanceIds = a}) . _Default . _Coerce

instance FromXML CreateFleetInstance where
        parseXML x
          = CreateFleetInstance' <$>
              (x .@? "platform") <*> (x .@? "lifecycle") <*>
                (x .@? "launchTemplateAndOverrides")
                <*> (x .@? "instanceType")
                <*>
                (x .@? "instanceIds" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable CreateFleetInstance where

instance NFData CreateFleetInstance where

-- | The options for a Connect attachment.
--
--
--
-- /See:/ 'createTransitGatewayConnectRequestOptions' smart constructor.
newtype CreateTransitGatewayConnectRequestOptions = CreateTransitGatewayConnectRequestOptions'
  { _ctgcroProtocol :: ProtocolValue
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CreateTransitGatewayConnectRequestOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ctgcroProtocol' - The tunnel protocol.
createTransitGatewayConnectRequestOptions
    :: ProtocolValue -- ^ 'ctgcroProtocol'
    -> CreateTransitGatewayConnectRequestOptions
createTransitGatewayConnectRequestOptions pProtocol_ =
  CreateTransitGatewayConnectRequestOptions' {_ctgcroProtocol = pProtocol_}


-- | The tunnel protocol.
ctgcroProtocol :: Lens' CreateTransitGatewayConnectRequestOptions ProtocolValue
ctgcroProtocol = lens _ctgcroProtocol (\ s a -> s{_ctgcroProtocol = a})

instance Hashable
           CreateTransitGatewayConnectRequestOptions
         where

instance NFData
           CreateTransitGatewayConnectRequestOptions
         where

instance ToQuery
           CreateTransitGatewayConnectRequestOptions
         where
        toQuery
          CreateTransitGatewayConnectRequestOptions'{..}
          = mconcat ["Protocol" =: _ctgcroProtocol]

-- | The options for the transit gateway multicast domain.
--
--
--
-- /See:/ 'createTransitGatewayMulticastDomainRequestOptions' smart constructor.
data CreateTransitGatewayMulticastDomainRequestOptions = CreateTransitGatewayMulticastDomainRequestOptions'
  { _ctgmdroAutoAcceptSharedAssociations :: !(Maybe AutoAcceptSharedAssociationsValue)
  , _ctgmdroIgmpv2Support :: !(Maybe Igmpv2SupportValue)
  , _ctgmdroStaticSourcesSupport :: !(Maybe StaticSourcesSupportValue)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CreateTransitGatewayMulticastDomainRequestOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ctgmdroAutoAcceptSharedAssociations' - Indicates whether to automatically accept cross-account subnet associations that are associated with the transit gateway multicast domain.
--
-- * 'ctgmdroIgmpv2Support' - Specify whether to enable Internet Group Management Protocol (IGMP) version 2 for the transit gateway multicast domain.
--
-- * 'ctgmdroStaticSourcesSupport' - Specify whether to enable support for statically configuring multicast group sources for a domain.
createTransitGatewayMulticastDomainRequestOptions
    :: CreateTransitGatewayMulticastDomainRequestOptions
createTransitGatewayMulticastDomainRequestOptions =
  CreateTransitGatewayMulticastDomainRequestOptions'
    { _ctgmdroAutoAcceptSharedAssociations = Nothing
    , _ctgmdroIgmpv2Support = Nothing
    , _ctgmdroStaticSourcesSupport = Nothing
    }


-- | Indicates whether to automatically accept cross-account subnet associations that are associated with the transit gateway multicast domain.
ctgmdroAutoAcceptSharedAssociations :: Lens' CreateTransitGatewayMulticastDomainRequestOptions (Maybe AutoAcceptSharedAssociationsValue)
ctgmdroAutoAcceptSharedAssociations = lens _ctgmdroAutoAcceptSharedAssociations (\ s a -> s{_ctgmdroAutoAcceptSharedAssociations = a})

-- | Specify whether to enable Internet Group Management Protocol (IGMP) version 2 for the transit gateway multicast domain.
ctgmdroIgmpv2Support :: Lens' CreateTransitGatewayMulticastDomainRequestOptions (Maybe Igmpv2SupportValue)
ctgmdroIgmpv2Support = lens _ctgmdroIgmpv2Support (\ s a -> s{_ctgmdroIgmpv2Support = a})

-- | Specify whether to enable support for statically configuring multicast group sources for a domain.
ctgmdroStaticSourcesSupport :: Lens' CreateTransitGatewayMulticastDomainRequestOptions (Maybe StaticSourcesSupportValue)
ctgmdroStaticSourcesSupport = lens _ctgmdroStaticSourcesSupport (\ s a -> s{_ctgmdroStaticSourcesSupport = a})

instance Hashable
           CreateTransitGatewayMulticastDomainRequestOptions
         where

instance NFData
           CreateTransitGatewayMulticastDomainRequestOptions
         where

instance ToQuery
           CreateTransitGatewayMulticastDomainRequestOptions
         where
        toQuery
          CreateTransitGatewayMulticastDomainRequestOptions'{..}
          = mconcat
              ["AutoAcceptSharedAssociations" =:
                 _ctgmdroAutoAcceptSharedAssociations,
               "Igmpv2Support" =: _ctgmdroIgmpv2Support,
               "StaticSourcesSupport" =:
                 _ctgmdroStaticSourcesSupport]

-- | Describes the options for a VPC attachment.
--
--
--
-- /See:/ 'createTransitGatewayVPCAttachmentRequestOptions' smart constructor.
data CreateTransitGatewayVPCAttachmentRequestOptions = CreateTransitGatewayVPCAttachmentRequestOptions'
  { _ctgvaroIPv6Support          :: !(Maybe IPv6SupportValue)
  , _ctgvaroApplianceModeSupport :: !(Maybe ApplianceModeSupportValue)
  , _ctgvaroDNSSupport           :: !(Maybe DNSSupportValue)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CreateTransitGatewayVPCAttachmentRequestOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ctgvaroIPv6Support' - Enable or disable IPv6 support. The default is @disable@ .
--
-- * 'ctgvaroApplianceModeSupport' - Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is @disable@ .
--
-- * 'ctgvaroDNSSupport' - Enable or disable DNS support. The default is @enable@ .
createTransitGatewayVPCAttachmentRequestOptions
    :: CreateTransitGatewayVPCAttachmentRequestOptions
createTransitGatewayVPCAttachmentRequestOptions =
  CreateTransitGatewayVPCAttachmentRequestOptions'
    { _ctgvaroIPv6Support = Nothing
    , _ctgvaroApplianceModeSupport = Nothing
    , _ctgvaroDNSSupport = Nothing
    }


-- | Enable or disable IPv6 support. The default is @disable@ .
ctgvaroIPv6Support :: Lens' CreateTransitGatewayVPCAttachmentRequestOptions (Maybe IPv6SupportValue)
ctgvaroIPv6Support = lens _ctgvaroIPv6Support (\ s a -> s{_ctgvaroIPv6Support = a})

-- | Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is @disable@ .
ctgvaroApplianceModeSupport :: Lens' CreateTransitGatewayVPCAttachmentRequestOptions (Maybe ApplianceModeSupportValue)
ctgvaroApplianceModeSupport = lens _ctgvaroApplianceModeSupport (\ s a -> s{_ctgvaroApplianceModeSupport = a})

-- | Enable or disable DNS support. The default is @enable@ .
ctgvaroDNSSupport :: Lens' CreateTransitGatewayVPCAttachmentRequestOptions (Maybe DNSSupportValue)
ctgvaroDNSSupport = lens _ctgvaroDNSSupport (\ s a -> s{_ctgvaroDNSSupport = a})

instance Hashable
           CreateTransitGatewayVPCAttachmentRequestOptions
         where

instance NFData
           CreateTransitGatewayVPCAttachmentRequestOptions
         where

instance ToQuery
           CreateTransitGatewayVPCAttachmentRequestOptions
         where
        toQuery
          CreateTransitGatewayVPCAttachmentRequestOptions'{..}
          = mconcat
              ["Ipv6Support" =: _ctgvaroIPv6Support,
               "ApplianceModeSupport" =:
                 _ctgvaroApplianceModeSupport,
               "DnsSupport" =: _ctgvaroDNSSupport]

-- | Describes the user or group to be added or removed from the list of create volume permissions for a volume.
--
--
--
-- /See:/ 'createVolumePermission' smart constructor.
data CreateVolumePermission = CreateVolumePermission'
  { _cvpGroup  :: !(Maybe PermissionGroup)
  , _cvpUserId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CreateVolumePermission' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvpGroup' - The group to be added or removed. The possible value is @all@ .
--
-- * 'cvpUserId' - The AWS account ID to be added or removed.
createVolumePermission
    :: CreateVolumePermission
createVolumePermission =
  CreateVolumePermission' {_cvpGroup = Nothing, _cvpUserId = Nothing}


-- | The group to be added or removed. The possible value is @all@ .
cvpGroup :: Lens' CreateVolumePermission (Maybe PermissionGroup)
cvpGroup = lens _cvpGroup (\ s a -> s{_cvpGroup = a})

-- | The AWS account ID to be added or removed.
cvpUserId :: Lens' CreateVolumePermission (Maybe Text)
cvpUserId = lens _cvpUserId (\ s a -> s{_cvpUserId = a})

instance FromXML CreateVolumePermission where
        parseXML x
          = CreateVolumePermission' <$>
              (x .@? "group") <*> (x .@? "userId")

instance Hashable CreateVolumePermission where

instance NFData CreateVolumePermission where

instance ToQuery CreateVolumePermission where
        toQuery CreateVolumePermission'{..}
          = mconcat
              ["Group" =: _cvpGroup, "UserId" =: _cvpUserId]

-- | Describes modifications to the list of create volume permissions for a volume.
--
--
--
-- /See:/ 'createVolumePermissionModifications' smart constructor.
data CreateVolumePermissionModifications = CreateVolumePermissionModifications'
  { _cvpmRemove :: !(Maybe [CreateVolumePermission])
  , _cvpmAdd    :: !(Maybe [CreateVolumePermission])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CreateVolumePermissionModifications' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cvpmRemove' - Removes the specified AWS account ID or group from the list.
--
-- * 'cvpmAdd' - Adds the specified AWS account ID or group to the list.
createVolumePermissionModifications
    :: CreateVolumePermissionModifications
createVolumePermissionModifications =
  CreateVolumePermissionModifications'
    {_cvpmRemove = Nothing, _cvpmAdd = Nothing}


-- | Removes the specified AWS account ID or group from the list.
cvpmRemove :: Lens' CreateVolumePermissionModifications [CreateVolumePermission]
cvpmRemove = lens _cvpmRemove (\ s a -> s{_cvpmRemove = a}) . _Default . _Coerce

-- | Adds the specified AWS account ID or group to the list.
cvpmAdd :: Lens' CreateVolumePermissionModifications [CreateVolumePermission]
cvpmAdd = lens _cvpmAdd (\ s a -> s{_cvpmAdd = a}) . _Default . _Coerce

instance Hashable CreateVolumePermissionModifications
         where

instance NFData CreateVolumePermissionModifications
         where

instance ToQuery CreateVolumePermissionModifications
         where
        toQuery CreateVolumePermissionModifications'{..}
          = mconcat
              [toQuery (toQueryList "Remove" <$> _cvpmRemove),
               toQuery (toQueryList "Add" <$> _cvpmAdd)]

-- | Describes the credit option for CPU usage of a T2, T3, or T3a instance.
--
--
--
-- /See:/ 'creditSpecification' smart constructor.
newtype CreditSpecification = CreditSpecification'
  { _csCPUCredits :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CreditSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'csCPUCredits' - The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are @standard@ and @unlimited@ .
creditSpecification
    :: CreditSpecification
creditSpecification = CreditSpecification' {_csCPUCredits = Nothing}


-- | The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are @standard@ and @unlimited@ .
csCPUCredits :: Lens' CreditSpecification (Maybe Text)
csCPUCredits = lens _csCPUCredits (\ s a -> s{_csCPUCredits = a})

instance FromXML CreditSpecification where
        parseXML x
          = CreditSpecification' <$> (x .@? "cpuCredits")

instance Hashable CreditSpecification where

instance NFData CreditSpecification where

-- | The credit option for CPU usage of a T2, T3, or T3a instance.
--
--
--
-- /See:/ 'creditSpecificationRequest' smart constructor.
newtype CreditSpecificationRequest = CreditSpecificationRequest'
  { _csrCPUCredits :: Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CreditSpecificationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'csrCPUCredits' - The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are @standard@ and @unlimited@ .
creditSpecificationRequest
    :: Text -- ^ 'csrCPUCredits'
    -> CreditSpecificationRequest
creditSpecificationRequest pCPUCredits_ =
  CreditSpecificationRequest' {_csrCPUCredits = pCPUCredits_}


-- | The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are @standard@ and @unlimited@ .
csrCPUCredits :: Lens' CreditSpecificationRequest Text
csrCPUCredits = lens _csrCPUCredits (\ s a -> s{_csrCPUCredits = a})

instance Hashable CreditSpecificationRequest where

instance NFData CreditSpecificationRequest where

instance ToQuery CreditSpecificationRequest where
        toQuery CreditSpecificationRequest'{..}
          = mconcat ["CpuCredits" =: _csrCPUCredits]

-- | Describes a customer gateway.
--
--
--
-- /See:/ 'customerGateway' smart constructor.
data CustomerGateway = CustomerGateway'
  { _cCertificateARN    :: !(Maybe Text)
  , _cDeviceName        :: !(Maybe Text)
  , _cTags              :: !(Maybe [Tag])
  , _cBGPASN            :: !Text
  , _cCustomerGatewayId :: !Text
  , _cIPAddress         :: !Text
  , _cState             :: !Text
  , _cType              :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'CustomerGateway' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'cCertificateARN' - The Amazon Resource Name (ARN) for the customer gateway certificate.
--
-- * 'cDeviceName' - The name of customer gateway device.
--
-- * 'cTags' - Any tags assigned to the customer gateway.
--
-- * 'cBGPASN' - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
--
-- * 'cCustomerGatewayId' - The ID of the customer gateway.
--
-- * 'cIPAddress' - The Internet-routable IP address of the customer gateway's outside interface.
--
-- * 'cState' - The current state of the customer gateway (@pending | available | deleting | deleted@ ).
--
-- * 'cType' - The type of VPN connection the customer gateway supports (@ipsec.1@ ).
customerGateway
    :: Text -- ^ 'cBGPASN'
    -> Text -- ^ 'cCustomerGatewayId'
    -> Text -- ^ 'cIPAddress'
    -> Text -- ^ 'cState'
    -> Text -- ^ 'cType'
    -> CustomerGateway
customerGateway pBGPASN_ pCustomerGatewayId_ pIPAddress_ pState_ pType_ =
  CustomerGateway'
    { _cCertificateARN = Nothing
    , _cDeviceName = Nothing
    , _cTags = Nothing
    , _cBGPASN = pBGPASN_
    , _cCustomerGatewayId = pCustomerGatewayId_
    , _cIPAddress = pIPAddress_
    , _cState = pState_
    , _cType = pType_
    }


-- | The Amazon Resource Name (ARN) for the customer gateway certificate.
cCertificateARN :: Lens' CustomerGateway (Maybe Text)
cCertificateARN = lens _cCertificateARN (\ s a -> s{_cCertificateARN = a})

-- | The name of customer gateway device.
cDeviceName :: Lens' CustomerGateway (Maybe Text)
cDeviceName = lens _cDeviceName (\ s a -> s{_cDeviceName = a})

-- | Any tags assigned to the customer gateway.
cTags :: Lens' CustomerGateway [Tag]
cTags = lens _cTags (\ s a -> s{_cTags = a}) . _Default . _Coerce

-- | The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
cBGPASN :: Lens' CustomerGateway Text
cBGPASN = lens _cBGPASN (\ s a -> s{_cBGPASN = a})

-- | The ID of the customer gateway.
cCustomerGatewayId :: Lens' CustomerGateway Text
cCustomerGatewayId = lens _cCustomerGatewayId (\ s a -> s{_cCustomerGatewayId = a})

-- | The Internet-routable IP address of the customer gateway's outside interface.
cIPAddress :: Lens' CustomerGateway Text
cIPAddress = lens _cIPAddress (\ s a -> s{_cIPAddress = a})

-- | The current state of the customer gateway (@pending | available | deleting | deleted@ ).
cState :: Lens' CustomerGateway Text
cState = lens _cState (\ s a -> s{_cState = a})

-- | The type of VPN connection the customer gateway supports (@ipsec.1@ ).
cType :: Lens' CustomerGateway Text
cType = lens _cType (\ s a -> s{_cType = a})

instance FromXML CustomerGateway where
        parseXML x
          = CustomerGateway' <$>
              (x .@? "certificateArn") <*> (x .@? "deviceName") <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@ "bgpAsn")
                <*> (x .@ "customerGatewayId")
                <*> (x .@ "ipAddress")
                <*> (x .@ "state")
                <*> (x .@ "type")

instance Hashable CustomerGateway where

instance NFData CustomerGateway where

-- | Describes a DHCP configuration option.
--
--
--
-- /See:/ 'dhcpConfiguration' smart constructor.
data DHCPConfiguration = DHCPConfiguration'
  { _dcValues :: !(Maybe [AttributeValue])
  , _dcKey    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DHCPConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dcValues' - One or more values for the DHCP option.
--
-- * 'dcKey' - The name of a DHCP option.
dhcpConfiguration
    :: DHCPConfiguration
dhcpConfiguration = DHCPConfiguration' {_dcValues = Nothing, _dcKey = Nothing}


-- | One or more values for the DHCP option.
dcValues :: Lens' DHCPConfiguration [AttributeValue]
dcValues = lens _dcValues (\ s a -> s{_dcValues = a}) . _Default . _Coerce

-- | The name of a DHCP option.
dcKey :: Lens' DHCPConfiguration (Maybe Text)
dcKey = lens _dcKey (\ s a -> s{_dcKey = a})

instance FromXML DHCPConfiguration where
        parseXML x
          = DHCPConfiguration' <$>
              (x .@? "valueSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "key")

instance Hashable DHCPConfiguration where

instance NFData DHCPConfiguration where

-- | Describes a set of DHCP options.
--
--
--
-- /See:/ 'dhcpOptions' smart constructor.
data DHCPOptions = DHCPOptions'
  { _doDHCPConfigurations :: !(Maybe [DHCPConfiguration])
  , _doOwnerId            :: !(Maybe Text)
  , _doDHCPOptionsId      :: !(Maybe Text)
  , _doTags               :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DHCPOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'doDHCPConfigurations' - One or more DHCP options in the set.
--
-- * 'doOwnerId' - The ID of the AWS account that owns the DHCP options set.
--
-- * 'doDHCPOptionsId' - The ID of the set of DHCP options.
--
-- * 'doTags' - Any tags assigned to the DHCP options set.
dhcpOptions
    :: DHCPOptions
dhcpOptions =
  DHCPOptions'
    { _doDHCPConfigurations = Nothing
    , _doOwnerId = Nothing
    , _doDHCPOptionsId = Nothing
    , _doTags = Nothing
    }


-- | One or more DHCP options in the set.
doDHCPConfigurations :: Lens' DHCPOptions [DHCPConfiguration]
doDHCPConfigurations = lens _doDHCPConfigurations (\ s a -> s{_doDHCPConfigurations = a}) . _Default . _Coerce

-- | The ID of the AWS account that owns the DHCP options set.
doOwnerId :: Lens' DHCPOptions (Maybe Text)
doOwnerId = lens _doOwnerId (\ s a -> s{_doOwnerId = a})

-- | The ID of the set of DHCP options.
doDHCPOptionsId :: Lens' DHCPOptions (Maybe Text)
doDHCPOptionsId = lens _doDHCPOptionsId (\ s a -> s{_doDHCPOptionsId = a})

-- | Any tags assigned to the DHCP options set.
doTags :: Lens' DHCPOptions [Tag]
doTags = lens _doTags (\ s a -> s{_doTags = a}) . _Default . _Coerce

instance FromXML DHCPOptions where
        parseXML x
          = DHCPOptions' <$>
              (x .@? "dhcpConfigurationSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "ownerId")
                <*> (x .@? "dhcpOptionsId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable DHCPOptions where

instance NFData DHCPOptions where

-- | Describes a DNS entry.
--
--
--
-- /See:/ 'dnsEntry' smart constructor.
data DNSEntry = DNSEntry'
  { _deHostedZoneId :: !(Maybe Text)
  , _deDNSName      :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DNSEntry' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'deHostedZoneId' - The ID of the private hosted zone.
--
-- * 'deDNSName' - The DNS name.
dnsEntry
    :: DNSEntry
dnsEntry = DNSEntry' {_deHostedZoneId = Nothing, _deDNSName = Nothing}


-- | The ID of the private hosted zone.
deHostedZoneId :: Lens' DNSEntry (Maybe Text)
deHostedZoneId = lens _deHostedZoneId (\ s a -> s{_deHostedZoneId = a})

-- | The DNS name.
deDNSName :: Lens' DNSEntry (Maybe Text)
deDNSName = lens _deDNSName (\ s a -> s{_deDNSName = a})

instance FromXML DNSEntry where
        parseXML x
          = DNSEntry' <$>
              (x .@? "hostedZoneId") <*> (x .@? "dnsName")

instance Hashable DNSEntry where

instance NFData DNSEntry where

-- | Information about the DNS server to be used.
--
--
--
-- /See:/ 'dnsServersOptionsModifyStructure' smart constructor.
data DNSServersOptionsModifyStructure = DNSServersOptionsModifyStructure'
  { _dsomsEnabled          :: !(Maybe Bool)
  , _dsomsCustomDNSServers :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DNSServersOptionsModifyStructure' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dsomsEnabled' - Indicates whether DNS servers should be used. Specify @False@ to delete the existing DNS servers.
--
-- * 'dsomsCustomDNSServers' - The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values overwrite the existing values.
dnsServersOptionsModifyStructure
    :: DNSServersOptionsModifyStructure
dnsServersOptionsModifyStructure =
  DNSServersOptionsModifyStructure'
    {_dsomsEnabled = Nothing, _dsomsCustomDNSServers = Nothing}


-- | Indicates whether DNS servers should be used. Specify @False@ to delete the existing DNS servers.
dsomsEnabled :: Lens' DNSServersOptionsModifyStructure (Maybe Bool)
dsomsEnabled = lens _dsomsEnabled (\ s a -> s{_dsomsEnabled = a})

-- | The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values overwrite the existing values.
dsomsCustomDNSServers :: Lens' DNSServersOptionsModifyStructure [Text]
dsomsCustomDNSServers = lens _dsomsCustomDNSServers (\ s a -> s{_dsomsCustomDNSServers = a}) . _Default . _Coerce

instance Hashable DNSServersOptionsModifyStructure
         where

instance NFData DNSServersOptionsModifyStructure
         where

instance ToQuery DNSServersOptionsModifyStructure
         where
        toQuery DNSServersOptionsModifyStructure'{..}
          = mconcat
              ["Enabled" =: _dsomsEnabled,
               toQuery
                 (toQueryList "CustomDnsServers" <$>
                    _dsomsCustomDNSServers)]

-- | Describes an EC2 Fleet error.
--
--
--
-- /See:/ 'deleteFleetError' smart constructor.
data DeleteFleetError = DeleteFleetError'
  { _dfeCode    :: !(Maybe DeleteFleetErrorCode)
  , _dfeMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DeleteFleetError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dfeCode' - The error code.
--
-- * 'dfeMessage' - The description for the error code.
deleteFleetError
    :: DeleteFleetError
deleteFleetError = DeleteFleetError' {_dfeCode = Nothing, _dfeMessage = Nothing}


-- | The error code.
dfeCode :: Lens' DeleteFleetError (Maybe DeleteFleetErrorCode)
dfeCode = lens _dfeCode (\ s a -> s{_dfeCode = a})

-- | The description for the error code.
dfeMessage :: Lens' DeleteFleetError (Maybe Text)
dfeMessage = lens _dfeMessage (\ s a -> s{_dfeMessage = a})

instance FromXML DeleteFleetError where
        parseXML x
          = DeleteFleetError' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable DeleteFleetError where

instance NFData DeleteFleetError where

-- | Describes an EC2 Fleet that was not successfully deleted.
--
--
--
-- /See:/ 'deleteFleetErrorItem' smart constructor.
data DeleteFleetErrorItem = DeleteFleetErrorItem'
  { _dfeiError   :: !(Maybe DeleteFleetError)
  , _dfeiFleetId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DeleteFleetErrorItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dfeiError' - The error.
--
-- * 'dfeiFleetId' - The ID of the EC2 Fleet.
deleteFleetErrorItem
    :: DeleteFleetErrorItem
deleteFleetErrorItem =
  DeleteFleetErrorItem' {_dfeiError = Nothing, _dfeiFleetId = Nothing}


-- | The error.
dfeiError :: Lens' DeleteFleetErrorItem (Maybe DeleteFleetError)
dfeiError = lens _dfeiError (\ s a -> s{_dfeiError = a})

-- | The ID of the EC2 Fleet.
dfeiFleetId :: Lens' DeleteFleetErrorItem (Maybe Text)
dfeiFleetId = lens _dfeiFleetId (\ s a -> s{_dfeiFleetId = a})

instance FromXML DeleteFleetErrorItem where
        parseXML x
          = DeleteFleetErrorItem' <$>
              (x .@? "error") <*> (x .@? "fleetId")

instance Hashable DeleteFleetErrorItem where

instance NFData DeleteFleetErrorItem where

-- | Describes an EC2 Fleet that was successfully deleted.
--
--
--
-- /See:/ 'deleteFleetSuccessItem' smart constructor.
data DeleteFleetSuccessItem = DeleteFleetSuccessItem'
  { _dfsiCurrentFleetState  :: !(Maybe FleetStateCode)
  , _dfsiPreviousFleetState :: !(Maybe FleetStateCode)
  , _dfsiFleetId            :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DeleteFleetSuccessItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dfsiCurrentFleetState' - The current state of the EC2 Fleet.
--
-- * 'dfsiPreviousFleetState' - The previous state of the EC2 Fleet.
--
-- * 'dfsiFleetId' - The ID of the EC2 Fleet.
deleteFleetSuccessItem
    :: DeleteFleetSuccessItem
deleteFleetSuccessItem =
  DeleteFleetSuccessItem'
    { _dfsiCurrentFleetState = Nothing
    , _dfsiPreviousFleetState = Nothing
    , _dfsiFleetId = Nothing
    }


-- | The current state of the EC2 Fleet.
dfsiCurrentFleetState :: Lens' DeleteFleetSuccessItem (Maybe FleetStateCode)
dfsiCurrentFleetState = lens _dfsiCurrentFleetState (\ s a -> s{_dfsiCurrentFleetState = a})

-- | The previous state of the EC2 Fleet.
dfsiPreviousFleetState :: Lens' DeleteFleetSuccessItem (Maybe FleetStateCode)
dfsiPreviousFleetState = lens _dfsiPreviousFleetState (\ s a -> s{_dfsiPreviousFleetState = a})

-- | The ID of the EC2 Fleet.
dfsiFleetId :: Lens' DeleteFleetSuccessItem (Maybe Text)
dfsiFleetId = lens _dfsiFleetId (\ s a -> s{_dfsiFleetId = a})

instance FromXML DeleteFleetSuccessItem where
        parseXML x
          = DeleteFleetSuccessItem' <$>
              (x .@? "currentFleetState") <*>
                (x .@? "previousFleetState")
                <*> (x .@? "fleetId")

instance Hashable DeleteFleetSuccessItem where

instance NFData DeleteFleetSuccessItem where

-- | Describes a launch template version that could not be deleted.
--
--
--
-- /See:/ 'deleteLaunchTemplateVersionsResponseErrorItem' smart constructor.
data DeleteLaunchTemplateVersionsResponseErrorItem = DeleteLaunchTemplateVersionsResponseErrorItem'
  { _dltvreiLaunchTemplateName :: !(Maybe Text)
  , _dltvreiLaunchTemplateId   :: !(Maybe Text)
  , _dltvreiVersionNumber      :: !(Maybe Integer)
  , _dltvreiResponseError      :: !(Maybe ResponseError)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DeleteLaunchTemplateVersionsResponseErrorItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dltvreiLaunchTemplateName' - The name of the launch template.
--
-- * 'dltvreiLaunchTemplateId' - The ID of the launch template.
--
-- * 'dltvreiVersionNumber' - The version number of the launch template.
--
-- * 'dltvreiResponseError' - Information about the error.
deleteLaunchTemplateVersionsResponseErrorItem
    :: DeleteLaunchTemplateVersionsResponseErrorItem
deleteLaunchTemplateVersionsResponseErrorItem =
  DeleteLaunchTemplateVersionsResponseErrorItem'
    { _dltvreiLaunchTemplateName = Nothing
    , _dltvreiLaunchTemplateId = Nothing
    , _dltvreiVersionNumber = Nothing
    , _dltvreiResponseError = Nothing
    }


-- | The name of the launch template.
dltvreiLaunchTemplateName :: Lens' DeleteLaunchTemplateVersionsResponseErrorItem (Maybe Text)
dltvreiLaunchTemplateName = lens _dltvreiLaunchTemplateName (\ s a -> s{_dltvreiLaunchTemplateName = a})

-- | The ID of the launch template.
dltvreiLaunchTemplateId :: Lens' DeleteLaunchTemplateVersionsResponseErrorItem (Maybe Text)
dltvreiLaunchTemplateId = lens _dltvreiLaunchTemplateId (\ s a -> s{_dltvreiLaunchTemplateId = a})

-- | The version number of the launch template.
dltvreiVersionNumber :: Lens' DeleteLaunchTemplateVersionsResponseErrorItem (Maybe Integer)
dltvreiVersionNumber = lens _dltvreiVersionNumber (\ s a -> s{_dltvreiVersionNumber = a})

-- | Information about the error.
dltvreiResponseError :: Lens' DeleteLaunchTemplateVersionsResponseErrorItem (Maybe ResponseError)
dltvreiResponseError = lens _dltvreiResponseError (\ s a -> s{_dltvreiResponseError = a})

instance FromXML
           DeleteLaunchTemplateVersionsResponseErrorItem
         where
        parseXML x
          = DeleteLaunchTemplateVersionsResponseErrorItem' <$>
              (x .@? "launchTemplateName") <*>
                (x .@? "launchTemplateId")
                <*> (x .@? "versionNumber")
                <*> (x .@? "responseError")

instance Hashable
           DeleteLaunchTemplateVersionsResponseErrorItem
         where

instance NFData
           DeleteLaunchTemplateVersionsResponseErrorItem
         where

-- | Describes a launch template version that was successfully deleted.
--
--
--
-- /See:/ 'deleteLaunchTemplateVersionsResponseSuccessItem' smart constructor.
data DeleteLaunchTemplateVersionsResponseSuccessItem = DeleteLaunchTemplateVersionsResponseSuccessItem'
  { _dltvrsiLaunchTemplateName :: !(Maybe Text)
  , _dltvrsiLaunchTemplateId   :: !(Maybe Text)
  , _dltvrsiVersionNumber      :: !(Maybe Integer)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DeleteLaunchTemplateVersionsResponseSuccessItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dltvrsiLaunchTemplateName' - The name of the launch template.
--
-- * 'dltvrsiLaunchTemplateId' - The ID of the launch template.
--
-- * 'dltvrsiVersionNumber' - The version number of the launch template.
deleteLaunchTemplateVersionsResponseSuccessItem
    :: DeleteLaunchTemplateVersionsResponseSuccessItem
deleteLaunchTemplateVersionsResponseSuccessItem =
  DeleteLaunchTemplateVersionsResponseSuccessItem'
    { _dltvrsiLaunchTemplateName = Nothing
    , _dltvrsiLaunchTemplateId = Nothing
    , _dltvrsiVersionNumber = Nothing
    }


-- | The name of the launch template.
dltvrsiLaunchTemplateName :: Lens' DeleteLaunchTemplateVersionsResponseSuccessItem (Maybe Text)
dltvrsiLaunchTemplateName = lens _dltvrsiLaunchTemplateName (\ s a -> s{_dltvrsiLaunchTemplateName = a})

-- | The ID of the launch template.
dltvrsiLaunchTemplateId :: Lens' DeleteLaunchTemplateVersionsResponseSuccessItem (Maybe Text)
dltvrsiLaunchTemplateId = lens _dltvrsiLaunchTemplateId (\ s a -> s{_dltvrsiLaunchTemplateId = a})

-- | The version number of the launch template.
dltvrsiVersionNumber :: Lens' DeleteLaunchTemplateVersionsResponseSuccessItem (Maybe Integer)
dltvrsiVersionNumber = lens _dltvrsiVersionNumber (\ s a -> s{_dltvrsiVersionNumber = a})

instance FromXML
           DeleteLaunchTemplateVersionsResponseSuccessItem
         where
        parseXML x
          = DeleteLaunchTemplateVersionsResponseSuccessItem'
              <$>
              (x .@? "launchTemplateName") <*>
                (x .@? "launchTemplateId")
                <*> (x .@? "versionNumber")

instance Hashable
           DeleteLaunchTemplateVersionsResponseSuccessItem
         where

instance NFData
           DeleteLaunchTemplateVersionsResponseSuccessItem
         where

-- | Describes the error for a Reserved Instance whose queued purchase could not be deleted.
--
--
--
-- /See:/ 'deleteQueuedReservedInstancesError' smart constructor.
data DeleteQueuedReservedInstancesError = DeleteQueuedReservedInstancesError'
  { _dqrieCode    :: !(Maybe DeleteQueuedReservedInstancesErrorCode)
  , _dqrieMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DeleteQueuedReservedInstancesError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dqrieCode' - The error code.
--
-- * 'dqrieMessage' - The error message.
deleteQueuedReservedInstancesError
    :: DeleteQueuedReservedInstancesError
deleteQueuedReservedInstancesError =
  DeleteQueuedReservedInstancesError'
    {_dqrieCode = Nothing, _dqrieMessage = Nothing}


-- | The error code.
dqrieCode :: Lens' DeleteQueuedReservedInstancesError (Maybe DeleteQueuedReservedInstancesErrorCode)
dqrieCode = lens _dqrieCode (\ s a -> s{_dqrieCode = a})

-- | The error message.
dqrieMessage :: Lens' DeleteQueuedReservedInstancesError (Maybe Text)
dqrieMessage = lens _dqrieMessage (\ s a -> s{_dqrieMessage = a})

instance FromXML DeleteQueuedReservedInstancesError
         where
        parseXML x
          = DeleteQueuedReservedInstancesError' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable DeleteQueuedReservedInstancesError
         where

instance NFData DeleteQueuedReservedInstancesError
         where

-- | Information about the tag keys to deregister for the current Region. You can either specify individual tag keys or deregister all tag keys in the current Region. You must specify either @IncludeAllTagsOfInstance@ or @InstanceTagKeys@ in the request
--
--
--
-- /See:/ 'deregisterInstanceTagAttributeRequest' smart constructor.
data DeregisterInstanceTagAttributeRequest = DeregisterInstanceTagAttributeRequest'
  { _ditarIncludeAllTagsOfInstance :: !(Maybe Bool)
  , _ditarInstanceTagKeys          :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DeregisterInstanceTagAttributeRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ditarIncludeAllTagsOfInstance' - Indicates whether to deregister all tag keys in the current Region. Specify @false@ to deregister all tag keys.
--
-- * 'ditarInstanceTagKeys' - Information about the tag keys to deregister.
deregisterInstanceTagAttributeRequest
    :: DeregisterInstanceTagAttributeRequest
deregisterInstanceTagAttributeRequest =
  DeregisterInstanceTagAttributeRequest'
    {_ditarIncludeAllTagsOfInstance = Nothing, _ditarInstanceTagKeys = Nothing}


-- | Indicates whether to deregister all tag keys in the current Region. Specify @false@ to deregister all tag keys.
ditarIncludeAllTagsOfInstance :: Lens' DeregisterInstanceTagAttributeRequest (Maybe Bool)
ditarIncludeAllTagsOfInstance = lens _ditarIncludeAllTagsOfInstance (\ s a -> s{_ditarIncludeAllTagsOfInstance = a})

-- | Information about the tag keys to deregister.
ditarInstanceTagKeys :: Lens' DeregisterInstanceTagAttributeRequest [Text]
ditarInstanceTagKeys = lens _ditarInstanceTagKeys (\ s a -> s{_ditarInstanceTagKeys = a}) . _Default . _Coerce

instance Hashable
           DeregisterInstanceTagAttributeRequest
         where

instance NFData DeregisterInstanceTagAttributeRequest
         where

instance ToQuery
           DeregisterInstanceTagAttributeRequest
         where
        toQuery DeregisterInstanceTagAttributeRequest'{..}
          = mconcat
              ["IncludeAllTagsOfInstance" =:
                 _ditarIncludeAllTagsOfInstance,
               toQuery
                 (toQueryList "InstanceTagKey" <$>
                    _ditarInstanceTagKeys)]

-- | Describes fast snapshot restores for a snapshot.
--
--
--
-- /See:/ 'describeFastSnapshotRestoreSuccessItem' smart constructor.
data DescribeFastSnapshotRestoreSuccessItem = DescribeFastSnapshotRestoreSuccessItem'
  { _dfsrsiDisablingTime         :: !(Maybe ISO8601)
  , _dfsrsiState                 :: !(Maybe FastSnapshotRestoreStateCode)
  , _dfsrsiOwnerAlias            :: !(Maybe Text)
  , _dfsrsiDisabledTime          :: !(Maybe ISO8601)
  , _dfsrsiEnabledTime           :: !(Maybe ISO8601)
  , _dfsrsiOptimizingTime        :: !(Maybe ISO8601)
  , _dfsrsiOwnerId               :: !(Maybe Text)
  , _dfsrsiStateTransitionReason :: !(Maybe Text)
  , _dfsrsiAvailabilityZone      :: !(Maybe Text)
  , _dfsrsiSnapshotId            :: !(Maybe Text)
  , _dfsrsiEnablingTime          :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DescribeFastSnapshotRestoreSuccessItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dfsrsiDisablingTime' - The time at which fast snapshot restores entered the @disabling@ state.
--
-- * 'dfsrsiState' - The state of fast snapshot restores.
--
-- * 'dfsrsiOwnerAlias' - The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
--
-- * 'dfsrsiDisabledTime' - The time at which fast snapshot restores entered the @disabled@ state.
--
-- * 'dfsrsiEnabledTime' - The time at which fast snapshot restores entered the @enabled@ state.
--
-- * 'dfsrsiOptimizingTime' - The time at which fast snapshot restores entered the @optimizing@ state.
--
-- * 'dfsrsiOwnerId' - The ID of the AWS account that enabled fast snapshot restores on the snapshot.
--
-- * 'dfsrsiStateTransitionReason' - The reason for the state transition. The possible values are as follows:     * @Client.UserInitiated@ - The state successfully transitioned to @enabling@ or @disabling@ .     * @Client.UserInitiated - Lifecycle state transition@ - The state successfully transitioned to @optimizing@ , @enabled@ , or @disabled@ .
--
-- * 'dfsrsiAvailabilityZone' - The Availability Zone.
--
-- * 'dfsrsiSnapshotId' - The ID of the snapshot.
--
-- * 'dfsrsiEnablingTime' - The time at which fast snapshot restores entered the @enabling@ state.
describeFastSnapshotRestoreSuccessItem
    :: DescribeFastSnapshotRestoreSuccessItem
describeFastSnapshotRestoreSuccessItem =
  DescribeFastSnapshotRestoreSuccessItem'
    { _dfsrsiDisablingTime = Nothing
    , _dfsrsiState = Nothing
    , _dfsrsiOwnerAlias = Nothing
    , _dfsrsiDisabledTime = Nothing
    , _dfsrsiEnabledTime = Nothing
    , _dfsrsiOptimizingTime = Nothing
    , _dfsrsiOwnerId = Nothing
    , _dfsrsiStateTransitionReason = Nothing
    , _dfsrsiAvailabilityZone = Nothing
    , _dfsrsiSnapshotId = Nothing
    , _dfsrsiEnablingTime = Nothing
    }


-- | The time at which fast snapshot restores entered the @disabling@ state.
dfsrsiDisablingTime :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dfsrsiDisablingTime = lens _dfsrsiDisablingTime (\ s a -> s{_dfsrsiDisablingTime = a}) . mapping _Time

-- | The state of fast snapshot restores.
dfsrsiState :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe FastSnapshotRestoreStateCode)
dfsrsiState = lens _dfsrsiState (\ s a -> s{_dfsrsiState = a})

-- | The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
dfsrsiOwnerAlias :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe Text)
dfsrsiOwnerAlias = lens _dfsrsiOwnerAlias (\ s a -> s{_dfsrsiOwnerAlias = a})

-- | The time at which fast snapshot restores entered the @disabled@ state.
dfsrsiDisabledTime :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dfsrsiDisabledTime = lens _dfsrsiDisabledTime (\ s a -> s{_dfsrsiDisabledTime = a}) . mapping _Time

-- | The time at which fast snapshot restores entered the @enabled@ state.
dfsrsiEnabledTime :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dfsrsiEnabledTime = lens _dfsrsiEnabledTime (\ s a -> s{_dfsrsiEnabledTime = a}) . mapping _Time

-- | The time at which fast snapshot restores entered the @optimizing@ state.
dfsrsiOptimizingTime :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dfsrsiOptimizingTime = lens _dfsrsiOptimizingTime (\ s a -> s{_dfsrsiOptimizingTime = a}) . mapping _Time

-- | The ID of the AWS account that enabled fast snapshot restores on the snapshot.
dfsrsiOwnerId :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe Text)
dfsrsiOwnerId = lens _dfsrsiOwnerId (\ s a -> s{_dfsrsiOwnerId = a})

-- | The reason for the state transition. The possible values are as follows:     * @Client.UserInitiated@ - The state successfully transitioned to @enabling@ or @disabling@ .     * @Client.UserInitiated - Lifecycle state transition@ - The state successfully transitioned to @optimizing@ , @enabled@ , or @disabled@ .
dfsrsiStateTransitionReason :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe Text)
dfsrsiStateTransitionReason = lens _dfsrsiStateTransitionReason (\ s a -> s{_dfsrsiStateTransitionReason = a})

-- | The Availability Zone.
dfsrsiAvailabilityZone :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe Text)
dfsrsiAvailabilityZone = lens _dfsrsiAvailabilityZone (\ s a -> s{_dfsrsiAvailabilityZone = a})

-- | The ID of the snapshot.
dfsrsiSnapshotId :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe Text)
dfsrsiSnapshotId = lens _dfsrsiSnapshotId (\ s a -> s{_dfsrsiSnapshotId = a})

-- | The time at which fast snapshot restores entered the @enabling@ state.
dfsrsiEnablingTime :: Lens' DescribeFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dfsrsiEnablingTime = lens _dfsrsiEnablingTime (\ s a -> s{_dfsrsiEnablingTime = a}) . mapping _Time

instance FromXML
           DescribeFastSnapshotRestoreSuccessItem
         where
        parseXML x
          = DescribeFastSnapshotRestoreSuccessItem' <$>
              (x .@? "disablingTime") <*> (x .@? "state") <*>
                (x .@? "ownerAlias")
                <*> (x .@? "disabledTime")
                <*> (x .@? "enabledTime")
                <*> (x .@? "optimizingTime")
                <*> (x .@? "ownerId")
                <*> (x .@? "stateTransitionReason")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "snapshotId")
                <*> (x .@? "enablingTime")

instance Hashable
           DescribeFastSnapshotRestoreSuccessItem
         where

instance NFData
           DescribeFastSnapshotRestoreSuccessItem
         where

-- | Describes the instances that could not be launched by the fleet.
--
--
--
-- /See:/ 'describeFleetError' smart constructor.
data DescribeFleetError = DescribeFleetError'
  { _dfeLifecycle :: !(Maybe InstanceLifecycle)
  , _dfeLaunchTemplateAndOverrides :: !(Maybe LaunchTemplateAndOverridesResponse)
  , _dfeErrorCode :: !(Maybe Text)
  , _dfeErrorMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DescribeFleetError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dfeLifecycle' - Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
--
-- * 'dfeLaunchTemplateAndOverrides' - The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
--
-- * 'dfeErrorCode' - The error code that indicates why the instance could not be launched. For more information about error codes, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
--
-- * 'dfeErrorMessage' - The error message that describes why the instance could not be launched. For more information about error messages, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
describeFleetError
    :: DescribeFleetError
describeFleetError =
  DescribeFleetError'
    { _dfeLifecycle = Nothing
    , _dfeLaunchTemplateAndOverrides = Nothing
    , _dfeErrorCode = Nothing
    , _dfeErrorMessage = Nothing
    }


-- | Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
dfeLifecycle :: Lens' DescribeFleetError (Maybe InstanceLifecycle)
dfeLifecycle = lens _dfeLifecycle (\ s a -> s{_dfeLifecycle = a})

-- | The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
dfeLaunchTemplateAndOverrides :: Lens' DescribeFleetError (Maybe LaunchTemplateAndOverridesResponse)
dfeLaunchTemplateAndOverrides = lens _dfeLaunchTemplateAndOverrides (\ s a -> s{_dfeLaunchTemplateAndOverrides = a})

-- | The error code that indicates why the instance could not be launched. For more information about error codes, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
dfeErrorCode :: Lens' DescribeFleetError (Maybe Text)
dfeErrorCode = lens _dfeErrorCode (\ s a -> s{_dfeErrorCode = a})

-- | The error message that describes why the instance could not be launched. For more information about error messages, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
dfeErrorMessage :: Lens' DescribeFleetError (Maybe Text)
dfeErrorMessage = lens _dfeErrorMessage (\ s a -> s{_dfeErrorMessage = a})

instance FromXML DescribeFleetError where
        parseXML x
          = DescribeFleetError' <$>
              (x .@? "lifecycle") <*>
                (x .@? "launchTemplateAndOverrides")
                <*> (x .@? "errorCode")
                <*> (x .@? "errorMessage")

instance Hashable DescribeFleetError where

instance NFData DescribeFleetError where

-- | Describes the instances that were launched by the fleet.
--
--
--
-- /See:/ 'describeFleetsInstances' smart constructor.
data DescribeFleetsInstances = DescribeFleetsInstances'
  { _dfiPlatform :: !(Maybe PlatformValues)
  , _dfiLifecycle :: !(Maybe InstanceLifecycle)
  , _dfiLaunchTemplateAndOverrides :: !(Maybe LaunchTemplateAndOverridesResponse)
  , _dfiInstanceType :: !(Maybe InstanceType)
  , _dfiInstanceIds :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DescribeFleetsInstances' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dfiPlatform' - The value is @Windows@ for Windows instances. Otherwise, the value is blank.
--
-- * 'dfiLifecycle' - Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
--
-- * 'dfiLaunchTemplateAndOverrides' - The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
--
-- * 'dfiInstanceType' - The instance type.
--
-- * 'dfiInstanceIds' - The IDs of the instances.
describeFleetsInstances
    :: DescribeFleetsInstances
describeFleetsInstances =
  DescribeFleetsInstances'
    { _dfiPlatform = Nothing
    , _dfiLifecycle = Nothing
    , _dfiLaunchTemplateAndOverrides = Nothing
    , _dfiInstanceType = Nothing
    , _dfiInstanceIds = Nothing
    }


-- | The value is @Windows@ for Windows instances. Otherwise, the value is blank.
dfiPlatform :: Lens' DescribeFleetsInstances (Maybe PlatformValues)
dfiPlatform = lens _dfiPlatform (\ s a -> s{_dfiPlatform = a})

-- | Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
dfiLifecycle :: Lens' DescribeFleetsInstances (Maybe InstanceLifecycle)
dfiLifecycle = lens _dfiLifecycle (\ s a -> s{_dfiLifecycle = a})

-- | The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
dfiLaunchTemplateAndOverrides :: Lens' DescribeFleetsInstances (Maybe LaunchTemplateAndOverridesResponse)
dfiLaunchTemplateAndOverrides = lens _dfiLaunchTemplateAndOverrides (\ s a -> s{_dfiLaunchTemplateAndOverrides = a})

-- | The instance type.
dfiInstanceType :: Lens' DescribeFleetsInstances (Maybe InstanceType)
dfiInstanceType = lens _dfiInstanceType (\ s a -> s{_dfiInstanceType = a})

-- | The IDs of the instances.
dfiInstanceIds :: Lens' DescribeFleetsInstances [Text]
dfiInstanceIds = lens _dfiInstanceIds (\ s a -> s{_dfiInstanceIds = a}) . _Default . _Coerce

instance FromXML DescribeFleetsInstances where
        parseXML x
          = DescribeFleetsInstances' <$>
              (x .@? "platform") <*> (x .@? "lifecycle") <*>
                (x .@? "launchTemplateAndOverrides")
                <*> (x .@? "instanceType")
                <*>
                (x .@? "instanceIds" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable DescribeFleetsInstances where

instance NFData DescribeFleetsInstances where

-- | Describes an Active Directory.
--
--
--
-- /See:/ 'directoryServiceAuthentication' smart constructor.
newtype DirectoryServiceAuthentication = DirectoryServiceAuthentication'
  { _dsaDirectoryId :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DirectoryServiceAuthentication' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dsaDirectoryId' - The ID of the Active Directory used for authentication.
directoryServiceAuthentication
    :: DirectoryServiceAuthentication
directoryServiceAuthentication =
  DirectoryServiceAuthentication' {_dsaDirectoryId = Nothing}


-- | The ID of the Active Directory used for authentication.
dsaDirectoryId :: Lens' DirectoryServiceAuthentication (Maybe Text)
dsaDirectoryId = lens _dsaDirectoryId (\ s a -> s{_dsaDirectoryId = a})

instance FromXML DirectoryServiceAuthentication where
        parseXML x
          = DirectoryServiceAuthentication' <$>
              (x .@? "directoryId")

instance Hashable DirectoryServiceAuthentication
         where

instance NFData DirectoryServiceAuthentication where

-- | Describes the Active Directory to be used for client authentication.
--
--
--
-- /See:/ 'directoryServiceAuthenticationRequest' smart constructor.
newtype DirectoryServiceAuthenticationRequest = DirectoryServiceAuthenticationRequest'
  { _dsarDirectoryId :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DirectoryServiceAuthenticationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dsarDirectoryId' - The ID of the Active Directory to be used for authentication.
directoryServiceAuthenticationRequest
    :: DirectoryServiceAuthenticationRequest
directoryServiceAuthenticationRequest =
  DirectoryServiceAuthenticationRequest' {_dsarDirectoryId = Nothing}


-- | The ID of the Active Directory to be used for authentication.
dsarDirectoryId :: Lens' DirectoryServiceAuthenticationRequest (Maybe Text)
dsarDirectoryId = lens _dsarDirectoryId (\ s a -> s{_dsarDirectoryId = a})

instance Hashable
           DirectoryServiceAuthenticationRequest
         where

instance NFData DirectoryServiceAuthenticationRequest
         where

instance ToQuery
           DirectoryServiceAuthenticationRequest
         where
        toQuery DirectoryServiceAuthenticationRequest'{..}
          = mconcat ["DirectoryId" =: _dsarDirectoryId]

-- | Contains information about the errors that occurred when disabling fast snapshot restores.
--
--
--
-- /See:/ 'disableFastSnapshotRestoreErrorItem' smart constructor.
data DisableFastSnapshotRestoreErrorItem = DisableFastSnapshotRestoreErrorItem'
  { _dfsreiFastSnapshotRestoreStateErrors :: !(Maybe [DisableFastSnapshotRestoreStateErrorItem])
  , _dfsreiSnapshotId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DisableFastSnapshotRestoreErrorItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dfsreiFastSnapshotRestoreStateErrors' - The errors.
--
-- * 'dfsreiSnapshotId' - The ID of the snapshot.
disableFastSnapshotRestoreErrorItem
    :: DisableFastSnapshotRestoreErrorItem
disableFastSnapshotRestoreErrorItem =
  DisableFastSnapshotRestoreErrorItem'
    { _dfsreiFastSnapshotRestoreStateErrors = Nothing
    , _dfsreiSnapshotId = Nothing
    }


-- | The errors.
dfsreiFastSnapshotRestoreStateErrors :: Lens' DisableFastSnapshotRestoreErrorItem [DisableFastSnapshotRestoreStateErrorItem]
dfsreiFastSnapshotRestoreStateErrors = lens _dfsreiFastSnapshotRestoreStateErrors (\ s a -> s{_dfsreiFastSnapshotRestoreStateErrors = a}) . _Default . _Coerce

-- | The ID of the snapshot.
dfsreiSnapshotId :: Lens' DisableFastSnapshotRestoreErrorItem (Maybe Text)
dfsreiSnapshotId = lens _dfsreiSnapshotId (\ s a -> s{_dfsreiSnapshotId = a})

instance FromXML DisableFastSnapshotRestoreErrorItem
         where
        parseXML x
          = DisableFastSnapshotRestoreErrorItem' <$>
              (x .@? "fastSnapshotRestoreStateErrorSet" .!@ mempty
                 >>= may (parseXMLList "item"))
                <*> (x .@? "snapshotId")

instance Hashable DisableFastSnapshotRestoreErrorItem
         where

instance NFData DisableFastSnapshotRestoreErrorItem
         where

-- | Describes an error that occurred when disabling fast snapshot restores.
--
--
--
-- /See:/ 'disableFastSnapshotRestoreStateError' smart constructor.
data DisableFastSnapshotRestoreStateError = DisableFastSnapshotRestoreStateError'
  { _dfsrseCode    :: !(Maybe Text)
  , _dfsrseMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DisableFastSnapshotRestoreStateError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dfsrseCode' - The error code.
--
-- * 'dfsrseMessage' - The error message.
disableFastSnapshotRestoreStateError
    :: DisableFastSnapshotRestoreStateError
disableFastSnapshotRestoreStateError =
  DisableFastSnapshotRestoreStateError'
    {_dfsrseCode = Nothing, _dfsrseMessage = Nothing}


-- | The error code.
dfsrseCode :: Lens' DisableFastSnapshotRestoreStateError (Maybe Text)
dfsrseCode = lens _dfsrseCode (\ s a -> s{_dfsrseCode = a})

-- | The error message.
dfsrseMessage :: Lens' DisableFastSnapshotRestoreStateError (Maybe Text)
dfsrseMessage = lens _dfsrseMessage (\ s a -> s{_dfsrseMessage = a})

instance FromXML DisableFastSnapshotRestoreStateError
         where
        parseXML x
          = DisableFastSnapshotRestoreStateError' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable
           DisableFastSnapshotRestoreStateError
         where

instance NFData DisableFastSnapshotRestoreStateError
         where

-- | Contains information about an error that occurred when disabling fast snapshot restores.
--
--
--
-- /See:/ 'disableFastSnapshotRestoreStateErrorItem' smart constructor.
data DisableFastSnapshotRestoreStateErrorItem = DisableFastSnapshotRestoreStateErrorItem'
  { _dfsrseiError            :: !(Maybe DisableFastSnapshotRestoreStateError)
  , _dfsrseiAvailabilityZone :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DisableFastSnapshotRestoreStateErrorItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dfsrseiError' - The error.
--
-- * 'dfsrseiAvailabilityZone' - The Availability Zone.
disableFastSnapshotRestoreStateErrorItem
    :: DisableFastSnapshotRestoreStateErrorItem
disableFastSnapshotRestoreStateErrorItem =
  DisableFastSnapshotRestoreStateErrorItem'
    {_dfsrseiError = Nothing, _dfsrseiAvailabilityZone = Nothing}


-- | The error.
dfsrseiError :: Lens' DisableFastSnapshotRestoreStateErrorItem (Maybe DisableFastSnapshotRestoreStateError)
dfsrseiError = lens _dfsrseiError (\ s a -> s{_dfsrseiError = a})

-- | The Availability Zone.
dfsrseiAvailabilityZone :: Lens' DisableFastSnapshotRestoreStateErrorItem (Maybe Text)
dfsrseiAvailabilityZone = lens _dfsrseiAvailabilityZone (\ s a -> s{_dfsrseiAvailabilityZone = a})

instance FromXML
           DisableFastSnapshotRestoreStateErrorItem
         where
        parseXML x
          = DisableFastSnapshotRestoreStateErrorItem' <$>
              (x .@? "error") <*> (x .@? "availabilityZone")

instance Hashable
           DisableFastSnapshotRestoreStateErrorItem
         where

instance NFData
           DisableFastSnapshotRestoreStateErrorItem
         where

-- | Describes fast snapshot restores that were successfully disabled.
--
--
--
-- /See:/ 'disableFastSnapshotRestoreSuccessItem' smart constructor.
data DisableFastSnapshotRestoreSuccessItem = DisableFastSnapshotRestoreSuccessItem'
  { _dDisablingTime         :: !(Maybe ISO8601)
  , _dState                 :: !(Maybe FastSnapshotRestoreStateCode)
  , _dOwnerAlias            :: !(Maybe Text)
  , _dDisabledTime          :: !(Maybe ISO8601)
  , _dEnabledTime           :: !(Maybe ISO8601)
  , _dOptimizingTime        :: !(Maybe ISO8601)
  , _dOwnerId               :: !(Maybe Text)
  , _dStateTransitionReason :: !(Maybe Text)
  , _dAvailabilityZone      :: !(Maybe Text)
  , _dSnapshotId            :: !(Maybe Text)
  , _dEnablingTime          :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DisableFastSnapshotRestoreSuccessItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dDisablingTime' - The time at which fast snapshot restores entered the @disabling@ state.
--
-- * 'dState' - The state of fast snapshot restores for the snapshot.
--
-- * 'dOwnerAlias' - The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
--
-- * 'dDisabledTime' - The time at which fast snapshot restores entered the @disabled@ state.
--
-- * 'dEnabledTime' - The time at which fast snapshot restores entered the @enabled@ state.
--
-- * 'dOptimizingTime' - The time at which fast snapshot restores entered the @optimizing@ state.
--
-- * 'dOwnerId' - The ID of the AWS account that enabled fast snapshot restores on the snapshot.
--
-- * 'dStateTransitionReason' - The reason for the state transition. The possible values are as follows:     * @Client.UserInitiated@ - The state successfully transitioned to @enabling@ or @disabling@ .     * @Client.UserInitiated - Lifecycle state transition@ - The state successfully transitioned to @optimizing@ , @enabled@ , or @disabled@ .
--
-- * 'dAvailabilityZone' - The Availability Zone.
--
-- * 'dSnapshotId' - The ID of the snapshot.
--
-- * 'dEnablingTime' - The time at which fast snapshot restores entered the @enabling@ state.
disableFastSnapshotRestoreSuccessItem
    :: DisableFastSnapshotRestoreSuccessItem
disableFastSnapshotRestoreSuccessItem =
  DisableFastSnapshotRestoreSuccessItem'
    { _dDisablingTime = Nothing
    , _dState = Nothing
    , _dOwnerAlias = Nothing
    , _dDisabledTime = Nothing
    , _dEnabledTime = Nothing
    , _dOptimizingTime = Nothing
    , _dOwnerId = Nothing
    , _dStateTransitionReason = Nothing
    , _dAvailabilityZone = Nothing
    , _dSnapshotId = Nothing
    , _dEnablingTime = Nothing
    }


-- | The time at which fast snapshot restores entered the @disabling@ state.
dDisablingTime :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dDisablingTime = lens _dDisablingTime (\ s a -> s{_dDisablingTime = a}) . mapping _Time

-- | The state of fast snapshot restores for the snapshot.
dState :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe FastSnapshotRestoreStateCode)
dState = lens _dState (\ s a -> s{_dState = a})

-- | The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
dOwnerAlias :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe Text)
dOwnerAlias = lens _dOwnerAlias (\ s a -> s{_dOwnerAlias = a})

-- | The time at which fast snapshot restores entered the @disabled@ state.
dDisabledTime :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dDisabledTime = lens _dDisabledTime (\ s a -> s{_dDisabledTime = a}) . mapping _Time

-- | The time at which fast snapshot restores entered the @enabled@ state.
dEnabledTime :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dEnabledTime = lens _dEnabledTime (\ s a -> s{_dEnabledTime = a}) . mapping _Time

-- | The time at which fast snapshot restores entered the @optimizing@ state.
dOptimizingTime :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dOptimizingTime = lens _dOptimizingTime (\ s a -> s{_dOptimizingTime = a}) . mapping _Time

-- | The ID of the AWS account that enabled fast snapshot restores on the snapshot.
dOwnerId :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe Text)
dOwnerId = lens _dOwnerId (\ s a -> s{_dOwnerId = a})

-- | The reason for the state transition. The possible values are as follows:     * @Client.UserInitiated@ - The state successfully transitioned to @enabling@ or @disabling@ .     * @Client.UserInitiated - Lifecycle state transition@ - The state successfully transitioned to @optimizing@ , @enabled@ , or @disabled@ .
dStateTransitionReason :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe Text)
dStateTransitionReason = lens _dStateTransitionReason (\ s a -> s{_dStateTransitionReason = a})

-- | The Availability Zone.
dAvailabilityZone :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe Text)
dAvailabilityZone = lens _dAvailabilityZone (\ s a -> s{_dAvailabilityZone = a})

-- | The ID of the snapshot.
dSnapshotId :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe Text)
dSnapshotId = lens _dSnapshotId (\ s a -> s{_dSnapshotId = a})

-- | The time at which fast snapshot restores entered the @enabling@ state.
dEnablingTime :: Lens' DisableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
dEnablingTime = lens _dEnablingTime (\ s a -> s{_dEnablingTime = a}) . mapping _Time

instance FromXML
           DisableFastSnapshotRestoreSuccessItem
         where
        parseXML x
          = DisableFastSnapshotRestoreSuccessItem' <$>
              (x .@? "disablingTime") <*> (x .@? "state") <*>
                (x .@? "ownerAlias")
                <*> (x .@? "disabledTime")
                <*> (x .@? "enabledTime")
                <*> (x .@? "optimizingTime")
                <*> (x .@? "ownerId")
                <*> (x .@? "stateTransitionReason")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "snapshotId")
                <*> (x .@? "enablingTime")

instance Hashable
           DisableFastSnapshotRestoreSuccessItem
         where

instance NFData DisableFastSnapshotRestoreSuccessItem
         where

-- | Describes a disk image.
--
--
--
-- /See:/ 'diskImage' smart constructor.
data DiskImage = DiskImage'
  { _diImage       :: !(Maybe DiskImageDetail)
  , _diVolume      :: !(Maybe VolumeDetail)
  , _diDescription :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DiskImage' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'diImage' - Information about the disk image.
--
-- * 'diVolume' - Information about the volume.
--
-- * 'diDescription' - A description of the disk image.
diskImage
    :: DiskImage
diskImage =
  DiskImage' {_diImage = Nothing, _diVolume = Nothing, _diDescription = Nothing}


-- | Information about the disk image.
diImage :: Lens' DiskImage (Maybe DiskImageDetail)
diImage = lens _diImage (\ s a -> s{_diImage = a})

-- | Information about the volume.
diVolume :: Lens' DiskImage (Maybe VolumeDetail)
diVolume = lens _diVolume (\ s a -> s{_diVolume = a})

-- | A description of the disk image.
diDescription :: Lens' DiskImage (Maybe Text)
diDescription = lens _diDescription (\ s a -> s{_diDescription = a})

instance Hashable DiskImage where

instance NFData DiskImage where

instance ToQuery DiskImage where
        toQuery DiskImage'{..}
          = mconcat
              ["Image" =: _diImage, "Volume" =: _diVolume,
               "Description" =: _diDescription]

-- | Describes a disk image.
--
--
--
-- /See:/ 'diskImageDescription' smart constructor.
data DiskImageDescription = DiskImageDescription'
  { _dSize              :: !(Maybe Integer)
  , _dChecksum          :: !(Maybe Text)
  , _dFormat            :: !(Maybe DiskImageFormat)
  , _dImportManifestURL :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DiskImageDescription' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'dSize' - The size of the disk image, in GiB.
--
-- * 'dChecksum' - The checksum computed for the disk image.
--
-- * 'dFormat' - The disk image format.
--
-- * 'dImportManifestURL' - A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html Authenticating REST Requests> topic in the /Amazon Simple Storage Service Developer Guide/ . For information about the import manifest referenced by this API action, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html VM Import Manifest> .
diskImageDescription
    :: DiskImageDescription
diskImageDescription =
  DiskImageDescription'
    { _dSize = Nothing
    , _dChecksum = Nothing
    , _dFormat = Nothing
    , _dImportManifestURL = Nothing
    }


-- | The size of the disk image, in GiB.
dSize :: Lens' DiskImageDescription (Maybe Integer)
dSize = lens _dSize (\ s a -> s{_dSize = a})

-- | The checksum computed for the disk image.
dChecksum :: Lens' DiskImageDescription (Maybe Text)
dChecksum = lens _dChecksum (\ s a -> s{_dChecksum = a})

-- | The disk image format.
dFormat :: Lens' DiskImageDescription (Maybe DiskImageFormat)
dFormat = lens _dFormat (\ s a -> s{_dFormat = a})

-- | A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html Authenticating REST Requests> topic in the /Amazon Simple Storage Service Developer Guide/ . For information about the import manifest referenced by this API action, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html VM Import Manifest> .
dImportManifestURL :: Lens' DiskImageDescription (Maybe Text)
dImportManifestURL = lens _dImportManifestURL (\ s a -> s{_dImportManifestURL = a})

instance FromXML DiskImageDescription where
        parseXML x
          = DiskImageDescription' <$>
              (x .@? "size") <*> (x .@? "checksum") <*>
                (x .@? "format")
                <*> (x .@? "importManifestUrl")

instance Hashable DiskImageDescription where

instance NFData DiskImageDescription where

-- | Describes a disk image.
--
--
--
-- /See:/ 'diskImageDetail' smart constructor.
data DiskImageDetail = DiskImageDetail'
  { _didBytes             :: !Integer
  , _didFormat            :: !DiskImageFormat
  , _didImportManifestURL :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DiskImageDetail' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'didBytes' - The size of the disk image, in GiB.
--
-- * 'didFormat' - The disk image format.
--
-- * 'didImportManifestURL' - A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html Authenticating REST Requests> topic in the /Amazon Simple Storage Service Developer Guide/ . For information about the import manifest referenced by this API action, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html VM Import Manifest> .
diskImageDetail
    :: Integer -- ^ 'didBytes'
    -> DiskImageFormat -- ^ 'didFormat'
    -> Text -- ^ 'didImportManifestURL'
    -> DiskImageDetail
diskImageDetail pBytes_ pFormat_ pImportManifestURL_ =
  DiskImageDetail'
    { _didBytes = pBytes_
    , _didFormat = pFormat_
    , _didImportManifestURL = pImportManifestURL_
    }


-- | The size of the disk image, in GiB.
didBytes :: Lens' DiskImageDetail Integer
didBytes = lens _didBytes (\ s a -> s{_didBytes = a})

-- | The disk image format.
didFormat :: Lens' DiskImageDetail DiskImageFormat
didFormat = lens _didFormat (\ s a -> s{_didFormat = a})

-- | A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html Authenticating REST Requests> topic in the /Amazon Simple Storage Service Developer Guide/ . For information about the import manifest referenced by this API action, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html VM Import Manifest> .
didImportManifestURL :: Lens' DiskImageDetail Text
didImportManifestURL = lens _didImportManifestURL (\ s a -> s{_didImportManifestURL = a})

instance Hashable DiskImageDetail where

instance NFData DiskImageDetail where

instance ToQuery DiskImageDetail where
        toQuery DiskImageDetail'{..}
          = mconcat
              ["Bytes" =: _didBytes, "Format" =: _didFormat,
               "ImportManifestUrl" =: _didImportManifestURL]

-- | Describes a disk image volume.
--
--
--
-- /See:/ 'diskImageVolumeDescription' smart constructor.
data DiskImageVolumeDescription = DiskImageVolumeDescription'
  { _divdSize :: !(Maybe Integer)
  , _divdId   :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DiskImageVolumeDescription' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'divdSize' - The size of the volume, in GiB.
--
-- * 'divdId' - The volume identifier.
diskImageVolumeDescription
    :: DiskImageVolumeDescription
diskImageVolumeDescription =
  DiskImageVolumeDescription' {_divdSize = Nothing, _divdId = Nothing}


-- | The size of the volume, in GiB.
divdSize :: Lens' DiskImageVolumeDescription (Maybe Integer)
divdSize = lens _divdSize (\ s a -> s{_divdSize = a})

-- | The volume identifier.
divdId :: Lens' DiskImageVolumeDescription (Maybe Text)
divdId = lens _divdId (\ s a -> s{_divdId = a})

instance FromXML DiskImageVolumeDescription where
        parseXML x
          = DiskImageVolumeDescription' <$>
              (x .@? "size") <*> (x .@? "id")

instance Hashable DiskImageVolumeDescription where

instance NFData DiskImageVolumeDescription where

-- | Describes the disk.
--
--
--
-- /See:/ 'diskInfo' smart constructor.
data DiskInfo = DiskInfo'
  { _diCount    :: !(Maybe Int)
  , _diSizeInGB :: !(Maybe Integer)
  , _diType     :: !(Maybe DiskType)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'DiskInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'diCount' - The number of disks with this configuration.
--
-- * 'diSizeInGB' - The size of the disk in GB.
--
-- * 'diType' - The type of disk.
diskInfo
    :: DiskInfo
diskInfo =
  DiskInfo' {_diCount = Nothing, _diSizeInGB = Nothing, _diType = Nothing}


-- | The number of disks with this configuration.
diCount :: Lens' DiskInfo (Maybe Int)
diCount = lens _diCount (\ s a -> s{_diCount = a})

-- | The size of the disk in GB.
diSizeInGB :: Lens' DiskInfo (Maybe Integer)
diSizeInGB = lens _diSizeInGB (\ s a -> s{_diSizeInGB = a})

-- | The type of disk.
diType :: Lens' DiskInfo (Maybe DiskType)
diType = lens _diType (\ s a -> s{_diType = a})

instance FromXML DiskInfo where
        parseXML x
          = DiskInfo' <$>
              (x .@? "count") <*> (x .@? "sizeInGB") <*>
                (x .@? "type")

instance Hashable DiskInfo where

instance NFData DiskInfo where

-- | Describes a block device for an EBS volume.
--
--
--
-- /See:/ 'ebsBlockDevice' smart constructor.
data EBSBlockDevice = EBSBlockDevice'
  { _ebdDeleteOnTermination :: !(Maybe Bool)
  , _ebdThroughput          :: !(Maybe Int)
  , _ebdVolumeSize          :: !(Maybe Int)
  , _ebdIOPS                :: !(Maybe Int)
  , _ebdOutpostARN          :: !(Maybe Text)
  , _ebdEncrypted           :: !(Maybe Bool)
  , _ebdKMSKeyId            :: !(Maybe Text)
  , _ebdVolumeType          :: !(Maybe VolumeType)
  , _ebdSnapshotId          :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EBSBlockDevice' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ebdDeleteOnTermination' - Indicates whether the EBS volume is deleted on instance termination. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination Preserving Amazon EBS volumes on instance termination> in the /Amazon EC2 User Guide/ .
--
-- * 'ebdThroughput' - The throughput that the volume supports, in MiB/s. This parameter is valid only for @gp3@ volumes. Valid Range: Minimum value of 125. Maximum value of 1000.
--
-- * 'ebdVolumeSize' - The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:     * @gp2@ and @gp3@ :1-16,384     * @io1@ and @io2@ : 4-16,384     * @st1@ and @sc1@ : 125-16,384     * @standard@ : 1-1,024
--
-- * 'ebdIOPS' - The number of I/O operations per second (IOPS). For @gp3@ , @io1@ , and @io2@ volumes, this represents the number of IOPS that are provisioned for the volume. For @gp2@ volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:     * @gp3@ : 3,000-16,000 IOPS     * @io1@ : 100-64,000 IOPS     * @io2@ : 100-64,000 IOPS For @io1@ and @io2@ volumes, we guarantee 64,000 IOPS only for <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances Instances built on the Nitro System> . Other instance families guarantee performance up to 32,000 IOPS. This parameter is required for @io1@ and @io2@ volumes. The default for @gp3@ volumes is 3,000 IOPS. This parameter is not supported for @gp2@ , @st1@ , @sc1@ , or @standard@ volumes.
--
-- * 'ebdOutpostARN' - The ARN of the Outpost on which the snapshot is stored.
--
-- * 'ebdEncrypted' - Indicates whether the encryption state of an EBS volume is changed while being restored from a backing snapshot. The effect of setting the encryption state to @true@ depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-parameters Amazon EBS encryption> in the /Amazon EC2 User Guide/ . In no case can you remove encryption from an encrypted volume. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances Supported instance types> . This parameter is not returned by .
--
-- * 'ebdKMSKeyId' - Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted. This parameter is only supported on @BlockDeviceMapping@ objects called by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html RunInstances> , <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html RequestSpotFleet> , and <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html RequestSpotInstances> .
--
-- * 'ebdVolumeType' - The volume type. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html Amazon EBS volume types> in the /Amazon EC2 User Guide/ . If the volume type is @io1@ or @io2@ , you must specify the IOPS that the volume supports.
--
-- * 'ebdSnapshotId' - The ID of the snapshot.
ebsBlockDevice
    :: EBSBlockDevice
ebsBlockDevice =
  EBSBlockDevice'
    { _ebdDeleteOnTermination = Nothing
    , _ebdThroughput = Nothing
    , _ebdVolumeSize = Nothing
    , _ebdIOPS = Nothing
    , _ebdOutpostARN = Nothing
    , _ebdEncrypted = Nothing
    , _ebdKMSKeyId = Nothing
    , _ebdVolumeType = Nothing
    , _ebdSnapshotId = Nothing
    }


-- | Indicates whether the EBS volume is deleted on instance termination. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination Preserving Amazon EBS volumes on instance termination> in the /Amazon EC2 User Guide/ .
ebdDeleteOnTermination :: Lens' EBSBlockDevice (Maybe Bool)
ebdDeleteOnTermination = lens _ebdDeleteOnTermination (\ s a -> s{_ebdDeleteOnTermination = a})

-- | The throughput that the volume supports, in MiB/s. This parameter is valid only for @gp3@ volumes. Valid Range: Minimum value of 125. Maximum value of 1000.
ebdThroughput :: Lens' EBSBlockDevice (Maybe Int)
ebdThroughput = lens _ebdThroughput (\ s a -> s{_ebdThroughput = a})

-- | The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:     * @gp2@ and @gp3@ :1-16,384     * @io1@ and @io2@ : 4-16,384     * @st1@ and @sc1@ : 125-16,384     * @standard@ : 1-1,024
ebdVolumeSize :: Lens' EBSBlockDevice (Maybe Int)
ebdVolumeSize = lens _ebdVolumeSize (\ s a -> s{_ebdVolumeSize = a})

-- | The number of I/O operations per second (IOPS). For @gp3@ , @io1@ , and @io2@ volumes, this represents the number of IOPS that are provisioned for the volume. For @gp2@ volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:     * @gp3@ : 3,000-16,000 IOPS     * @io1@ : 100-64,000 IOPS     * @io2@ : 100-64,000 IOPS For @io1@ and @io2@ volumes, we guarantee 64,000 IOPS only for <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances Instances built on the Nitro System> . Other instance families guarantee performance up to 32,000 IOPS. This parameter is required for @io1@ and @io2@ volumes. The default for @gp3@ volumes is 3,000 IOPS. This parameter is not supported for @gp2@ , @st1@ , @sc1@ , or @standard@ volumes.
ebdIOPS :: Lens' EBSBlockDevice (Maybe Int)
ebdIOPS = lens _ebdIOPS (\ s a -> s{_ebdIOPS = a})

-- | The ARN of the Outpost on which the snapshot is stored.
ebdOutpostARN :: Lens' EBSBlockDevice (Maybe Text)
ebdOutpostARN = lens _ebdOutpostARN (\ s a -> s{_ebdOutpostARN = a})

-- | Indicates whether the encryption state of an EBS volume is changed while being restored from a backing snapshot. The effect of setting the encryption state to @true@ depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-parameters Amazon EBS encryption> in the /Amazon EC2 User Guide/ . In no case can you remove encryption from an encrypted volume. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances Supported instance types> . This parameter is not returned by .
ebdEncrypted :: Lens' EBSBlockDevice (Maybe Bool)
ebdEncrypted = lens _ebdEncrypted (\ s a -> s{_ebdEncrypted = a})

-- | Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted. This parameter is only supported on @BlockDeviceMapping@ objects called by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html RunInstances> , <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html RequestSpotFleet> , and <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html RequestSpotInstances> .
ebdKMSKeyId :: Lens' EBSBlockDevice (Maybe Text)
ebdKMSKeyId = lens _ebdKMSKeyId (\ s a -> s{_ebdKMSKeyId = a})

-- | The volume type. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html Amazon EBS volume types> in the /Amazon EC2 User Guide/ . If the volume type is @io1@ or @io2@ , you must specify the IOPS that the volume supports.
ebdVolumeType :: Lens' EBSBlockDevice (Maybe VolumeType)
ebdVolumeType = lens _ebdVolumeType (\ s a -> s{_ebdVolumeType = a})

-- | The ID of the snapshot.
ebdSnapshotId :: Lens' EBSBlockDevice (Maybe Text)
ebdSnapshotId = lens _ebdSnapshotId (\ s a -> s{_ebdSnapshotId = a})

instance FromXML EBSBlockDevice where
        parseXML x
          = EBSBlockDevice' <$>
              (x .@? "deleteOnTermination") <*>
                (x .@? "throughput")
                <*> (x .@? "volumeSize")
                <*> (x .@? "iops")
                <*> (x .@? "outpostArn")
                <*> (x .@? "encrypted")
                <*> (x .@? "KmsKeyId")
                <*> (x .@? "volumeType")
                <*> (x .@? "snapshotId")

instance Hashable EBSBlockDevice where

instance NFData EBSBlockDevice where

instance ToQuery EBSBlockDevice where
        toQuery EBSBlockDevice'{..}
          = mconcat
              ["DeleteOnTermination" =: _ebdDeleteOnTermination,
               "Throughput" =: _ebdThroughput,
               "VolumeSize" =: _ebdVolumeSize, "Iops" =: _ebdIOPS,
               "OutpostArn" =: _ebdOutpostARN,
               "Encrypted" =: _ebdEncrypted,
               "KmsKeyId" =: _ebdKMSKeyId,
               "VolumeType" =: _ebdVolumeType,
               "SnapshotId" =: _ebdSnapshotId]

-- | Describes the Amazon EBS features supported by the instance type.
--
--
--
-- /See:/ 'ebsInfo' smart constructor.
data EBSInfo = EBSInfo'
  { _eiEBSOptimizedInfo    :: !(Maybe EBSOptimizedInfo)
  , _eiEncryptionSupport   :: !(Maybe EBSEncryptionSupport)
  , _eiEBSOptimizedSupport :: !(Maybe EBSOptimizedSupport)
  , _eiNvmeSupport         :: !(Maybe EBSNvmeSupport)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EBSInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eiEBSOptimizedInfo' - Describes the optimized EBS performance for the instance type.
--
-- * 'eiEncryptionSupport' - Indicates whether Amazon EBS encryption is supported.
--
-- * 'eiEBSOptimizedSupport' - Indicates whether the instance type is Amazon EBS-optimized. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html Amazon EBS-optimized instances> in /Amazon EC2 User Guide/ .
--
-- * 'eiNvmeSupport' - Indicates whether non-volatile memory express (NVMe) is supported.
ebsInfo
    :: EBSInfo
ebsInfo =
  EBSInfo'
    { _eiEBSOptimizedInfo = Nothing
    , _eiEncryptionSupport = Nothing
    , _eiEBSOptimizedSupport = Nothing
    , _eiNvmeSupport = Nothing
    }


-- | Describes the optimized EBS performance for the instance type.
eiEBSOptimizedInfo :: Lens' EBSInfo (Maybe EBSOptimizedInfo)
eiEBSOptimizedInfo = lens _eiEBSOptimizedInfo (\ s a -> s{_eiEBSOptimizedInfo = a})

-- | Indicates whether Amazon EBS encryption is supported.
eiEncryptionSupport :: Lens' EBSInfo (Maybe EBSEncryptionSupport)
eiEncryptionSupport = lens _eiEncryptionSupport (\ s a -> s{_eiEncryptionSupport = a})

-- | Indicates whether the instance type is Amazon EBS-optimized. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSOptimized.html Amazon EBS-optimized instances> in /Amazon EC2 User Guide/ .
eiEBSOptimizedSupport :: Lens' EBSInfo (Maybe EBSOptimizedSupport)
eiEBSOptimizedSupport = lens _eiEBSOptimizedSupport (\ s a -> s{_eiEBSOptimizedSupport = a})

-- | Indicates whether non-volatile memory express (NVMe) is supported.
eiNvmeSupport :: Lens' EBSInfo (Maybe EBSNvmeSupport)
eiNvmeSupport = lens _eiNvmeSupport (\ s a -> s{_eiNvmeSupport = a})

instance FromXML EBSInfo where
        parseXML x
          = EBSInfo' <$>
              (x .@? "ebsOptimizedInfo") <*>
                (x .@? "encryptionSupport")
                <*> (x .@? "ebsOptimizedSupport")
                <*> (x .@? "nvmeSupport")

instance Hashable EBSInfo where

instance NFData EBSInfo where

-- | Describes a parameter used to set up an EBS volume in a block device mapping.
--
--
--
-- /See:/ 'ebsInstanceBlockDevice' smart constructor.
data EBSInstanceBlockDevice = EBSInstanceBlockDevice'
  { _eibdStatus              :: !(Maybe AttachmentStatus)
  , _eibdDeleteOnTermination :: !(Maybe Bool)
  , _eibdVolumeId            :: !(Maybe Text)
  , _eibdAttachTime          :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EBSInstanceBlockDevice' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eibdStatus' - The attachment state.
--
-- * 'eibdDeleteOnTermination' - Indicates whether the volume is deleted on instance termination.
--
-- * 'eibdVolumeId' - The ID of the EBS volume.
--
-- * 'eibdAttachTime' - The time stamp when the attachment initiated.
ebsInstanceBlockDevice
    :: EBSInstanceBlockDevice
ebsInstanceBlockDevice =
  EBSInstanceBlockDevice'
    { _eibdStatus = Nothing
    , _eibdDeleteOnTermination = Nothing
    , _eibdVolumeId = Nothing
    , _eibdAttachTime = Nothing
    }


-- | The attachment state.
eibdStatus :: Lens' EBSInstanceBlockDevice (Maybe AttachmentStatus)
eibdStatus = lens _eibdStatus (\ s a -> s{_eibdStatus = a})

-- | Indicates whether the volume is deleted on instance termination.
eibdDeleteOnTermination :: Lens' EBSInstanceBlockDevice (Maybe Bool)
eibdDeleteOnTermination = lens _eibdDeleteOnTermination (\ s a -> s{_eibdDeleteOnTermination = a})

-- | The ID of the EBS volume.
eibdVolumeId :: Lens' EBSInstanceBlockDevice (Maybe Text)
eibdVolumeId = lens _eibdVolumeId (\ s a -> s{_eibdVolumeId = a})

-- | The time stamp when the attachment initiated.
eibdAttachTime :: Lens' EBSInstanceBlockDevice (Maybe UTCTime)
eibdAttachTime = lens _eibdAttachTime (\ s a -> s{_eibdAttachTime = a}) . mapping _Time

instance FromXML EBSInstanceBlockDevice where
        parseXML x
          = EBSInstanceBlockDevice' <$>
              (x .@? "status") <*> (x .@? "deleteOnTermination")
                <*> (x .@? "volumeId")
                <*> (x .@? "attachTime")

instance Hashable EBSInstanceBlockDevice where

instance NFData EBSInstanceBlockDevice where

-- | Describes information used to set up an EBS volume specified in a block device mapping.
--
--
--
-- /See:/ 'ebsInstanceBlockDeviceSpecification' smart constructor.
data EBSInstanceBlockDeviceSpecification = EBSInstanceBlockDeviceSpecification'
  { _eibdsDeleteOnTermination :: !(Maybe Bool)
  , _eibdsVolumeId            :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EBSInstanceBlockDeviceSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eibdsDeleteOnTermination' - Indicates whether the volume is deleted on instance termination.
--
-- * 'eibdsVolumeId' - The ID of the EBS volume.
ebsInstanceBlockDeviceSpecification
    :: EBSInstanceBlockDeviceSpecification
ebsInstanceBlockDeviceSpecification =
  EBSInstanceBlockDeviceSpecification'
    {_eibdsDeleteOnTermination = Nothing, _eibdsVolumeId = Nothing}


-- | Indicates whether the volume is deleted on instance termination.
eibdsDeleteOnTermination :: Lens' EBSInstanceBlockDeviceSpecification (Maybe Bool)
eibdsDeleteOnTermination = lens _eibdsDeleteOnTermination (\ s a -> s{_eibdsDeleteOnTermination = a})

-- | The ID of the EBS volume.
eibdsVolumeId :: Lens' EBSInstanceBlockDeviceSpecification (Maybe Text)
eibdsVolumeId = lens _eibdsVolumeId (\ s a -> s{_eibdsVolumeId = a})

instance Hashable EBSInstanceBlockDeviceSpecification
         where

instance NFData EBSInstanceBlockDeviceSpecification
         where

instance ToQuery EBSInstanceBlockDeviceSpecification
         where
        toQuery EBSInstanceBlockDeviceSpecification'{..}
          = mconcat
              ["DeleteOnTermination" =: _eibdsDeleteOnTermination,
               "VolumeId" =: _eibdsVolumeId]

-- | Describes the optimized EBS performance for supported instance types.
--
--
--
-- /See:/ 'ebsOptimizedInfo' smart constructor.
data EBSOptimizedInfo = EBSOptimizedInfo'
  { _eoiMaximumIOPS              :: !(Maybe Int)
  , _eoiBaselineIOPS             :: !(Maybe Int)
  , _eoiMaximumThroughputInMBps  :: !(Maybe Double)
  , _eoiMaximumBandwidthInMbps   :: !(Maybe Int)
  , _eoiBaselineBandwidthInMbps  :: !(Maybe Int)
  , _eoiBaselineThroughputInMBps :: !(Maybe Double)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EBSOptimizedInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eoiMaximumIOPS' - The maximum input/output storage operations per second for an EBS-optimized instance type.
--
-- * 'eoiBaselineIOPS' - The baseline input/output storage operations per seconds for an EBS-optimized instance type.
--
-- * 'eoiMaximumThroughputInMBps' - The maximum throughput performance for an EBS-optimized instance type, in MB/s.
--
-- * 'eoiMaximumBandwidthInMbps' - The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
--
-- * 'eoiBaselineBandwidthInMbps' - The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
--
-- * 'eoiBaselineThroughputInMBps' - The baseline throughput performance for an EBS-optimized instance type, in MB/s.
ebsOptimizedInfo
    :: EBSOptimizedInfo
ebsOptimizedInfo =
  EBSOptimizedInfo'
    { _eoiMaximumIOPS = Nothing
    , _eoiBaselineIOPS = Nothing
    , _eoiMaximumThroughputInMBps = Nothing
    , _eoiMaximumBandwidthInMbps = Nothing
    , _eoiBaselineBandwidthInMbps = Nothing
    , _eoiBaselineThroughputInMBps = Nothing
    }


-- | The maximum input/output storage operations per second for an EBS-optimized instance type.
eoiMaximumIOPS :: Lens' EBSOptimizedInfo (Maybe Int)
eoiMaximumIOPS = lens _eoiMaximumIOPS (\ s a -> s{_eoiMaximumIOPS = a})

-- | The baseline input/output storage operations per seconds for an EBS-optimized instance type.
eoiBaselineIOPS :: Lens' EBSOptimizedInfo (Maybe Int)
eoiBaselineIOPS = lens _eoiBaselineIOPS (\ s a -> s{_eoiBaselineIOPS = a})

-- | The maximum throughput performance for an EBS-optimized instance type, in MB/s.
eoiMaximumThroughputInMBps :: Lens' EBSOptimizedInfo (Maybe Double)
eoiMaximumThroughputInMBps = lens _eoiMaximumThroughputInMBps (\ s a -> s{_eoiMaximumThroughputInMBps = a})

-- | The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
eoiMaximumBandwidthInMbps :: Lens' EBSOptimizedInfo (Maybe Int)
eoiMaximumBandwidthInMbps = lens _eoiMaximumBandwidthInMbps (\ s a -> s{_eoiMaximumBandwidthInMbps = a})

-- | The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
eoiBaselineBandwidthInMbps :: Lens' EBSOptimizedInfo (Maybe Int)
eoiBaselineBandwidthInMbps = lens _eoiBaselineBandwidthInMbps (\ s a -> s{_eoiBaselineBandwidthInMbps = a})

-- | The baseline throughput performance for an EBS-optimized instance type, in MB/s.
eoiBaselineThroughputInMBps :: Lens' EBSOptimizedInfo (Maybe Double)
eoiBaselineThroughputInMBps = lens _eoiBaselineThroughputInMBps (\ s a -> s{_eoiBaselineThroughputInMBps = a})

instance FromXML EBSOptimizedInfo where
        parseXML x
          = EBSOptimizedInfo' <$>
              (x .@? "maximumIops") <*> (x .@? "baselineIops") <*>
                (x .@? "maximumThroughputInMBps")
                <*> (x .@? "maximumBandwidthInMbps")
                <*> (x .@? "baselineBandwidthInMbps")
                <*> (x .@? "baselineThroughputInMBps")

instance Hashable EBSOptimizedInfo where

instance NFData EBSOptimizedInfo where

-- | Describes an egress-only internet gateway.
--
--
--
-- /See:/ 'egressOnlyInternetGateway' smart constructor.
data EgressOnlyInternetGateway = EgressOnlyInternetGateway'
  { _eoigEgressOnlyInternetGatewayId :: !(Maybe Text)
  , _eoigAttachments                 :: !(Maybe [InternetGatewayAttachment])
  , _eoigTags                        :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EgressOnlyInternetGateway' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eoigEgressOnlyInternetGatewayId' - The ID of the egress-only internet gateway.
--
-- * 'eoigAttachments' - Information about the attachment of the egress-only internet gateway.
--
-- * 'eoigTags' - The tags assigned to the egress-only internet gateway.
egressOnlyInternetGateway
    :: EgressOnlyInternetGateway
egressOnlyInternetGateway =
  EgressOnlyInternetGateway'
    { _eoigEgressOnlyInternetGatewayId = Nothing
    , _eoigAttachments = Nothing
    , _eoigTags = Nothing
    }


-- | The ID of the egress-only internet gateway.
eoigEgressOnlyInternetGatewayId :: Lens' EgressOnlyInternetGateway (Maybe Text)
eoigEgressOnlyInternetGatewayId = lens _eoigEgressOnlyInternetGatewayId (\ s a -> s{_eoigEgressOnlyInternetGatewayId = a})

-- | Information about the attachment of the egress-only internet gateway.
eoigAttachments :: Lens' EgressOnlyInternetGateway [InternetGatewayAttachment]
eoigAttachments = lens _eoigAttachments (\ s a -> s{_eoigAttachments = a}) . _Default . _Coerce

-- | The tags assigned to the egress-only internet gateway.
eoigTags :: Lens' EgressOnlyInternetGateway [Tag]
eoigTags = lens _eoigTags (\ s a -> s{_eoigTags = a}) . _Default . _Coerce

instance FromXML EgressOnlyInternetGateway where
        parseXML x
          = EgressOnlyInternetGateway' <$>
              (x .@? "egressOnlyInternetGatewayId") <*>
                (x .@? "attachmentSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable EgressOnlyInternetGateway where

instance NFData EgressOnlyInternetGateway where

-- | Describes the association between an instance and an Elastic Graphics accelerator.
--
--
--
-- /See:/ 'elasticGpuAssociation' smart constructor.
data ElasticGpuAssociation = ElasticGpuAssociation'
  { _egaElasticGpuId               :: !(Maybe Text)
  , _egaElasticGpuAssociationId    :: !(Maybe Text)
  , _egaElasticGpuAssociationTime  :: !(Maybe Text)
  , _egaElasticGpuAssociationState :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ElasticGpuAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'egaElasticGpuId' - The ID of the Elastic Graphics accelerator.
--
-- * 'egaElasticGpuAssociationId' - The ID of the association.
--
-- * 'egaElasticGpuAssociationTime' - The time the Elastic Graphics accelerator was associated with the instance.
--
-- * 'egaElasticGpuAssociationState' - The state of the association between the instance and the Elastic Graphics accelerator.
elasticGpuAssociation
    :: ElasticGpuAssociation
elasticGpuAssociation =
  ElasticGpuAssociation'
    { _egaElasticGpuId = Nothing
    , _egaElasticGpuAssociationId = Nothing
    , _egaElasticGpuAssociationTime = Nothing
    , _egaElasticGpuAssociationState = Nothing
    }


-- | The ID of the Elastic Graphics accelerator.
egaElasticGpuId :: Lens' ElasticGpuAssociation (Maybe Text)
egaElasticGpuId = lens _egaElasticGpuId (\ s a -> s{_egaElasticGpuId = a})

-- | The ID of the association.
egaElasticGpuAssociationId :: Lens' ElasticGpuAssociation (Maybe Text)
egaElasticGpuAssociationId = lens _egaElasticGpuAssociationId (\ s a -> s{_egaElasticGpuAssociationId = a})

-- | The time the Elastic Graphics accelerator was associated with the instance.
egaElasticGpuAssociationTime :: Lens' ElasticGpuAssociation (Maybe Text)
egaElasticGpuAssociationTime = lens _egaElasticGpuAssociationTime (\ s a -> s{_egaElasticGpuAssociationTime = a})

-- | The state of the association between the instance and the Elastic Graphics accelerator.
egaElasticGpuAssociationState :: Lens' ElasticGpuAssociation (Maybe Text)
egaElasticGpuAssociationState = lens _egaElasticGpuAssociationState (\ s a -> s{_egaElasticGpuAssociationState = a})

instance FromXML ElasticGpuAssociation where
        parseXML x
          = ElasticGpuAssociation' <$>
              (x .@? "elasticGpuId") <*>
                (x .@? "elasticGpuAssociationId")
                <*> (x .@? "elasticGpuAssociationTime")
                <*> (x .@? "elasticGpuAssociationState")

instance Hashable ElasticGpuAssociation where

instance NFData ElasticGpuAssociation where

-- | Describes the status of an Elastic Graphics accelerator.
--
--
--
-- /See:/ 'elasticGpuHealth' smart constructor.
newtype ElasticGpuHealth = ElasticGpuHealth'
  { _eghStatus :: Maybe ElasticGpuStatus
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ElasticGpuHealth' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eghStatus' - The health status.
elasticGpuHealth
    :: ElasticGpuHealth
elasticGpuHealth = ElasticGpuHealth' {_eghStatus = Nothing}


-- | The health status.
eghStatus :: Lens' ElasticGpuHealth (Maybe ElasticGpuStatus)
eghStatus = lens _eghStatus (\ s a -> s{_eghStatus = a})

instance FromXML ElasticGpuHealth where
        parseXML x = ElasticGpuHealth' <$> (x .@? "status")

instance Hashable ElasticGpuHealth where

instance NFData ElasticGpuHealth where

-- | A specification for an Elastic Graphics accelerator.
--
--
--
-- /See:/ 'elasticGpuSpecification' smart constructor.
newtype ElasticGpuSpecification = ElasticGpuSpecification'
  { _egsType :: Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ElasticGpuSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'egsType' - The type of Elastic Graphics accelerator. For more information about the values to specify for @Type@ , see <https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html#elastic-graphics-basics Elastic Graphics Basics> , specifically the Elastic Graphics accelerator column, in the /Amazon Elastic Compute Cloud User Guide for Windows Instances/ .
elasticGpuSpecification
    :: Text -- ^ 'egsType'
    -> ElasticGpuSpecification
elasticGpuSpecification pType_ = ElasticGpuSpecification' {_egsType = pType_}


-- | The type of Elastic Graphics accelerator. For more information about the values to specify for @Type@ , see <https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html#elastic-graphics-basics Elastic Graphics Basics> , specifically the Elastic Graphics accelerator column, in the /Amazon Elastic Compute Cloud User Guide for Windows Instances/ .
egsType :: Lens' ElasticGpuSpecification Text
egsType = lens _egsType (\ s a -> s{_egsType = a})

instance Hashable ElasticGpuSpecification where

instance NFData ElasticGpuSpecification where

instance ToQuery ElasticGpuSpecification where
        toQuery ElasticGpuSpecification'{..}
          = mconcat ["Type" =: _egsType]

-- | Describes an elastic GPU.
--
--
--
-- /See:/ 'elasticGpuSpecificationResponse' smart constructor.
newtype ElasticGpuSpecificationResponse = ElasticGpuSpecificationResponse'
  { _eType :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ElasticGpuSpecificationResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eType' - The elastic GPU type.
elasticGpuSpecificationResponse
    :: ElasticGpuSpecificationResponse
elasticGpuSpecificationResponse =
  ElasticGpuSpecificationResponse' {_eType = Nothing}


-- | The elastic GPU type.
eType :: Lens' ElasticGpuSpecificationResponse (Maybe Text)
eType = lens _eType (\ s a -> s{_eType = a})

instance FromXML ElasticGpuSpecificationResponse
         where
        parseXML x
          = ElasticGpuSpecificationResponse' <$> (x .@? "type")

instance Hashable ElasticGpuSpecificationResponse
         where

instance NFData ElasticGpuSpecificationResponse where

-- | Describes an Elastic Graphics accelerator.
--
--
--
-- /See:/ 'elasticGpus' smart constructor.
data ElasticGpus = ElasticGpus'
  { _egInstanceId       :: !(Maybe Text)
  , _egElasticGpuType   :: !(Maybe Text)
  , _egElasticGpuId     :: !(Maybe Text)
  , _egElasticGpuState  :: !(Maybe ElasticGpuState)
  , _egElasticGpuHealth :: !(Maybe ElasticGpuHealth)
  , _egAvailabilityZone :: !(Maybe Text)
  , _egTags             :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ElasticGpus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'egInstanceId' - The ID of the instance to which the Elastic Graphics accelerator is attached.
--
-- * 'egElasticGpuType' - The type of Elastic Graphics accelerator.
--
-- * 'egElasticGpuId' - The ID of the Elastic Graphics accelerator.
--
-- * 'egElasticGpuState' - The state of the Elastic Graphics accelerator.
--
-- * 'egElasticGpuHealth' - The status of the Elastic Graphics accelerator.
--
-- * 'egAvailabilityZone' - The Availability Zone in the which the Elastic Graphics accelerator resides.
--
-- * 'egTags' - The tags assigned to the Elastic Graphics accelerator.
elasticGpus
    :: ElasticGpus
elasticGpus =
  ElasticGpus'
    { _egInstanceId = Nothing
    , _egElasticGpuType = Nothing
    , _egElasticGpuId = Nothing
    , _egElasticGpuState = Nothing
    , _egElasticGpuHealth = Nothing
    , _egAvailabilityZone = Nothing
    , _egTags = Nothing
    }


-- | The ID of the instance to which the Elastic Graphics accelerator is attached.
egInstanceId :: Lens' ElasticGpus (Maybe Text)
egInstanceId = lens _egInstanceId (\ s a -> s{_egInstanceId = a})

-- | The type of Elastic Graphics accelerator.
egElasticGpuType :: Lens' ElasticGpus (Maybe Text)
egElasticGpuType = lens _egElasticGpuType (\ s a -> s{_egElasticGpuType = a})

-- | The ID of the Elastic Graphics accelerator.
egElasticGpuId :: Lens' ElasticGpus (Maybe Text)
egElasticGpuId = lens _egElasticGpuId (\ s a -> s{_egElasticGpuId = a})

-- | The state of the Elastic Graphics accelerator.
egElasticGpuState :: Lens' ElasticGpus (Maybe ElasticGpuState)
egElasticGpuState = lens _egElasticGpuState (\ s a -> s{_egElasticGpuState = a})

-- | The status of the Elastic Graphics accelerator.
egElasticGpuHealth :: Lens' ElasticGpus (Maybe ElasticGpuHealth)
egElasticGpuHealth = lens _egElasticGpuHealth (\ s a -> s{_egElasticGpuHealth = a})

-- | The Availability Zone in the which the Elastic Graphics accelerator resides.
egAvailabilityZone :: Lens' ElasticGpus (Maybe Text)
egAvailabilityZone = lens _egAvailabilityZone (\ s a -> s{_egAvailabilityZone = a})

-- | The tags assigned to the Elastic Graphics accelerator.
egTags :: Lens' ElasticGpus [Tag]
egTags = lens _egTags (\ s a -> s{_egTags = a}) . _Default . _Coerce

instance FromXML ElasticGpus where
        parseXML x
          = ElasticGpus' <$>
              (x .@? "instanceId") <*> (x .@? "elasticGpuType") <*>
                (x .@? "elasticGpuId")
                <*> (x .@? "elasticGpuState")
                <*> (x .@? "elasticGpuHealth")
                <*> (x .@? "availabilityZone")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ElasticGpus where

instance NFData ElasticGpus where

-- | Describes an elastic inference accelerator.
--
--
--
-- /See:/ 'elasticInferenceAccelerator' smart constructor.
data ElasticInferenceAccelerator = ElasticInferenceAccelerator'
  { _eiaCount :: !(Maybe Nat)
  , _eiaType  :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ElasticInferenceAccelerator' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eiaCount' - The number of elastic inference accelerators to attach to the instance.  Default: 1
--
-- * 'eiaType' - The type of elastic inference accelerator. The possible values are @eia1.medium@ , @eia1.large@ , @eia1.xlarge@ , @eia2.medium@ , @eia2.large@ , and @eia2.xlarge@ .
elasticInferenceAccelerator
    :: Text -- ^ 'eiaType'
    -> ElasticInferenceAccelerator
elasticInferenceAccelerator pType_ =
  ElasticInferenceAccelerator' {_eiaCount = Nothing, _eiaType = pType_}


-- | The number of elastic inference accelerators to attach to the instance.  Default: 1
eiaCount :: Lens' ElasticInferenceAccelerator (Maybe Natural)
eiaCount = lens _eiaCount (\ s a -> s{_eiaCount = a}) . mapping _Nat

-- | The type of elastic inference accelerator. The possible values are @eia1.medium@ , @eia1.large@ , @eia1.xlarge@ , @eia2.medium@ , @eia2.large@ , and @eia2.xlarge@ .
eiaType :: Lens' ElasticInferenceAccelerator Text
eiaType = lens _eiaType (\ s a -> s{_eiaType = a})

instance Hashable ElasticInferenceAccelerator where

instance NFData ElasticInferenceAccelerator where

instance ToQuery ElasticInferenceAccelerator where
        toQuery ElasticInferenceAccelerator'{..}
          = mconcat ["Count" =: _eiaCount, "Type" =: _eiaType]

-- | Describes the association between an instance and an elastic inference accelerator.
--
--
--
-- /See:/ 'elasticInferenceAcceleratorAssociation' smart constructor.
data ElasticInferenceAcceleratorAssociation = ElasticInferenceAcceleratorAssociation'
  { _eiaaElasticInferenceAcceleratorAssociationState :: !(Maybe Text)
  , _eiaaElasticInferenceAcceleratorAssociationTime  :: !(Maybe ISO8601)
  , _eiaaElasticInferenceAcceleratorARN              :: !(Maybe Text)
  , _eiaaElasticInferenceAcceleratorAssociationId    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ElasticInferenceAcceleratorAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eiaaElasticInferenceAcceleratorAssociationState' - The state of the elastic inference accelerator.
--
-- * 'eiaaElasticInferenceAcceleratorAssociationTime' - The time at which the elastic inference accelerator is associated with an instance.
--
-- * 'eiaaElasticInferenceAcceleratorARN' - The Amazon Resource Name (ARN) of the elastic inference accelerator.
--
-- * 'eiaaElasticInferenceAcceleratorAssociationId' - The ID of the association.
elasticInferenceAcceleratorAssociation
    :: ElasticInferenceAcceleratorAssociation
elasticInferenceAcceleratorAssociation =
  ElasticInferenceAcceleratorAssociation'
    { _eiaaElasticInferenceAcceleratorAssociationState = Nothing
    , _eiaaElasticInferenceAcceleratorAssociationTime = Nothing
    , _eiaaElasticInferenceAcceleratorARN = Nothing
    , _eiaaElasticInferenceAcceleratorAssociationId = Nothing
    }


-- | The state of the elastic inference accelerator.
eiaaElasticInferenceAcceleratorAssociationState :: Lens' ElasticInferenceAcceleratorAssociation (Maybe Text)
eiaaElasticInferenceAcceleratorAssociationState = lens _eiaaElasticInferenceAcceleratorAssociationState (\ s a -> s{_eiaaElasticInferenceAcceleratorAssociationState = a})

-- | The time at which the elastic inference accelerator is associated with an instance.
eiaaElasticInferenceAcceleratorAssociationTime :: Lens' ElasticInferenceAcceleratorAssociation (Maybe UTCTime)
eiaaElasticInferenceAcceleratorAssociationTime = lens _eiaaElasticInferenceAcceleratorAssociationTime (\ s a -> s{_eiaaElasticInferenceAcceleratorAssociationTime = a}) . mapping _Time

-- | The Amazon Resource Name (ARN) of the elastic inference accelerator.
eiaaElasticInferenceAcceleratorARN :: Lens' ElasticInferenceAcceleratorAssociation (Maybe Text)
eiaaElasticInferenceAcceleratorARN = lens _eiaaElasticInferenceAcceleratorARN (\ s a -> s{_eiaaElasticInferenceAcceleratorARN = a})

-- | The ID of the association.
eiaaElasticInferenceAcceleratorAssociationId :: Lens' ElasticInferenceAcceleratorAssociation (Maybe Text)
eiaaElasticInferenceAcceleratorAssociationId = lens _eiaaElasticInferenceAcceleratorAssociationId (\ s a -> s{_eiaaElasticInferenceAcceleratorAssociationId = a})

instance FromXML
           ElasticInferenceAcceleratorAssociation
         where
        parseXML x
          = ElasticInferenceAcceleratorAssociation' <$>
              (x .@? "elasticInferenceAcceleratorAssociationState")
                <*>
                (x .@? "elasticInferenceAcceleratorAssociationTime")
                <*> (x .@? "elasticInferenceAcceleratorArn")
                <*>
                (x .@? "elasticInferenceAcceleratorAssociationId")

instance Hashable
           ElasticInferenceAcceleratorAssociation
         where

instance NFData
           ElasticInferenceAcceleratorAssociation
         where

-- | Contains information about the errors that occurred when enabling fast snapshot restores.
--
--
--
-- /See:/ 'enableFastSnapshotRestoreErrorItem' smart constructor.
data EnableFastSnapshotRestoreErrorItem = EnableFastSnapshotRestoreErrorItem'
  { _efsreiFastSnapshotRestoreStateErrors :: !(Maybe [EnableFastSnapshotRestoreStateErrorItem])
  , _efsreiSnapshotId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EnableFastSnapshotRestoreErrorItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'efsreiFastSnapshotRestoreStateErrors' - The errors.
--
-- * 'efsreiSnapshotId' - The ID of the snapshot.
enableFastSnapshotRestoreErrorItem
    :: EnableFastSnapshotRestoreErrorItem
enableFastSnapshotRestoreErrorItem =
  EnableFastSnapshotRestoreErrorItem'
    { _efsreiFastSnapshotRestoreStateErrors = Nothing
    , _efsreiSnapshotId = Nothing
    }


-- | The errors.
efsreiFastSnapshotRestoreStateErrors :: Lens' EnableFastSnapshotRestoreErrorItem [EnableFastSnapshotRestoreStateErrorItem]
efsreiFastSnapshotRestoreStateErrors = lens _efsreiFastSnapshotRestoreStateErrors (\ s a -> s{_efsreiFastSnapshotRestoreStateErrors = a}) . _Default . _Coerce

-- | The ID of the snapshot.
efsreiSnapshotId :: Lens' EnableFastSnapshotRestoreErrorItem (Maybe Text)
efsreiSnapshotId = lens _efsreiSnapshotId (\ s a -> s{_efsreiSnapshotId = a})

instance FromXML EnableFastSnapshotRestoreErrorItem
         where
        parseXML x
          = EnableFastSnapshotRestoreErrorItem' <$>
              (x .@? "fastSnapshotRestoreStateErrorSet" .!@ mempty
                 >>= may (parseXMLList "item"))
                <*> (x .@? "snapshotId")

instance Hashable EnableFastSnapshotRestoreErrorItem
         where

instance NFData EnableFastSnapshotRestoreErrorItem
         where

-- | Describes an error that occurred when enabling fast snapshot restores.
--
--
--
-- /See:/ 'enableFastSnapshotRestoreStateError' smart constructor.
data EnableFastSnapshotRestoreStateError = EnableFastSnapshotRestoreStateError'
  { _efsrseCode    :: !(Maybe Text)
  , _efsrseMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EnableFastSnapshotRestoreStateError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'efsrseCode' - The error code.
--
-- * 'efsrseMessage' - The error message.
enableFastSnapshotRestoreStateError
    :: EnableFastSnapshotRestoreStateError
enableFastSnapshotRestoreStateError =
  EnableFastSnapshotRestoreStateError'
    {_efsrseCode = Nothing, _efsrseMessage = Nothing}


-- | The error code.
efsrseCode :: Lens' EnableFastSnapshotRestoreStateError (Maybe Text)
efsrseCode = lens _efsrseCode (\ s a -> s{_efsrseCode = a})

-- | The error message.
efsrseMessage :: Lens' EnableFastSnapshotRestoreStateError (Maybe Text)
efsrseMessage = lens _efsrseMessage (\ s a -> s{_efsrseMessage = a})

instance FromXML EnableFastSnapshotRestoreStateError
         where
        parseXML x
          = EnableFastSnapshotRestoreStateError' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable EnableFastSnapshotRestoreStateError
         where

instance NFData EnableFastSnapshotRestoreStateError
         where

-- | Contains information about an error that occurred when enabling fast snapshot restores.
--
--
--
-- /See:/ 'enableFastSnapshotRestoreStateErrorItem' smart constructor.
data EnableFastSnapshotRestoreStateErrorItem = EnableFastSnapshotRestoreStateErrorItem'
  { _efsrseiError            :: !(Maybe EnableFastSnapshotRestoreStateError)
  , _efsrseiAvailabilityZone :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EnableFastSnapshotRestoreStateErrorItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'efsrseiError' - The error.
--
-- * 'efsrseiAvailabilityZone' - The Availability Zone.
enableFastSnapshotRestoreStateErrorItem
    :: EnableFastSnapshotRestoreStateErrorItem
enableFastSnapshotRestoreStateErrorItem =
  EnableFastSnapshotRestoreStateErrorItem'
    {_efsrseiError = Nothing, _efsrseiAvailabilityZone = Nothing}


-- | The error.
efsrseiError :: Lens' EnableFastSnapshotRestoreStateErrorItem (Maybe EnableFastSnapshotRestoreStateError)
efsrseiError = lens _efsrseiError (\ s a -> s{_efsrseiError = a})

-- | The Availability Zone.
efsrseiAvailabilityZone :: Lens' EnableFastSnapshotRestoreStateErrorItem (Maybe Text)
efsrseiAvailabilityZone = lens _efsrseiAvailabilityZone (\ s a -> s{_efsrseiAvailabilityZone = a})

instance FromXML
           EnableFastSnapshotRestoreStateErrorItem
         where
        parseXML x
          = EnableFastSnapshotRestoreStateErrorItem' <$>
              (x .@? "error") <*> (x .@? "availabilityZone")

instance Hashable
           EnableFastSnapshotRestoreStateErrorItem
         where

instance NFData
           EnableFastSnapshotRestoreStateErrorItem
         where

-- | Describes fast snapshot restores that were successfully enabled.
--
--
--
-- /See:/ 'enableFastSnapshotRestoreSuccessItem' smart constructor.
data EnableFastSnapshotRestoreSuccessItem = EnableFastSnapshotRestoreSuccessItem'
  { _efsrsiDisablingTime         :: !(Maybe ISO8601)
  , _efsrsiState                 :: !(Maybe FastSnapshotRestoreStateCode)
  , _efsrsiOwnerAlias            :: !(Maybe Text)
  , _efsrsiDisabledTime          :: !(Maybe ISO8601)
  , _efsrsiEnabledTime           :: !(Maybe ISO8601)
  , _efsrsiOptimizingTime        :: !(Maybe ISO8601)
  , _efsrsiOwnerId               :: !(Maybe Text)
  , _efsrsiStateTransitionReason :: !(Maybe Text)
  , _efsrsiAvailabilityZone      :: !(Maybe Text)
  , _efsrsiSnapshotId            :: !(Maybe Text)
  , _efsrsiEnablingTime          :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EnableFastSnapshotRestoreSuccessItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'efsrsiDisablingTime' - The time at which fast snapshot restores entered the @disabling@ state.
--
-- * 'efsrsiState' - The state of fast snapshot restores.
--
-- * 'efsrsiOwnerAlias' - The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
--
-- * 'efsrsiDisabledTime' - The time at which fast snapshot restores entered the @disabled@ state.
--
-- * 'efsrsiEnabledTime' - The time at which fast snapshot restores entered the @enabled@ state.
--
-- * 'efsrsiOptimizingTime' - The time at which fast snapshot restores entered the @optimizing@ state.
--
-- * 'efsrsiOwnerId' - The ID of the AWS account that enabled fast snapshot restores on the snapshot.
--
-- * 'efsrsiStateTransitionReason' - The reason for the state transition. The possible values are as follows:     * @Client.UserInitiated@ - The state successfully transitioned to @enabling@ or @disabling@ .     * @Client.UserInitiated - Lifecycle state transition@ - The state successfully transitioned to @optimizing@ , @enabled@ , or @disabled@ .
--
-- * 'efsrsiAvailabilityZone' - The Availability Zone.
--
-- * 'efsrsiSnapshotId' - The ID of the snapshot.
--
-- * 'efsrsiEnablingTime' - The time at which fast snapshot restores entered the @enabling@ state.
enableFastSnapshotRestoreSuccessItem
    :: EnableFastSnapshotRestoreSuccessItem
enableFastSnapshotRestoreSuccessItem =
  EnableFastSnapshotRestoreSuccessItem'
    { _efsrsiDisablingTime = Nothing
    , _efsrsiState = Nothing
    , _efsrsiOwnerAlias = Nothing
    , _efsrsiDisabledTime = Nothing
    , _efsrsiEnabledTime = Nothing
    , _efsrsiOptimizingTime = Nothing
    , _efsrsiOwnerId = Nothing
    , _efsrsiStateTransitionReason = Nothing
    , _efsrsiAvailabilityZone = Nothing
    , _efsrsiSnapshotId = Nothing
    , _efsrsiEnablingTime = Nothing
    }


-- | The time at which fast snapshot restores entered the @disabling@ state.
efsrsiDisablingTime :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
efsrsiDisablingTime = lens _efsrsiDisablingTime (\ s a -> s{_efsrsiDisablingTime = a}) . mapping _Time

-- | The state of fast snapshot restores.
efsrsiState :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe FastSnapshotRestoreStateCode)
efsrsiState = lens _efsrsiState (\ s a -> s{_efsrsiState = a})

-- | The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
efsrsiOwnerAlias :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe Text)
efsrsiOwnerAlias = lens _efsrsiOwnerAlias (\ s a -> s{_efsrsiOwnerAlias = a})

-- | The time at which fast snapshot restores entered the @disabled@ state.
efsrsiDisabledTime :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
efsrsiDisabledTime = lens _efsrsiDisabledTime (\ s a -> s{_efsrsiDisabledTime = a}) . mapping _Time

-- | The time at which fast snapshot restores entered the @enabled@ state.
efsrsiEnabledTime :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
efsrsiEnabledTime = lens _efsrsiEnabledTime (\ s a -> s{_efsrsiEnabledTime = a}) . mapping _Time

-- | The time at which fast snapshot restores entered the @optimizing@ state.
efsrsiOptimizingTime :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
efsrsiOptimizingTime = lens _efsrsiOptimizingTime (\ s a -> s{_efsrsiOptimizingTime = a}) . mapping _Time

-- | The ID of the AWS account that enabled fast snapshot restores on the snapshot.
efsrsiOwnerId :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe Text)
efsrsiOwnerId = lens _efsrsiOwnerId (\ s a -> s{_efsrsiOwnerId = a})

-- | The reason for the state transition. The possible values are as follows:     * @Client.UserInitiated@ - The state successfully transitioned to @enabling@ or @disabling@ .     * @Client.UserInitiated - Lifecycle state transition@ - The state successfully transitioned to @optimizing@ , @enabled@ , or @disabled@ .
efsrsiStateTransitionReason :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe Text)
efsrsiStateTransitionReason = lens _efsrsiStateTransitionReason (\ s a -> s{_efsrsiStateTransitionReason = a})

-- | The Availability Zone.
efsrsiAvailabilityZone :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe Text)
efsrsiAvailabilityZone = lens _efsrsiAvailabilityZone (\ s a -> s{_efsrsiAvailabilityZone = a})

-- | The ID of the snapshot.
efsrsiSnapshotId :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe Text)
efsrsiSnapshotId = lens _efsrsiSnapshotId (\ s a -> s{_efsrsiSnapshotId = a})

-- | The time at which fast snapshot restores entered the @enabling@ state.
efsrsiEnablingTime :: Lens' EnableFastSnapshotRestoreSuccessItem (Maybe UTCTime)
efsrsiEnablingTime = lens _efsrsiEnablingTime (\ s a -> s{_efsrsiEnablingTime = a}) . mapping _Time

instance FromXML EnableFastSnapshotRestoreSuccessItem
         where
        parseXML x
          = EnableFastSnapshotRestoreSuccessItem' <$>
              (x .@? "disablingTime") <*> (x .@? "state") <*>
                (x .@? "ownerAlias")
                <*> (x .@? "disabledTime")
                <*> (x .@? "enabledTime")
                <*> (x .@? "optimizingTime")
                <*> (x .@? "ownerId")
                <*> (x .@? "stateTransitionReason")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "snapshotId")
                <*> (x .@? "enablingTime")

instance Hashable
           EnableFastSnapshotRestoreSuccessItem
         where

instance NFData EnableFastSnapshotRestoreSuccessItem
         where

-- | Indicates whether the instance is enabled for AWS Nitro Enclaves.
--
--
--
-- /See:/ 'enclaveOptions' smart constructor.
newtype EnclaveOptions = EnclaveOptions'
  { _eoEnabled :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EnclaveOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eoEnabled' - If this parameter is set to @true@ , the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
enclaveOptions
    :: EnclaveOptions
enclaveOptions = EnclaveOptions' {_eoEnabled = Nothing}


-- | If this parameter is set to @true@ , the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
eoEnabled :: Lens' EnclaveOptions (Maybe Bool)
eoEnabled = lens _eoEnabled (\ s a -> s{_eoEnabled = a})

instance FromXML EnclaveOptions where
        parseXML x = EnclaveOptions' <$> (x .@? "enabled")

instance Hashable EnclaveOptions where

instance NFData EnclaveOptions where

-- | Indicates whether the instance is enabled for AWS Nitro Enclaves. For more information, see <https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html What is AWS Nitro Enclaves?> in the /AWS Nitro Enclaves User Guide/ .
--
--
--
-- /See:/ 'enclaveOptionsRequest' smart constructor.
newtype EnclaveOptionsRequest = EnclaveOptionsRequest'
  { _eorEnabled :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EnclaveOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eorEnabled' - To enable the instance for AWS Nitro Enclaves, set this parameter to @true@ .
enclaveOptionsRequest
    :: EnclaveOptionsRequest
enclaveOptionsRequest = EnclaveOptionsRequest' {_eorEnabled = Nothing}


-- | To enable the instance for AWS Nitro Enclaves, set this parameter to @true@ .
eorEnabled :: Lens' EnclaveOptionsRequest (Maybe Bool)
eorEnabled = lens _eorEnabled (\ s a -> s{_eorEnabled = a})

instance Hashable EnclaveOptionsRequest where

instance NFData EnclaveOptionsRequest where

instance ToQuery EnclaveOptionsRequest where
        toQuery EnclaveOptionsRequest'{..}
          = mconcat ["Enabled" =: _eorEnabled]

-- | Describes an EC2 Fleet or Spot Fleet event.
--
--
--
-- /See:/ 'eventInformation' smart constructor.
data EventInformation = EventInformation'
  { _eiInstanceId       :: !(Maybe Text)
  , _eiEventDescription :: !(Maybe Text)
  , _eiEventSubType     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'EventInformation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eiInstanceId' - The ID of the instance. This information is available only for @instanceChange@ events.
--
-- * 'eiEventDescription' - The description of the event.
--
-- * 'eiEventSubType' - The event. The following are the @error@ events:     * @iamFleetRoleInvalid@ - The EC2 Fleet or Spot Fleet did not have the required permissions either to launch or terminate an instance.     * @spotFleetRequestConfigurationInvalid@ - The configuration is not valid. For more information, see the description of the event.     * @spotInstanceCountLimitExceeded@ - You've reached the limit on the number of Spot Instances that you can launch. The following are the @fleetRequestChange@ events:     * @active@ - The EC2 Fleet or Spot Fleet request has been validated and Amazon EC2 is attempting to maintain the target number of running Spot Instances.     * @cancelled@ - The EC2 Fleet or Spot Fleet request is canceled and has no running Spot Instances. The EC2 Fleet or Spot Fleet will be deleted two days after its instances were terminated.     * @cancelled_running@ - The EC2 Fleet or Spot Fleet request is canceled and does not launch additional Spot Instances. Existing Spot Instances continue to run until they are interrupted or terminated.     * @cancelled_terminating@ - The EC2 Fleet or Spot Fleet request is canceled and its Spot Instances are terminating.     * @expired@ - The EC2 Fleet or Spot Fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with @TerminateInstancesWithExpiration@ set.     * @modify_in_progress@ - A request to modify the EC2 Fleet or Spot Fleet request was accepted and is in progress.     * @modify_successful@ - The EC2 Fleet or Spot Fleet request was modified.     * @price_update@ - The price for a launch configuration was adjusted because it was too high. This change is permanent.     * @submitted@ - The EC2 Fleet or Spot Fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot Instances. The following are the @instanceChange@ events:     * @launched@ - A request was fulfilled and a new instance was launched.     * @terminated@ - An instance was terminated by the user. The following are the @Information@ events:     * @launchSpecTemporarilyBlacklisted@ - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.     * @launchSpecUnusable@ - The price in a launch specification is not valid because it is below the Spot price or the Spot price is above the On-Demand price.     * @fleetProgressHalted@ - The price in every launch specification is not valid. A launch specification might become valid if the Spot price changes.
eventInformation
    :: EventInformation
eventInformation =
  EventInformation'
    { _eiInstanceId = Nothing
    , _eiEventDescription = Nothing
    , _eiEventSubType = Nothing
    }


-- | The ID of the instance. This information is available only for @instanceChange@ events.
eiInstanceId :: Lens' EventInformation (Maybe Text)
eiInstanceId = lens _eiInstanceId (\ s a -> s{_eiInstanceId = a})

-- | The description of the event.
eiEventDescription :: Lens' EventInformation (Maybe Text)
eiEventDescription = lens _eiEventDescription (\ s a -> s{_eiEventDescription = a})

-- | The event. The following are the @error@ events:     * @iamFleetRoleInvalid@ - The EC2 Fleet or Spot Fleet did not have the required permissions either to launch or terminate an instance.     * @spotFleetRequestConfigurationInvalid@ - The configuration is not valid. For more information, see the description of the event.     * @spotInstanceCountLimitExceeded@ - You've reached the limit on the number of Spot Instances that you can launch. The following are the @fleetRequestChange@ events:     * @active@ - The EC2 Fleet or Spot Fleet request has been validated and Amazon EC2 is attempting to maintain the target number of running Spot Instances.     * @cancelled@ - The EC2 Fleet or Spot Fleet request is canceled and has no running Spot Instances. The EC2 Fleet or Spot Fleet will be deleted two days after its instances were terminated.     * @cancelled_running@ - The EC2 Fleet or Spot Fleet request is canceled and does not launch additional Spot Instances. Existing Spot Instances continue to run until they are interrupted or terminated.     * @cancelled_terminating@ - The EC2 Fleet or Spot Fleet request is canceled and its Spot Instances are terminating.     * @expired@ - The EC2 Fleet or Spot Fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with @TerminateInstancesWithExpiration@ set.     * @modify_in_progress@ - A request to modify the EC2 Fleet or Spot Fleet request was accepted and is in progress.     * @modify_successful@ - The EC2 Fleet or Spot Fleet request was modified.     * @price_update@ - The price for a launch configuration was adjusted because it was too high. This change is permanent.     * @submitted@ - The EC2 Fleet or Spot Fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot Instances. The following are the @instanceChange@ events:     * @launched@ - A request was fulfilled and a new instance was launched.     * @terminated@ - An instance was terminated by the user. The following are the @Information@ events:     * @launchSpecTemporarilyBlacklisted@ - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.     * @launchSpecUnusable@ - The price in a launch specification is not valid because it is below the Spot price or the Spot price is above the On-Demand price.     * @fleetProgressHalted@ - The price in every launch specification is not valid. A launch specification might become valid if the Spot price changes.
eiEventSubType :: Lens' EventInformation (Maybe Text)
eiEventSubType = lens _eiEventSubType (\ s a -> s{_eiEventSubType = a})

instance FromXML EventInformation where
        parseXML x
          = EventInformation' <$>
              (x .@? "instanceId") <*> (x .@? "eventDescription")
                <*> (x .@? "eventSubType")

instance Hashable EventInformation where

instance NFData EventInformation where

-- | Describes an explanation code for an unreachable path. For more information, see <https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html Reachability Analyzer explanation codes> .
--
--
--
-- /See:/ 'explanation' smart constructor.
data Explanation = Explanation'
  { _eDestination                 :: !(Maybe AnalysisComponent)
  , _eState                       :: !(Maybe Text)
  , _eCidrs                       :: !(Maybe [Text])
  , _eComponent                   :: !(Maybe AnalysisComponent)
  , _eLoadBalancerTargetGroups    :: !(Maybe [AnalysisComponent])
  , _eSecurityGroups              :: !(Maybe [AnalysisComponent])
  , _ePrefixList                  :: !(Maybe AnalysisComponent)
  , _eDirection                   :: !(Maybe Text)
  , _eProtocols                   :: !(Maybe [Text])
  , _eLoadBalancerListenerPort    :: !(Maybe Nat)
  , _ePortRanges                  :: !(Maybe [PortRange])
  , _eAddresses                   :: !(Maybe [Text])
  , _eClassicLoadBalancerListener :: !(Maybe AnalysisLoadBalancerListener)
  , _eIngressRouteTable           :: !(Maybe AnalysisComponent)
  , _eNetworkInterface            :: !(Maybe AnalysisComponent)
  , _eLoadBalancerTarget          :: !(Maybe AnalysisLoadBalancerTarget)
  , _eSubnet                      :: !(Maybe AnalysisComponent)
  , _eNatGateway                  :: !(Maybe AnalysisComponent)
  , _eAddress                     :: !(Maybe Text)
  , _eExplanationCode             :: !(Maybe Text)
  , _eSecurityGroup               :: !(Maybe AnalysisComponent)
  , _eElasticLoadBalancerListener :: !(Maybe AnalysisComponent)
  , _eLoadBalancerTargetGroup     :: !(Maybe AnalysisComponent)
  , _eCustomerGateway             :: !(Maybe AnalysisComponent)
  , _eSubnetRouteTable            :: !(Maybe AnalysisComponent)
  , _eAvailabilityZones           :: !(Maybe [Text])
  , _eLoadBalancerARN             :: !(Maybe Text)
  , _eRouteTable                  :: !(Maybe AnalysisComponent)
  , _eSecurityGroupRule           :: !(Maybe AnalysisSecurityGroupRule)
  , _ePacketField                 :: !(Maybe Text)
  , _eLoadBalancerTargetPort      :: !(Maybe Nat)
  , _eVPC                         :: !(Maybe AnalysisComponent)
  , _eVPNGateway                  :: !(Maybe AnalysisComponent)
  , _eSourceVPC                   :: !(Maybe AnalysisComponent)
  , _eACLRule                     :: !(Maybe AnalysisACLRule)
  , _eInternetGateway             :: !(Maybe AnalysisComponent)
  , _eMissingComponent            :: !(Maybe Text)
  , _eACL                         :: !(Maybe AnalysisComponent)
  , _eVPNConnection               :: !(Maybe AnalysisComponent)
  , _eRouteTableRoute             :: !(Maybe AnalysisRouteTableRoute)
  , _eVPCEndpoint                 :: !(Maybe AnalysisComponent)
  , _eVPCPeeringConnection        :: !(Maybe AnalysisComponent)
  , _ePort                        :: !(Maybe Nat)
  , _eDestinationVPC              :: !(Maybe AnalysisComponent)
  , _eAttachedTo                  :: !(Maybe AnalysisComponent)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Explanation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eDestination' - The destination.
--
-- * 'eState' - The state.
--
-- * 'eCidrs' - The CIDR ranges.
--
-- * 'eComponent' - The component.
--
-- * 'eLoadBalancerTargetGroups' - The target groups.
--
-- * 'eSecurityGroups' - The security groups.
--
-- * 'ePrefixList' - The prefix list.
--
-- * 'eDirection' - The direction. The following are possible values:     * egress     * ingress
--
-- * 'eProtocols' - The protocols.
--
-- * 'eLoadBalancerListenerPort' - The listener port of the load balancer.
--
-- * 'ePortRanges' - The port ranges.
--
-- * 'eAddresses' - The IPv4 addresses, in CIDR notation.
--
-- * 'eClassicLoadBalancerListener' - The listener for a Classic Load Balancer.
--
-- * 'eIngressRouteTable' - The route table.
--
-- * 'eNetworkInterface' - The network interface.
--
-- * 'eLoadBalancerTarget' - The target.
--
-- * 'eSubnet' - The subnet.
--
-- * 'eNatGateway' - The NAT gateway.
--
-- * 'eAddress' - The IPv4 address, in CIDR notation.
--
-- * 'eExplanationCode' - The explanation code.
--
-- * 'eSecurityGroup' - The security group.
--
-- * 'eElasticLoadBalancerListener' - The load balancer listener.
--
-- * 'eLoadBalancerTargetGroup' - The target group.
--
-- * 'eCustomerGateway' - The customer gateway.
--
-- * 'eSubnetRouteTable' - The route table for the subnet.
--
-- * 'eAvailabilityZones' - The Availability Zones.
--
-- * 'eLoadBalancerARN' - The Amazon Resource Name (ARN) of the load balancer.
--
-- * 'eRouteTable' - The route table.
--
-- * 'eSecurityGroupRule' - The security group rule.
--
-- * 'ePacketField' - The packet field.
--
-- * 'eLoadBalancerTargetPort' - The target port.
--
-- * 'eVPC' - The component VPC.
--
-- * 'eVPNGateway' - The VPN gateway.
--
-- * 'eSourceVPC' - The source VPC.
--
-- * 'eACLRule' - The network ACL rule.
--
-- * 'eInternetGateway' - The internet gateway.
--
-- * 'eMissingComponent' - The missing component.
--
-- * 'eACL' - The network ACL.
--
-- * 'eVPNConnection' - The VPN connection.
--
-- * 'eRouteTableRoute' - The route table route.
--
-- * 'eVPCEndpoint' - The VPC endpoint.
--
-- * 'eVPCPeeringConnection' - The VPC peering connection.
--
-- * 'ePort' - The port.
--
-- * 'eDestinationVPC' - The destination VPC.
--
-- * 'eAttachedTo' - The resource to which the component is attached.
explanation
    :: Explanation
explanation =
  Explanation'
    { _eDestination = Nothing
    , _eState = Nothing
    , _eCidrs = Nothing
    , _eComponent = Nothing
    , _eLoadBalancerTargetGroups = Nothing
    , _eSecurityGroups = Nothing
    , _ePrefixList = Nothing
    , _eDirection = Nothing
    , _eProtocols = Nothing
    , _eLoadBalancerListenerPort = Nothing
    , _ePortRanges = Nothing
    , _eAddresses = Nothing
    , _eClassicLoadBalancerListener = Nothing
    , _eIngressRouteTable = Nothing
    , _eNetworkInterface = Nothing
    , _eLoadBalancerTarget = Nothing
    , _eSubnet = Nothing
    , _eNatGateway = Nothing
    , _eAddress = Nothing
    , _eExplanationCode = Nothing
    , _eSecurityGroup = Nothing
    , _eElasticLoadBalancerListener = Nothing
    , _eLoadBalancerTargetGroup = Nothing
    , _eCustomerGateway = Nothing
    , _eSubnetRouteTable = Nothing
    , _eAvailabilityZones = Nothing
    , _eLoadBalancerARN = Nothing
    , _eRouteTable = Nothing
    , _eSecurityGroupRule = Nothing
    , _ePacketField = Nothing
    , _eLoadBalancerTargetPort = Nothing
    , _eVPC = Nothing
    , _eVPNGateway = Nothing
    , _eSourceVPC = Nothing
    , _eACLRule = Nothing
    , _eInternetGateway = Nothing
    , _eMissingComponent = Nothing
    , _eACL = Nothing
    , _eVPNConnection = Nothing
    , _eRouteTableRoute = Nothing
    , _eVPCEndpoint = Nothing
    , _eVPCPeeringConnection = Nothing
    , _ePort = Nothing
    , _eDestinationVPC = Nothing
    , _eAttachedTo = Nothing
    }


-- | The destination.
eDestination :: Lens' Explanation (Maybe AnalysisComponent)
eDestination = lens _eDestination (\ s a -> s{_eDestination = a})

-- | The state.
eState :: Lens' Explanation (Maybe Text)
eState = lens _eState (\ s a -> s{_eState = a})

-- | The CIDR ranges.
eCidrs :: Lens' Explanation [Text]
eCidrs = lens _eCidrs (\ s a -> s{_eCidrs = a}) . _Default . _Coerce

-- | The component.
eComponent :: Lens' Explanation (Maybe AnalysisComponent)
eComponent = lens _eComponent (\ s a -> s{_eComponent = a})

-- | The target groups.
eLoadBalancerTargetGroups :: Lens' Explanation [AnalysisComponent]
eLoadBalancerTargetGroups = lens _eLoadBalancerTargetGroups (\ s a -> s{_eLoadBalancerTargetGroups = a}) . _Default . _Coerce

-- | The security groups.
eSecurityGroups :: Lens' Explanation [AnalysisComponent]
eSecurityGroups = lens _eSecurityGroups (\ s a -> s{_eSecurityGroups = a}) . _Default . _Coerce

-- | The prefix list.
ePrefixList :: Lens' Explanation (Maybe AnalysisComponent)
ePrefixList = lens _ePrefixList (\ s a -> s{_ePrefixList = a})

-- | The direction. The following are possible values:     * egress     * ingress
eDirection :: Lens' Explanation (Maybe Text)
eDirection = lens _eDirection (\ s a -> s{_eDirection = a})

-- | The protocols.
eProtocols :: Lens' Explanation [Text]
eProtocols = lens _eProtocols (\ s a -> s{_eProtocols = a}) . _Default . _Coerce

-- | The listener port of the load balancer.
eLoadBalancerListenerPort :: Lens' Explanation (Maybe Natural)
eLoadBalancerListenerPort = lens _eLoadBalancerListenerPort (\ s a -> s{_eLoadBalancerListenerPort = a}) . mapping _Nat

-- | The port ranges.
ePortRanges :: Lens' Explanation [PortRange]
ePortRanges = lens _ePortRanges (\ s a -> s{_ePortRanges = a}) . _Default . _Coerce

-- | The IPv4 addresses, in CIDR notation.
eAddresses :: Lens' Explanation [Text]
eAddresses = lens _eAddresses (\ s a -> s{_eAddresses = a}) . _Default . _Coerce

-- | The listener for a Classic Load Balancer.
eClassicLoadBalancerListener :: Lens' Explanation (Maybe AnalysisLoadBalancerListener)
eClassicLoadBalancerListener = lens _eClassicLoadBalancerListener (\ s a -> s{_eClassicLoadBalancerListener = a})

-- | The route table.
eIngressRouteTable :: Lens' Explanation (Maybe AnalysisComponent)
eIngressRouteTable = lens _eIngressRouteTable (\ s a -> s{_eIngressRouteTable = a})

-- | The network interface.
eNetworkInterface :: Lens' Explanation (Maybe AnalysisComponent)
eNetworkInterface = lens _eNetworkInterface (\ s a -> s{_eNetworkInterface = a})

-- | The target.
eLoadBalancerTarget :: Lens' Explanation (Maybe AnalysisLoadBalancerTarget)
eLoadBalancerTarget = lens _eLoadBalancerTarget (\ s a -> s{_eLoadBalancerTarget = a})

-- | The subnet.
eSubnet :: Lens' Explanation (Maybe AnalysisComponent)
eSubnet = lens _eSubnet (\ s a -> s{_eSubnet = a})

-- | The NAT gateway.
eNatGateway :: Lens' Explanation (Maybe AnalysisComponent)
eNatGateway = lens _eNatGateway (\ s a -> s{_eNatGateway = a})

-- | The IPv4 address, in CIDR notation.
eAddress :: Lens' Explanation (Maybe Text)
eAddress = lens _eAddress (\ s a -> s{_eAddress = a})

-- | The explanation code.
eExplanationCode :: Lens' Explanation (Maybe Text)
eExplanationCode = lens _eExplanationCode (\ s a -> s{_eExplanationCode = a})

-- | The security group.
eSecurityGroup :: Lens' Explanation (Maybe AnalysisComponent)
eSecurityGroup = lens _eSecurityGroup (\ s a -> s{_eSecurityGroup = a})

-- | The load balancer listener.
eElasticLoadBalancerListener :: Lens' Explanation (Maybe AnalysisComponent)
eElasticLoadBalancerListener = lens _eElasticLoadBalancerListener (\ s a -> s{_eElasticLoadBalancerListener = a})

-- | The target group.
eLoadBalancerTargetGroup :: Lens' Explanation (Maybe AnalysisComponent)
eLoadBalancerTargetGroup = lens _eLoadBalancerTargetGroup (\ s a -> s{_eLoadBalancerTargetGroup = a})

-- | The customer gateway.
eCustomerGateway :: Lens' Explanation (Maybe AnalysisComponent)
eCustomerGateway = lens _eCustomerGateway (\ s a -> s{_eCustomerGateway = a})

-- | The route table for the subnet.
eSubnetRouteTable :: Lens' Explanation (Maybe AnalysisComponent)
eSubnetRouteTable = lens _eSubnetRouteTable (\ s a -> s{_eSubnetRouteTable = a})

-- | The Availability Zones.
eAvailabilityZones :: Lens' Explanation [Text]
eAvailabilityZones = lens _eAvailabilityZones (\ s a -> s{_eAvailabilityZones = a}) . _Default . _Coerce

-- | The Amazon Resource Name (ARN) of the load balancer.
eLoadBalancerARN :: Lens' Explanation (Maybe Text)
eLoadBalancerARN = lens _eLoadBalancerARN (\ s a -> s{_eLoadBalancerARN = a})

-- | The route table.
eRouteTable :: Lens' Explanation (Maybe AnalysisComponent)
eRouteTable = lens _eRouteTable (\ s a -> s{_eRouteTable = a})

-- | The security group rule.
eSecurityGroupRule :: Lens' Explanation (Maybe AnalysisSecurityGroupRule)
eSecurityGroupRule = lens _eSecurityGroupRule (\ s a -> s{_eSecurityGroupRule = a})

-- | The packet field.
ePacketField :: Lens' Explanation (Maybe Text)
ePacketField = lens _ePacketField (\ s a -> s{_ePacketField = a})

-- | The target port.
eLoadBalancerTargetPort :: Lens' Explanation (Maybe Natural)
eLoadBalancerTargetPort = lens _eLoadBalancerTargetPort (\ s a -> s{_eLoadBalancerTargetPort = a}) . mapping _Nat

-- | The component VPC.
eVPC :: Lens' Explanation (Maybe AnalysisComponent)
eVPC = lens _eVPC (\ s a -> s{_eVPC = a})

-- | The VPN gateway.
eVPNGateway :: Lens' Explanation (Maybe AnalysisComponent)
eVPNGateway = lens _eVPNGateway (\ s a -> s{_eVPNGateway = a})

-- | The source VPC.
eSourceVPC :: Lens' Explanation (Maybe AnalysisComponent)
eSourceVPC = lens _eSourceVPC (\ s a -> s{_eSourceVPC = a})

-- | The network ACL rule.
eACLRule :: Lens' Explanation (Maybe AnalysisACLRule)
eACLRule = lens _eACLRule (\ s a -> s{_eACLRule = a})

-- | The internet gateway.
eInternetGateway :: Lens' Explanation (Maybe AnalysisComponent)
eInternetGateway = lens _eInternetGateway (\ s a -> s{_eInternetGateway = a})

-- | The missing component.
eMissingComponent :: Lens' Explanation (Maybe Text)
eMissingComponent = lens _eMissingComponent (\ s a -> s{_eMissingComponent = a})

-- | The network ACL.
eACL :: Lens' Explanation (Maybe AnalysisComponent)
eACL = lens _eACL (\ s a -> s{_eACL = a})

-- | The VPN connection.
eVPNConnection :: Lens' Explanation (Maybe AnalysisComponent)
eVPNConnection = lens _eVPNConnection (\ s a -> s{_eVPNConnection = a})

-- | The route table route.
eRouteTableRoute :: Lens' Explanation (Maybe AnalysisRouteTableRoute)
eRouteTableRoute = lens _eRouteTableRoute (\ s a -> s{_eRouteTableRoute = a})

-- | The VPC endpoint.
eVPCEndpoint :: Lens' Explanation (Maybe AnalysisComponent)
eVPCEndpoint = lens _eVPCEndpoint (\ s a -> s{_eVPCEndpoint = a})

-- | The VPC peering connection.
eVPCPeeringConnection :: Lens' Explanation (Maybe AnalysisComponent)
eVPCPeeringConnection = lens _eVPCPeeringConnection (\ s a -> s{_eVPCPeeringConnection = a})

-- | The port.
ePort :: Lens' Explanation (Maybe Natural)
ePort = lens _ePort (\ s a -> s{_ePort = a}) . mapping _Nat

-- | The destination VPC.
eDestinationVPC :: Lens' Explanation (Maybe AnalysisComponent)
eDestinationVPC = lens _eDestinationVPC (\ s a -> s{_eDestinationVPC = a})

-- | The resource to which the component is attached.
eAttachedTo :: Lens' Explanation (Maybe AnalysisComponent)
eAttachedTo = lens _eAttachedTo (\ s a -> s{_eAttachedTo = a})

instance FromXML Explanation where
        parseXML x
          = Explanation' <$>
              (x .@? "destination") <*> (x .@? "state") <*>
                (x .@? "cidrSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "component")
                <*>
                (x .@? "loadBalancerTargetGroupSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "securityGroupSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "prefixList")
                <*> (x .@? "direction")
                <*>
                (x .@? "protocolSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "loadBalancerListenerPort")
                <*>
                (x .@? "portRangeSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "addressSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "classicLoadBalancerListener")
                <*> (x .@? "ingressRouteTable")
                <*> (x .@? "networkInterface")
                <*> (x .@? "loadBalancerTarget")
                <*> (x .@? "subnet")
                <*> (x .@? "natGateway")
                <*> (x .@? "address")
                <*> (x .@? "explanationCode")
                <*> (x .@? "securityGroup")
                <*> (x .@? "elasticLoadBalancerListener")
                <*> (x .@? "loadBalancerTargetGroup")
                <*> (x .@? "customerGateway")
                <*> (x .@? "subnetRouteTable")
                <*>
                (x .@? "availabilityZoneSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "loadBalancerArn")
                <*> (x .@? "routeTable")
                <*> (x .@? "securityGroupRule")
                <*> (x .@? "packetField")
                <*> (x .@? "loadBalancerTargetPort")
                <*> (x .@? "vpc")
                <*> (x .@? "vpnGateway")
                <*> (x .@? "sourceVpc")
                <*> (x .@? "aclRule")
                <*> (x .@? "internetGateway")
                <*> (x .@? "missingComponent")
                <*> (x .@? "acl")
                <*> (x .@? "vpnConnection")
                <*> (x .@? "routeTableRoute")
                <*> (x .@? "vpcEndpoint")
                <*> (x .@? "vpcPeeringConnection")
                <*> (x .@? "port")
                <*> (x .@? "destinationVpc")
                <*> (x .@? "attachedTo")

instance Hashable Explanation where

instance NFData Explanation where

-- | Describes an export image task.
--
--
--
-- /See:/ 'exportImageTask' smart constructor.
data ExportImageTask = ExportImageTask'
  { _eitStatus            :: !(Maybe Text)
  , _eitProgress          :: !(Maybe Text)
  , _eitExportImageTaskId :: !(Maybe Text)
  , _eitStatusMessage     :: !(Maybe Text)
  , _eitImageId           :: !(Maybe Text)
  , _eitDescription       :: !(Maybe Text)
  , _eitTags              :: !(Maybe [Tag])
  , _eitS3ExportLocation  :: !(Maybe ExportTaskS3Location)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ExportImageTask' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'eitStatus' - The status of the export image task. The possible values are @active@ , @completed@ , @deleting@ , and @deleted@ .
--
-- * 'eitProgress' - The percent complete of the export image task.
--
-- * 'eitExportImageTaskId' - The ID of the export image task.
--
-- * 'eitStatusMessage' - The status message for the export image task.
--
-- * 'eitImageId' - The ID of the image.
--
-- * 'eitDescription' - A description of the image being exported.
--
-- * 'eitTags' - Any tags assigned to the image being exported.
--
-- * 'eitS3ExportLocation' - Information about the destination Amazon S3 bucket.
exportImageTask
    :: ExportImageTask
exportImageTask =
  ExportImageTask'
    { _eitStatus = Nothing
    , _eitProgress = Nothing
    , _eitExportImageTaskId = Nothing
    , _eitStatusMessage = Nothing
    , _eitImageId = Nothing
    , _eitDescription = Nothing
    , _eitTags = Nothing
    , _eitS3ExportLocation = Nothing
    }


-- | The status of the export image task. The possible values are @active@ , @completed@ , @deleting@ , and @deleted@ .
eitStatus :: Lens' ExportImageTask (Maybe Text)
eitStatus = lens _eitStatus (\ s a -> s{_eitStatus = a})

-- | The percent complete of the export image task.
eitProgress :: Lens' ExportImageTask (Maybe Text)
eitProgress = lens _eitProgress (\ s a -> s{_eitProgress = a})

-- | The ID of the export image task.
eitExportImageTaskId :: Lens' ExportImageTask (Maybe Text)
eitExportImageTaskId = lens _eitExportImageTaskId (\ s a -> s{_eitExportImageTaskId = a})

-- | The status message for the export image task.
eitStatusMessage :: Lens' ExportImageTask (Maybe Text)
eitStatusMessage = lens _eitStatusMessage (\ s a -> s{_eitStatusMessage = a})

-- | The ID of the image.
eitImageId :: Lens' ExportImageTask (Maybe Text)
eitImageId = lens _eitImageId (\ s a -> s{_eitImageId = a})

-- | A description of the image being exported.
eitDescription :: Lens' ExportImageTask (Maybe Text)
eitDescription = lens _eitDescription (\ s a -> s{_eitDescription = a})

-- | Any tags assigned to the image being exported.
eitTags :: Lens' ExportImageTask [Tag]
eitTags = lens _eitTags (\ s a -> s{_eitTags = a}) . _Default . _Coerce

-- | Information about the destination Amazon S3 bucket.
eitS3ExportLocation :: Lens' ExportImageTask (Maybe ExportTaskS3Location)
eitS3ExportLocation = lens _eitS3ExportLocation (\ s a -> s{_eitS3ExportLocation = a})

instance FromXML ExportImageTask where
        parseXML x
          = ExportImageTask' <$>
              (x .@? "status") <*> (x .@? "progress") <*>
                (x .@? "exportImageTaskId")
                <*> (x .@? "statusMessage")
                <*> (x .@? "imageId")
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "s3ExportLocation")

instance Hashable ExportImageTask where

instance NFData ExportImageTask where

-- | Describes an instance export task.
--
--
--
-- /See:/ 'exportTask' smart constructor.
data ExportTask = ExportTask'
  { _etTags                  :: !(Maybe [Tag])
  , _etDescription           :: !Text
  , _etExportTaskId          :: !Text
  , _etExportToS3Task        :: !ExportToS3Task
  , _etInstanceExportDetails :: !InstanceExportDetails
  , _etState                 :: !ExportTaskState
  , _etStatusMessage         :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ExportTask' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'etTags' - The tags for the export task.
--
-- * 'etDescription' - A description of the resource being exported.
--
-- * 'etExportTaskId' - The ID of the export task.
--
-- * 'etExportToS3Task' - Information about the export task.
--
-- * 'etInstanceExportDetails' - Information about the instance to export.
--
-- * 'etState' - The state of the export task.
--
-- * 'etStatusMessage' - The status message related to the export task.
exportTask
    :: Text -- ^ 'etDescription'
    -> Text -- ^ 'etExportTaskId'
    -> ExportToS3Task -- ^ 'etExportToS3Task'
    -> InstanceExportDetails -- ^ 'etInstanceExportDetails'
    -> ExportTaskState -- ^ 'etState'
    -> Text -- ^ 'etStatusMessage'
    -> ExportTask
exportTask pDescription_ pExportTaskId_ pExportToS3Task_ pInstanceExportDetails_ pState_ pStatusMessage_ =
  ExportTask'
    { _etTags = Nothing
    , _etDescription = pDescription_
    , _etExportTaskId = pExportTaskId_
    , _etExportToS3Task = pExportToS3Task_
    , _etInstanceExportDetails = pInstanceExportDetails_
    , _etState = pState_
    , _etStatusMessage = pStatusMessage_
    }


-- | The tags for the export task.
etTags :: Lens' ExportTask [Tag]
etTags = lens _etTags (\ s a -> s{_etTags = a}) . _Default . _Coerce

-- | A description of the resource being exported.
etDescription :: Lens' ExportTask Text
etDescription = lens _etDescription (\ s a -> s{_etDescription = a})

-- | The ID of the export task.
etExportTaskId :: Lens' ExportTask Text
etExportTaskId = lens _etExportTaskId (\ s a -> s{_etExportTaskId = a})

-- | Information about the export task.
etExportToS3Task :: Lens' ExportTask ExportToS3Task
etExportToS3Task = lens _etExportToS3Task (\ s a -> s{_etExportToS3Task = a})

-- | Information about the instance to export.
etInstanceExportDetails :: Lens' ExportTask InstanceExportDetails
etInstanceExportDetails = lens _etInstanceExportDetails (\ s a -> s{_etInstanceExportDetails = a})

-- | The state of the export task.
etState :: Lens' ExportTask ExportTaskState
etState = lens _etState (\ s a -> s{_etState = a})

-- | The status message related to the export task.
etStatusMessage :: Lens' ExportTask Text
etStatusMessage = lens _etStatusMessage (\ s a -> s{_etStatusMessage = a})

instance FromXML ExportTask where
        parseXML x
          = ExportTask' <$>
              (x .@? "tagSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@ "description")
                <*> (x .@ "exportTaskId")
                <*> (x .@ "exportToS3")
                <*> (x .@ "instanceExport")
                <*> (x .@ "state")
                <*> (x .@ "statusMessage")

instance Hashable ExportTask where

instance NFData ExportTask where

-- | Describes the destination for an export image task.
--
--
--
-- /See:/ 'exportTaskS3Location' smart constructor.
data ExportTaskS3Location = ExportTaskS3Location'
  { _etslS3Prefix :: !(Maybe Text)
  , _etslS3Bucket :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ExportTaskS3Location' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'etslS3Prefix' - The prefix (logical hierarchy) in the bucket.
--
-- * 'etslS3Bucket' - The destination Amazon S3 bucket.
exportTaskS3Location
    :: ExportTaskS3Location
exportTaskS3Location =
  ExportTaskS3Location' {_etslS3Prefix = Nothing, _etslS3Bucket = Nothing}


-- | The prefix (logical hierarchy) in the bucket.
etslS3Prefix :: Lens' ExportTaskS3Location (Maybe Text)
etslS3Prefix = lens _etslS3Prefix (\ s a -> s{_etslS3Prefix = a})

-- | The destination Amazon S3 bucket.
etslS3Bucket :: Lens' ExportTaskS3Location (Maybe Text)
etslS3Bucket = lens _etslS3Bucket (\ s a -> s{_etslS3Bucket = a})

instance FromXML ExportTaskS3Location where
        parseXML x
          = ExportTaskS3Location' <$>
              (x .@? "s3Prefix") <*> (x .@? "s3Bucket")

instance Hashable ExportTaskS3Location where

instance NFData ExportTaskS3Location where

-- | Describes the destination for an export image task.
--
--
--
-- /See:/ 'exportTaskS3LocationRequest' smart constructor.
data ExportTaskS3LocationRequest = ExportTaskS3LocationRequest'
  { _etslrS3Prefix :: !(Maybe Text)
  , _etslrS3Bucket :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ExportTaskS3LocationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'etslrS3Prefix' - The prefix (logical hierarchy) in the bucket.
--
-- * 'etslrS3Bucket' - The destination Amazon S3 bucket.
exportTaskS3LocationRequest
    :: Text -- ^ 'etslrS3Bucket'
    -> ExportTaskS3LocationRequest
exportTaskS3LocationRequest pS3Bucket_ =
  ExportTaskS3LocationRequest'
    {_etslrS3Prefix = Nothing, _etslrS3Bucket = pS3Bucket_}


-- | The prefix (logical hierarchy) in the bucket.
etslrS3Prefix :: Lens' ExportTaskS3LocationRequest (Maybe Text)
etslrS3Prefix = lens _etslrS3Prefix (\ s a -> s{_etslrS3Prefix = a})

-- | The destination Amazon S3 bucket.
etslrS3Bucket :: Lens' ExportTaskS3LocationRequest Text
etslrS3Bucket = lens _etslrS3Bucket (\ s a -> s{_etslrS3Bucket = a})

instance Hashable ExportTaskS3LocationRequest where

instance NFData ExportTaskS3LocationRequest where

instance ToQuery ExportTaskS3LocationRequest where
        toQuery ExportTaskS3LocationRequest'{..}
          = mconcat
              ["S3Prefix" =: _etslrS3Prefix,
               "S3Bucket" =: _etslrS3Bucket]

-- | Describes the format and location for an instance export task.
--
--
--
-- /See:/ 'exportToS3Task' smart constructor.
data ExportToS3Task = ExportToS3Task'
  { _etstS3Key           :: !(Maybe Text)
  , _etstContainerFormat :: !(Maybe ContainerFormat)
  , _etstS3Bucket        :: !(Maybe Text)
  , _etstDiskImageFormat :: !(Maybe DiskImageFormat)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ExportToS3Task' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'etstS3Key' - The encryption key for your S3 bucket.
--
-- * 'etstContainerFormat' - The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
--
-- * 'etstS3Bucket' - The Amazon S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account @vm-import-export@amazon.com@ .
--
-- * 'etstDiskImageFormat' - The format for the exported image.
exportToS3Task
    :: ExportToS3Task
exportToS3Task =
  ExportToS3Task'
    { _etstS3Key = Nothing
    , _etstContainerFormat = Nothing
    , _etstS3Bucket = Nothing
    , _etstDiskImageFormat = Nothing
    }


-- | The encryption key for your S3 bucket.
etstS3Key :: Lens' ExportToS3Task (Maybe Text)
etstS3Key = lens _etstS3Key (\ s a -> s{_etstS3Key = a})

-- | The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
etstContainerFormat :: Lens' ExportToS3Task (Maybe ContainerFormat)
etstContainerFormat = lens _etstContainerFormat (\ s a -> s{_etstContainerFormat = a})

-- | The Amazon S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account @vm-import-export@amazon.com@ .
etstS3Bucket :: Lens' ExportToS3Task (Maybe Text)
etstS3Bucket = lens _etstS3Bucket (\ s a -> s{_etstS3Bucket = a})

-- | The format for the exported image.
etstDiskImageFormat :: Lens' ExportToS3Task (Maybe DiskImageFormat)
etstDiskImageFormat = lens _etstDiskImageFormat (\ s a -> s{_etstDiskImageFormat = a})

instance FromXML ExportToS3Task where
        parseXML x
          = ExportToS3Task' <$>
              (x .@? "s3Key") <*> (x .@? "containerFormat") <*>
                (x .@? "s3Bucket")
                <*> (x .@? "diskImageFormat")

instance Hashable ExportToS3Task where

instance NFData ExportToS3Task where

-- | Describes an instance export task.
--
--
--
-- /See:/ 'exportToS3TaskSpecification' smart constructor.
data ExportToS3TaskSpecification = ExportToS3TaskSpecification'
  { _etstsContainerFormat :: !(Maybe ContainerFormat)
  , _etstsS3Prefix        :: !(Maybe Text)
  , _etstsS3Bucket        :: !(Maybe Text)
  , _etstsDiskImageFormat :: !(Maybe DiskImageFormat)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ExportToS3TaskSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'etstsContainerFormat' - The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
--
-- * 'etstsS3Prefix' - The image is written to a single object in the Amazon S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
--
-- * 'etstsS3Bucket' - The Amazon S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account @vm-import-export@amazon.com@ .
--
-- * 'etstsDiskImageFormat' - The format for the exported image.
exportToS3TaskSpecification
    :: ExportToS3TaskSpecification
exportToS3TaskSpecification =
  ExportToS3TaskSpecification'
    { _etstsContainerFormat = Nothing
    , _etstsS3Prefix = Nothing
    , _etstsS3Bucket = Nothing
    , _etstsDiskImageFormat = Nothing
    }


-- | The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
etstsContainerFormat :: Lens' ExportToS3TaskSpecification (Maybe ContainerFormat)
etstsContainerFormat = lens _etstsContainerFormat (\ s a -> s{_etstsContainerFormat = a})

-- | The image is written to a single object in the Amazon S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
etstsS3Prefix :: Lens' ExportToS3TaskSpecification (Maybe Text)
etstsS3Prefix = lens _etstsS3Prefix (\ s a -> s{_etstsS3Prefix = a})

-- | The Amazon S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account @vm-import-export@amazon.com@ .
etstsS3Bucket :: Lens' ExportToS3TaskSpecification (Maybe Text)
etstsS3Bucket = lens _etstsS3Bucket (\ s a -> s{_etstsS3Bucket = a})

-- | The format for the exported image.
etstsDiskImageFormat :: Lens' ExportToS3TaskSpecification (Maybe DiskImageFormat)
etstsDiskImageFormat = lens _etstsDiskImageFormat (\ s a -> s{_etstsDiskImageFormat = a})

instance Hashable ExportToS3TaskSpecification where

instance NFData ExportToS3TaskSpecification where

instance ToQuery ExportToS3TaskSpecification where
        toQuery ExportToS3TaskSpecification'{..}
          = mconcat
              ["ContainerFormat" =: _etstsContainerFormat,
               "S3Prefix" =: _etstsS3Prefix,
               "S3Bucket" =: _etstsS3Bucket,
               "DiskImageFormat" =: _etstsDiskImageFormat]

-- | Describes a Reserved Instance whose queued purchase was not deleted.
--
--
--
-- /See:/ 'failedQueuedPurchaseDeletion' smart constructor.
data FailedQueuedPurchaseDeletion = FailedQueuedPurchaseDeletion'
  { _fqpdError               :: !(Maybe DeleteQueuedReservedInstancesError)
  , _fqpdReservedInstancesId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FailedQueuedPurchaseDeletion' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fqpdError' - The error.
--
-- * 'fqpdReservedInstancesId' - The ID of the Reserved Instance.
failedQueuedPurchaseDeletion
    :: FailedQueuedPurchaseDeletion
failedQueuedPurchaseDeletion =
  FailedQueuedPurchaseDeletion'
    {_fqpdError = Nothing, _fqpdReservedInstancesId = Nothing}


-- | The error.
fqpdError :: Lens' FailedQueuedPurchaseDeletion (Maybe DeleteQueuedReservedInstancesError)
fqpdError = lens _fqpdError (\ s a -> s{_fqpdError = a})

-- | The ID of the Reserved Instance.
fqpdReservedInstancesId :: Lens' FailedQueuedPurchaseDeletion (Maybe Text)
fqpdReservedInstancesId = lens _fqpdReservedInstancesId (\ s a -> s{_fqpdReservedInstancesId = a})

instance FromXML FailedQueuedPurchaseDeletion where
        parseXML x
          = FailedQueuedPurchaseDeletion' <$>
              (x .@? "error") <*> (x .@? "reservedInstancesId")

instance Hashable FailedQueuedPurchaseDeletion where

instance NFData FailedQueuedPurchaseDeletion where

-- | Describes the IAM SAML identity providers used for federated authentication.
--
--
--
-- /See:/ 'federatedAuthentication' smart constructor.
data FederatedAuthentication = FederatedAuthentication'
  { _faSamlProviderARN            :: !(Maybe Text)
  , _faSelfServiceSamlProviderARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FederatedAuthentication' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'faSamlProviderARN' - The Amazon Resource Name (ARN) of the IAM SAML identity provider.
--
-- * 'faSelfServiceSamlProviderARN' - The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.
federatedAuthentication
    :: FederatedAuthentication
federatedAuthentication =
  FederatedAuthentication'
    {_faSamlProviderARN = Nothing, _faSelfServiceSamlProviderARN = Nothing}


-- | The Amazon Resource Name (ARN) of the IAM SAML identity provider.
faSamlProviderARN :: Lens' FederatedAuthentication (Maybe Text)
faSamlProviderARN = lens _faSamlProviderARN (\ s a -> s{_faSamlProviderARN = a})

-- | The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.
faSelfServiceSamlProviderARN :: Lens' FederatedAuthentication (Maybe Text)
faSelfServiceSamlProviderARN = lens _faSelfServiceSamlProviderARN (\ s a -> s{_faSelfServiceSamlProviderARN = a})

instance FromXML FederatedAuthentication where
        parseXML x
          = FederatedAuthentication' <$>
              (x .@? "samlProviderArn") <*>
                (x .@? "selfServiceSamlProviderArn")

instance Hashable FederatedAuthentication where

instance NFData FederatedAuthentication where

-- | The IAM SAML identity provider used for federated authentication.
--
--
--
-- /See:/ 'federatedAuthenticationRequest' smart constructor.
data FederatedAuthenticationRequest = FederatedAuthenticationRequest'
  { _farSAMLProviderARN            :: !(Maybe Text)
  , _farSelfServiceSAMLProviderARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FederatedAuthenticationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'farSAMLProviderARN' - The Amazon Resource Name (ARN) of the IAM SAML identity provider.
--
-- * 'farSelfServiceSAMLProviderARN' - The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.
federatedAuthenticationRequest
    :: FederatedAuthenticationRequest
federatedAuthenticationRequest =
  FederatedAuthenticationRequest'
    {_farSAMLProviderARN = Nothing, _farSelfServiceSAMLProviderARN = Nothing}


-- | The Amazon Resource Name (ARN) of the IAM SAML identity provider.
farSAMLProviderARN :: Lens' FederatedAuthenticationRequest (Maybe Text)
farSAMLProviderARN = lens _farSAMLProviderARN (\ s a -> s{_farSAMLProviderARN = a})

-- | The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.
farSelfServiceSAMLProviderARN :: Lens' FederatedAuthenticationRequest (Maybe Text)
farSelfServiceSAMLProviderARN = lens _farSelfServiceSAMLProviderARN (\ s a -> s{_farSelfServiceSAMLProviderARN = a})

instance Hashable FederatedAuthenticationRequest
         where

instance NFData FederatedAuthenticationRequest where

instance ToQuery FederatedAuthenticationRequest where
        toQuery FederatedAuthenticationRequest'{..}
          = mconcat
              ["SAMLProviderArn" =: _farSAMLProviderARN,
               "SelfServiceSAMLProviderArn" =:
                 _farSelfServiceSAMLProviderARN]

-- | A filter name and value pair that is used to return a more specific list of results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs. The filters supported by a describe operation are documented with the describe operation. For example:
--
--
--     * 'DescribeAvailabilityZones'
--
--     * 'DescribeImages'
--
--     * 'DescribeInstances'
--
--     * 'DescribeKeyPairs'
--
--     * 'DescribeSecurityGroups'
--
--     * 'DescribeSnapshots'
--
--     * 'DescribeSubnets'
--
--     * 'DescribeTags'
--
--     * 'DescribeVolumes'
--
--     * 'DescribeVpcs'
--
--
--
--
-- /See:/ 'filter'' smart constructor.
data Filter = Filter'
  { _fValues :: !(Maybe [Text])
  , _fName   :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Filter' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fValues' - The filter values. Filter values are case-sensitive.
--
-- * 'fName' - The name of the filter. Filter names are case-sensitive.
filter'
    :: Text -- ^ 'fName'
    -> Filter
filter' pName_ = Filter' {_fValues = Nothing, _fName = pName_}


-- | The filter values. Filter values are case-sensitive.
fValues :: Lens' Filter [Text]
fValues = lens _fValues (\ s a -> s{_fValues = a}) . _Default . _Coerce

-- | The name of the filter. Filter names are case-sensitive.
fName :: Lens' Filter Text
fName = lens _fName (\ s a -> s{_fName = a})

instance Hashable Filter where

instance NFData Filter where

instance ToQuery Filter where
        toQuery Filter'{..}
          = mconcat
              [toQuery (toQueryList "Value" <$> _fValues),
               "Name" =: _fName]

-- | Describes an EC2 Fleet.
--
--
--
-- /See:/ 'fleetData' smart constructor.
data FleetData = FleetData'
  { _fdClientToken :: !(Maybe Text)
  , _fdTargetCapacitySpecification :: !(Maybe TargetCapacitySpecification)
  , _fdSpotOptions :: !(Maybe SpotOptions)
  , _fdExcessCapacityTerminationPolicy :: !(Maybe FleetExcessCapacityTerminationPolicy)
  , _fdOnDemandOptions :: !(Maybe OnDemandOptions)
  , _fdFleetState :: !(Maybe FleetStateCode)
  , _fdLaunchTemplateConfigs :: !(Maybe [FleetLaunchTemplateConfig])
  , _fdValidUntil :: !(Maybe ISO8601)
  , _fdTerminateInstancesWithExpiration :: !(Maybe Bool)
  , _fdInstances :: !(Maybe [DescribeFleetsInstances])
  , _fdFulfilledCapacity :: !(Maybe Double)
  , _fdType :: !(Maybe FleetType)
  , _fdValidFrom :: !(Maybe ISO8601)
  , _fdReplaceUnhealthyInstances :: !(Maybe Bool)
  , _fdFulfilledOnDemandCapacity :: !(Maybe Double)
  , _fdFleetId :: !(Maybe Text)
  , _fdErrors :: !(Maybe [DescribeFleetError])
  , _fdCreateTime :: !(Maybe ISO8601)
  , _fdTags :: !(Maybe [Tag])
  , _fdActivityStatus :: !(Maybe FleetActivityStatus)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetData' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fdClientToken' - Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> . Constraints: Maximum 64 ASCII characters
--
-- * 'fdTargetCapacitySpecification' - The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is @maintain@ , you can specify a target capacity of 0 and add capacity later.
--
-- * 'fdSpotOptions' - The configuration of Spot Instances in an EC2 Fleet.
--
-- * 'fdExcessCapacityTerminationPolicy' - Indicates whether running instances should be terminated if the target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
--
-- * 'fdOnDemandOptions' - The allocation strategy of On-Demand Instances in an EC2 Fleet.
--
-- * 'fdFleetState' - The state of the EC2 Fleet.
--
-- * 'fdLaunchTemplateConfigs' - The launch template and overrides.
--
-- * 'fdValidUntil' - The end date and time of the request, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). At this point, no new instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date.
--
-- * 'fdTerminateInstancesWithExpiration' - Indicates whether running instances should be terminated when the EC2 Fleet expires.
--
-- * 'fdInstances' - Information about the instances that were launched by the fleet. Valid only when __Type__ is set to @instant@ .
--
-- * 'fdFulfilledCapacity' - The number of units fulfilled by this request compared to the set target capacity.
--
-- * 'fdType' - The type of request. Indicates whether the EC2 Fleet only @requests@ the target capacity, or also attempts to @maintain@ it. If you request a certain target capacity, EC2 Fleet only places the required requests; it does not attempt to replenish instances if capacity is diminished, and it does not submit requests in alternative capacity pools if capacity is unavailable. To maintain a certain target capacity, EC2 Fleet places the required requests to meet this target capacity. It also automatically replenishes any interrupted Spot Instances. Default: @maintain@ .
--
-- * 'fdValidFrom' - The start date and time of the request, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). The default is to start fulfilling the request immediately.
--
-- * 'fdReplaceUnhealthyInstances' - Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for fleets of type @maintain@ . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks EC2 Fleet health checks> in the /Amazon EC2 User Guide/ .
--
-- * 'fdFulfilledOnDemandCapacity' - The number of units fulfilled by this request compared to the set target On-Demand capacity.
--
-- * 'fdFleetId' - The ID of the EC2 Fleet.
--
-- * 'fdErrors' - Information about the instances that could not be launched by the fleet. Valid only when __Type__ is set to @instant@ .
--
-- * 'fdCreateTime' - The creation date and time of the EC2 Fleet.
--
-- * 'fdTags' - The tags for an EC2 Fleet resource.
--
-- * 'fdActivityStatus' - The progress of the EC2 Fleet. If there is an error, the status is @error@ . After all requests are placed, the status is @pending_fulfillment@ . If the size of the EC2 Fleet is equal to or greater than its target capacity, the status is @fulfilled@ . If the size of the EC2 Fleet is decreased, the status is @pending_termination@ while instances are terminating.
fleetData
    :: FleetData
fleetData =
  FleetData'
    { _fdClientToken = Nothing
    , _fdTargetCapacitySpecification = Nothing
    , _fdSpotOptions = Nothing
    , _fdExcessCapacityTerminationPolicy = Nothing
    , _fdOnDemandOptions = Nothing
    , _fdFleetState = Nothing
    , _fdLaunchTemplateConfigs = Nothing
    , _fdValidUntil = Nothing
    , _fdTerminateInstancesWithExpiration = Nothing
    , _fdInstances = Nothing
    , _fdFulfilledCapacity = Nothing
    , _fdType = Nothing
    , _fdValidFrom = Nothing
    , _fdReplaceUnhealthyInstances = Nothing
    , _fdFulfilledOnDemandCapacity = Nothing
    , _fdFleetId = Nothing
    , _fdErrors = Nothing
    , _fdCreateTime = Nothing
    , _fdTags = Nothing
    , _fdActivityStatus = Nothing
    }


-- | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> . Constraints: Maximum 64 ASCII characters
fdClientToken :: Lens' FleetData (Maybe Text)
fdClientToken = lens _fdClientToken (\ s a -> s{_fdClientToken = a})

-- | The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is @maintain@ , you can specify a target capacity of 0 and add capacity later.
fdTargetCapacitySpecification :: Lens' FleetData (Maybe TargetCapacitySpecification)
fdTargetCapacitySpecification = lens _fdTargetCapacitySpecification (\ s a -> s{_fdTargetCapacitySpecification = a})

-- | The configuration of Spot Instances in an EC2 Fleet.
fdSpotOptions :: Lens' FleetData (Maybe SpotOptions)
fdSpotOptions = lens _fdSpotOptions (\ s a -> s{_fdSpotOptions = a})

-- | Indicates whether running instances should be terminated if the target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
fdExcessCapacityTerminationPolicy :: Lens' FleetData (Maybe FleetExcessCapacityTerminationPolicy)
fdExcessCapacityTerminationPolicy = lens _fdExcessCapacityTerminationPolicy (\ s a -> s{_fdExcessCapacityTerminationPolicy = a})

-- | The allocation strategy of On-Demand Instances in an EC2 Fleet.
fdOnDemandOptions :: Lens' FleetData (Maybe OnDemandOptions)
fdOnDemandOptions = lens _fdOnDemandOptions (\ s a -> s{_fdOnDemandOptions = a})

-- | The state of the EC2 Fleet.
fdFleetState :: Lens' FleetData (Maybe FleetStateCode)
fdFleetState = lens _fdFleetState (\ s a -> s{_fdFleetState = a})

-- | The launch template and overrides.
fdLaunchTemplateConfigs :: Lens' FleetData [FleetLaunchTemplateConfig]
fdLaunchTemplateConfigs = lens _fdLaunchTemplateConfigs (\ s a -> s{_fdLaunchTemplateConfigs = a}) . _Default . _Coerce

-- | The end date and time of the request, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). At this point, no new instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date.
fdValidUntil :: Lens' FleetData (Maybe UTCTime)
fdValidUntil = lens _fdValidUntil (\ s a -> s{_fdValidUntil = a}) . mapping _Time

-- | Indicates whether running instances should be terminated when the EC2 Fleet expires.
fdTerminateInstancesWithExpiration :: Lens' FleetData (Maybe Bool)
fdTerminateInstancesWithExpiration = lens _fdTerminateInstancesWithExpiration (\ s a -> s{_fdTerminateInstancesWithExpiration = a})

-- | Information about the instances that were launched by the fleet. Valid only when __Type__ is set to @instant@ .
fdInstances :: Lens' FleetData [DescribeFleetsInstances]
fdInstances = lens _fdInstances (\ s a -> s{_fdInstances = a}) . _Default . _Coerce

-- | The number of units fulfilled by this request compared to the set target capacity.
fdFulfilledCapacity :: Lens' FleetData (Maybe Double)
fdFulfilledCapacity = lens _fdFulfilledCapacity (\ s a -> s{_fdFulfilledCapacity = a})

-- | The type of request. Indicates whether the EC2 Fleet only @requests@ the target capacity, or also attempts to @maintain@ it. If you request a certain target capacity, EC2 Fleet only places the required requests; it does not attempt to replenish instances if capacity is diminished, and it does not submit requests in alternative capacity pools if capacity is unavailable. To maintain a certain target capacity, EC2 Fleet places the required requests to meet this target capacity. It also automatically replenishes any interrupted Spot Instances. Default: @maintain@ .
fdType :: Lens' FleetData (Maybe FleetType)
fdType = lens _fdType (\ s a -> s{_fdType = a})

-- | The start date and time of the request, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). The default is to start fulfilling the request immediately.
fdValidFrom :: Lens' FleetData (Maybe UTCTime)
fdValidFrom = lens _fdValidFrom (\ s a -> s{_fdValidFrom = a}) . mapping _Time

-- | Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for fleets of type @maintain@ . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/manage-ec2-fleet.html#ec2-fleet-health-checks EC2 Fleet health checks> in the /Amazon EC2 User Guide/ .
fdReplaceUnhealthyInstances :: Lens' FleetData (Maybe Bool)
fdReplaceUnhealthyInstances = lens _fdReplaceUnhealthyInstances (\ s a -> s{_fdReplaceUnhealthyInstances = a})

-- | The number of units fulfilled by this request compared to the set target On-Demand capacity.
fdFulfilledOnDemandCapacity :: Lens' FleetData (Maybe Double)
fdFulfilledOnDemandCapacity = lens _fdFulfilledOnDemandCapacity (\ s a -> s{_fdFulfilledOnDemandCapacity = a})

-- | The ID of the EC2 Fleet.
fdFleetId :: Lens' FleetData (Maybe Text)
fdFleetId = lens _fdFleetId (\ s a -> s{_fdFleetId = a})

-- | Information about the instances that could not be launched by the fleet. Valid only when __Type__ is set to @instant@ .
fdErrors :: Lens' FleetData [DescribeFleetError]
fdErrors = lens _fdErrors (\ s a -> s{_fdErrors = a}) . _Default . _Coerce

-- | The creation date and time of the EC2 Fleet.
fdCreateTime :: Lens' FleetData (Maybe UTCTime)
fdCreateTime = lens _fdCreateTime (\ s a -> s{_fdCreateTime = a}) . mapping _Time

-- | The tags for an EC2 Fleet resource.
fdTags :: Lens' FleetData [Tag]
fdTags = lens _fdTags (\ s a -> s{_fdTags = a}) . _Default . _Coerce

-- | The progress of the EC2 Fleet. If there is an error, the status is @error@ . After all requests are placed, the status is @pending_fulfillment@ . If the size of the EC2 Fleet is equal to or greater than its target capacity, the status is @fulfilled@ . If the size of the EC2 Fleet is decreased, the status is @pending_termination@ while instances are terminating.
fdActivityStatus :: Lens' FleetData (Maybe FleetActivityStatus)
fdActivityStatus = lens _fdActivityStatus (\ s a -> s{_fdActivityStatus = a})

instance FromXML FleetData where
        parseXML x
          = FleetData' <$>
              (x .@? "clientToken") <*>
                (x .@? "targetCapacitySpecification")
                <*> (x .@? "spotOptions")
                <*> (x .@? "excessCapacityTerminationPolicy")
                <*> (x .@? "onDemandOptions")
                <*> (x .@? "fleetState")
                <*>
                (x .@? "launchTemplateConfigs" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "validUntil")
                <*> (x .@? "terminateInstancesWithExpiration")
                <*>
                (x .@? "fleetInstanceSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "fulfilledCapacity")
                <*> (x .@? "type")
                <*> (x .@? "validFrom")
                <*> (x .@? "replaceUnhealthyInstances")
                <*> (x .@? "fulfilledOnDemandCapacity")
                <*> (x .@? "fleetId")
                <*>
                (x .@? "errorSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "createTime")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "activityStatus")

instance Hashable FleetData where

instance NFData FleetData where

-- | Describes a launch template and overrides.
--
--
--
-- /See:/ 'fleetLaunchTemplateConfig' smart constructor.
data FleetLaunchTemplateConfig = FleetLaunchTemplateConfig'
  { _fltcOverrides :: !(Maybe [FleetLaunchTemplateOverrides])
  , _fltcLaunchTemplateSpecification :: !(Maybe FleetLaunchTemplateSpecification)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetLaunchTemplateConfig' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fltcOverrides' - Any parameters that you specify override the same parameters in the launch template.
--
-- * 'fltcLaunchTemplateSpecification' - The launch template.
fleetLaunchTemplateConfig
    :: FleetLaunchTemplateConfig
fleetLaunchTemplateConfig =
  FleetLaunchTemplateConfig'
    {_fltcOverrides = Nothing, _fltcLaunchTemplateSpecification = Nothing}


-- | Any parameters that you specify override the same parameters in the launch template.
fltcOverrides :: Lens' FleetLaunchTemplateConfig [FleetLaunchTemplateOverrides]
fltcOverrides = lens _fltcOverrides (\ s a -> s{_fltcOverrides = a}) . _Default . _Coerce

-- | The launch template.
fltcLaunchTemplateSpecification :: Lens' FleetLaunchTemplateConfig (Maybe FleetLaunchTemplateSpecification)
fltcLaunchTemplateSpecification = lens _fltcLaunchTemplateSpecification (\ s a -> s{_fltcLaunchTemplateSpecification = a})

instance FromXML FleetLaunchTemplateConfig where
        parseXML x
          = FleetLaunchTemplateConfig' <$>
              (x .@? "overrides" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "launchTemplateSpecification")

instance Hashable FleetLaunchTemplateConfig where

instance NFData FleetLaunchTemplateConfig where

-- | Describes a launch template and overrides.
--
--
--
-- /See:/ 'fleetLaunchTemplateConfigRequest' smart constructor.
data FleetLaunchTemplateConfigRequest = FleetLaunchTemplateConfigRequest'
  { _fltcrOverrides :: !(Maybe [FleetLaunchTemplateOverridesRequest])
  , _fltcrLaunchTemplateSpecification :: !(Maybe FleetLaunchTemplateSpecificationRequest)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetLaunchTemplateConfigRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fltcrOverrides' - Any parameters that you specify override the same parameters in the launch template.
--
-- * 'fltcrLaunchTemplateSpecification' - The launch template to use. You must specify either the launch template ID or launch template name in the request.
fleetLaunchTemplateConfigRequest
    :: FleetLaunchTemplateConfigRequest
fleetLaunchTemplateConfigRequest =
  FleetLaunchTemplateConfigRequest'
    {_fltcrOverrides = Nothing, _fltcrLaunchTemplateSpecification = Nothing}


-- | Any parameters that you specify override the same parameters in the launch template.
fltcrOverrides :: Lens' FleetLaunchTemplateConfigRequest [FleetLaunchTemplateOverridesRequest]
fltcrOverrides = lens _fltcrOverrides (\ s a -> s{_fltcrOverrides = a}) . _Default . _Coerce

-- | The launch template to use. You must specify either the launch template ID or launch template name in the request.
fltcrLaunchTemplateSpecification :: Lens' FleetLaunchTemplateConfigRequest (Maybe FleetLaunchTemplateSpecificationRequest)
fltcrLaunchTemplateSpecification = lens _fltcrLaunchTemplateSpecification (\ s a -> s{_fltcrLaunchTemplateSpecification = a})

instance Hashable FleetLaunchTemplateConfigRequest
         where

instance NFData FleetLaunchTemplateConfigRequest
         where

instance ToQuery FleetLaunchTemplateConfigRequest
         where
        toQuery FleetLaunchTemplateConfigRequest'{..}
          = mconcat
              [toQuery
                 (toQueryList "Overrides" <$> _fltcrOverrides),
               "LaunchTemplateSpecification" =:
                 _fltcrLaunchTemplateSpecification]

-- | Describes overrides for a launch template.
--
--
--
-- /See:/ 'fleetLaunchTemplateOverrides' smart constructor.
data FleetLaunchTemplateOverrides = FleetLaunchTemplateOverrides'
  { _fltoPriority         :: !(Maybe Double)
  , _fltoWeightedCapacity :: !(Maybe Double)
  , _fltoSubnetId         :: !(Maybe Text)
  , _fltoInstanceType     :: !(Maybe InstanceType)
  , _fltoAvailabilityZone :: !(Maybe Text)
  , _fltoPlacement        :: !(Maybe PlacementResponse)
  , _fltoMaxPrice         :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetLaunchTemplateOverrides' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fltoPriority' - The priority for the launch template override. If __AllocationStrategy__ is set to @prioritized@ , EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at @0@ . The lower the number, the higher the priority. If no number is set, the override has the lowest priority.
--
-- * 'fltoWeightedCapacity' - The number of units provided by the specified instance type.
--
-- * 'fltoSubnetId' - The ID of the subnet in which to launch the instances.
--
-- * 'fltoInstanceType' - The instance type.
--
-- * 'fltoAvailabilityZone' - The Availability Zone in which to launch the instances.
--
-- * 'fltoPlacement' - The location where the instance launched, if applicable.
--
-- * 'fltoMaxPrice' - The maximum price per unit hour that you are willing to pay for a Spot Instance.
fleetLaunchTemplateOverrides
    :: FleetLaunchTemplateOverrides
fleetLaunchTemplateOverrides =
  FleetLaunchTemplateOverrides'
    { _fltoPriority = Nothing
    , _fltoWeightedCapacity = Nothing
    , _fltoSubnetId = Nothing
    , _fltoInstanceType = Nothing
    , _fltoAvailabilityZone = Nothing
    , _fltoPlacement = Nothing
    , _fltoMaxPrice = Nothing
    }


-- | The priority for the launch template override. If __AllocationStrategy__ is set to @prioritized@ , EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at @0@ . The lower the number, the higher the priority. If no number is set, the override has the lowest priority.
fltoPriority :: Lens' FleetLaunchTemplateOverrides (Maybe Double)
fltoPriority = lens _fltoPriority (\ s a -> s{_fltoPriority = a})

-- | The number of units provided by the specified instance type.
fltoWeightedCapacity :: Lens' FleetLaunchTemplateOverrides (Maybe Double)
fltoWeightedCapacity = lens _fltoWeightedCapacity (\ s a -> s{_fltoWeightedCapacity = a})

-- | The ID of the subnet in which to launch the instances.
fltoSubnetId :: Lens' FleetLaunchTemplateOverrides (Maybe Text)
fltoSubnetId = lens _fltoSubnetId (\ s a -> s{_fltoSubnetId = a})

-- | The instance type.
fltoInstanceType :: Lens' FleetLaunchTemplateOverrides (Maybe InstanceType)
fltoInstanceType = lens _fltoInstanceType (\ s a -> s{_fltoInstanceType = a})

-- | The Availability Zone in which to launch the instances.
fltoAvailabilityZone :: Lens' FleetLaunchTemplateOverrides (Maybe Text)
fltoAvailabilityZone = lens _fltoAvailabilityZone (\ s a -> s{_fltoAvailabilityZone = a})

-- | The location where the instance launched, if applicable.
fltoPlacement :: Lens' FleetLaunchTemplateOverrides (Maybe PlacementResponse)
fltoPlacement = lens _fltoPlacement (\ s a -> s{_fltoPlacement = a})

-- | The maximum price per unit hour that you are willing to pay for a Spot Instance.
fltoMaxPrice :: Lens' FleetLaunchTemplateOverrides (Maybe Text)
fltoMaxPrice = lens _fltoMaxPrice (\ s a -> s{_fltoMaxPrice = a})

instance FromXML FleetLaunchTemplateOverrides where
        parseXML x
          = FleetLaunchTemplateOverrides' <$>
              (x .@? "priority") <*> (x .@? "weightedCapacity") <*>
                (x .@? "subnetId")
                <*> (x .@? "instanceType")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "placement")
                <*> (x .@? "maxPrice")

instance Hashable FleetLaunchTemplateOverrides where

instance NFData FleetLaunchTemplateOverrides where

-- | Describes overrides for a launch template.
--
--
--
-- /See:/ 'fleetLaunchTemplateOverridesRequest' smart constructor.
data FleetLaunchTemplateOverridesRequest = FleetLaunchTemplateOverridesRequest'
  { _fltorPriority         :: !(Maybe Double)
  , _fltorWeightedCapacity :: !(Maybe Double)
  , _fltorSubnetId         :: !(Maybe Text)
  , _fltorInstanceType     :: !(Maybe InstanceType)
  , _fltorAvailabilityZone :: !(Maybe Text)
  , _fltorPlacement        :: !(Maybe Placement)
  , _fltorMaxPrice         :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetLaunchTemplateOverridesRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fltorPriority' - The priority for the launch template override. If __AllocationStrategy__ is set to @prioritized@ , EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at @0@ . The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
--
-- * 'fltorWeightedCapacity' - The number of units provided by the specified instance type.
--
-- * 'fltorSubnetId' - The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, @subnet-1234abcdeexample1, subnet-0987cdef6example2@ ). A request of type @instant@ can have only one subnet ID.
--
-- * 'fltorInstanceType' - The instance type.
--
-- * 'fltorAvailabilityZone' - The Availability Zone in which to launch the instances.
--
-- * 'fltorPlacement' - The location where the instance launched, if applicable.
--
-- * 'fltorMaxPrice' - The maximum price per unit hour that you are willing to pay for a Spot Instance.
fleetLaunchTemplateOverridesRequest
    :: FleetLaunchTemplateOverridesRequest
fleetLaunchTemplateOverridesRequest =
  FleetLaunchTemplateOverridesRequest'
    { _fltorPriority = Nothing
    , _fltorWeightedCapacity = Nothing
    , _fltorSubnetId = Nothing
    , _fltorInstanceType = Nothing
    , _fltorAvailabilityZone = Nothing
    , _fltorPlacement = Nothing
    , _fltorMaxPrice = Nothing
    }


-- | The priority for the launch template override. If __AllocationStrategy__ is set to @prioritized@ , EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at @0@ . The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
fltorPriority :: Lens' FleetLaunchTemplateOverridesRequest (Maybe Double)
fltorPriority = lens _fltorPriority (\ s a -> s{_fltorPriority = a})

-- | The number of units provided by the specified instance type.
fltorWeightedCapacity :: Lens' FleetLaunchTemplateOverridesRequest (Maybe Double)
fltorWeightedCapacity = lens _fltorWeightedCapacity (\ s a -> s{_fltorWeightedCapacity = a})

-- | The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, @subnet-1234abcdeexample1, subnet-0987cdef6example2@ ). A request of type @instant@ can have only one subnet ID.
fltorSubnetId :: Lens' FleetLaunchTemplateOverridesRequest (Maybe Text)
fltorSubnetId = lens _fltorSubnetId (\ s a -> s{_fltorSubnetId = a})

-- | The instance type.
fltorInstanceType :: Lens' FleetLaunchTemplateOverridesRequest (Maybe InstanceType)
fltorInstanceType = lens _fltorInstanceType (\ s a -> s{_fltorInstanceType = a})

-- | The Availability Zone in which to launch the instances.
fltorAvailabilityZone :: Lens' FleetLaunchTemplateOverridesRequest (Maybe Text)
fltorAvailabilityZone = lens _fltorAvailabilityZone (\ s a -> s{_fltorAvailabilityZone = a})

-- | The location where the instance launched, if applicable.
fltorPlacement :: Lens' FleetLaunchTemplateOverridesRequest (Maybe Placement)
fltorPlacement = lens _fltorPlacement (\ s a -> s{_fltorPlacement = a})

-- | The maximum price per unit hour that you are willing to pay for a Spot Instance.
fltorMaxPrice :: Lens' FleetLaunchTemplateOverridesRequest (Maybe Text)
fltorMaxPrice = lens _fltorMaxPrice (\ s a -> s{_fltorMaxPrice = a})

instance Hashable FleetLaunchTemplateOverridesRequest
         where

instance NFData FleetLaunchTemplateOverridesRequest
         where

instance ToQuery FleetLaunchTemplateOverridesRequest
         where
        toQuery FleetLaunchTemplateOverridesRequest'{..}
          = mconcat
              ["Priority" =: _fltorPriority,
               "WeightedCapacity" =: _fltorWeightedCapacity,
               "SubnetId" =: _fltorSubnetId,
               "InstanceType" =: _fltorInstanceType,
               "AvailabilityZone" =: _fltorAvailabilityZone,
               "Placement" =: _fltorPlacement,
               "MaxPrice" =: _fltorMaxPrice]

-- | Describes the Amazon EC2 launch template and the launch template version that can be used by a Spot Fleet request to configure Amazon EC2 instances. For information about launch templates, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html Launching an instance from a launch template> in the /Amazon EC2 User Guide for Linux Instances/ .
--
--
--
-- /See:/ 'fleetLaunchTemplateSpecification' smart constructor.
data FleetLaunchTemplateSpecification = FleetLaunchTemplateSpecification'
  { _fltsLaunchTemplateName :: !(Maybe Text)
  , _fltsLaunchTemplateId   :: !(Maybe Text)
  , _fltsVersion            :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetLaunchTemplateSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fltsLaunchTemplateName' - The name of the launch template. If you specify the template name, you can't specify the template ID.
--
-- * 'fltsLaunchTemplateId' - The ID of the launch template. If you specify the template ID, you can't specify the template name.
--
-- * 'fltsVersion' - The launch template version number, @> Latest@ , or @> Default@ . You must specify a value, otherwise the request fails. If the value is @> Latest@ , Amazon EC2 uses the latest version of the launch template. If the value is @> Default@ , Amazon EC2 uses the default version of the launch template.
fleetLaunchTemplateSpecification
    :: FleetLaunchTemplateSpecification
fleetLaunchTemplateSpecification =
  FleetLaunchTemplateSpecification'
    { _fltsLaunchTemplateName = Nothing
    , _fltsLaunchTemplateId = Nothing
    , _fltsVersion = Nothing
    }


-- | The name of the launch template. If you specify the template name, you can't specify the template ID.
fltsLaunchTemplateName :: Lens' FleetLaunchTemplateSpecification (Maybe Text)
fltsLaunchTemplateName = lens _fltsLaunchTemplateName (\ s a -> s{_fltsLaunchTemplateName = a})

-- | The ID of the launch template. If you specify the template ID, you can't specify the template name.
fltsLaunchTemplateId :: Lens' FleetLaunchTemplateSpecification (Maybe Text)
fltsLaunchTemplateId = lens _fltsLaunchTemplateId (\ s a -> s{_fltsLaunchTemplateId = a})

-- | The launch template version number, @> Latest@ , or @> Default@ . You must specify a value, otherwise the request fails. If the value is @> Latest@ , Amazon EC2 uses the latest version of the launch template. If the value is @> Default@ , Amazon EC2 uses the default version of the launch template.
fltsVersion :: Lens' FleetLaunchTemplateSpecification (Maybe Text)
fltsVersion = lens _fltsVersion (\ s a -> s{_fltsVersion = a})

instance FromXML FleetLaunchTemplateSpecification
         where
        parseXML x
          = FleetLaunchTemplateSpecification' <$>
              (x .@? "launchTemplateName") <*>
                (x .@? "launchTemplateId")
                <*> (x .@? "version")

instance Hashable FleetLaunchTemplateSpecification
         where

instance NFData FleetLaunchTemplateSpecification
         where

instance ToQuery FleetLaunchTemplateSpecification
         where
        toQuery FleetLaunchTemplateSpecification'{..}
          = mconcat
              ["LaunchTemplateName" =: _fltsLaunchTemplateName,
               "LaunchTemplateId" =: _fltsLaunchTemplateId,
               "Version" =: _fltsVersion]

-- | Describes the Amazon EC2 launch template and the launch template version that can be used by an EC2 Fleet to configure Amazon EC2 instances. For information about launch templates, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html Launching an instance from a launch template> in the /Amazon EC2 User Guide/ .
--
--
--
-- /See:/ 'fleetLaunchTemplateSpecificationRequest' smart constructor.
data FleetLaunchTemplateSpecificationRequest = FleetLaunchTemplateSpecificationRequest'
  { _fltsrLaunchTemplateName :: !(Maybe Text)
  , _fltsrLaunchTemplateId   :: !(Maybe Text)
  , _fltsrVersion            :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetLaunchTemplateSpecificationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fltsrLaunchTemplateName' - The name of the launch template. If you specify the template name, you can't specify the template ID.
--
-- * 'fltsrLaunchTemplateId' - The ID of the launch template. If you specify the template ID, you can't specify the template name.
--
-- * 'fltsrVersion' - The launch template version number, @> Latest@ , or @> Default@ . You must specify a value, otherwise the request fails. If the value is @> Latest@ , Amazon EC2 uses the latest version of the launch template. If the value is @> Default@ , Amazon EC2 uses the default version of the launch template.
fleetLaunchTemplateSpecificationRequest
    :: FleetLaunchTemplateSpecificationRequest
fleetLaunchTemplateSpecificationRequest =
  FleetLaunchTemplateSpecificationRequest'
    { _fltsrLaunchTemplateName = Nothing
    , _fltsrLaunchTemplateId = Nothing
    , _fltsrVersion = Nothing
    }


-- | The name of the launch template. If you specify the template name, you can't specify the template ID.
fltsrLaunchTemplateName :: Lens' FleetLaunchTemplateSpecificationRequest (Maybe Text)
fltsrLaunchTemplateName = lens _fltsrLaunchTemplateName (\ s a -> s{_fltsrLaunchTemplateName = a})

-- | The ID of the launch template. If you specify the template ID, you can't specify the template name.
fltsrLaunchTemplateId :: Lens' FleetLaunchTemplateSpecificationRequest (Maybe Text)
fltsrLaunchTemplateId = lens _fltsrLaunchTemplateId (\ s a -> s{_fltsrLaunchTemplateId = a})

-- | The launch template version number, @> Latest@ , or @> Default@ . You must specify a value, otherwise the request fails. If the value is @> Latest@ , Amazon EC2 uses the latest version of the launch template. If the value is @> Default@ , Amazon EC2 uses the default version of the launch template.
fltsrVersion :: Lens' FleetLaunchTemplateSpecificationRequest (Maybe Text)
fltsrVersion = lens _fltsrVersion (\ s a -> s{_fltsrVersion = a})

instance Hashable
           FleetLaunchTemplateSpecificationRequest
         where

instance NFData
           FleetLaunchTemplateSpecificationRequest
         where

instance ToQuery
           FleetLaunchTemplateSpecificationRequest
         where
        toQuery FleetLaunchTemplateSpecificationRequest'{..}
          = mconcat
              ["LaunchTemplateName" =: _fltsrLaunchTemplateName,
               "LaunchTemplateId" =: _fltsrLaunchTemplateId,
               "Version" =: _fltsrVersion]

-- | The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
--
--
--
-- /See:/ 'fleetSpotCapacityRebalance' smart constructor.
newtype FleetSpotCapacityRebalance = FleetSpotCapacityRebalance'
  { _fscrReplacementStrategy :: Maybe FleetReplacementStrategy
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetSpotCapacityRebalance' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fscrReplacementStrategy' - To allow EC2 Fleet to launch a replacement Spot Instance when an instance rebalance notification is emitted for an existing Spot Instance in the fleet, specify @launch@ . Only available for fleets of type @maintain@ .
fleetSpotCapacityRebalance
    :: FleetSpotCapacityRebalance
fleetSpotCapacityRebalance =
  FleetSpotCapacityRebalance' {_fscrReplacementStrategy = Nothing}


-- | To allow EC2 Fleet to launch a replacement Spot Instance when an instance rebalance notification is emitted for an existing Spot Instance in the fleet, specify @launch@ . Only available for fleets of type @maintain@ .
fscrReplacementStrategy :: Lens' FleetSpotCapacityRebalance (Maybe FleetReplacementStrategy)
fscrReplacementStrategy = lens _fscrReplacementStrategy (\ s a -> s{_fscrReplacementStrategy = a})

instance FromXML FleetSpotCapacityRebalance where
        parseXML x
          = FleetSpotCapacityRebalance' <$>
              (x .@? "replacementStrategy")

instance Hashable FleetSpotCapacityRebalance where

instance NFData FleetSpotCapacityRebalance where

-- | The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#ec2-fleet-capacity-rebalance Capacity rebalancing> in the /Amazon EC2 User Guide/ .
--
--
--
-- /See:/ 'fleetSpotCapacityRebalanceRequest' smart constructor.
newtype FleetSpotCapacityRebalanceRequest = FleetSpotCapacityRebalanceRequest'
  { _fscrrReplacementStrategy :: Maybe FleetReplacementStrategy
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetSpotCapacityRebalanceRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fscrrReplacementStrategy' - The replacement strategy to use. Only available for fleets of type @maintain@ . To allow EC2 Fleet to launch a replacement Spot Instance when an instance rebalance notification is emitted for an existing Spot Instance in the fleet, specify @launch@ . You must specify a value, otherwise you get an error.
fleetSpotCapacityRebalanceRequest
    :: FleetSpotCapacityRebalanceRequest
fleetSpotCapacityRebalanceRequest =
  FleetSpotCapacityRebalanceRequest' {_fscrrReplacementStrategy = Nothing}


-- | The replacement strategy to use. Only available for fleets of type @maintain@ . To allow EC2 Fleet to launch a replacement Spot Instance when an instance rebalance notification is emitted for an existing Spot Instance in the fleet, specify @launch@ . You must specify a value, otherwise you get an error.
fscrrReplacementStrategy :: Lens' FleetSpotCapacityRebalanceRequest (Maybe FleetReplacementStrategy)
fscrrReplacementStrategy = lens _fscrrReplacementStrategy (\ s a -> s{_fscrrReplacementStrategy = a})

instance Hashable FleetSpotCapacityRebalanceRequest
         where

instance NFData FleetSpotCapacityRebalanceRequest
         where

instance ToQuery FleetSpotCapacityRebalanceRequest
         where
        toQuery FleetSpotCapacityRebalanceRequest'{..}
          = mconcat
              ["ReplacementStrategy" =: _fscrrReplacementStrategy]

-- | The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
--
--
--
-- /See:/ 'fleetSpotMaintenanceStrategies' smart constructor.
newtype FleetSpotMaintenanceStrategies = FleetSpotMaintenanceStrategies'
  { _fsmsCapacityRebalance :: Maybe FleetSpotCapacityRebalance
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetSpotMaintenanceStrategies' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fsmsCapacityRebalance' - The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
fleetSpotMaintenanceStrategies
    :: FleetSpotMaintenanceStrategies
fleetSpotMaintenanceStrategies =
  FleetSpotMaintenanceStrategies' {_fsmsCapacityRebalance = Nothing}


-- | The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
fsmsCapacityRebalance :: Lens' FleetSpotMaintenanceStrategies (Maybe FleetSpotCapacityRebalance)
fsmsCapacityRebalance = lens _fsmsCapacityRebalance (\ s a -> s{_fsmsCapacityRebalance = a})

instance FromXML FleetSpotMaintenanceStrategies where
        parseXML x
          = FleetSpotMaintenanceStrategies' <$>
              (x .@? "capacityRebalance")

instance Hashable FleetSpotMaintenanceStrategies
         where

instance NFData FleetSpotMaintenanceStrategies where

-- | The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
--
--
--
-- /See:/ 'fleetSpotMaintenanceStrategiesRequest' smart constructor.
newtype FleetSpotMaintenanceStrategiesRequest = FleetSpotMaintenanceStrategiesRequest'
  { _fsmsrCapacityRebalance :: Maybe FleetSpotCapacityRebalanceRequest
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FleetSpotMaintenanceStrategiesRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fsmsrCapacityRebalance' - The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
fleetSpotMaintenanceStrategiesRequest
    :: FleetSpotMaintenanceStrategiesRequest
fleetSpotMaintenanceStrategiesRequest =
  FleetSpotMaintenanceStrategiesRequest' {_fsmsrCapacityRebalance = Nothing}


-- | The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
fsmsrCapacityRebalance :: Lens' FleetSpotMaintenanceStrategiesRequest (Maybe FleetSpotCapacityRebalanceRequest)
fsmsrCapacityRebalance = lens _fsmsrCapacityRebalance (\ s a -> s{_fsmsrCapacityRebalance = a})

instance Hashable
           FleetSpotMaintenanceStrategiesRequest
         where

instance NFData FleetSpotMaintenanceStrategiesRequest
         where

instance ToQuery
           FleetSpotMaintenanceStrategiesRequest
         where
        toQuery FleetSpotMaintenanceStrategiesRequest'{..}
          = mconcat
              ["CapacityRebalance" =: _fsmsrCapacityRebalance]

-- | Describes a flow log.
--
--
--
-- /See:/ 'flowLog' smart constructor.
data FlowLog = FlowLog'
  { _flCreationTime             :: !(Maybe ISO8601)
  , _flLogFormat                :: !(Maybe Text)
  , _flMaxAggregationInterval   :: !(Maybe Int)
  , _flResourceId               :: !(Maybe Text)
  , _flFlowLogStatus            :: !(Maybe Text)
  , _flTrafficType              :: !(Maybe TrafficType)
  , _flLogDestination           :: !(Maybe Text)
  , _flDeliverLogsStatus        :: !(Maybe Text)
  , _flDeliverLogsErrorMessage  :: !(Maybe Text)
  , _flLogGroupName             :: !(Maybe Text)
  , _flDeliverLogsPermissionARN :: !(Maybe Text)
  , _flLogDestinationType       :: !(Maybe LogDestinationType)
  , _flFlowLogId                :: !(Maybe Text)
  , _flTags                     :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FlowLog' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'flCreationTime' - The date and time the flow log was created.
--
-- * 'flLogFormat' - The format of the flow log record.
--
-- * 'flMaxAggregationInterval' - The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. When a network interface is attached to a <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances Nitro-based instance> , the aggregation interval is always 60 seconds (1 minute) or less, regardless of the specified value. Valid Values: @60@ | @600@
--
-- * 'flResourceId' - The ID of the resource on which the flow log was created.
--
-- * 'flFlowLogStatus' - The status of the flow log (@ACTIVE@ ).
--
-- * 'flTrafficType' - The type of traffic captured for the flow log.
--
-- * 'flLogDestination' - Specifies the destination to which the flow log data is published. Flow log data can be published to an CloudWatch Logs log group or an Amazon S3 bucket. If the flow log publishes to CloudWatch Logs, this element indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which the data is published. If the flow log publishes to Amazon S3, this element indicates the ARN of the Amazon S3 bucket to which the data is published.
--
-- * 'flDeliverLogsStatus' - The status of the logs delivery (@SUCCESS@ | @FAILED@ ).
--
-- * 'flDeliverLogsErrorMessage' - Information about the error that occurred. @Rate limited@ indicates that CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of log groups that you can create. @Access error@ indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. @Unknown error@ indicates an internal error.
--
-- * 'flLogGroupName' - The name of the flow log group.
--
-- * 'flDeliverLogsPermissionARN' - The ARN of the IAM role that posts logs to CloudWatch Logs.
--
-- * 'flLogDestinationType' - Specifies the type of destination to which the flow log data is published. Flow log data can be published to CloudWatch Logs or Amazon S3.
--
-- * 'flFlowLogId' - The flow log ID.
--
-- * 'flTags' - The tags for the flow log.
flowLog
    :: FlowLog
flowLog =
  FlowLog'
    { _flCreationTime = Nothing
    , _flLogFormat = Nothing
    , _flMaxAggregationInterval = Nothing
    , _flResourceId = Nothing
    , _flFlowLogStatus = Nothing
    , _flTrafficType = Nothing
    , _flLogDestination = Nothing
    , _flDeliverLogsStatus = Nothing
    , _flDeliverLogsErrorMessage = Nothing
    , _flLogGroupName = Nothing
    , _flDeliverLogsPermissionARN = Nothing
    , _flLogDestinationType = Nothing
    , _flFlowLogId = Nothing
    , _flTags = Nothing
    }


-- | The date and time the flow log was created.
flCreationTime :: Lens' FlowLog (Maybe UTCTime)
flCreationTime = lens _flCreationTime (\ s a -> s{_flCreationTime = a}) . mapping _Time

-- | The format of the flow log record.
flLogFormat :: Lens' FlowLog (Maybe Text)
flLogFormat = lens _flLogFormat (\ s a -> s{_flLogFormat = a})

-- | The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. When a network interface is attached to a <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances Nitro-based instance> , the aggregation interval is always 60 seconds (1 minute) or less, regardless of the specified value. Valid Values: @60@ | @600@
flMaxAggregationInterval :: Lens' FlowLog (Maybe Int)
flMaxAggregationInterval = lens _flMaxAggregationInterval (\ s a -> s{_flMaxAggregationInterval = a})

-- | The ID of the resource on which the flow log was created.
flResourceId :: Lens' FlowLog (Maybe Text)
flResourceId = lens _flResourceId (\ s a -> s{_flResourceId = a})

-- | The status of the flow log (@ACTIVE@ ).
flFlowLogStatus :: Lens' FlowLog (Maybe Text)
flFlowLogStatus = lens _flFlowLogStatus (\ s a -> s{_flFlowLogStatus = a})

-- | The type of traffic captured for the flow log.
flTrafficType :: Lens' FlowLog (Maybe TrafficType)
flTrafficType = lens _flTrafficType (\ s a -> s{_flTrafficType = a})

-- | Specifies the destination to which the flow log data is published. Flow log data can be published to an CloudWatch Logs log group or an Amazon S3 bucket. If the flow log publishes to CloudWatch Logs, this element indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which the data is published. If the flow log publishes to Amazon S3, this element indicates the ARN of the Amazon S3 bucket to which the data is published.
flLogDestination :: Lens' FlowLog (Maybe Text)
flLogDestination = lens _flLogDestination (\ s a -> s{_flLogDestination = a})

-- | The status of the logs delivery (@SUCCESS@ | @FAILED@ ).
flDeliverLogsStatus :: Lens' FlowLog (Maybe Text)
flDeliverLogsStatus = lens _flDeliverLogsStatus (\ s a -> s{_flDeliverLogsStatus = a})

-- | Information about the error that occurred. @Rate limited@ indicates that CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of log groups that you can create. @Access error@ indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. @Unknown error@ indicates an internal error.
flDeliverLogsErrorMessage :: Lens' FlowLog (Maybe Text)
flDeliverLogsErrorMessage = lens _flDeliverLogsErrorMessage (\ s a -> s{_flDeliverLogsErrorMessage = a})

-- | The name of the flow log group.
flLogGroupName :: Lens' FlowLog (Maybe Text)
flLogGroupName = lens _flLogGroupName (\ s a -> s{_flLogGroupName = a})

-- | The ARN of the IAM role that posts logs to CloudWatch Logs.
flDeliverLogsPermissionARN :: Lens' FlowLog (Maybe Text)
flDeliverLogsPermissionARN = lens _flDeliverLogsPermissionARN (\ s a -> s{_flDeliverLogsPermissionARN = a})

-- | Specifies the type of destination to which the flow log data is published. Flow log data can be published to CloudWatch Logs or Amazon S3.
flLogDestinationType :: Lens' FlowLog (Maybe LogDestinationType)
flLogDestinationType = lens _flLogDestinationType (\ s a -> s{_flLogDestinationType = a})

-- | The flow log ID.
flFlowLogId :: Lens' FlowLog (Maybe Text)
flFlowLogId = lens _flFlowLogId (\ s a -> s{_flFlowLogId = a})

-- | The tags for the flow log.
flTags :: Lens' FlowLog [Tag]
flTags = lens _flTags (\ s a -> s{_flTags = a}) . _Default . _Coerce

instance FromXML FlowLog where
        parseXML x
          = FlowLog' <$>
              (x .@? "creationTime") <*> (x .@? "logFormat") <*>
                (x .@? "maxAggregationInterval")
                <*> (x .@? "resourceId")
                <*> (x .@? "flowLogStatus")
                <*> (x .@? "trafficType")
                <*> (x .@? "logDestination")
                <*> (x .@? "deliverLogsStatus")
                <*> (x .@? "deliverLogsErrorMessage")
                <*> (x .@? "logGroupName")
                <*> (x .@? "deliverLogsPermissionArn")
                <*> (x .@? "logDestinationType")
                <*> (x .@? "flowLogId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable FlowLog where

instance NFData FlowLog where

-- | Describes the FPGA accelerator for the instance type.
--
--
--
-- /See:/ 'fpgaDeviceInfo' smart constructor.
data FpgaDeviceInfo = FpgaDeviceInfo'
  { _fdiMemoryInfo   :: !(Maybe FpgaDeviceMemoryInfo)
  , _fdiManufacturer :: !(Maybe Text)
  , _fdiCount        :: !(Maybe Int)
  , _fdiName         :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FpgaDeviceInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fdiMemoryInfo' - Describes the memory for the FPGA accelerator for the instance type.
--
-- * 'fdiManufacturer' - The manufacturer of the FPGA accelerator.
--
-- * 'fdiCount' - The count of FPGA accelerators for the instance type.
--
-- * 'fdiName' - The name of the FPGA accelerator.
fpgaDeviceInfo
    :: FpgaDeviceInfo
fpgaDeviceInfo =
  FpgaDeviceInfo'
    { _fdiMemoryInfo = Nothing
    , _fdiManufacturer = Nothing
    , _fdiCount = Nothing
    , _fdiName = Nothing
    }


-- | Describes the memory for the FPGA accelerator for the instance type.
fdiMemoryInfo :: Lens' FpgaDeviceInfo (Maybe FpgaDeviceMemoryInfo)
fdiMemoryInfo = lens _fdiMemoryInfo (\ s a -> s{_fdiMemoryInfo = a})

-- | The manufacturer of the FPGA accelerator.
fdiManufacturer :: Lens' FpgaDeviceInfo (Maybe Text)
fdiManufacturer = lens _fdiManufacturer (\ s a -> s{_fdiManufacturer = a})

-- | The count of FPGA accelerators for the instance type.
fdiCount :: Lens' FpgaDeviceInfo (Maybe Int)
fdiCount = lens _fdiCount (\ s a -> s{_fdiCount = a})

-- | The name of the FPGA accelerator.
fdiName :: Lens' FpgaDeviceInfo (Maybe Text)
fdiName = lens _fdiName (\ s a -> s{_fdiName = a})

instance FromXML FpgaDeviceInfo where
        parseXML x
          = FpgaDeviceInfo' <$>
              (x .@? "memoryInfo") <*> (x .@? "manufacturer") <*>
                (x .@? "count")
                <*> (x .@? "name")

instance Hashable FpgaDeviceInfo where

instance NFData FpgaDeviceInfo where

-- | Describes the memory for the FPGA accelerator for the instance type.
--
--
--
-- /See:/ 'fpgaDeviceMemoryInfo' smart constructor.
newtype FpgaDeviceMemoryInfo = FpgaDeviceMemoryInfo'
  { _fdmiSizeInMiB :: Maybe Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FpgaDeviceMemoryInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fdmiSizeInMiB' - The size of the memory available to the FPGA accelerator, in MiB.
fpgaDeviceMemoryInfo
    :: FpgaDeviceMemoryInfo
fpgaDeviceMemoryInfo = FpgaDeviceMemoryInfo' {_fdmiSizeInMiB = Nothing}


-- | The size of the memory available to the FPGA accelerator, in MiB.
fdmiSizeInMiB :: Lens' FpgaDeviceMemoryInfo (Maybe Int)
fdmiSizeInMiB = lens _fdmiSizeInMiB (\ s a -> s{_fdmiSizeInMiB = a})

instance FromXML FpgaDeviceMemoryInfo where
        parseXML x
          = FpgaDeviceMemoryInfo' <$> (x .@? "sizeInMiB")

instance Hashable FpgaDeviceMemoryInfo where

instance NFData FpgaDeviceMemoryInfo where

-- | Describes an Amazon FPGA image (AFI).
--
--
--
-- /See:/ 'fpgaImage' smart constructor.
data FpgaImage = FpgaImage'
  { _fiShellVersion         :: !(Maybe Text)
  , _fiPciId                :: !(Maybe PciId)
  , _fiState                :: !(Maybe FpgaImageState)
  , _fiOwnerAlias           :: !(Maybe Text)
  , _fiFpgaImageId          :: !(Maybe Text)
  , _fiDataRetentionSupport :: !(Maybe Bool)
  , _fiOwnerId              :: !(Maybe Text)
  , _fiUpdateTime           :: !(Maybe ISO8601)
  , _fiName                 :: !(Maybe Text)
  , _fiProductCodes         :: !(Maybe [ProductCode])
  , _fiDescription          :: !(Maybe Text)
  , _fiCreateTime           :: !(Maybe ISO8601)
  , _fiTags                 :: !(Maybe [Tag])
  , _fiPublic               :: !(Maybe Bool)
  , _fiFpgaImageGlobalId    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FpgaImage' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fiShellVersion' - The version of the AWS Shell that was used to create the bitstream.
--
-- * 'fiPciId' - Information about the PCI bus.
--
-- * 'fiState' - Information about the state of the AFI.
--
-- * 'fiOwnerAlias' - The alias of the AFI owner. Possible values include @self@ , @amazon@ , and @aws-marketplace@ .
--
-- * 'fiFpgaImageId' - The FPGA image identifier (AFI ID).
--
-- * 'fiDataRetentionSupport' - Indicates whether data retention support is enabled for the AFI.
--
-- * 'fiOwnerId' - The AWS account ID of the AFI owner.
--
-- * 'fiUpdateTime' - The time of the most recent update to the AFI.
--
-- * 'fiName' - The name of the AFI.
--
-- * 'fiProductCodes' - The product codes for the AFI.
--
-- * 'fiDescription' - The description of the AFI.
--
-- * 'fiCreateTime' - The date and time the AFI was created.
--
-- * 'fiTags' - Any tags assigned to the AFI.
--
-- * 'fiPublic' - Indicates whether the AFI is public.
--
-- * 'fiFpgaImageGlobalId' - The global FPGA image identifier (AGFI ID).
fpgaImage
    :: FpgaImage
fpgaImage =
  FpgaImage'
    { _fiShellVersion = Nothing
    , _fiPciId = Nothing
    , _fiState = Nothing
    , _fiOwnerAlias = Nothing
    , _fiFpgaImageId = Nothing
    , _fiDataRetentionSupport = Nothing
    , _fiOwnerId = Nothing
    , _fiUpdateTime = Nothing
    , _fiName = Nothing
    , _fiProductCodes = Nothing
    , _fiDescription = Nothing
    , _fiCreateTime = Nothing
    , _fiTags = Nothing
    , _fiPublic = Nothing
    , _fiFpgaImageGlobalId = Nothing
    }


-- | The version of the AWS Shell that was used to create the bitstream.
fiShellVersion :: Lens' FpgaImage (Maybe Text)
fiShellVersion = lens _fiShellVersion (\ s a -> s{_fiShellVersion = a})

-- | Information about the PCI bus.
fiPciId :: Lens' FpgaImage (Maybe PciId)
fiPciId = lens _fiPciId (\ s a -> s{_fiPciId = a})

-- | Information about the state of the AFI.
fiState :: Lens' FpgaImage (Maybe FpgaImageState)
fiState = lens _fiState (\ s a -> s{_fiState = a})

-- | The alias of the AFI owner. Possible values include @self@ , @amazon@ , and @aws-marketplace@ .
fiOwnerAlias :: Lens' FpgaImage (Maybe Text)
fiOwnerAlias = lens _fiOwnerAlias (\ s a -> s{_fiOwnerAlias = a})

-- | The FPGA image identifier (AFI ID).
fiFpgaImageId :: Lens' FpgaImage (Maybe Text)
fiFpgaImageId = lens _fiFpgaImageId (\ s a -> s{_fiFpgaImageId = a})

-- | Indicates whether data retention support is enabled for the AFI.
fiDataRetentionSupport :: Lens' FpgaImage (Maybe Bool)
fiDataRetentionSupport = lens _fiDataRetentionSupport (\ s a -> s{_fiDataRetentionSupport = a})

-- | The AWS account ID of the AFI owner.
fiOwnerId :: Lens' FpgaImage (Maybe Text)
fiOwnerId = lens _fiOwnerId (\ s a -> s{_fiOwnerId = a})

-- | The time of the most recent update to the AFI.
fiUpdateTime :: Lens' FpgaImage (Maybe UTCTime)
fiUpdateTime = lens _fiUpdateTime (\ s a -> s{_fiUpdateTime = a}) . mapping _Time

-- | The name of the AFI.
fiName :: Lens' FpgaImage (Maybe Text)
fiName = lens _fiName (\ s a -> s{_fiName = a})

-- | The product codes for the AFI.
fiProductCodes :: Lens' FpgaImage [ProductCode]
fiProductCodes = lens _fiProductCodes (\ s a -> s{_fiProductCodes = a}) . _Default . _Coerce

-- | The description of the AFI.
fiDescription :: Lens' FpgaImage (Maybe Text)
fiDescription = lens _fiDescription (\ s a -> s{_fiDescription = a})

-- | The date and time the AFI was created.
fiCreateTime :: Lens' FpgaImage (Maybe UTCTime)
fiCreateTime = lens _fiCreateTime (\ s a -> s{_fiCreateTime = a}) . mapping _Time

-- | Any tags assigned to the AFI.
fiTags :: Lens' FpgaImage [Tag]
fiTags = lens _fiTags (\ s a -> s{_fiTags = a}) . _Default . _Coerce

-- | Indicates whether the AFI is public.
fiPublic :: Lens' FpgaImage (Maybe Bool)
fiPublic = lens _fiPublic (\ s a -> s{_fiPublic = a})

-- | The global FPGA image identifier (AGFI ID).
fiFpgaImageGlobalId :: Lens' FpgaImage (Maybe Text)
fiFpgaImageGlobalId = lens _fiFpgaImageGlobalId (\ s a -> s{_fiFpgaImageGlobalId = a})

instance FromXML FpgaImage where
        parseXML x
          = FpgaImage' <$>
              (x .@? "shellVersion") <*> (x .@? "pciId") <*>
                (x .@? "state")
                <*> (x .@? "ownerAlias")
                <*> (x .@? "fpgaImageId")
                <*> (x .@? "dataRetentionSupport")
                <*> (x .@? "ownerId")
                <*> (x .@? "updateTime")
                <*> (x .@? "name")
                <*>
                (x .@? "productCodes" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "description")
                <*> (x .@? "createTime")
                <*>
                (x .@? "tags" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "public")
                <*> (x .@? "fpgaImageGlobalId")

instance Hashable FpgaImage where

instance NFData FpgaImage where

-- | Describes an Amazon FPGA image (AFI) attribute.
--
--
--
-- /See:/ 'fpgaImageAttribute' smart constructor.
data FpgaImageAttribute = FpgaImageAttribute'
  { _fiaFpgaImageId     :: !(Maybe Text)
  , _fiaName            :: !(Maybe Text)
  , _fiaProductCodes    :: !(Maybe [ProductCode])
  , _fiaDescription     :: !(Maybe Text)
  , _fiaLoadPermissions :: !(Maybe [LoadPermission])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FpgaImageAttribute' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fiaFpgaImageId' - The ID of the AFI.
--
-- * 'fiaName' - The name of the AFI.
--
-- * 'fiaProductCodes' - The product codes.
--
-- * 'fiaDescription' - The description of the AFI.
--
-- * 'fiaLoadPermissions' - The load permissions.
fpgaImageAttribute
    :: FpgaImageAttribute
fpgaImageAttribute =
  FpgaImageAttribute'
    { _fiaFpgaImageId = Nothing
    , _fiaName = Nothing
    , _fiaProductCodes = Nothing
    , _fiaDescription = Nothing
    , _fiaLoadPermissions = Nothing
    }


-- | The ID of the AFI.
fiaFpgaImageId :: Lens' FpgaImageAttribute (Maybe Text)
fiaFpgaImageId = lens _fiaFpgaImageId (\ s a -> s{_fiaFpgaImageId = a})

-- | The name of the AFI.
fiaName :: Lens' FpgaImageAttribute (Maybe Text)
fiaName = lens _fiaName (\ s a -> s{_fiaName = a})

-- | The product codes.
fiaProductCodes :: Lens' FpgaImageAttribute [ProductCode]
fiaProductCodes = lens _fiaProductCodes (\ s a -> s{_fiaProductCodes = a}) . _Default . _Coerce

-- | The description of the AFI.
fiaDescription :: Lens' FpgaImageAttribute (Maybe Text)
fiaDescription = lens _fiaDescription (\ s a -> s{_fiaDescription = a})

-- | The load permissions.
fiaLoadPermissions :: Lens' FpgaImageAttribute [LoadPermission]
fiaLoadPermissions = lens _fiaLoadPermissions (\ s a -> s{_fiaLoadPermissions = a}) . _Default . _Coerce

instance FromXML FpgaImageAttribute where
        parseXML x
          = FpgaImageAttribute' <$>
              (x .@? "fpgaImageId") <*> (x .@? "name") <*>
                (x .@? "productCodes" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "description")
                <*>
                (x .@? "loadPermissions" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable FpgaImageAttribute where

instance NFData FpgaImageAttribute where

-- | Describes the state of the bitstream generation process for an Amazon FPGA image (AFI).
--
--
--
-- /See:/ 'fpgaImageState' smart constructor.
data FpgaImageState = FpgaImageState'
  { _fisCode    :: !(Maybe FpgaImageStateCode)
  , _fisMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FpgaImageState' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fisCode' - The state. The following are the possible values:     * @pending@ - AFI bitstream generation is in progress.     * @available@ - The AFI is available for use.     * @failed@ - AFI bitstream generation failed.     * @unavailable@ - The AFI is no longer available for use.
--
-- * 'fisMessage' - If the state is @failed@ , this is the error message.
fpgaImageState
    :: FpgaImageState
fpgaImageState = FpgaImageState' {_fisCode = Nothing, _fisMessage = Nothing}


-- | The state. The following are the possible values:     * @pending@ - AFI bitstream generation is in progress.     * @available@ - The AFI is available for use.     * @failed@ - AFI bitstream generation failed.     * @unavailable@ - The AFI is no longer available for use.
fisCode :: Lens' FpgaImageState (Maybe FpgaImageStateCode)
fisCode = lens _fisCode (\ s a -> s{_fisCode = a})

-- | If the state is @failed@ , this is the error message.
fisMessage :: Lens' FpgaImageState (Maybe Text)
fisMessage = lens _fisMessage (\ s a -> s{_fisMessage = a})

instance FromXML FpgaImageState where
        parseXML x
          = FpgaImageState' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable FpgaImageState where

instance NFData FpgaImageState where

-- | Describes the FPGAs for the instance type.
--
--
--
-- /See:/ 'fpgaInfo' smart constructor.
data FpgaInfo = FpgaInfo'
  { _fiTotalFpgaMemoryInMiB :: !(Maybe Int)
  , _fiFpgas                :: !(Maybe [FpgaDeviceInfo])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'FpgaInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'fiTotalFpgaMemoryInMiB' - The total memory of all FPGA accelerators for the instance type.
--
-- * 'fiFpgas' - Describes the FPGAs for the instance type.
fpgaInfo
    :: FpgaInfo
fpgaInfo = FpgaInfo' {_fiTotalFpgaMemoryInMiB = Nothing, _fiFpgas = Nothing}


-- | The total memory of all FPGA accelerators for the instance type.
fiTotalFpgaMemoryInMiB :: Lens' FpgaInfo (Maybe Int)
fiTotalFpgaMemoryInMiB = lens _fiTotalFpgaMemoryInMiB (\ s a -> s{_fiTotalFpgaMemoryInMiB = a})

-- | Describes the FPGAs for the instance type.
fiFpgas :: Lens' FpgaInfo [FpgaDeviceInfo]
fiFpgas = lens _fiFpgas (\ s a -> s{_fiFpgas = a}) . _Default . _Coerce

instance FromXML FpgaInfo where
        parseXML x
          = FpgaInfo' <$>
              (x .@? "totalFpgaMemoryInMiB") <*>
                (x .@? "fpgas" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable FpgaInfo where

instance NFData FpgaInfo where

-- | Describes the GPU accelerators for the instance type.
--
--
--
-- /See:/ 'gpuDeviceInfo' smart constructor.
data GpuDeviceInfo = GpuDeviceInfo'
  { _gdiMemoryInfo   :: !(Maybe GpuDeviceMemoryInfo)
  , _gdiManufacturer :: !(Maybe Text)
  , _gdiCount        :: !(Maybe Int)
  , _gdiName         :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'GpuDeviceInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'gdiMemoryInfo' - Describes the memory available to the GPU accelerator.
--
-- * 'gdiManufacturer' - The manufacturer of the GPU accelerator.
--
-- * 'gdiCount' - The number of GPUs for the instance type.
--
-- * 'gdiName' - The name of the GPU accelerator.
gpuDeviceInfo
    :: GpuDeviceInfo
gpuDeviceInfo =
  GpuDeviceInfo'
    { _gdiMemoryInfo = Nothing
    , _gdiManufacturer = Nothing
    , _gdiCount = Nothing
    , _gdiName = Nothing
    }


-- | Describes the memory available to the GPU accelerator.
gdiMemoryInfo :: Lens' GpuDeviceInfo (Maybe GpuDeviceMemoryInfo)
gdiMemoryInfo = lens _gdiMemoryInfo (\ s a -> s{_gdiMemoryInfo = a})

-- | The manufacturer of the GPU accelerator.
gdiManufacturer :: Lens' GpuDeviceInfo (Maybe Text)
gdiManufacturer = lens _gdiManufacturer (\ s a -> s{_gdiManufacturer = a})

-- | The number of GPUs for the instance type.
gdiCount :: Lens' GpuDeviceInfo (Maybe Int)
gdiCount = lens _gdiCount (\ s a -> s{_gdiCount = a})

-- | The name of the GPU accelerator.
gdiName :: Lens' GpuDeviceInfo (Maybe Text)
gdiName = lens _gdiName (\ s a -> s{_gdiName = a})

instance FromXML GpuDeviceInfo where
        parseXML x
          = GpuDeviceInfo' <$>
              (x .@? "memoryInfo") <*> (x .@? "manufacturer") <*>
                (x .@? "count")
                <*> (x .@? "name")

instance Hashable GpuDeviceInfo where

instance NFData GpuDeviceInfo where

-- | Describes the memory available to the GPU accelerator.
--
--
--
-- /See:/ 'gpuDeviceMemoryInfo' smart constructor.
newtype GpuDeviceMemoryInfo = GpuDeviceMemoryInfo'
  { _gdmiSizeInMiB :: Maybe Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'GpuDeviceMemoryInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'gdmiSizeInMiB' - The size of the memory available to the GPU accelerator, in MiB.
gpuDeviceMemoryInfo
    :: GpuDeviceMemoryInfo
gpuDeviceMemoryInfo = GpuDeviceMemoryInfo' {_gdmiSizeInMiB = Nothing}


-- | The size of the memory available to the GPU accelerator, in MiB.
gdmiSizeInMiB :: Lens' GpuDeviceMemoryInfo (Maybe Int)
gdmiSizeInMiB = lens _gdmiSizeInMiB (\ s a -> s{_gdmiSizeInMiB = a})

instance FromXML GpuDeviceMemoryInfo where
        parseXML x
          = GpuDeviceMemoryInfo' <$> (x .@? "sizeInMiB")

instance Hashable GpuDeviceMemoryInfo where

instance NFData GpuDeviceMemoryInfo where

-- | Describes the GPU accelerators for the instance type.
--
--
--
-- /See:/ 'gpuInfo' smart constructor.
data GpuInfo = GpuInfo'
  { _giTotalGpuMemoryInMiB :: !(Maybe Int)
  , _giGpus                :: !(Maybe [GpuDeviceInfo])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'GpuInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'giTotalGpuMemoryInMiB' - The total size of the memory for the GPU accelerators for the instance type, in MiB.
--
-- * 'giGpus' - Describes the GPU accelerators for the instance type.
gpuInfo
    :: GpuInfo
gpuInfo = GpuInfo' {_giTotalGpuMemoryInMiB = Nothing, _giGpus = Nothing}


-- | The total size of the memory for the GPU accelerators for the instance type, in MiB.
giTotalGpuMemoryInMiB :: Lens' GpuInfo (Maybe Int)
giTotalGpuMemoryInMiB = lens _giTotalGpuMemoryInMiB (\ s a -> s{_giTotalGpuMemoryInMiB = a})

-- | Describes the GPU accelerators for the instance type.
giGpus :: Lens' GpuInfo [GpuDeviceInfo]
giGpus = lens _giGpus (\ s a -> s{_giGpus = a}) . _Default . _Coerce

instance FromXML GpuInfo where
        parseXML x
          = GpuInfo' <$>
              (x .@? "totalGpuMemoryInMiB") <*>
                (x .@? "gpus" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable GpuInfo where

instance NFData GpuInfo where

-- | Describes a security group.
--
--
--
-- /See:/ 'groupIdentifier' smart constructor.
data GroupIdentifier = GroupIdentifier'
  { _giGroupId   :: !(Maybe Text)
  , _giGroupName :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'GroupIdentifier' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'giGroupId' - The ID of the security group.
--
-- * 'giGroupName' - The name of the security group.
groupIdentifier
    :: GroupIdentifier
groupIdentifier =
  GroupIdentifier' {_giGroupId = Nothing, _giGroupName = Nothing}


-- | The ID of the security group.
giGroupId :: Lens' GroupIdentifier (Maybe Text)
giGroupId = lens _giGroupId (\ s a -> s{_giGroupId = a})

-- | The name of the security group.
giGroupName :: Lens' GroupIdentifier (Maybe Text)
giGroupName = lens _giGroupName (\ s a -> s{_giGroupName = a})

instance FromXML GroupIdentifier where
        parseXML x
          = GroupIdentifier' <$>
              (x .@? "groupId") <*> (x .@? "groupName")

instance Hashable GroupIdentifier where

instance NFData GroupIdentifier where

instance ToQuery GroupIdentifier where
        toQuery GroupIdentifier'{..}
          = mconcat
              ["GroupId" =: _giGroupId,
               "GroupName" =: _giGroupName]

-- | Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites hibernation prerequisites> . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html Hibernate your instance> in the /Amazon EC2 User Guide/ .
--
--
--
-- /See:/ 'hibernationOptions' smart constructor.
newtype HibernationOptions = HibernationOptions'
  { _hoConfigured :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'HibernationOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'hoConfigured' - If this parameter is set to @true@ , your instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
hibernationOptions
    :: HibernationOptions
hibernationOptions = HibernationOptions' {_hoConfigured = Nothing}


-- | If this parameter is set to @true@ , your instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
hoConfigured :: Lens' HibernationOptions (Maybe Bool)
hoConfigured = lens _hoConfigured (\ s a -> s{_hoConfigured = a})

instance FromXML HibernationOptions where
        parseXML x
          = HibernationOptions' <$> (x .@? "configured")

instance Hashable HibernationOptions where

instance NFData HibernationOptions where

-- | Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites hibernation prerequisites> . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html Hibernate your instance> in the /Amazon EC2 User Guide/ .
--
--
--
-- /See:/ 'hibernationOptionsRequest' smart constructor.
newtype HibernationOptionsRequest = HibernationOptionsRequest'
  { _horConfigured :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'HibernationOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'horConfigured' - If you set this parameter to @true@ , your instance is enabled for hibernation. Default: @false@
hibernationOptionsRequest
    :: HibernationOptionsRequest
hibernationOptionsRequest =
  HibernationOptionsRequest' {_horConfigured = Nothing}


-- | If you set this parameter to @true@ , your instance is enabled for hibernation. Default: @false@
horConfigured :: Lens' HibernationOptionsRequest (Maybe Bool)
horConfigured = lens _horConfigured (\ s a -> s{_horConfigured = a})

instance Hashable HibernationOptionsRequest where

instance NFData HibernationOptionsRequest where

instance ToQuery HibernationOptionsRequest where
        toQuery HibernationOptionsRequest'{..}
          = mconcat ["Configured" =: _horConfigured]

-- | Describes an event in the history of the Spot Fleet request.
--
--
--
-- /See:/ 'historyRecord' smart constructor.
data HistoryRecord = HistoryRecord'
  { _hrEventType        :: !(Maybe EventType)
  , _hrEventInformation :: !(Maybe EventInformation)
  , _hrTimestamp        :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'HistoryRecord' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'hrEventType' - The event type.     * @error@ - An error with the Spot Fleet request.     * @fleetRequestChange@ - A change in the status or configuration of the Spot Fleet request.     * @instanceChange@ - An instance was launched or terminated.     * @Information@ - An informational event.
--
-- * 'hrEventInformation' - Information about the event.
--
-- * 'hrTimestamp' - The date and time of the event, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
historyRecord
    :: HistoryRecord
historyRecord =
  HistoryRecord'
    { _hrEventType = Nothing
    , _hrEventInformation = Nothing
    , _hrTimestamp = Nothing
    }


-- | The event type.     * @error@ - An error with the Spot Fleet request.     * @fleetRequestChange@ - A change in the status or configuration of the Spot Fleet request.     * @instanceChange@ - An instance was launched or terminated.     * @Information@ - An informational event.
hrEventType :: Lens' HistoryRecord (Maybe EventType)
hrEventType = lens _hrEventType (\ s a -> s{_hrEventType = a})

-- | Information about the event.
hrEventInformation :: Lens' HistoryRecord (Maybe EventInformation)
hrEventInformation = lens _hrEventInformation (\ s a -> s{_hrEventInformation = a})

-- | The date and time of the event, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
hrTimestamp :: Lens' HistoryRecord (Maybe UTCTime)
hrTimestamp = lens _hrTimestamp (\ s a -> s{_hrTimestamp = a}) . mapping _Time

instance FromXML HistoryRecord where
        parseXML x
          = HistoryRecord' <$>
              (x .@? "eventType") <*> (x .@? "eventInformation")
                <*> (x .@? "timestamp")

instance Hashable HistoryRecord where

instance NFData HistoryRecord where

-- | Describes an event in the history of an EC2 Fleet.
--
--
--
-- /See:/ 'historyRecordEntry' smart constructor.
data HistoryRecordEntry = HistoryRecordEntry'
  { _hreEventType        :: !(Maybe FleetEventType)
  , _hreEventInformation :: !(Maybe EventInformation)
  , _hreTimestamp        :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'HistoryRecordEntry' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'hreEventType' - The event type.
--
-- * 'hreEventInformation' - Information about the event.
--
-- * 'hreTimestamp' - The date and time of the event, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
historyRecordEntry
    :: HistoryRecordEntry
historyRecordEntry =
  HistoryRecordEntry'
    { _hreEventType = Nothing
    , _hreEventInformation = Nothing
    , _hreTimestamp = Nothing
    }


-- | The event type.
hreEventType :: Lens' HistoryRecordEntry (Maybe FleetEventType)
hreEventType = lens _hreEventType (\ s a -> s{_hreEventType = a})

-- | Information about the event.
hreEventInformation :: Lens' HistoryRecordEntry (Maybe EventInformation)
hreEventInformation = lens _hreEventInformation (\ s a -> s{_hreEventInformation = a})

-- | The date and time of the event, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
hreTimestamp :: Lens' HistoryRecordEntry (Maybe UTCTime)
hreTimestamp = lens _hreTimestamp (\ s a -> s{_hreTimestamp = a}) . mapping _Time

instance FromXML HistoryRecordEntry where
        parseXML x
          = HistoryRecordEntry' <$>
              (x .@? "eventType") <*> (x .@? "eventInformation")
                <*> (x .@? "timestamp")

instance Hashable HistoryRecordEntry where

instance NFData HistoryRecordEntry where

-- | Describes the properties of the Dedicated Host.
--
--
--
-- /See:/ 'host' smart constructor.
data Host = Host'
  { _hReleaseTime                        :: !(Maybe ISO8601)
  , _hState                              :: !(Maybe AllocationState)
  , _hClientToken                        :: !(Maybe Text)
  , _hAvailabilityZoneId                 :: !(Maybe Text)
  , _hHostId                             :: !(Maybe Text)
  , _hAvailableCapacity                  :: !(Maybe AvailableCapacity)
  , _hHostReservationId                  :: !(Maybe Text)
  , _hAllowsMultipleInstanceTypes        :: !(Maybe AllowsMultipleInstanceTypes)
  , _hHostProperties                     :: !(Maybe HostProperties)
  , _hOwnerId                            :: !(Maybe Text)
  , _hAvailabilityZone                   :: !(Maybe Text)
  , _hInstances                          :: !(Maybe [HostInstance])
  , _hAllocationTime                     :: !(Maybe ISO8601)
  , _hMemberOfServiceLinkedResourceGroup :: !(Maybe Bool)
  , _hHostRecovery                       :: !(Maybe HostRecovery)
  , _hAutoPlacement                      :: !(Maybe AutoPlacement)
  , _hTags                               :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Host' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'hReleaseTime' - The time that the Dedicated Host was released.
--
-- * 'hState' - The Dedicated Host's state.
--
-- * 'hClientToken' - Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> .
--
-- * 'hAvailabilityZoneId' - The ID of the Availability Zone in which the Dedicated Host is allocated.
--
-- * 'hHostId' - The ID of the Dedicated Host.
--
-- * 'hAvailableCapacity' - Information about the instances running on the Dedicated Host.
--
-- * 'hHostReservationId' - The reservation ID of the Dedicated Host. This returns a @null@ response if the Dedicated Host doesn't have an associated reservation.
--
-- * 'hAllowsMultipleInstanceTypes' - Indicates whether the Dedicated Host supports multiple instance types of the same instance family. If the value is @on@ , the Dedicated Host supports multiple instance types in the instance family. If the value is @off@ , the Dedicated Host supports a single instance type only.
--
-- * 'hHostProperties' - The hardware specifications of the Dedicated Host.
--
-- * 'hOwnerId' - The ID of the AWS account that owns the Dedicated Host.
--
-- * 'hAvailabilityZone' - The Availability Zone of the Dedicated Host.
--
-- * 'hInstances' - The IDs and instance type that are currently running on the Dedicated Host.
--
-- * 'hAllocationTime' - The time that the Dedicated Host was allocated.
--
-- * 'hMemberOfServiceLinkedResourceGroup' - Indicates whether the Dedicated Host is in a host resource group. If __memberOfServiceLinkedResourceGroup__ is @true@ , the host is in a host resource group; otherwise, it is not.
--
-- * 'hHostRecovery' - Indicates whether host recovery is enabled or disabled for the Dedicated Host.
--
-- * 'hAutoPlacement' - Whether auto-placement is on or off.
--
-- * 'hTags' - Any tags assigned to the Dedicated Host.
host
    :: Host
host =
  Host'
    { _hReleaseTime = Nothing
    , _hState = Nothing
    , _hClientToken = Nothing
    , _hAvailabilityZoneId = Nothing
    , _hHostId = Nothing
    , _hAvailableCapacity = Nothing
    , _hHostReservationId = Nothing
    , _hAllowsMultipleInstanceTypes = Nothing
    , _hHostProperties = Nothing
    , _hOwnerId = Nothing
    , _hAvailabilityZone = Nothing
    , _hInstances = Nothing
    , _hAllocationTime = Nothing
    , _hMemberOfServiceLinkedResourceGroup = Nothing
    , _hHostRecovery = Nothing
    , _hAutoPlacement = Nothing
    , _hTags = Nothing
    }


-- | The time that the Dedicated Host was released.
hReleaseTime :: Lens' Host (Maybe UTCTime)
hReleaseTime = lens _hReleaseTime (\ s a -> s{_hReleaseTime = a}) . mapping _Time

-- | The Dedicated Host's state.
hState :: Lens' Host (Maybe AllocationState)
hState = lens _hState (\ s a -> s{_hState = a})

-- | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> .
hClientToken :: Lens' Host (Maybe Text)
hClientToken = lens _hClientToken (\ s a -> s{_hClientToken = a})

-- | The ID of the Availability Zone in which the Dedicated Host is allocated.
hAvailabilityZoneId :: Lens' Host (Maybe Text)
hAvailabilityZoneId = lens _hAvailabilityZoneId (\ s a -> s{_hAvailabilityZoneId = a})

-- | The ID of the Dedicated Host.
hHostId :: Lens' Host (Maybe Text)
hHostId = lens _hHostId (\ s a -> s{_hHostId = a})

-- | Information about the instances running on the Dedicated Host.
hAvailableCapacity :: Lens' Host (Maybe AvailableCapacity)
hAvailableCapacity = lens _hAvailableCapacity (\ s a -> s{_hAvailableCapacity = a})

-- | The reservation ID of the Dedicated Host. This returns a @null@ response if the Dedicated Host doesn't have an associated reservation.
hHostReservationId :: Lens' Host (Maybe Text)
hHostReservationId = lens _hHostReservationId (\ s a -> s{_hHostReservationId = a})

-- | Indicates whether the Dedicated Host supports multiple instance types of the same instance family. If the value is @on@ , the Dedicated Host supports multiple instance types in the instance family. If the value is @off@ , the Dedicated Host supports a single instance type only.
hAllowsMultipleInstanceTypes :: Lens' Host (Maybe AllowsMultipleInstanceTypes)
hAllowsMultipleInstanceTypes = lens _hAllowsMultipleInstanceTypes (\ s a -> s{_hAllowsMultipleInstanceTypes = a})

-- | The hardware specifications of the Dedicated Host.
hHostProperties :: Lens' Host (Maybe HostProperties)
hHostProperties = lens _hHostProperties (\ s a -> s{_hHostProperties = a})

-- | The ID of the AWS account that owns the Dedicated Host.
hOwnerId :: Lens' Host (Maybe Text)
hOwnerId = lens _hOwnerId (\ s a -> s{_hOwnerId = a})

-- | The Availability Zone of the Dedicated Host.
hAvailabilityZone :: Lens' Host (Maybe Text)
hAvailabilityZone = lens _hAvailabilityZone (\ s a -> s{_hAvailabilityZone = a})

-- | The IDs and instance type that are currently running on the Dedicated Host.
hInstances :: Lens' Host [HostInstance]
hInstances = lens _hInstances (\ s a -> s{_hInstances = a}) . _Default . _Coerce

-- | The time that the Dedicated Host was allocated.
hAllocationTime :: Lens' Host (Maybe UTCTime)
hAllocationTime = lens _hAllocationTime (\ s a -> s{_hAllocationTime = a}) . mapping _Time

-- | Indicates whether the Dedicated Host is in a host resource group. If __memberOfServiceLinkedResourceGroup__ is @true@ , the host is in a host resource group; otherwise, it is not.
hMemberOfServiceLinkedResourceGroup :: Lens' Host (Maybe Bool)
hMemberOfServiceLinkedResourceGroup = lens _hMemberOfServiceLinkedResourceGroup (\ s a -> s{_hMemberOfServiceLinkedResourceGroup = a})

-- | Indicates whether host recovery is enabled or disabled for the Dedicated Host.
hHostRecovery :: Lens' Host (Maybe HostRecovery)
hHostRecovery = lens _hHostRecovery (\ s a -> s{_hHostRecovery = a})

-- | Whether auto-placement is on or off.
hAutoPlacement :: Lens' Host (Maybe AutoPlacement)
hAutoPlacement = lens _hAutoPlacement (\ s a -> s{_hAutoPlacement = a})

-- | Any tags assigned to the Dedicated Host.
hTags :: Lens' Host [Tag]
hTags = lens _hTags (\ s a -> s{_hTags = a}) . _Default . _Coerce

instance FromXML Host where
        parseXML x
          = Host' <$>
              (x .@? "releaseTime") <*> (x .@? "state") <*>
                (x .@? "clientToken")
                <*> (x .@? "availabilityZoneId")
                <*> (x .@? "hostId")
                <*> (x .@? "availableCapacity")
                <*> (x .@? "hostReservationId")
                <*> (x .@? "allowsMultipleInstanceTypes")
                <*> (x .@? "hostProperties")
                <*> (x .@? "ownerId")
                <*> (x .@? "availabilityZone")
                <*>
                (x .@? "instances" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "allocationTime")
                <*> (x .@? "memberOfServiceLinkedResourceGroup")
                <*> (x .@? "hostRecovery")
                <*> (x .@? "autoPlacement")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable Host where

instance NFData Host where

-- | Describes an instance running on a Dedicated Host.
--
--
--
-- /See:/ 'hostInstance' smart constructor.
data HostInstance = HostInstance'
  { _hiInstanceId   :: !(Maybe Text)
  , _hiInstanceType :: !(Maybe Text)
  , _hiOwnerId      :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'HostInstance' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'hiInstanceId' - The ID of instance that is running on the Dedicated Host.
--
-- * 'hiInstanceType' - The instance type (for example, @m3.medium@ ) of the running instance.
--
-- * 'hiOwnerId' - The ID of the AWS account that owns the instance.
hostInstance
    :: HostInstance
hostInstance =
  HostInstance'
    {_hiInstanceId = Nothing, _hiInstanceType = Nothing, _hiOwnerId = Nothing}


-- | The ID of instance that is running on the Dedicated Host.
hiInstanceId :: Lens' HostInstance (Maybe Text)
hiInstanceId = lens _hiInstanceId (\ s a -> s{_hiInstanceId = a})

-- | The instance type (for example, @m3.medium@ ) of the running instance.
hiInstanceType :: Lens' HostInstance (Maybe Text)
hiInstanceType = lens _hiInstanceType (\ s a -> s{_hiInstanceType = a})

-- | The ID of the AWS account that owns the instance.
hiOwnerId :: Lens' HostInstance (Maybe Text)
hiOwnerId = lens _hiOwnerId (\ s a -> s{_hiOwnerId = a})

instance FromXML HostInstance where
        parseXML x
          = HostInstance' <$>
              (x .@? "instanceId") <*> (x .@? "instanceType") <*>
                (x .@? "ownerId")

instance Hashable HostInstance where

instance NFData HostInstance where

-- | Details about the Dedicated Host Reservation offering.
--
--
--
-- /See:/ 'hostOffering' smart constructor.
data HostOffering = HostOffering'
  { _hoInstanceFamily :: !(Maybe Text)
  , _hoCurrencyCode   :: !(Maybe CurrencyCodeValues)
  , _hoHourlyPrice    :: !(Maybe Text)
  , _hoUpfrontPrice   :: !(Maybe Text)
  , _hoOfferingId     :: !(Maybe Text)
  , _hoDuration       :: !(Maybe Int)
  , _hoPaymentOption  :: !(Maybe PaymentOption)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'HostOffering' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'hoInstanceFamily' - The instance family of the offering.
--
-- * 'hoCurrencyCode' - The currency of the offering.
--
-- * 'hoHourlyPrice' - The hourly price of the offering.
--
-- * 'hoUpfrontPrice' - The upfront price of the offering. Does not apply to No Upfront offerings.
--
-- * 'hoOfferingId' - The ID of the offering.
--
-- * 'hoDuration' - The duration of the offering (in seconds).
--
-- * 'hoPaymentOption' - The available payment option.
hostOffering
    :: HostOffering
hostOffering =
  HostOffering'
    { _hoInstanceFamily = Nothing
    , _hoCurrencyCode = Nothing
    , _hoHourlyPrice = Nothing
    , _hoUpfrontPrice = Nothing
    , _hoOfferingId = Nothing
    , _hoDuration = Nothing
    , _hoPaymentOption = Nothing
    }


-- | The instance family of the offering.
hoInstanceFamily :: Lens' HostOffering (Maybe Text)
hoInstanceFamily = lens _hoInstanceFamily (\ s a -> s{_hoInstanceFamily = a})

-- | The currency of the offering.
hoCurrencyCode :: Lens' HostOffering (Maybe CurrencyCodeValues)
hoCurrencyCode = lens _hoCurrencyCode (\ s a -> s{_hoCurrencyCode = a})

-- | The hourly price of the offering.
hoHourlyPrice :: Lens' HostOffering (Maybe Text)
hoHourlyPrice = lens _hoHourlyPrice (\ s a -> s{_hoHourlyPrice = a})

-- | The upfront price of the offering. Does not apply to No Upfront offerings.
hoUpfrontPrice :: Lens' HostOffering (Maybe Text)
hoUpfrontPrice = lens _hoUpfrontPrice (\ s a -> s{_hoUpfrontPrice = a})

-- | The ID of the offering.
hoOfferingId :: Lens' HostOffering (Maybe Text)
hoOfferingId = lens _hoOfferingId (\ s a -> s{_hoOfferingId = a})

-- | The duration of the offering (in seconds).
hoDuration :: Lens' HostOffering (Maybe Int)
hoDuration = lens _hoDuration (\ s a -> s{_hoDuration = a})

-- | The available payment option.
hoPaymentOption :: Lens' HostOffering (Maybe PaymentOption)
hoPaymentOption = lens _hoPaymentOption (\ s a -> s{_hoPaymentOption = a})

instance FromXML HostOffering where
        parseXML x
          = HostOffering' <$>
              (x .@? "instanceFamily") <*> (x .@? "currencyCode")
                <*> (x .@? "hourlyPrice")
                <*> (x .@? "upfrontPrice")
                <*> (x .@? "offeringId")
                <*> (x .@? "duration")
                <*> (x .@? "paymentOption")

instance Hashable HostOffering where

instance NFData HostOffering where

-- | Describes the properties of a Dedicated Host.
--
--
--
-- /See:/ 'hostProperties' smart constructor.
data HostProperties = HostProperties'
  { _hpInstanceFamily :: !(Maybe Text)
  , _hpInstanceType   :: !(Maybe Text)
  , _hpTotalVCPUs     :: !(Maybe Int)
  , _hpCores          :: !(Maybe Int)
  , _hpSockets        :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'HostProperties' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'hpInstanceFamily' - The instance family supported by the Dedicated Host. For example, @m5@ .
--
-- * 'hpInstanceType' - The instance type supported by the Dedicated Host. For example, @m5.large@ . If the host supports multiple instance types, no __instanceType__ is returned.
--
-- * 'hpTotalVCPUs' - The total number of vCPUs on the Dedicated Host.
--
-- * 'hpCores' - The number of cores on the Dedicated Host.
--
-- * 'hpSockets' - The number of sockets on the Dedicated Host.
hostProperties
    :: HostProperties
hostProperties =
  HostProperties'
    { _hpInstanceFamily = Nothing
    , _hpInstanceType = Nothing
    , _hpTotalVCPUs = Nothing
    , _hpCores = Nothing
    , _hpSockets = Nothing
    }


-- | The instance family supported by the Dedicated Host. For example, @m5@ .
hpInstanceFamily :: Lens' HostProperties (Maybe Text)
hpInstanceFamily = lens _hpInstanceFamily (\ s a -> s{_hpInstanceFamily = a})

-- | The instance type supported by the Dedicated Host. For example, @m5.large@ . If the host supports multiple instance types, no __instanceType__ is returned.
hpInstanceType :: Lens' HostProperties (Maybe Text)
hpInstanceType = lens _hpInstanceType (\ s a -> s{_hpInstanceType = a})

-- | The total number of vCPUs on the Dedicated Host.
hpTotalVCPUs :: Lens' HostProperties (Maybe Int)
hpTotalVCPUs = lens _hpTotalVCPUs (\ s a -> s{_hpTotalVCPUs = a})

-- | The number of cores on the Dedicated Host.
hpCores :: Lens' HostProperties (Maybe Int)
hpCores = lens _hpCores (\ s a -> s{_hpCores = a})

-- | The number of sockets on the Dedicated Host.
hpSockets :: Lens' HostProperties (Maybe Int)
hpSockets = lens _hpSockets (\ s a -> s{_hpSockets = a})

instance FromXML HostProperties where
        parseXML x
          = HostProperties' <$>
              (x .@? "instanceFamily") <*> (x .@? "instanceType")
                <*> (x .@? "totalVCpus")
                <*> (x .@? "cores")
                <*> (x .@? "sockets")

instance Hashable HostProperties where

instance NFData HostProperties where

-- | Details about the Dedicated Host Reservation and associated Dedicated Hosts.
--
--
--
-- /See:/ 'hostReservation' smart constructor.
data HostReservation = HostReservation'
  { _hrState             :: !(Maybe ReservationState)
  , _hrInstanceFamily    :: !(Maybe Text)
  , _hrCurrencyCode      :: !(Maybe CurrencyCodeValues)
  , _hrHostReservationId :: !(Maybe Text)
  , _hrStart             :: !(Maybe ISO8601)
  , _hrHourlyPrice       :: !(Maybe Text)
  , _hrCount             :: !(Maybe Int)
  , _hrUpfrontPrice      :: !(Maybe Text)
  , _hrEnd               :: !(Maybe ISO8601)
  , _hrHostIdSet         :: !(Maybe [Text])
  , _hrOfferingId        :: !(Maybe Text)
  , _hrDuration          :: !(Maybe Int)
  , _hrTags              :: !(Maybe [Tag])
  , _hrPaymentOption     :: !(Maybe PaymentOption)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'HostReservation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'hrState' - The state of the reservation.
--
-- * 'hrInstanceFamily' - The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.
--
-- * 'hrCurrencyCode' - The currency in which the @upfrontPrice@ and @hourlyPrice@ amounts are specified. At this time, the only supported currency is @USD@ .
--
-- * 'hrHostReservationId' - The ID of the reservation that specifies the associated Dedicated Hosts.
--
-- * 'hrStart' - The date and time that the reservation started.
--
-- * 'hrHourlyPrice' - The hourly price of the reservation.
--
-- * 'hrCount' - The number of Dedicated Hosts the reservation is associated with.
--
-- * 'hrUpfrontPrice' - The upfront price of the reservation.
--
-- * 'hrEnd' - The date and time that the reservation ends.
--
-- * 'hrHostIdSet' - The IDs of the Dedicated Hosts associated with the reservation.
--
-- * 'hrOfferingId' - The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.
--
-- * 'hrDuration' - The length of the reservation's term, specified in seconds. Can be @31536000 (1 year)@ | @94608000 (3 years)@ .
--
-- * 'hrTags' - Any tags assigned to the Dedicated Host Reservation.
--
-- * 'hrPaymentOption' - The payment option selected for this reservation.
hostReservation
    :: HostReservation
hostReservation =
  HostReservation'
    { _hrState = Nothing
    , _hrInstanceFamily = Nothing
    , _hrCurrencyCode = Nothing
    , _hrHostReservationId = Nothing
    , _hrStart = Nothing
    , _hrHourlyPrice = Nothing
    , _hrCount = Nothing
    , _hrUpfrontPrice = Nothing
    , _hrEnd = Nothing
    , _hrHostIdSet = Nothing
    , _hrOfferingId = Nothing
    , _hrDuration = Nothing
    , _hrTags = Nothing
    , _hrPaymentOption = Nothing
    }


-- | The state of the reservation.
hrState :: Lens' HostReservation (Maybe ReservationState)
hrState = lens _hrState (\ s a -> s{_hrState = a})

-- | The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.
hrInstanceFamily :: Lens' HostReservation (Maybe Text)
hrInstanceFamily = lens _hrInstanceFamily (\ s a -> s{_hrInstanceFamily = a})

-- | The currency in which the @upfrontPrice@ and @hourlyPrice@ amounts are specified. At this time, the only supported currency is @USD@ .
hrCurrencyCode :: Lens' HostReservation (Maybe CurrencyCodeValues)
hrCurrencyCode = lens _hrCurrencyCode (\ s a -> s{_hrCurrencyCode = a})

-- | The ID of the reservation that specifies the associated Dedicated Hosts.
hrHostReservationId :: Lens' HostReservation (Maybe Text)
hrHostReservationId = lens _hrHostReservationId (\ s a -> s{_hrHostReservationId = a})

-- | The date and time that the reservation started.
hrStart :: Lens' HostReservation (Maybe UTCTime)
hrStart = lens _hrStart (\ s a -> s{_hrStart = a}) . mapping _Time

-- | The hourly price of the reservation.
hrHourlyPrice :: Lens' HostReservation (Maybe Text)
hrHourlyPrice = lens _hrHourlyPrice (\ s a -> s{_hrHourlyPrice = a})

-- | The number of Dedicated Hosts the reservation is associated with.
hrCount :: Lens' HostReservation (Maybe Int)
hrCount = lens _hrCount (\ s a -> s{_hrCount = a})

-- | The upfront price of the reservation.
hrUpfrontPrice :: Lens' HostReservation (Maybe Text)
hrUpfrontPrice = lens _hrUpfrontPrice (\ s a -> s{_hrUpfrontPrice = a})

-- | The date and time that the reservation ends.
hrEnd :: Lens' HostReservation (Maybe UTCTime)
hrEnd = lens _hrEnd (\ s a -> s{_hrEnd = a}) . mapping _Time

-- | The IDs of the Dedicated Hosts associated with the reservation.
hrHostIdSet :: Lens' HostReservation [Text]
hrHostIdSet = lens _hrHostIdSet (\ s a -> s{_hrHostIdSet = a}) . _Default . _Coerce

-- | The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.
hrOfferingId :: Lens' HostReservation (Maybe Text)
hrOfferingId = lens _hrOfferingId (\ s a -> s{_hrOfferingId = a})

-- | The length of the reservation's term, specified in seconds. Can be @31536000 (1 year)@ | @94608000 (3 years)@ .
hrDuration :: Lens' HostReservation (Maybe Int)
hrDuration = lens _hrDuration (\ s a -> s{_hrDuration = a})

-- | Any tags assigned to the Dedicated Host Reservation.
hrTags :: Lens' HostReservation [Tag]
hrTags = lens _hrTags (\ s a -> s{_hrTags = a}) . _Default . _Coerce

-- | The payment option selected for this reservation.
hrPaymentOption :: Lens' HostReservation (Maybe PaymentOption)
hrPaymentOption = lens _hrPaymentOption (\ s a -> s{_hrPaymentOption = a})

instance FromXML HostReservation where
        parseXML x
          = HostReservation' <$>
              (x .@? "state") <*> (x .@? "instanceFamily") <*>
                (x .@? "currencyCode")
                <*> (x .@? "hostReservationId")
                <*> (x .@? "start")
                <*> (x .@? "hourlyPrice")
                <*> (x .@? "count")
                <*> (x .@? "upfrontPrice")
                <*> (x .@? "end")
                <*>
                (x .@? "hostIdSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "offeringId")
                <*> (x .@? "duration")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "paymentOption")

instance Hashable HostReservation where

instance NFData HostReservation where

-- | Describes an IAM instance profile.
--
--
--
-- /See:/ 'iamInstanceProfile' smart constructor.
data IAMInstanceProfile = IAMInstanceProfile'
  { _iapARN :: !(Maybe Text)
  , _iapId  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IAMInstanceProfile' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iapARN' - The Amazon Resource Name (ARN) of the instance profile.
--
-- * 'iapId' - The ID of the instance profile.
iamInstanceProfile
    :: IAMInstanceProfile
iamInstanceProfile = IAMInstanceProfile' {_iapARN = Nothing, _iapId = Nothing}


-- | The Amazon Resource Name (ARN) of the instance profile.
iapARN :: Lens' IAMInstanceProfile (Maybe Text)
iapARN = lens _iapARN (\ s a -> s{_iapARN = a})

-- | The ID of the instance profile.
iapId :: Lens' IAMInstanceProfile (Maybe Text)
iapId = lens _iapId (\ s a -> s{_iapId = a})

instance FromXML IAMInstanceProfile where
        parseXML x
          = IAMInstanceProfile' <$>
              (x .@? "arn") <*> (x .@? "id")

instance Hashable IAMInstanceProfile where

instance NFData IAMInstanceProfile where

-- | Describes an association between an IAM instance profile and an instance.
--
--
--
-- /See:/ 'iamInstanceProfileAssociation' smart constructor.
data IAMInstanceProfileAssociation = IAMInstanceProfileAssociation'
  { _iapaAssociationId      :: !(Maybe Text)
  , _iapaInstanceId         :: !(Maybe Text)
  , _iapaState              :: !(Maybe IAMInstanceProfileAssociationState)
  , _iapaIAMInstanceProfile :: !(Maybe IAMInstanceProfile)
  , _iapaTimestamp          :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IAMInstanceProfileAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iapaAssociationId' - The ID of the association.
--
-- * 'iapaInstanceId' - The ID of the instance.
--
-- * 'iapaState' - The state of the association.
--
-- * 'iapaIAMInstanceProfile' - The IAM instance profile.
--
-- * 'iapaTimestamp' - The time the IAM instance profile was associated with the instance.
iamInstanceProfileAssociation
    :: IAMInstanceProfileAssociation
iamInstanceProfileAssociation =
  IAMInstanceProfileAssociation'
    { _iapaAssociationId = Nothing
    , _iapaInstanceId = Nothing
    , _iapaState = Nothing
    , _iapaIAMInstanceProfile = Nothing
    , _iapaTimestamp = Nothing
    }


-- | The ID of the association.
iapaAssociationId :: Lens' IAMInstanceProfileAssociation (Maybe Text)
iapaAssociationId = lens _iapaAssociationId (\ s a -> s{_iapaAssociationId = a})

-- | The ID of the instance.
iapaInstanceId :: Lens' IAMInstanceProfileAssociation (Maybe Text)
iapaInstanceId = lens _iapaInstanceId (\ s a -> s{_iapaInstanceId = a})

-- | The state of the association.
iapaState :: Lens' IAMInstanceProfileAssociation (Maybe IAMInstanceProfileAssociationState)
iapaState = lens _iapaState (\ s a -> s{_iapaState = a})

-- | The IAM instance profile.
iapaIAMInstanceProfile :: Lens' IAMInstanceProfileAssociation (Maybe IAMInstanceProfile)
iapaIAMInstanceProfile = lens _iapaIAMInstanceProfile (\ s a -> s{_iapaIAMInstanceProfile = a})

-- | The time the IAM instance profile was associated with the instance.
iapaTimestamp :: Lens' IAMInstanceProfileAssociation (Maybe UTCTime)
iapaTimestamp = lens _iapaTimestamp (\ s a -> s{_iapaTimestamp = a}) . mapping _Time

instance FromXML IAMInstanceProfileAssociation where
        parseXML x
          = IAMInstanceProfileAssociation' <$>
              (x .@? "associationId") <*> (x .@? "instanceId") <*>
                (x .@? "state")
                <*> (x .@? "iamInstanceProfile")
                <*> (x .@? "timestamp")

instance Hashable IAMInstanceProfileAssociation where

instance NFData IAMInstanceProfileAssociation where

-- | Describes an IAM instance profile.
--
--
--
-- /See:/ 'iamInstanceProfileSpecification' smart constructor.
data IAMInstanceProfileSpecification = IAMInstanceProfileSpecification'
  { _iapsARN  :: !(Maybe Text)
  , _iapsName :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IAMInstanceProfileSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iapsARN' - The Amazon Resource Name (ARN) of the instance profile.
--
-- * 'iapsName' - The name of the instance profile.
iamInstanceProfileSpecification
    :: IAMInstanceProfileSpecification
iamInstanceProfileSpecification =
  IAMInstanceProfileSpecification' {_iapsARN = Nothing, _iapsName = Nothing}


-- | The Amazon Resource Name (ARN) of the instance profile.
iapsARN :: Lens' IAMInstanceProfileSpecification (Maybe Text)
iapsARN = lens _iapsARN (\ s a -> s{_iapsARN = a})

-- | The name of the instance profile.
iapsName :: Lens' IAMInstanceProfileSpecification (Maybe Text)
iapsName = lens _iapsName (\ s a -> s{_iapsName = a})

instance FromXML IAMInstanceProfileSpecification
         where
        parseXML x
          = IAMInstanceProfileSpecification' <$>
              (x .@? "arn") <*> (x .@? "name")

instance Hashable IAMInstanceProfileSpecification
         where

instance NFData IAMInstanceProfileSpecification where

instance ToQuery IAMInstanceProfileSpecification
         where
        toQuery IAMInstanceProfileSpecification'{..}
          = mconcat ["Arn" =: _iapsARN, "Name" =: _iapsName]

-- | Describes the ICMP type and code.
--
--
--
-- /See:/ 'icmpTypeCode' smart constructor.
data ICMPTypeCode = ICMPTypeCode'
  { _itcCode :: !(Maybe Int)
  , _itcType :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ICMPTypeCode' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'itcCode' - The ICMP code. A value of -1 means all codes for the specified ICMP type.
--
-- * 'itcType' - The ICMP type. A value of -1 means all types.
icmpTypeCode
    :: ICMPTypeCode
icmpTypeCode = ICMPTypeCode' {_itcCode = Nothing, _itcType = Nothing}


-- | The ICMP code. A value of -1 means all codes for the specified ICMP type.
itcCode :: Lens' ICMPTypeCode (Maybe Int)
itcCode = lens _itcCode (\ s a -> s{_itcCode = a})

-- | The ICMP type. A value of -1 means all types.
itcType :: Lens' ICMPTypeCode (Maybe Int)
itcType = lens _itcType (\ s a -> s{_itcType = a})

instance FromXML ICMPTypeCode where
        parseXML x
          = ICMPTypeCode' <$> (x .@? "code") <*> (x .@? "type")

instance Hashable ICMPTypeCode where

instance NFData ICMPTypeCode where

instance ToQuery ICMPTypeCode where
        toQuery ICMPTypeCode'{..}
          = mconcat ["Code" =: _itcCode, "Type" =: _itcType]

-- | The internet key exchange (IKE) version permitted for the VPN tunnel.
--
--
--
-- /See:/ 'iKEVersionsListValue' smart constructor.
newtype IKEVersionsListValue = IKEVersionsListValue'
  { _ikevlvValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IKEVersionsListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ikevlvValue' - The IKE version.
iKEVersionsListValue
    :: IKEVersionsListValue
iKEVersionsListValue = IKEVersionsListValue' {_ikevlvValue = Nothing}


-- | The IKE version.
ikevlvValue :: Lens' IKEVersionsListValue (Maybe Text)
ikevlvValue = lens _ikevlvValue (\ s a -> s{_ikevlvValue = a})

instance FromXML IKEVersionsListValue where
        parseXML x
          = IKEVersionsListValue' <$> (x .@? "value")

instance Hashable IKEVersionsListValue where

instance NFData IKEVersionsListValue where

-- | The IKE version that is permitted for the VPN tunnel.
--
--
--
-- /See:/ 'iKEVersionsRequestListValue' smart constructor.
newtype IKEVersionsRequestListValue = IKEVersionsRequestListValue'
  { _ikevrlvValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IKEVersionsRequestListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ikevrlvValue' - The IKE version.
iKEVersionsRequestListValue
    :: IKEVersionsRequestListValue
iKEVersionsRequestListValue =
  IKEVersionsRequestListValue' {_ikevrlvValue = Nothing}


-- | The IKE version.
ikevrlvValue :: Lens' IKEVersionsRequestListValue (Maybe Text)
ikevrlvValue = lens _ikevrlvValue (\ s a -> s{_ikevrlvValue = a})

instance Hashable IKEVersionsRequestListValue where

instance NFData IKEVersionsRequestListValue where

instance ToQuery IKEVersionsRequestListValue where
        toQuery IKEVersionsRequestListValue'{..}
          = mconcat ["Value" =: _ikevrlvValue]

-- | Describes a set of permissions for a security group rule.
--
--
--
-- /See:/ 'ipPermission' smart constructor.
data IPPermission = IPPermission'
  { _ipFromPort         :: !(Maybe Int)
  , _ipUserIdGroupPairs :: !(Maybe [UserIdGroupPair])
  , _ipPrefixListIds    :: !(Maybe [PrefixListId])
  , _ipToPort           :: !(Maybe Int)
  , _ipIPv6Ranges       :: !(Maybe [IPv6Range])
  , _ipIPRanges         :: !(Maybe [IPRange])
  , _ipIPProtocol       :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IPPermission' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ipFromPort' - The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of @-1@ indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
--
-- * 'ipUserIdGroupPairs' - The security group and AWS account ID pairs.
--
-- * 'ipPrefixListIds' - [VPC only] The prefix list IDs.
--
-- * 'ipToPort' - The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of @-1@ indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
--
-- * 'ipIPv6Ranges' - [VPC only] The IPv6 ranges.
--
-- * 'ipIPRanges' - The IPv4 ranges.
--
-- * 'ipIPProtocol' - The IP protocol name (@tcp@ , @udp@ , @icmp@ , @icmpv6@ ) or number (see <http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml Protocol Numbers> ). [VPC only] Use @-1@ to specify all protocols. When authorizing security group rules, specifying @-1@ or a protocol number other than @tcp@ , @udp@ , @icmp@ , or @icmpv6@ allows traffic on all ports, regardless of any port range you specify. For @tcp@ , @udp@ , and @icmp@ , you must specify a port range. For @icmpv6@ , the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
ipPermission
    :: Text -- ^ 'ipIPProtocol'
    -> IPPermission
ipPermission pIPProtocol_ =
  IPPermission'
    { _ipFromPort = Nothing
    , _ipUserIdGroupPairs = Nothing
    , _ipPrefixListIds = Nothing
    , _ipToPort = Nothing
    , _ipIPv6Ranges = Nothing
    , _ipIPRanges = Nothing
    , _ipIPProtocol = pIPProtocol_
    }


-- | The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of @-1@ indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
ipFromPort :: Lens' IPPermission (Maybe Int)
ipFromPort = lens _ipFromPort (\ s a -> s{_ipFromPort = a})

-- | The security group and AWS account ID pairs.
ipUserIdGroupPairs :: Lens' IPPermission [UserIdGroupPair]
ipUserIdGroupPairs = lens _ipUserIdGroupPairs (\ s a -> s{_ipUserIdGroupPairs = a}) . _Default . _Coerce

-- | [VPC only] The prefix list IDs.
ipPrefixListIds :: Lens' IPPermission [PrefixListId]
ipPrefixListIds = lens _ipPrefixListIds (\ s a -> s{_ipPrefixListIds = a}) . _Default . _Coerce

-- | The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of @-1@ indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
ipToPort :: Lens' IPPermission (Maybe Int)
ipToPort = lens _ipToPort (\ s a -> s{_ipToPort = a})

-- | [VPC only] The IPv6 ranges.
ipIPv6Ranges :: Lens' IPPermission [IPv6Range]
ipIPv6Ranges = lens _ipIPv6Ranges (\ s a -> s{_ipIPv6Ranges = a}) . _Default . _Coerce

-- | The IPv4 ranges.
ipIPRanges :: Lens' IPPermission [IPRange]
ipIPRanges = lens _ipIPRanges (\ s a -> s{_ipIPRanges = a}) . _Default . _Coerce

-- | The IP protocol name (@tcp@ , @udp@ , @icmp@ , @icmpv6@ ) or number (see <http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml Protocol Numbers> ). [VPC only] Use @-1@ to specify all protocols. When authorizing security group rules, specifying @-1@ or a protocol number other than @tcp@ , @udp@ , @icmp@ , or @icmpv6@ allows traffic on all ports, regardless of any port range you specify. For @tcp@ , @udp@ , and @icmp@ , you must specify a port range. For @icmpv6@ , the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
ipIPProtocol :: Lens' IPPermission Text
ipIPProtocol = lens _ipIPProtocol (\ s a -> s{_ipIPProtocol = a})

instance FromXML IPPermission where
        parseXML x
          = IPPermission' <$>
              (x .@? "fromPort") <*>
                (x .@? "groups" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "prefixListIds" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "toPort")
                <*>
                (x .@? "ipv6Ranges" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "ipRanges" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@ "ipProtocol")

instance Hashable IPPermission where

instance NFData IPPermission where

instance ToQuery IPPermission where
        toQuery IPPermission'{..}
          = mconcat
              ["FromPort" =: _ipFromPort,
               toQuery
                 (toQueryList "Groups" <$> _ipUserIdGroupPairs),
               toQuery
                 (toQueryList "PrefixListIds" <$> _ipPrefixListIds),
               "ToPort" =: _ipToPort,
               toQuery (toQueryList "Ipv6Ranges" <$> _ipIPv6Ranges),
               toQuery (toQueryList "IpRanges" <$> _ipIPRanges),
               "IpProtocol" =: _ipIPProtocol]

-- | Describes an IPv4 range.
--
--
--
-- /See:/ 'ipRange' smart constructor.
data IPRange = IPRange'
  { _iprDescription :: !(Maybe Text)
  , _iprCidrIP      :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IPRange' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iprDescription' - A description for the security group rule that references this IPv4 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
--
-- * 'iprCidrIP' - The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
ipRange
    :: Text -- ^ 'iprCidrIP'
    -> IPRange
ipRange pCidrIP_ = IPRange' {_iprDescription = Nothing, _iprCidrIP = pCidrIP_}


-- | A description for the security group rule that references this IPv4 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
iprDescription :: Lens' IPRange (Maybe Text)
iprDescription = lens _iprDescription (\ s a -> s{_iprDescription = a})

-- | The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
iprCidrIP :: Lens' IPRange Text
iprCidrIP = lens _iprCidrIP (\ s a -> s{_iprCidrIP = a})

instance FromXML IPRange where
        parseXML x
          = IPRange' <$>
              (x .@? "description") <*> (x .@ "cidrIp")

instance Hashable IPRange where

instance NFData IPRange where

instance ToQuery IPRange where
        toQuery IPRange'{..}
          = mconcat
              ["Description" =: _iprDescription,
               "CidrIp" =: _iprCidrIP]

-- | Describes an IPv6 CIDR block association.
--
--
--
-- /See:/ 'ipv6CidrAssociation' smart constructor.
data IPv6CidrAssociation = IPv6CidrAssociation'
  { _icaAssociatedResource :: !(Maybe Text)
  , _icaIPv6Cidr           :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IPv6CidrAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'icaAssociatedResource' - The resource that's associated with the IPv6 CIDR block.
--
-- * 'icaIPv6Cidr' - The IPv6 CIDR block.
ipv6CidrAssociation
    :: IPv6CidrAssociation
ipv6CidrAssociation =
  IPv6CidrAssociation'
    {_icaAssociatedResource = Nothing, _icaIPv6Cidr = Nothing}


-- | The resource that's associated with the IPv6 CIDR block.
icaAssociatedResource :: Lens' IPv6CidrAssociation (Maybe Text)
icaAssociatedResource = lens _icaAssociatedResource (\ s a -> s{_icaAssociatedResource = a})

-- | The IPv6 CIDR block.
icaIPv6Cidr :: Lens' IPv6CidrAssociation (Maybe Text)
icaIPv6Cidr = lens _icaIPv6Cidr (\ s a -> s{_icaIPv6Cidr = a})

instance FromXML IPv6CidrAssociation where
        parseXML x
          = IPv6CidrAssociation' <$>
              (x .@? "associatedResource") <*> (x .@? "ipv6Cidr")

instance Hashable IPv6CidrAssociation where

instance NFData IPv6CidrAssociation where

-- | Describes an IPv6 CIDR block.
--
--
--
-- /See:/ 'ipv6CidrBlock' smart constructor.
newtype IPv6CidrBlock = IPv6CidrBlock'
  { _icbIPv6CidrBlock :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IPv6CidrBlock' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'icbIPv6CidrBlock' - The IPv6 CIDR block.
ipv6CidrBlock
    :: IPv6CidrBlock
ipv6CidrBlock = IPv6CidrBlock' {_icbIPv6CidrBlock = Nothing}


-- | The IPv6 CIDR block.
icbIPv6CidrBlock :: Lens' IPv6CidrBlock (Maybe Text)
icbIPv6CidrBlock = lens _icbIPv6CidrBlock (\ s a -> s{_icbIPv6CidrBlock = a})

instance FromXML IPv6CidrBlock where
        parseXML x
          = IPv6CidrBlock' <$> (x .@? "ipv6CidrBlock")

instance Hashable IPv6CidrBlock where

instance NFData IPv6CidrBlock where

-- | Describes an IPv6 address pool.
--
--
--
-- /See:/ 'ipv6Pool' smart constructor.
data IPv6Pool = IPv6Pool'
  { _ipPoolCidrBlocks :: !(Maybe [PoolCidrBlock])
  , _ipPoolId         :: !(Maybe Text)
  , _ipDescription    :: !(Maybe Text)
  , _ipTags           :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IPv6Pool' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ipPoolCidrBlocks' - The CIDR blocks for the address pool.
--
-- * 'ipPoolId' - The ID of the address pool.
--
-- * 'ipDescription' - The description for the address pool.
--
-- * 'ipTags' - Any tags for the address pool.
ipv6Pool
    :: IPv6Pool
ipv6Pool =
  IPv6Pool'
    { _ipPoolCidrBlocks = Nothing
    , _ipPoolId = Nothing
    , _ipDescription = Nothing
    , _ipTags = Nothing
    }


-- | The CIDR blocks for the address pool.
ipPoolCidrBlocks :: Lens' IPv6Pool [PoolCidrBlock]
ipPoolCidrBlocks = lens _ipPoolCidrBlocks (\ s a -> s{_ipPoolCidrBlocks = a}) . _Default . _Coerce

-- | The ID of the address pool.
ipPoolId :: Lens' IPv6Pool (Maybe Text)
ipPoolId = lens _ipPoolId (\ s a -> s{_ipPoolId = a})

-- | The description for the address pool.
ipDescription :: Lens' IPv6Pool (Maybe Text)
ipDescription = lens _ipDescription (\ s a -> s{_ipDescription = a})

-- | Any tags for the address pool.
ipTags :: Lens' IPv6Pool [Tag]
ipTags = lens _ipTags (\ s a -> s{_ipTags = a}) . _Default . _Coerce

instance FromXML IPv6Pool where
        parseXML x
          = IPv6Pool' <$>
              (x .@? "poolCidrBlockSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "poolId")
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable IPv6Pool where

instance NFData IPv6Pool where

-- | [EC2-VPC only] Describes an IPv6 range.
--
--
--
-- /See:/ 'ipv6Range' smart constructor.
data IPv6Range = IPv6Range'
  { _irCidrIPv6    :: !(Maybe Text)
  , _irDescription :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IPv6Range' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'irCidrIPv6' - The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
--
-- * 'irDescription' - A description for the security group rule that references this IPv6 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
ipv6Range
    :: IPv6Range
ipv6Range = IPv6Range' {_irCidrIPv6 = Nothing, _irDescription = Nothing}


-- | The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
irCidrIPv6 :: Lens' IPv6Range (Maybe Text)
irCidrIPv6 = lens _irCidrIPv6 (\ s a -> s{_irCidrIPv6 = a})

-- | A description for the security group rule that references this IPv6 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
irDescription :: Lens' IPv6Range (Maybe Text)
irDescription = lens _irDescription (\ s a -> s{_irDescription = a})

instance FromXML IPv6Range where
        parseXML x
          = IPv6Range' <$>
              (x .@? "cidrIpv6") <*> (x .@? "description")

instance Hashable IPv6Range where

instance NFData IPv6Range where

instance ToQuery IPv6Range where
        toQuery IPv6Range'{..}
          = mconcat
              ["CidrIpv6" =: _irCidrIPv6,
               "Description" =: _irDescription]

-- | Describes the ID format for a resource.
--
--
--
-- /See:/ 'idFormat' smart constructor.
data IdFormat = IdFormat'
  { _ifUseLongIds :: !(Maybe Bool)
  , _ifDeadline   :: !(Maybe ISO8601)
  , _ifResource   :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'IdFormat' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ifUseLongIds' - Indicates whether longer IDs (17-character IDs) are enabled for the resource.
--
-- * 'ifDeadline' - The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.
--
-- * 'ifResource' - The type of resource.
idFormat
    :: IdFormat
idFormat =
  IdFormat'
    {_ifUseLongIds = Nothing, _ifDeadline = Nothing, _ifResource = Nothing}


-- | Indicates whether longer IDs (17-character IDs) are enabled for the resource.
ifUseLongIds :: Lens' IdFormat (Maybe Bool)
ifUseLongIds = lens _ifUseLongIds (\ s a -> s{_ifUseLongIds = a})

-- | The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.
ifDeadline :: Lens' IdFormat (Maybe UTCTime)
ifDeadline = lens _ifDeadline (\ s a -> s{_ifDeadline = a}) . mapping _Time

-- | The type of resource.
ifResource :: Lens' IdFormat (Maybe Text)
ifResource = lens _ifResource (\ s a -> s{_ifResource = a})

instance FromXML IdFormat where
        parseXML x
          = IdFormat' <$>
              (x .@? "useLongIds") <*> (x .@? "deadline") <*>
                (x .@? "resource")

instance Hashable IdFormat where

instance NFData IdFormat where

-- | Describes an image.
--
--
--
-- /See:/ 'image' smart constructor.
data Image = Image'
  { _iPlatform            :: !(Maybe PlatformValues)
  , _iPlatformDetails     :: !(Maybe Text)
  , _iEnaSupport          :: !(Maybe Bool)
  , _iImageOwnerAlias     :: !(Maybe Text)
  , _iUsageOperation      :: !(Maybe Text)
  , _iRAMDiskId           :: !(Maybe Text)
  , _iKernelId            :: !(Maybe Text)
  , _iRootDeviceName      :: !(Maybe Text)
  , _iSRIOVNetSupport     :: !(Maybe Text)
  , _iName                :: !(Maybe Text)
  , _iCreationDate        :: !(Maybe Text)
  , _iProductCodes        :: !(Maybe [ProductCode])
  , _iStateReason         :: !(Maybe StateReason)
  , _iDescription         :: !(Maybe Text)
  , _iBlockDeviceMappings :: !(Maybe [BlockDeviceMapping])
  , _iTags                :: !(Maybe [Tag])
  , _iImageId             :: !Text
  , _iImageLocation       :: !Text
  , _iState               :: !ImageState
  , _iOwnerId             :: !Text
  , _iPublic              :: !Bool
  , _iArchitecture        :: !ArchitectureValues
  , _iImageType           :: !ImageTypeValues
  , _iRootDeviceType      :: !DeviceType
  , _iVirtualizationType  :: !VirtualizationType
  , _iHypervisor          :: !HypervisorType
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Image' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iPlatform' - This value is set to @windows@ for Windows AMIs; otherwise, it is blank.
--
-- * 'iPlatformDetails' - The platform details associated with the billing code of the AMI. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html Obtaining Billing Information> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'iEnaSupport' - Specifies whether enhanced networking with ENA is enabled.
--
-- * 'iImageOwnerAlias' - The AWS account alias (for example, @amazon@ , @self@ ) or the AWS account ID of the AMI owner.
--
-- * 'iUsageOperation' - The operation of the Amazon EC2 instance and the billing code that is associated with the AMI. @usageOperation@ corresponds to the <https://docs.aws.amazon.com/cur/latest/userguide/Lineitem-columns.html#Lineitem-details-O-Operation lineitem/Operation> column on your AWS Cost and Usage Report and in the <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html AWS Price List API> . For the list of @UsageOperation@ codes, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html#billing-info Platform Details and Usage Operation Billing Codes> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'iRAMDiskId' - The RAM disk associated with the image, if any. Only applicable for machine images.
--
-- * 'iKernelId' - The kernel associated with the image, if any. Only applicable for machine images.
--
-- * 'iRootDeviceName' - The device name of the root device volume (for example, @/dev/sda1@ ).
--
-- * 'iSRIOVNetSupport' - Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
--
-- * 'iName' - The name of the AMI that was provided during image creation.
--
-- * 'iCreationDate' - The date and time the image was created.
--
-- * 'iProductCodes' - Any product codes associated with the AMI.
--
-- * 'iStateReason' - The reason for the state change.
--
-- * 'iDescription' - The description of the AMI that was provided during image creation.
--
-- * 'iBlockDeviceMappings' - Any block device mapping entries.
--
-- * 'iTags' - Any tags assigned to the image.
--
-- * 'iImageId' - The ID of the AMI.
--
-- * 'iImageLocation' - The location of the AMI.
--
-- * 'iState' - The current state of the AMI. If the state is @available@ , the image is successfully registered and can be used to launch an instance.
--
-- * 'iOwnerId' - The AWS account ID of the image owner.
--
-- * 'iPublic' - Indicates whether the image has public launch permissions. The value is @true@ if this image has public launch permissions or @false@ if it has only implicit and explicit launch permissions.
--
-- * 'iArchitecture' - The architecture of the image.
--
-- * 'iImageType' - The type of image.
--
-- * 'iRootDeviceType' - The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.
--
-- * 'iVirtualizationType' - The type of virtualization of the AMI.
--
-- * 'iHypervisor' - The hypervisor type of the image.
image
    :: Text -- ^ 'iImageId'
    -> Text -- ^ 'iImageLocation'
    -> ImageState -- ^ 'iState'
    -> Text -- ^ 'iOwnerId'
    -> Bool -- ^ 'iPublic'
    -> ArchitectureValues -- ^ 'iArchitecture'
    -> ImageTypeValues -- ^ 'iImageType'
    -> DeviceType -- ^ 'iRootDeviceType'
    -> VirtualizationType -- ^ 'iVirtualizationType'
    -> HypervisorType -- ^ 'iHypervisor'
    -> Image
image pImageId_ pImageLocation_ pState_ pOwnerId_ pPublic_ pArchitecture_ pImageType_ pRootDeviceType_ pVirtualizationType_ pHypervisor_ =
  Image'
    { _iPlatform = Nothing
    , _iPlatformDetails = Nothing
    , _iEnaSupport = Nothing
    , _iImageOwnerAlias = Nothing
    , _iUsageOperation = Nothing
    , _iRAMDiskId = Nothing
    , _iKernelId = Nothing
    , _iRootDeviceName = Nothing
    , _iSRIOVNetSupport = Nothing
    , _iName = Nothing
    , _iCreationDate = Nothing
    , _iProductCodes = Nothing
    , _iStateReason = Nothing
    , _iDescription = Nothing
    , _iBlockDeviceMappings = Nothing
    , _iTags = Nothing
    , _iImageId = pImageId_
    , _iImageLocation = pImageLocation_
    , _iState = pState_
    , _iOwnerId = pOwnerId_
    , _iPublic = pPublic_
    , _iArchitecture = pArchitecture_
    , _iImageType = pImageType_
    , _iRootDeviceType = pRootDeviceType_
    , _iVirtualizationType = pVirtualizationType_
    , _iHypervisor = pHypervisor_
    }


-- | This value is set to @windows@ for Windows AMIs; otherwise, it is blank.
iPlatform :: Lens' Image (Maybe PlatformValues)
iPlatform = lens _iPlatform (\ s a -> s{_iPlatform = a})

-- | The platform details associated with the billing code of the AMI. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html Obtaining Billing Information> in the /Amazon Elastic Compute Cloud User Guide/ .
iPlatformDetails :: Lens' Image (Maybe Text)
iPlatformDetails = lens _iPlatformDetails (\ s a -> s{_iPlatformDetails = a})

-- | Specifies whether enhanced networking with ENA is enabled.
iEnaSupport :: Lens' Image (Maybe Bool)
iEnaSupport = lens _iEnaSupport (\ s a -> s{_iEnaSupport = a})

-- | The AWS account alias (for example, @amazon@ , @self@ ) or the AWS account ID of the AMI owner.
iImageOwnerAlias :: Lens' Image (Maybe Text)
iImageOwnerAlias = lens _iImageOwnerAlias (\ s a -> s{_iImageOwnerAlias = a})

-- | The operation of the Amazon EC2 instance and the billing code that is associated with the AMI. @usageOperation@ corresponds to the <https://docs.aws.amazon.com/cur/latest/userguide/Lineitem-columns.html#Lineitem-details-O-Operation lineitem/Operation> column on your AWS Cost and Usage Report and in the <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/price-changes.html AWS Price List API> . For the list of @UsageOperation@ codes, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-billing-info.html#billing-info Platform Details and Usage Operation Billing Codes> in the /Amazon Elastic Compute Cloud User Guide/ .
iUsageOperation :: Lens' Image (Maybe Text)
iUsageOperation = lens _iUsageOperation (\ s a -> s{_iUsageOperation = a})

-- | The RAM disk associated with the image, if any. Only applicable for machine images.
iRAMDiskId :: Lens' Image (Maybe Text)
iRAMDiskId = lens _iRAMDiskId (\ s a -> s{_iRAMDiskId = a})

-- | The kernel associated with the image, if any. Only applicable for machine images.
iKernelId :: Lens' Image (Maybe Text)
iKernelId = lens _iKernelId (\ s a -> s{_iKernelId = a})

-- | The device name of the root device volume (for example, @/dev/sda1@ ).
iRootDeviceName :: Lens' Image (Maybe Text)
iRootDeviceName = lens _iRootDeviceName (\ s a -> s{_iRootDeviceName = a})

-- | Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
iSRIOVNetSupport :: Lens' Image (Maybe Text)
iSRIOVNetSupport = lens _iSRIOVNetSupport (\ s a -> s{_iSRIOVNetSupport = a})

-- | The name of the AMI that was provided during image creation.
iName :: Lens' Image (Maybe Text)
iName = lens _iName (\ s a -> s{_iName = a})

-- | The date and time the image was created.
iCreationDate :: Lens' Image (Maybe Text)
iCreationDate = lens _iCreationDate (\ s a -> s{_iCreationDate = a})

-- | Any product codes associated with the AMI.
iProductCodes :: Lens' Image [ProductCode]
iProductCodes = lens _iProductCodes (\ s a -> s{_iProductCodes = a}) . _Default . _Coerce

-- | The reason for the state change.
iStateReason :: Lens' Image (Maybe StateReason)
iStateReason = lens _iStateReason (\ s a -> s{_iStateReason = a})

-- | The description of the AMI that was provided during image creation.
iDescription :: Lens' Image (Maybe Text)
iDescription = lens _iDescription (\ s a -> s{_iDescription = a})

-- | Any block device mapping entries.
iBlockDeviceMappings :: Lens' Image [BlockDeviceMapping]
iBlockDeviceMappings = lens _iBlockDeviceMappings (\ s a -> s{_iBlockDeviceMappings = a}) . _Default . _Coerce

-- | Any tags assigned to the image.
iTags :: Lens' Image [Tag]
iTags = lens _iTags (\ s a -> s{_iTags = a}) . _Default . _Coerce

-- | The ID of the AMI.
iImageId :: Lens' Image Text
iImageId = lens _iImageId (\ s a -> s{_iImageId = a})

-- | The location of the AMI.
iImageLocation :: Lens' Image Text
iImageLocation = lens _iImageLocation (\ s a -> s{_iImageLocation = a})

-- | The current state of the AMI. If the state is @available@ , the image is successfully registered and can be used to launch an instance.
iState :: Lens' Image ImageState
iState = lens _iState (\ s a -> s{_iState = a})

-- | The AWS account ID of the image owner.
iOwnerId :: Lens' Image Text
iOwnerId = lens _iOwnerId (\ s a -> s{_iOwnerId = a})

-- | Indicates whether the image has public launch permissions. The value is @true@ if this image has public launch permissions or @false@ if it has only implicit and explicit launch permissions.
iPublic :: Lens' Image Bool
iPublic = lens _iPublic (\ s a -> s{_iPublic = a})

-- | The architecture of the image.
iArchitecture :: Lens' Image ArchitectureValues
iArchitecture = lens _iArchitecture (\ s a -> s{_iArchitecture = a})

-- | The type of image.
iImageType :: Lens' Image ImageTypeValues
iImageType = lens _iImageType (\ s a -> s{_iImageType = a})

-- | The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.
iRootDeviceType :: Lens' Image DeviceType
iRootDeviceType = lens _iRootDeviceType (\ s a -> s{_iRootDeviceType = a})

-- | The type of virtualization of the AMI.
iVirtualizationType :: Lens' Image VirtualizationType
iVirtualizationType = lens _iVirtualizationType (\ s a -> s{_iVirtualizationType = a})

-- | The hypervisor type of the image.
iHypervisor :: Lens' Image HypervisorType
iHypervisor = lens _iHypervisor (\ s a -> s{_iHypervisor = a})

instance FromXML Image where
        parseXML x
          = Image' <$>
              (x .@? "platform") <*> (x .@? "platformDetails") <*>
                (x .@? "enaSupport")
                <*> (x .@? "imageOwnerAlias")
                <*> (x .@? "usageOperation")
                <*> (x .@? "ramdiskId")
                <*> (x .@? "kernelId")
                <*> (x .@? "rootDeviceName")
                <*> (x .@? "sriovNetSupport")
                <*> (x .@? "name")
                <*> (x .@? "creationDate")
                <*>
                (x .@? "productCodes" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "stateReason")
                <*> (x .@? "description")
                <*>
                (x .@? "blockDeviceMapping" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@ "imageId")
                <*> (x .@ "imageLocation")
                <*> (x .@ "imageState")
                <*> (x .@ "imageOwnerId")
                <*> (x .@ "isPublic")
                <*> (x .@ "architecture")
                <*> (x .@ "imageType")
                <*> (x .@ "rootDeviceType")
                <*> (x .@ "virtualizationType")
                <*> (x .@ "hypervisor")

instance Hashable Image where

instance NFData Image where

-- | Describes the disk container object for an import image task.
--
--
--
-- /See:/ 'imageDiskContainer' smart constructor.
data ImageDiskContainer = ImageDiskContainer'
  { _idcFormat      :: !(Maybe Text)
  , _idcURL         :: !(Maybe Text)
  , _idcDeviceName  :: !(Maybe Text)
  , _idcUserBucket  :: !(Maybe UserBucket)
  , _idcDescription :: !(Maybe Text)
  , _idcSnapshotId  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ImageDiskContainer' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'idcFormat' - The format of the disk image being imported. Valid values: @OVA@ | @VHD@ | @VHDX@ |@VMDK@
--
-- * 'idcURL' - The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)
--
-- * 'idcDeviceName' - The block device mapping for the disk.
--
-- * 'idcUserBucket' - The S3 bucket for the disk image.
--
-- * 'idcDescription' - The description of the disk image.
--
-- * 'idcSnapshotId' - The ID of the EBS snapshot to be used for importing the snapshot.
imageDiskContainer
    :: ImageDiskContainer
imageDiskContainer =
  ImageDiskContainer'
    { _idcFormat = Nothing
    , _idcURL = Nothing
    , _idcDeviceName = Nothing
    , _idcUserBucket = Nothing
    , _idcDescription = Nothing
    , _idcSnapshotId = Nothing
    }


-- | The format of the disk image being imported. Valid values: @OVA@ | @VHD@ | @VHDX@ |@VMDK@
idcFormat :: Lens' ImageDiskContainer (Maybe Text)
idcFormat = lens _idcFormat (\ s a -> s{_idcFormat = a})

-- | The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)
idcURL :: Lens' ImageDiskContainer (Maybe Text)
idcURL = lens _idcURL (\ s a -> s{_idcURL = a})

-- | The block device mapping for the disk.
idcDeviceName :: Lens' ImageDiskContainer (Maybe Text)
idcDeviceName = lens _idcDeviceName (\ s a -> s{_idcDeviceName = a})

-- | The S3 bucket for the disk image.
idcUserBucket :: Lens' ImageDiskContainer (Maybe UserBucket)
idcUserBucket = lens _idcUserBucket (\ s a -> s{_idcUserBucket = a})

-- | The description of the disk image.
idcDescription :: Lens' ImageDiskContainer (Maybe Text)
idcDescription = lens _idcDescription (\ s a -> s{_idcDescription = a})

-- | The ID of the EBS snapshot to be used for importing the snapshot.
idcSnapshotId :: Lens' ImageDiskContainer (Maybe Text)
idcSnapshotId = lens _idcSnapshotId (\ s a -> s{_idcSnapshotId = a})

instance Hashable ImageDiskContainer where

instance NFData ImageDiskContainer where

instance ToQuery ImageDiskContainer where
        toQuery ImageDiskContainer'{..}
          = mconcat
              ["Format" =: _idcFormat, "Url" =: _idcURL,
               "DeviceName" =: _idcDeviceName,
               "UserBucket" =: _idcUserBucket,
               "Description" =: _idcDescription,
               "SnapshotId" =: _idcSnapshotId]

-- | The request information of license configurations.
--
--
--
-- /See:/ 'importImageLicenseConfigurationRequest' smart constructor.
newtype ImportImageLicenseConfigurationRequest = ImportImageLicenseConfigurationRequest'
  { _iilcrLicenseConfigurationARN :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ImportImageLicenseConfigurationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iilcrLicenseConfigurationARN' - The ARN of a license configuration.
importImageLicenseConfigurationRequest
    :: ImportImageLicenseConfigurationRequest
importImageLicenseConfigurationRequest =
  ImportImageLicenseConfigurationRequest'
    {_iilcrLicenseConfigurationARN = Nothing}


-- | The ARN of a license configuration.
iilcrLicenseConfigurationARN :: Lens' ImportImageLicenseConfigurationRequest (Maybe Text)
iilcrLicenseConfigurationARN = lens _iilcrLicenseConfigurationARN (\ s a -> s{_iilcrLicenseConfigurationARN = a})

instance Hashable
           ImportImageLicenseConfigurationRequest
         where

instance NFData
           ImportImageLicenseConfigurationRequest
         where

instance ToQuery
           ImportImageLicenseConfigurationRequest
         where
        toQuery ImportImageLicenseConfigurationRequest'{..}
          = mconcat
              ["LicenseConfigurationArn" =:
                 _iilcrLicenseConfigurationARN]

-- | The response information for license configurations.
--
--
--
-- /See:/ 'importImageLicenseConfigurationResponse' smart constructor.
newtype ImportImageLicenseConfigurationResponse = ImportImageLicenseConfigurationResponse'
  { _iilcLicenseConfigurationARN :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ImportImageLicenseConfigurationResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iilcLicenseConfigurationARN' - The ARN of a license configuration.
importImageLicenseConfigurationResponse
    :: ImportImageLicenseConfigurationResponse
importImageLicenseConfigurationResponse =
  ImportImageLicenseConfigurationResponse'
    {_iilcLicenseConfigurationARN = Nothing}


-- | The ARN of a license configuration.
iilcLicenseConfigurationARN :: Lens' ImportImageLicenseConfigurationResponse (Maybe Text)
iilcLicenseConfigurationARN = lens _iilcLicenseConfigurationARN (\ s a -> s{_iilcLicenseConfigurationARN = a})

instance FromXML
           ImportImageLicenseConfigurationResponse
         where
        parseXML x
          = ImportImageLicenseConfigurationResponse' <$>
              (x .@? "licenseConfigurationArn")

instance Hashable
           ImportImageLicenseConfigurationResponse
         where

instance NFData
           ImportImageLicenseConfigurationResponse
         where

-- | Describes an import image task.
--
--
--
-- /See:/ 'importImageTask' smart constructor.
data ImportImageTask = ImportImageTask'
  { _iitStatus :: !(Maybe Text)
  , _iitHypervisor :: !(Maybe Text)
  , _iitPlatform :: !(Maybe Text)
  , _iitProgress :: !(Maybe Text)
  , _iitLicenseSpecifications :: !(Maybe [ImportImageLicenseConfigurationResponse])
  , _iitLicenseType :: !(Maybe Text)
  , _iitSnapshotDetails :: !(Maybe [SnapshotDetail])
  , _iitEncrypted :: !(Maybe Bool)
  , _iitKMSKeyId :: !(Maybe Text)
  , _iitStatusMessage :: !(Maybe Text)
  , _iitImageId :: !(Maybe Text)
  , _iitImportTaskId :: !(Maybe Text)
  , _iitArchitecture :: !(Maybe Text)
  , _iitDescription :: !(Maybe Text)
  , _iitTags :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ImportImageTask' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iitStatus' - A brief status for the import image task.
--
-- * 'iitHypervisor' - The target hypervisor for the import task. Valid values: @xen@
--
-- * 'iitPlatform' - The description string for the import image task.
--
-- * 'iitProgress' - The percentage of progress of the import image task.
--
-- * 'iitLicenseSpecifications' - The ARNs of the license configurations that are associated with the import image task.
--
-- * 'iitLicenseType' - The license type of the virtual machine.
--
-- * 'iitSnapshotDetails' - Information about the snapshots.
--
-- * 'iitEncrypted' - Indicates whether the image is encrypted.
--
-- * 'iitKMSKeyId' - The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted image.
--
-- * 'iitStatusMessage' - A descriptive status message for the import image task.
--
-- * 'iitImageId' - The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
--
-- * 'iitImportTaskId' - The ID of the import image task.
--
-- * 'iitArchitecture' - The architecture of the virtual machine. Valid values: @i386@ | @x86_64@ | @arm64@
--
-- * 'iitDescription' - A description of the import task.
--
-- * 'iitTags' - The tags for the import image task.
importImageTask
    :: ImportImageTask
importImageTask =
  ImportImageTask'
    { _iitStatus = Nothing
    , _iitHypervisor = Nothing
    , _iitPlatform = Nothing
    , _iitProgress = Nothing
    , _iitLicenseSpecifications = Nothing
    , _iitLicenseType = Nothing
    , _iitSnapshotDetails = Nothing
    , _iitEncrypted = Nothing
    , _iitKMSKeyId = Nothing
    , _iitStatusMessage = Nothing
    , _iitImageId = Nothing
    , _iitImportTaskId = Nothing
    , _iitArchitecture = Nothing
    , _iitDescription = Nothing
    , _iitTags = Nothing
    }


-- | A brief status for the import image task.
iitStatus :: Lens' ImportImageTask (Maybe Text)
iitStatus = lens _iitStatus (\ s a -> s{_iitStatus = a})

-- | The target hypervisor for the import task. Valid values: @xen@
iitHypervisor :: Lens' ImportImageTask (Maybe Text)
iitHypervisor = lens _iitHypervisor (\ s a -> s{_iitHypervisor = a})

-- | The description string for the import image task.
iitPlatform :: Lens' ImportImageTask (Maybe Text)
iitPlatform = lens _iitPlatform (\ s a -> s{_iitPlatform = a})

-- | The percentage of progress of the import image task.
iitProgress :: Lens' ImportImageTask (Maybe Text)
iitProgress = lens _iitProgress (\ s a -> s{_iitProgress = a})

-- | The ARNs of the license configurations that are associated with the import image task.
iitLicenseSpecifications :: Lens' ImportImageTask [ImportImageLicenseConfigurationResponse]
iitLicenseSpecifications = lens _iitLicenseSpecifications (\ s a -> s{_iitLicenseSpecifications = a}) . _Default . _Coerce

-- | The license type of the virtual machine.
iitLicenseType :: Lens' ImportImageTask (Maybe Text)
iitLicenseType = lens _iitLicenseType (\ s a -> s{_iitLicenseType = a})

-- | Information about the snapshots.
iitSnapshotDetails :: Lens' ImportImageTask [SnapshotDetail]
iitSnapshotDetails = lens _iitSnapshotDetails (\ s a -> s{_iitSnapshotDetails = a}) . _Default . _Coerce

-- | Indicates whether the image is encrypted.
iitEncrypted :: Lens' ImportImageTask (Maybe Bool)
iitEncrypted = lens _iitEncrypted (\ s a -> s{_iitEncrypted = a})

-- | The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted image.
iitKMSKeyId :: Lens' ImportImageTask (Maybe Text)
iitKMSKeyId = lens _iitKMSKeyId (\ s a -> s{_iitKMSKeyId = a})

-- | A descriptive status message for the import image task.
iitStatusMessage :: Lens' ImportImageTask (Maybe Text)
iitStatusMessage = lens _iitStatusMessage (\ s a -> s{_iitStatusMessage = a})

-- | The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
iitImageId :: Lens' ImportImageTask (Maybe Text)
iitImageId = lens _iitImageId (\ s a -> s{_iitImageId = a})

-- | The ID of the import image task.
iitImportTaskId :: Lens' ImportImageTask (Maybe Text)
iitImportTaskId = lens _iitImportTaskId (\ s a -> s{_iitImportTaskId = a})

-- | The architecture of the virtual machine. Valid values: @i386@ | @x86_64@ | @arm64@
iitArchitecture :: Lens' ImportImageTask (Maybe Text)
iitArchitecture = lens _iitArchitecture (\ s a -> s{_iitArchitecture = a})

-- | A description of the import task.
iitDescription :: Lens' ImportImageTask (Maybe Text)
iitDescription = lens _iitDescription (\ s a -> s{_iitDescription = a})

-- | The tags for the import image task.
iitTags :: Lens' ImportImageTask [Tag]
iitTags = lens _iitTags (\ s a -> s{_iitTags = a}) . _Default . _Coerce

instance FromXML ImportImageTask where
        parseXML x
          = ImportImageTask' <$>
              (x .@? "status") <*> (x .@? "hypervisor") <*>
                (x .@? "platform")
                <*> (x .@? "progress")
                <*>
                (x .@? "licenseSpecifications" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "licenseType")
                <*>
                (x .@? "snapshotDetailSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "encrypted")
                <*> (x .@? "kmsKeyId")
                <*> (x .@? "statusMessage")
                <*> (x .@? "imageId")
                <*> (x .@? "importTaskId")
                <*> (x .@? "architecture")
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ImportImageTask where

instance NFData ImportImageTask where

-- | Describes the launch specification for VM import.
--
--
--
-- /See:/ 'importInstanceLaunchSpecification' smart constructor.
data ImportInstanceLaunchSpecification = ImportInstanceLaunchSpecification'
  { _iilsAdditionalInfo                    :: !(Maybe Text)
  , _iilsGroupNames                        :: !(Maybe [Text])
  , _iilsSubnetId                          :: !(Maybe Text)
  , _iilsInstanceType                      :: !(Maybe InstanceType)
  , _iilsGroupIds                          :: !(Maybe [Text])
  , _iilsUserData                          :: !(Maybe (Sensitive UserData))
  , _iilsMonitoring                        :: !(Maybe Bool)
  , _iilsPrivateIPAddress                  :: !(Maybe Text)
  , _iilsInstanceInitiatedShutdownBehavior :: !(Maybe ShutdownBehavior)
  , _iilsArchitecture                      :: !(Maybe ArchitectureValues)
  , _iilsPlacement                         :: !(Maybe Placement)
  } deriving (Eq, Show, Data, Typeable, Generic)


-- | Creates a value of 'ImportInstanceLaunchSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iilsAdditionalInfo' - Reserved.
--
-- * 'iilsGroupNames' - The security group names.
--
-- * 'iilsSubnetId' - [EC2-VPC] The ID of the subnet in which to launch the instance.
--
-- * 'iilsInstanceType' - The instance type. For more information about the instance types that you can import, see <https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types Instance Types> in the VM Import/Export User Guide.
--
-- * 'iilsGroupIds' - The security group IDs.
--
-- * 'iilsUserData' - The Base64-encoded user data to make available to the instance.
--
-- * 'iilsMonitoring' - Indicates whether monitoring is enabled.
--
-- * 'iilsPrivateIPAddress' - [EC2-VPC] An available IP address from the IP address range of the subnet.
--
-- * 'iilsInstanceInitiatedShutdownBehavior' - Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
--
-- * 'iilsArchitecture' - The architecture of the instance.
--
-- * 'iilsPlacement' - The placement information for the instance.
importInstanceLaunchSpecification
    :: ImportInstanceLaunchSpecification
importInstanceLaunchSpecification =
  ImportInstanceLaunchSpecification'
    { _iilsAdditionalInfo = Nothing
    , _iilsGroupNames = Nothing
    , _iilsSubnetId = Nothing
    , _iilsInstanceType = Nothing
    , _iilsGroupIds = Nothing
    , _iilsUserData = Nothing
    , _iilsMonitoring = Nothing
    , _iilsPrivateIPAddress = Nothing
    , _iilsInstanceInitiatedShutdownBehavior = Nothing
    , _iilsArchitecture = Nothing
    , _iilsPlacement = Nothing
    }


-- | Reserved.
iilsAdditionalInfo :: Lens' ImportInstanceLaunchSpecification (Maybe Text)
iilsAdditionalInfo = lens _iilsAdditionalInfo (\ s a -> s{_iilsAdditionalInfo = a})

-- | The security group names.
iilsGroupNames :: Lens' ImportInstanceLaunchSpecification [Text]
iilsGroupNames = lens _iilsGroupNames (\ s a -> s{_iilsGroupNames = a}) . _Default . _Coerce

-- | [EC2-VPC] The ID of the subnet in which to launch the instance.
iilsSubnetId :: Lens' ImportInstanceLaunchSpecification (Maybe Text)
iilsSubnetId = lens _iilsSubnetId (\ s a -> s{_iilsSubnetId = a})

-- | The instance type. For more information about the instance types that you can import, see <https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types Instance Types> in the VM Import/Export User Guide.
iilsInstanceType :: Lens' ImportInstanceLaunchSpecification (Maybe InstanceType)
iilsInstanceType = lens _iilsInstanceType (\ s a -> s{_iilsInstanceType = a})

-- | The security group IDs.
iilsGroupIds :: Lens' ImportInstanceLaunchSpecification [Text]
iilsGroupIds = lens _iilsGroupIds (\ s a -> s{_iilsGroupIds = a}) . _Default . _Coerce

-- | The Base64-encoded user data to make available to the instance.
iilsUserData :: Lens' ImportInstanceLaunchSpecification (Maybe UserData)
iilsUserData = lens _iilsUserData (\ s a -> s{_iilsUserData = a}) . mapping _Sensitive

-- | Indicates whether monitoring is enabled.
iilsMonitoring :: Lens' ImportInstanceLaunchSpecification (Maybe Bool)
iilsMonitoring = lens _iilsMonitoring (\ s a -> s{_iilsMonitoring = a})

-- | [EC2-VPC] An available IP address from the IP address range of the subnet.
iilsPrivateIPAddress :: Lens' ImportInstanceLaunchSpecification (Maybe Text)
iilsPrivateIPAddress = lens _iilsPrivateIPAddress (\ s a -> s{_iilsPrivateIPAddress = a})

-- | Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
iilsInstanceInitiatedShutdownBehavior :: Lens' ImportInstanceLaunchSpecification (Maybe ShutdownBehavior)
iilsInstanceInitiatedShutdownBehavior = lens _iilsInstanceInitiatedShutdownBehavior (\ s a -> s{_iilsInstanceInitiatedShutdownBehavior = a})

-- | The architecture of the instance.
iilsArchitecture :: Lens' ImportInstanceLaunchSpecification (Maybe ArchitectureValues)
iilsArchitecture = lens _iilsArchitecture (\ s a -> s{_iilsArchitecture = a})

-- | The placement information for the instance.
iilsPlacement :: Lens' ImportInstanceLaunchSpecification (Maybe Placement)
iilsPlacement = lens _iilsPlacement (\ s a -> s{_iilsPlacement = a})

instance Hashable ImportInstanceLaunchSpecification
         where

instance NFData ImportInstanceLaunchSpecification
         where

instance ToQuery ImportInstanceLaunchSpecification
         where
        toQuery ImportInstanceLaunchSpecification'{..}
          = mconcat
              ["AdditionalInfo" =: _iilsAdditionalInfo,
               toQuery
                 (toQueryList "GroupName" <$> _iilsGroupNames),
               "SubnetId" =: _iilsSubnetId,
               "InstanceType" =: _iilsInstanceType,
               toQuery (toQueryList "GroupId" <$> _iilsGroupIds),
               "UserData" =: _iilsUserData,
               "Monitoring" =: _iilsMonitoring,
               "PrivateIpAddress" =: _iilsPrivateIPAddress,
               "InstanceInitiatedShutdownBehavior" =:
                 _iilsInstanceInitiatedShutdownBehavior,
               "Architecture" =: _iilsArchitecture,
               "Placement" =: _iilsPlacement]

-- | Describes an import instance task.
--
--
--
-- /See:/ 'importInstanceTaskDetails' smart constructor.
data ImportInstanceTaskDetails = ImportInstanceTaskDetails'
  { _iitdInstanceId  :: !(Maybe Text)
  , _iitdPlatform    :: !(Maybe PlatformValues)
  , _iitdVolumes     :: !(Maybe [ImportInstanceVolumeDetailItem])
  , _iitdDescription :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ImportInstanceTaskDetails' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iitdInstanceId' - The ID of the instance.
--
-- * 'iitdPlatform' - The instance operating system.
--
-- * 'iitdVolumes' - The volumes.
--
-- * 'iitdDescription' - A description of the task.
importInstanceTaskDetails
    :: ImportInstanceTaskDetails
importInstanceTaskDetails =
  ImportInstanceTaskDetails'
    { _iitdInstanceId = Nothing
    , _iitdPlatform = Nothing
    , _iitdVolumes = Nothing
    , _iitdDescription = Nothing
    }


-- | The ID of the instance.
iitdInstanceId :: Lens' ImportInstanceTaskDetails (Maybe Text)
iitdInstanceId = lens _iitdInstanceId (\ s a -> s{_iitdInstanceId = a})

-- | The instance operating system.
iitdPlatform :: Lens' ImportInstanceTaskDetails (Maybe PlatformValues)
iitdPlatform = lens _iitdPlatform (\ s a -> s{_iitdPlatform = a})

-- | The volumes.
iitdVolumes :: Lens' ImportInstanceTaskDetails [ImportInstanceVolumeDetailItem]
iitdVolumes = lens _iitdVolumes (\ s a -> s{_iitdVolumes = a}) . _Default . _Coerce

-- | A description of the task.
iitdDescription :: Lens' ImportInstanceTaskDetails (Maybe Text)
iitdDescription = lens _iitdDescription (\ s a -> s{_iitdDescription = a})

instance FromXML ImportInstanceTaskDetails where
        parseXML x
          = ImportInstanceTaskDetails' <$>
              (x .@? "instanceId") <*> (x .@? "platform") <*>
                (x .@? "volumes" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "description")

instance Hashable ImportInstanceTaskDetails where

instance NFData ImportInstanceTaskDetails where

-- | Describes an import volume task.
--
--
--
-- /See:/ 'importInstanceVolumeDetailItem' smart constructor.
data ImportInstanceVolumeDetailItem = ImportInstanceVolumeDetailItem'
  { _iivdiStatus           :: !(Maybe Text)
  , _iivdiBytesConverted   :: !(Maybe Integer)
  , _iivdiImage            :: !(Maybe DiskImageDescription)
  , _iivdiVolume           :: !(Maybe DiskImageVolumeDescription)
  , _iivdiAvailabilityZone :: !(Maybe Text)
  , _iivdiStatusMessage    :: !(Maybe Text)
  , _iivdiDescription      :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ImportInstanceVolumeDetailItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iivdiStatus' - The status of the import of this particular disk image.
--
-- * 'iivdiBytesConverted' - The number of bytes converted so far.
--
-- * 'iivdiImage' - The image.
--
-- * 'iivdiVolume' - The volume.
--
-- * 'iivdiAvailabilityZone' - The Availability Zone where the resulting instance will reside.
--
-- * 'iivdiStatusMessage' - The status information or errors related to the disk image.
--
-- * 'iivdiDescription' - A description of the task.
importInstanceVolumeDetailItem
    :: ImportInstanceVolumeDetailItem
importInstanceVolumeDetailItem =
  ImportInstanceVolumeDetailItem'
    { _iivdiStatus = Nothing
    , _iivdiBytesConverted = Nothing
    , _iivdiImage = Nothing
    , _iivdiVolume = Nothing
    , _iivdiAvailabilityZone = Nothing
    , _iivdiStatusMessage = Nothing
    , _iivdiDescription = Nothing
    }


-- | The status of the import of this particular disk image.
iivdiStatus :: Lens' ImportInstanceVolumeDetailItem (Maybe Text)
iivdiStatus = lens _iivdiStatus (\ s a -> s{_iivdiStatus = a})

-- | The number of bytes converted so far.
iivdiBytesConverted :: Lens' ImportInstanceVolumeDetailItem (Maybe Integer)
iivdiBytesConverted = lens _iivdiBytesConverted (\ s a -> s{_iivdiBytesConverted = a})

-- | The image.
iivdiImage :: Lens' ImportInstanceVolumeDetailItem (Maybe DiskImageDescription)
iivdiImage = lens _iivdiImage (\ s a -> s{_iivdiImage = a})

-- | The volume.
iivdiVolume :: Lens' ImportInstanceVolumeDetailItem (Maybe DiskImageVolumeDescription)
iivdiVolume = lens _iivdiVolume (\ s a -> s{_iivdiVolume = a})

-- | The Availability Zone where the resulting instance will reside.
iivdiAvailabilityZone :: Lens' ImportInstanceVolumeDetailItem (Maybe Text)
iivdiAvailabilityZone = lens _iivdiAvailabilityZone (\ s a -> s{_iivdiAvailabilityZone = a})

-- | The status information or errors related to the disk image.
iivdiStatusMessage :: Lens' ImportInstanceVolumeDetailItem (Maybe Text)
iivdiStatusMessage = lens _iivdiStatusMessage (\ s a -> s{_iivdiStatusMessage = a})

-- | A description of the task.
iivdiDescription :: Lens' ImportInstanceVolumeDetailItem (Maybe Text)
iivdiDescription = lens _iivdiDescription (\ s a -> s{_iivdiDescription = a})

instance FromXML ImportInstanceVolumeDetailItem where
        parseXML x
          = ImportInstanceVolumeDetailItem' <$>
              (x .@? "status") <*> (x .@? "bytesConverted") <*>
                (x .@? "image")
                <*> (x .@? "volume")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "statusMessage")
                <*> (x .@? "description")

instance Hashable ImportInstanceVolumeDetailItem
         where

instance NFData ImportInstanceVolumeDetailItem where

-- | Describes an import snapshot task.
--
--
--
-- /See:/ 'importSnapshotTask' smart constructor.
data ImportSnapshotTask = ImportSnapshotTask'
  { _istSnapshotTaskDetail :: !(Maybe SnapshotTaskDetail)
  , _istImportTaskId       :: !(Maybe Text)
  , _istDescription        :: !(Maybe Text)
  , _istTags               :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ImportSnapshotTask' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'istSnapshotTaskDetail' - Describes an import snapshot task.
--
-- * 'istImportTaskId' - The ID of the import snapshot task.
--
-- * 'istDescription' - A description of the import snapshot task.
--
-- * 'istTags' - The tags for the import snapshot task.
importSnapshotTask
    :: ImportSnapshotTask
importSnapshotTask =
  ImportSnapshotTask'
    { _istSnapshotTaskDetail = Nothing
    , _istImportTaskId = Nothing
    , _istDescription = Nothing
    , _istTags = Nothing
    }


-- | Describes an import snapshot task.
istSnapshotTaskDetail :: Lens' ImportSnapshotTask (Maybe SnapshotTaskDetail)
istSnapshotTaskDetail = lens _istSnapshotTaskDetail (\ s a -> s{_istSnapshotTaskDetail = a})

-- | The ID of the import snapshot task.
istImportTaskId :: Lens' ImportSnapshotTask (Maybe Text)
istImportTaskId = lens _istImportTaskId (\ s a -> s{_istImportTaskId = a})

-- | A description of the import snapshot task.
istDescription :: Lens' ImportSnapshotTask (Maybe Text)
istDescription = lens _istDescription (\ s a -> s{_istDescription = a})

-- | The tags for the import snapshot task.
istTags :: Lens' ImportSnapshotTask [Tag]
istTags = lens _istTags (\ s a -> s{_istTags = a}) . _Default . _Coerce

instance FromXML ImportSnapshotTask where
        parseXML x
          = ImportSnapshotTask' <$>
              (x .@? "snapshotTaskDetail") <*>
                (x .@? "importTaskId")
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ImportSnapshotTask where

instance NFData ImportSnapshotTask where

-- | Describes an import volume task.
--
--
--
-- /See:/ 'importVolumeTaskDetails' smart constructor.
data ImportVolumeTaskDetails = ImportVolumeTaskDetails'
  { _ivtdBytesConverted   :: !(Maybe Integer)
  , _ivtdImage            :: !(Maybe DiskImageDescription)
  , _ivtdVolume           :: !(Maybe DiskImageVolumeDescription)
  , _ivtdAvailabilityZone :: !(Maybe Text)
  , _ivtdDescription      :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ImportVolumeTaskDetails' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ivtdBytesConverted' - The number of bytes converted so far.
--
-- * 'ivtdImage' - The image.
--
-- * 'ivtdVolume' - The volume.
--
-- * 'ivtdAvailabilityZone' - The Availability Zone where the resulting volume will reside.
--
-- * 'ivtdDescription' - The description you provided when starting the import volume task.
importVolumeTaskDetails
    :: ImportVolumeTaskDetails
importVolumeTaskDetails =
  ImportVolumeTaskDetails'
    { _ivtdBytesConverted = Nothing
    , _ivtdImage = Nothing
    , _ivtdVolume = Nothing
    , _ivtdAvailabilityZone = Nothing
    , _ivtdDescription = Nothing
    }


-- | The number of bytes converted so far.
ivtdBytesConverted :: Lens' ImportVolumeTaskDetails (Maybe Integer)
ivtdBytesConverted = lens _ivtdBytesConverted (\ s a -> s{_ivtdBytesConverted = a})

-- | The image.
ivtdImage :: Lens' ImportVolumeTaskDetails (Maybe DiskImageDescription)
ivtdImage = lens _ivtdImage (\ s a -> s{_ivtdImage = a})

-- | The volume.
ivtdVolume :: Lens' ImportVolumeTaskDetails (Maybe DiskImageVolumeDescription)
ivtdVolume = lens _ivtdVolume (\ s a -> s{_ivtdVolume = a})

-- | The Availability Zone where the resulting volume will reside.
ivtdAvailabilityZone :: Lens' ImportVolumeTaskDetails (Maybe Text)
ivtdAvailabilityZone = lens _ivtdAvailabilityZone (\ s a -> s{_ivtdAvailabilityZone = a})

-- | The description you provided when starting the import volume task.
ivtdDescription :: Lens' ImportVolumeTaskDetails (Maybe Text)
ivtdDescription = lens _ivtdDescription (\ s a -> s{_ivtdDescription = a})

instance FromXML ImportVolumeTaskDetails where
        parseXML x
          = ImportVolumeTaskDetails' <$>
              (x .@? "bytesConverted") <*> (x .@? "image") <*>
                (x .@? "volume")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "description")

instance Hashable ImportVolumeTaskDetails where

instance NFData ImportVolumeTaskDetails where

-- | Describes the Inference accelerators for the instance type.
--
--
--
-- /See:/ 'inferenceAcceleratorInfo' smart constructor.
newtype InferenceAcceleratorInfo = InferenceAcceleratorInfo'
  { _iaiAccelerators :: Maybe [InferenceDeviceInfo]
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InferenceAcceleratorInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iaiAccelerators' - Describes the Inference accelerators for the instance type.
inferenceAcceleratorInfo
    :: InferenceAcceleratorInfo
inferenceAcceleratorInfo =
  InferenceAcceleratorInfo' {_iaiAccelerators = Nothing}


-- | Describes the Inference accelerators for the instance type.
iaiAccelerators :: Lens' InferenceAcceleratorInfo [InferenceDeviceInfo]
iaiAccelerators = lens _iaiAccelerators (\ s a -> s{_iaiAccelerators = a}) . _Default . _Coerce

instance FromXML InferenceAcceleratorInfo where
        parseXML x
          = InferenceAcceleratorInfo' <$>
              (x .@? "accelerators" .!@ mempty >>=
                 may (parseXMLList "member"))

instance Hashable InferenceAcceleratorInfo where

instance NFData InferenceAcceleratorInfo where

-- | Describes the Inference accelerators for the instance type.
--
--
--
-- /See:/ 'inferenceDeviceInfo' smart constructor.
data InferenceDeviceInfo = InferenceDeviceInfo'
  { _idiManufacturer :: !(Maybe Text)
  , _idiCount        :: !(Maybe Int)
  , _idiName         :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InferenceDeviceInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'idiManufacturer' - The manufacturer of the Inference accelerator.
--
-- * 'idiCount' - The number of Inference accelerators for the instance type.
--
-- * 'idiName' - The name of the Inference accelerator.
inferenceDeviceInfo
    :: InferenceDeviceInfo
inferenceDeviceInfo =
  InferenceDeviceInfo'
    {_idiManufacturer = Nothing, _idiCount = Nothing, _idiName = Nothing}


-- | The manufacturer of the Inference accelerator.
idiManufacturer :: Lens' InferenceDeviceInfo (Maybe Text)
idiManufacturer = lens _idiManufacturer (\ s a -> s{_idiManufacturer = a})

-- | The number of Inference accelerators for the instance type.
idiCount :: Lens' InferenceDeviceInfo (Maybe Int)
idiCount = lens _idiCount (\ s a -> s{_idiCount = a})

-- | The name of the Inference accelerator.
idiName :: Lens' InferenceDeviceInfo (Maybe Text)
idiName = lens _idiName (\ s a -> s{_idiName = a})

instance FromXML InferenceDeviceInfo where
        parseXML x
          = InferenceDeviceInfo' <$>
              (x .@? "manufacturer") <*> (x .@? "count") <*>
                (x .@? "name")

instance Hashable InferenceDeviceInfo where

instance NFData InferenceDeviceInfo where

-- | Describes an instance.
--
--
--
-- /See:/ 'instance'' smart constructor.
data Instance = Instance'
  { _insPublicDNSName :: !(Maybe Text)
  , _insPlatform :: !(Maybe PlatformValues)
  , _insSecurityGroups :: !(Maybe [GroupIdentifier])
  , _insClientToken :: !(Maybe Text)
  , _insEnaSupport :: !(Maybe Bool)
  , _insSourceDestCheck :: !(Maybe Bool)
  , _insElasticGpuAssociations :: !(Maybe [ElasticGpuAssociation])
  , _insVPCId :: !(Maybe Text)
  , _insKeyName :: !(Maybe Text)
  , _insNetworkInterfaces :: !(Maybe [InstanceNetworkInterface])
  , _insOutpostARN :: !(Maybe Text)
  , _insEnclaveOptions :: !(Maybe EnclaveOptions)
  , _insRAMDiskId :: !(Maybe Text)
  , _insCPUOptions :: !(Maybe CPUOptions)
  , _insSubnetId :: !(Maybe Text)
  , _insKernelId :: !(Maybe Text)
  , _insRootDeviceName :: !(Maybe Text)
  , _insCapacityReservationId :: !(Maybe Text)
  , _insCapacityReservationSpecification :: !(Maybe CapacityReservationSpecificationResponse)
  , _insSRIOVNetSupport :: !(Maybe Text)
  , _insEBSOptimized :: !(Maybe Bool)
  , _insStateTransitionReason :: !(Maybe Text)
  , _insHibernationOptions :: !(Maybe HibernationOptions)
  , _insInstanceLifecycle :: !(Maybe InstanceLifecycleType)
  , _insIAMInstanceProfile :: !(Maybe IAMInstanceProfile)
  , _insPrivateIPAddress :: !(Maybe Text)
  , _insMetadataOptions :: !(Maybe InstanceMetadataOptionsResponse)
  , _insProductCodes :: !(Maybe [ProductCode])
  , _insSpotInstanceRequestId :: !(Maybe Text)
  , _insLicenses :: !(Maybe [LicenseConfiguration])
  , _insElasticInferenceAcceleratorAssociations :: !(Maybe [ElasticInferenceAcceleratorAssociation])
  , _insPrivateDNSName :: !(Maybe Text)
  , _insStateReason :: !(Maybe StateReason)
  , _insBlockDeviceMappings :: !(Maybe [InstanceBlockDeviceMapping])
  , _insPublicIPAddress :: !(Maybe Text)
  , _insTags :: !(Maybe [Tag])
  , _insInstanceId :: !Text
  , _insImageId :: !Text
  , _insAMILaunchIndex :: !Int
  , _insInstanceType :: !InstanceType
  , _insLaunchTime :: !ISO8601
  , _insPlacement :: !Placement
  , _insMonitoring :: !Monitoring
  , _insArchitecture :: !ArchitectureValues
  , _insRootDeviceType :: !DeviceType
  , _insVirtualizationType :: !VirtualizationType
  , _insHypervisor :: !HypervisorType
  , _insState :: !InstanceState
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Instance' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'insPublicDNSName' - (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the @running@ state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.
--
-- * 'insPlatform' - The value is @Windows@ for Windows instances; otherwise blank.
--
-- * 'insSecurityGroups' - The security groups for the instance.
--
-- * 'insClientToken' - The idempotency token you provided when you launched the instance, if applicable.
--
-- * 'insEnaSupport' - Specifies whether enhanced networking with ENA is enabled.
--
-- * 'insSourceDestCheck' - Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance. A value of @true@ means that checking is enabled, and @false@ means that checking is disabled. The value must be @false@ for the instance to perform NAT. For more information, see <https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html NAT instances> in the /Amazon VPC User Guide/ .
--
-- * 'insElasticGpuAssociations' - The Elastic GPU associated with the instance.
--
-- * 'insVPCId' - [EC2-VPC] The ID of the VPC in which the instance is running.
--
-- * 'insKeyName' - The name of the key pair, if this instance was launched with an associated key pair.
--
-- * 'insNetworkInterfaces' - [EC2-VPC] The network interfaces for the instance.
--
-- * 'insOutpostARN' - The Amazon Resource Name (ARN) of the Outpost.
--
-- * 'insEnclaveOptions' - Indicates whether the instance is enabled for AWS Nitro Enclaves.
--
-- * 'insRAMDiskId' - The RAM disk associated with this instance, if applicable.
--
-- * 'insCPUOptions' - The CPU options for the instance.
--
-- * 'insSubnetId' - [EC2-VPC] The ID of the subnet in which the instance is running.
--
-- * 'insKernelId' - The kernel associated with this instance, if applicable.
--
-- * 'insRootDeviceName' - The device name of the root device volume (for example, @/dev/sda1@ ).
--
-- * 'insCapacityReservationId' - The ID of the Capacity Reservation.
--
-- * 'insCapacityReservationSpecification' - Information about the Capacity Reservation targeting option.
--
-- * 'insSRIOVNetSupport' - Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
--
-- * 'insEBSOptimized' - Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
--
-- * 'insStateTransitionReason' - The reason for the most recent state transition. This might be an empty string.
--
-- * 'insHibernationOptions' - Indicates whether the instance is enabled for hibernation.
--
-- * 'insInstanceLifecycle' - Indicates whether this is a Spot Instance or a Scheduled Instance.
--
-- * 'insIAMInstanceProfile' - The IAM instance profile associated with the instance, if applicable.
--
-- * 'insPrivateIPAddress' - The private IPv4 address assigned to the instance.
--
-- * 'insMetadataOptions' - The metadata options for the instance.
--
-- * 'insProductCodes' - The product codes attached to this instance, if applicable.
--
-- * 'insSpotInstanceRequestId' - If the request is a Spot Instance request, the ID of the request.
--
-- * 'insLicenses' - The license configurations.
--
-- * 'insElasticInferenceAcceleratorAssociations' - The elastic inference accelerator associated with the instance.
--
-- * 'insPrivateDNSName' - (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the @running@ state.  [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.
--
-- * 'insStateReason' - The reason for the most recent state transition.
--
-- * 'insBlockDeviceMappings' - Any block device mapping entries for the instance.
--
-- * 'insPublicIPAddress' - The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable. A Carrier IP address only applies to an instance launched in a subnet associated with a Wavelength Zone.
--
-- * 'insTags' - Any tags assigned to the instance.
--
-- * 'insInstanceId' - The ID of the instance.
--
-- * 'insImageId' - The ID of the AMI used to launch the instance.
--
-- * 'insAMILaunchIndex' - The AMI launch index, which can be used to find this instance in the launch group.
--
-- * 'insInstanceType' - The instance type.
--
-- * 'insLaunchTime' - The time the instance was launched.
--
-- * 'insPlacement' - The location where the instance launched, if applicable.
--
-- * 'insMonitoring' - The monitoring for the instance.
--
-- * 'insArchitecture' - The architecture of the image.
--
-- * 'insRootDeviceType' - The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
--
-- * 'insVirtualizationType' - The virtualization type of the instance.
--
-- * 'insHypervisor' - The hypervisor type of the instance. The value @xen@ is used for both Xen and Nitro hypervisors.
--
-- * 'insState' - The current state of the instance.
instance'
    :: Text -- ^ 'insInstanceId'
    -> Text -- ^ 'insImageId'
    -> Int -- ^ 'insAMILaunchIndex'
    -> InstanceType -- ^ 'insInstanceType'
    -> UTCTime -- ^ 'insLaunchTime'
    -> Placement -- ^ 'insPlacement'
    -> Monitoring -- ^ 'insMonitoring'
    -> ArchitectureValues -- ^ 'insArchitecture'
    -> DeviceType -- ^ 'insRootDeviceType'
    -> VirtualizationType -- ^ 'insVirtualizationType'
    -> HypervisorType -- ^ 'insHypervisor'
    -> InstanceState -- ^ 'insState'
    -> Instance
instance' pInstanceId_ pImageId_ pAMILaunchIndex_ pInstanceType_ pLaunchTime_ pPlacement_ pMonitoring_ pArchitecture_ pRootDeviceType_ pVirtualizationType_ pHypervisor_ pState_ =
  Instance'
    { _insPublicDNSName = Nothing
    , _insPlatform = Nothing
    , _insSecurityGroups = Nothing
    , _insClientToken = Nothing
    , _insEnaSupport = Nothing
    , _insSourceDestCheck = Nothing
    , _insElasticGpuAssociations = Nothing
    , _insVPCId = Nothing
    , _insKeyName = Nothing
    , _insNetworkInterfaces = Nothing
    , _insOutpostARN = Nothing
    , _insEnclaveOptions = Nothing
    , _insRAMDiskId = Nothing
    , _insCPUOptions = Nothing
    , _insSubnetId = Nothing
    , _insKernelId = Nothing
    , _insRootDeviceName = Nothing
    , _insCapacityReservationId = Nothing
    , _insCapacityReservationSpecification = Nothing
    , _insSRIOVNetSupport = Nothing
    , _insEBSOptimized = Nothing
    , _insStateTransitionReason = Nothing
    , _insHibernationOptions = Nothing
    , _insInstanceLifecycle = Nothing
    , _insIAMInstanceProfile = Nothing
    , _insPrivateIPAddress = Nothing
    , _insMetadataOptions = Nothing
    , _insProductCodes = Nothing
    , _insSpotInstanceRequestId = Nothing
    , _insLicenses = Nothing
    , _insElasticInferenceAcceleratorAssociations = Nothing
    , _insPrivateDNSName = Nothing
    , _insStateReason = Nothing
    , _insBlockDeviceMappings = Nothing
    , _insPublicIPAddress = Nothing
    , _insTags = Nothing
    , _insInstanceId = pInstanceId_
    , _insImageId = pImageId_
    , _insAMILaunchIndex = pAMILaunchIndex_
    , _insInstanceType = pInstanceType_
    , _insLaunchTime = _Time # pLaunchTime_
    , _insPlacement = pPlacement_
    , _insMonitoring = pMonitoring_
    , _insArchitecture = pArchitecture_
    , _insRootDeviceType = pRootDeviceType_
    , _insVirtualizationType = pVirtualizationType_
    , _insHypervisor = pHypervisor_
    , _insState = pState_
    }


-- | (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the @running@ state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.
insPublicDNSName :: Lens' Instance (Maybe Text)
insPublicDNSName = lens _insPublicDNSName (\ s a -> s{_insPublicDNSName = a})

-- | The value is @Windows@ for Windows instances; otherwise blank.
insPlatform :: Lens' Instance (Maybe PlatformValues)
insPlatform = lens _insPlatform (\ s a -> s{_insPlatform = a})

-- | The security groups for the instance.
insSecurityGroups :: Lens' Instance [GroupIdentifier]
insSecurityGroups = lens _insSecurityGroups (\ s a -> s{_insSecurityGroups = a}) . _Default . _Coerce

-- | The idempotency token you provided when you launched the instance, if applicable.
insClientToken :: Lens' Instance (Maybe Text)
insClientToken = lens _insClientToken (\ s a -> s{_insClientToken = a})

-- | Specifies whether enhanced networking with ENA is enabled.
insEnaSupport :: Lens' Instance (Maybe Bool)
insEnaSupport = lens _insEnaSupport (\ s a -> s{_insEnaSupport = a})

-- | Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance. A value of @true@ means that checking is enabled, and @false@ means that checking is disabled. The value must be @false@ for the instance to perform NAT. For more information, see <https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html NAT instances> in the /Amazon VPC User Guide/ .
insSourceDestCheck :: Lens' Instance (Maybe Bool)
insSourceDestCheck = lens _insSourceDestCheck (\ s a -> s{_insSourceDestCheck = a})

-- | The Elastic GPU associated with the instance.
insElasticGpuAssociations :: Lens' Instance [ElasticGpuAssociation]
insElasticGpuAssociations = lens _insElasticGpuAssociations (\ s a -> s{_insElasticGpuAssociations = a}) . _Default . _Coerce

-- | [EC2-VPC] The ID of the VPC in which the instance is running.
insVPCId :: Lens' Instance (Maybe Text)
insVPCId = lens _insVPCId (\ s a -> s{_insVPCId = a})

-- | The name of the key pair, if this instance was launched with an associated key pair.
insKeyName :: Lens' Instance (Maybe Text)
insKeyName = lens _insKeyName (\ s a -> s{_insKeyName = a})

-- | [EC2-VPC] The network interfaces for the instance.
insNetworkInterfaces :: Lens' Instance [InstanceNetworkInterface]
insNetworkInterfaces = lens _insNetworkInterfaces (\ s a -> s{_insNetworkInterfaces = a}) . _Default . _Coerce

-- | The Amazon Resource Name (ARN) of the Outpost.
insOutpostARN :: Lens' Instance (Maybe Text)
insOutpostARN = lens _insOutpostARN (\ s a -> s{_insOutpostARN = a})

-- | Indicates whether the instance is enabled for AWS Nitro Enclaves.
insEnclaveOptions :: Lens' Instance (Maybe EnclaveOptions)
insEnclaveOptions = lens _insEnclaveOptions (\ s a -> s{_insEnclaveOptions = a})

-- | The RAM disk associated with this instance, if applicable.
insRAMDiskId :: Lens' Instance (Maybe Text)
insRAMDiskId = lens _insRAMDiskId (\ s a -> s{_insRAMDiskId = a})

-- | The CPU options for the instance.
insCPUOptions :: Lens' Instance (Maybe CPUOptions)
insCPUOptions = lens _insCPUOptions (\ s a -> s{_insCPUOptions = a})

-- | [EC2-VPC] The ID of the subnet in which the instance is running.
insSubnetId :: Lens' Instance (Maybe Text)
insSubnetId = lens _insSubnetId (\ s a -> s{_insSubnetId = a})

-- | The kernel associated with this instance, if applicable.
insKernelId :: Lens' Instance (Maybe Text)
insKernelId = lens _insKernelId (\ s a -> s{_insKernelId = a})

-- | The device name of the root device volume (for example, @/dev/sda1@ ).
insRootDeviceName :: Lens' Instance (Maybe Text)
insRootDeviceName = lens _insRootDeviceName (\ s a -> s{_insRootDeviceName = a})

-- | The ID of the Capacity Reservation.
insCapacityReservationId :: Lens' Instance (Maybe Text)
insCapacityReservationId = lens _insCapacityReservationId (\ s a -> s{_insCapacityReservationId = a})

-- | Information about the Capacity Reservation targeting option.
insCapacityReservationSpecification :: Lens' Instance (Maybe CapacityReservationSpecificationResponse)
insCapacityReservationSpecification = lens _insCapacityReservationSpecification (\ s a -> s{_insCapacityReservationSpecification = a})

-- | Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
insSRIOVNetSupport :: Lens' Instance (Maybe Text)
insSRIOVNetSupport = lens _insSRIOVNetSupport (\ s a -> s{_insSRIOVNetSupport = a})

-- | Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
insEBSOptimized :: Lens' Instance (Maybe Bool)
insEBSOptimized = lens _insEBSOptimized (\ s a -> s{_insEBSOptimized = a})

-- | The reason for the most recent state transition. This might be an empty string.
insStateTransitionReason :: Lens' Instance (Maybe Text)
insStateTransitionReason = lens _insStateTransitionReason (\ s a -> s{_insStateTransitionReason = a})

-- | Indicates whether the instance is enabled for hibernation.
insHibernationOptions :: Lens' Instance (Maybe HibernationOptions)
insHibernationOptions = lens _insHibernationOptions (\ s a -> s{_insHibernationOptions = a})

-- | Indicates whether this is a Spot Instance or a Scheduled Instance.
insInstanceLifecycle :: Lens' Instance (Maybe InstanceLifecycleType)
insInstanceLifecycle = lens _insInstanceLifecycle (\ s a -> s{_insInstanceLifecycle = a})

-- | The IAM instance profile associated with the instance, if applicable.
insIAMInstanceProfile :: Lens' Instance (Maybe IAMInstanceProfile)
insIAMInstanceProfile = lens _insIAMInstanceProfile (\ s a -> s{_insIAMInstanceProfile = a})

-- | The private IPv4 address assigned to the instance.
insPrivateIPAddress :: Lens' Instance (Maybe Text)
insPrivateIPAddress = lens _insPrivateIPAddress (\ s a -> s{_insPrivateIPAddress = a})

-- | The metadata options for the instance.
insMetadataOptions :: Lens' Instance (Maybe InstanceMetadataOptionsResponse)
insMetadataOptions = lens _insMetadataOptions (\ s a -> s{_insMetadataOptions = a})

-- | The product codes attached to this instance, if applicable.
insProductCodes :: Lens' Instance [ProductCode]
insProductCodes = lens _insProductCodes (\ s a -> s{_insProductCodes = a}) . _Default . _Coerce

-- | If the request is a Spot Instance request, the ID of the request.
insSpotInstanceRequestId :: Lens' Instance (Maybe Text)
insSpotInstanceRequestId = lens _insSpotInstanceRequestId (\ s a -> s{_insSpotInstanceRequestId = a})

-- | The license configurations.
insLicenses :: Lens' Instance [LicenseConfiguration]
insLicenses = lens _insLicenses (\ s a -> s{_insLicenses = a}) . _Default . _Coerce

-- | The elastic inference accelerator associated with the instance.
insElasticInferenceAcceleratorAssociations :: Lens' Instance [ElasticInferenceAcceleratorAssociation]
insElasticInferenceAcceleratorAssociations = lens _insElasticInferenceAcceleratorAssociations (\ s a -> s{_insElasticInferenceAcceleratorAssociations = a}) . _Default . _Coerce

-- | (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the @running@ state.  [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.
insPrivateDNSName :: Lens' Instance (Maybe Text)
insPrivateDNSName = lens _insPrivateDNSName (\ s a -> s{_insPrivateDNSName = a})

-- | The reason for the most recent state transition.
insStateReason :: Lens' Instance (Maybe StateReason)
insStateReason = lens _insStateReason (\ s a -> s{_insStateReason = a})

-- | Any block device mapping entries for the instance.
insBlockDeviceMappings :: Lens' Instance [InstanceBlockDeviceMapping]
insBlockDeviceMappings = lens _insBlockDeviceMappings (\ s a -> s{_insBlockDeviceMappings = a}) . _Default . _Coerce

-- | The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable. A Carrier IP address only applies to an instance launched in a subnet associated with a Wavelength Zone.
insPublicIPAddress :: Lens' Instance (Maybe Text)
insPublicIPAddress = lens _insPublicIPAddress (\ s a -> s{_insPublicIPAddress = a})

-- | Any tags assigned to the instance.
insTags :: Lens' Instance [Tag]
insTags = lens _insTags (\ s a -> s{_insTags = a}) . _Default . _Coerce

-- | The ID of the instance.
insInstanceId :: Lens' Instance Text
insInstanceId = lens _insInstanceId (\ s a -> s{_insInstanceId = a})

-- | The ID of the AMI used to launch the instance.
insImageId :: Lens' Instance Text
insImageId = lens _insImageId (\ s a -> s{_insImageId = a})

-- | The AMI launch index, which can be used to find this instance in the launch group.
insAMILaunchIndex :: Lens' Instance Int
insAMILaunchIndex = lens _insAMILaunchIndex (\ s a -> s{_insAMILaunchIndex = a})

-- | The instance type.
insInstanceType :: Lens' Instance InstanceType
insInstanceType = lens _insInstanceType (\ s a -> s{_insInstanceType = a})

-- | The time the instance was launched.
insLaunchTime :: Lens' Instance UTCTime
insLaunchTime = lens _insLaunchTime (\ s a -> s{_insLaunchTime = a}) . _Time

-- | The location where the instance launched, if applicable.
insPlacement :: Lens' Instance Placement
insPlacement = lens _insPlacement (\ s a -> s{_insPlacement = a})

-- | The monitoring for the instance.
insMonitoring :: Lens' Instance Monitoring
insMonitoring = lens _insMonitoring (\ s a -> s{_insMonitoring = a})

-- | The architecture of the image.
insArchitecture :: Lens' Instance ArchitectureValues
insArchitecture = lens _insArchitecture (\ s a -> s{_insArchitecture = a})

-- | The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
insRootDeviceType :: Lens' Instance DeviceType
insRootDeviceType = lens _insRootDeviceType (\ s a -> s{_insRootDeviceType = a})

-- | The virtualization type of the instance.
insVirtualizationType :: Lens' Instance VirtualizationType
insVirtualizationType = lens _insVirtualizationType (\ s a -> s{_insVirtualizationType = a})

-- | The hypervisor type of the instance. The value @xen@ is used for both Xen and Nitro hypervisors.
insHypervisor :: Lens' Instance HypervisorType
insHypervisor = lens _insHypervisor (\ s a -> s{_insHypervisor = a})

-- | The current state of the instance.
insState :: Lens' Instance InstanceState
insState = lens _insState (\ s a -> s{_insState = a})

instance FromXML Instance where
        parseXML x
          = Instance' <$>
              (x .@? "dnsName") <*> (x .@? "platform") <*>
                (x .@? "groupSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "clientToken")
                <*> (x .@? "enaSupport")
                <*> (x .@? "sourceDestCheck")
                <*>
                (x .@? "elasticGpuAssociationSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpcId")
                <*> (x .@? "keyName")
                <*>
                (x .@? "networkInterfaceSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "outpostArn")
                <*> (x .@? "enclaveOptions")
                <*> (x .@? "ramdiskId")
                <*> (x .@? "cpuOptions")
                <*> (x .@? "subnetId")
                <*> (x .@? "kernelId")
                <*> (x .@? "rootDeviceName")
                <*> (x .@? "capacityReservationId")
                <*> (x .@? "capacityReservationSpecification")
                <*> (x .@? "sriovNetSupport")
                <*> (x .@? "ebsOptimized")
                <*> (x .@? "reason")
                <*> (x .@? "hibernationOptions")
                <*> (x .@? "instanceLifecycle")
                <*> (x .@? "iamInstanceProfile")
                <*> (x .@? "privateIpAddress")
                <*> (x .@? "metadataOptions")
                <*>
                (x .@? "productCodes" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "spotInstanceRequestId")
                <*>
                (x .@? "licenseSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "elasticInferenceAcceleratorAssociationSet"
                   .!@ mempty
                   >>= may (parseXMLList "item"))
                <*> (x .@? "privateDnsName")
                <*> (x .@? "stateReason")
                <*>
                (x .@? "blockDeviceMapping" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "ipAddress")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@ "instanceId")
                <*> (x .@ "imageId")
                <*> (x .@ "amiLaunchIndex")
                <*> (x .@ "instanceType")
                <*> (x .@ "launchTime")
                <*> (x .@ "placement")
                <*> (x .@ "monitoring")
                <*> (x .@ "architecture")
                <*> (x .@ "rootDeviceType")
                <*> (x .@ "virtualizationType")
                <*> (x .@ "hypervisor")
                <*> (x .@ "instanceState")

instance Hashable Instance where

instance NFData Instance where

-- | Describes a block device mapping.
--
--
--
-- /See:/ 'instanceBlockDeviceMapping' smart constructor.
data InstanceBlockDeviceMapping = InstanceBlockDeviceMapping'
  { _ibdmEBS        :: !(Maybe EBSInstanceBlockDevice)
  , _ibdmDeviceName :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceBlockDeviceMapping' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ibdmEBS' - Parameters used to automatically set up EBS volumes when the instance is launched.
--
-- * 'ibdmDeviceName' - The device name (for example, @/dev/sdh@ or @xvdh@ ).
instanceBlockDeviceMapping
    :: InstanceBlockDeviceMapping
instanceBlockDeviceMapping =
  InstanceBlockDeviceMapping' {_ibdmEBS = Nothing, _ibdmDeviceName = Nothing}


-- | Parameters used to automatically set up EBS volumes when the instance is launched.
ibdmEBS :: Lens' InstanceBlockDeviceMapping (Maybe EBSInstanceBlockDevice)
ibdmEBS = lens _ibdmEBS (\ s a -> s{_ibdmEBS = a})

-- | The device name (for example, @/dev/sdh@ or @xvdh@ ).
ibdmDeviceName :: Lens' InstanceBlockDeviceMapping (Maybe Text)
ibdmDeviceName = lens _ibdmDeviceName (\ s a -> s{_ibdmDeviceName = a})

instance FromXML InstanceBlockDeviceMapping where
        parseXML x
          = InstanceBlockDeviceMapping' <$>
              (x .@? "ebs") <*> (x .@? "deviceName")

instance Hashable InstanceBlockDeviceMapping where

instance NFData InstanceBlockDeviceMapping where

-- | Describes a block device mapping entry.
--
--
--
-- /See:/ 'instanceBlockDeviceMappingSpecification' smart constructor.
data InstanceBlockDeviceMappingSpecification = InstanceBlockDeviceMappingSpecification'
  { _ibdmsVirtualName :: !(Maybe Text)
  , _ibdmsNoDevice    :: !(Maybe Text)
  , _ibdmsEBS         :: !(Maybe EBSInstanceBlockDeviceSpecification)
  , _ibdmsDeviceName  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceBlockDeviceMappingSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ibdmsVirtualName' - The virtual device name.
--
-- * 'ibdmsNoDevice' - suppress the specified device included in the block device mapping.
--
-- * 'ibdmsEBS' - Parameters used to automatically set up EBS volumes when the instance is launched.
--
-- * 'ibdmsDeviceName' - The device name (for example, @/dev/sdh@ or @xvdh@ ).
instanceBlockDeviceMappingSpecification
    :: InstanceBlockDeviceMappingSpecification
instanceBlockDeviceMappingSpecification =
  InstanceBlockDeviceMappingSpecification'
    { _ibdmsVirtualName = Nothing
    , _ibdmsNoDevice = Nothing
    , _ibdmsEBS = Nothing
    , _ibdmsDeviceName = Nothing
    }


-- | The virtual device name.
ibdmsVirtualName :: Lens' InstanceBlockDeviceMappingSpecification (Maybe Text)
ibdmsVirtualName = lens _ibdmsVirtualName (\ s a -> s{_ibdmsVirtualName = a})

-- | suppress the specified device included in the block device mapping.
ibdmsNoDevice :: Lens' InstanceBlockDeviceMappingSpecification (Maybe Text)
ibdmsNoDevice = lens _ibdmsNoDevice (\ s a -> s{_ibdmsNoDevice = a})

-- | Parameters used to automatically set up EBS volumes when the instance is launched.
ibdmsEBS :: Lens' InstanceBlockDeviceMappingSpecification (Maybe EBSInstanceBlockDeviceSpecification)
ibdmsEBS = lens _ibdmsEBS (\ s a -> s{_ibdmsEBS = a})

-- | The device name (for example, @/dev/sdh@ or @xvdh@ ).
ibdmsDeviceName :: Lens' InstanceBlockDeviceMappingSpecification (Maybe Text)
ibdmsDeviceName = lens _ibdmsDeviceName (\ s a -> s{_ibdmsDeviceName = a})

instance Hashable
           InstanceBlockDeviceMappingSpecification
         where

instance NFData
           InstanceBlockDeviceMappingSpecification
         where

instance ToQuery
           InstanceBlockDeviceMappingSpecification
         where
        toQuery InstanceBlockDeviceMappingSpecification'{..}
          = mconcat
              ["VirtualName" =: _ibdmsVirtualName,
               "NoDevice" =: _ibdmsNoDevice, "Ebs" =: _ibdmsEBS,
               "DeviceName" =: _ibdmsDeviceName]

-- | Information about the number of instances that can be launched onto the Dedicated Host.
--
--
--
-- /See:/ 'instanceCapacity' smart constructor.
data InstanceCapacity = InstanceCapacity'
  { _icAvailableCapacity :: !(Maybe Int)
  , _icInstanceType      :: !(Maybe Text)
  , _icTotalCapacity     :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceCapacity' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'icAvailableCapacity' - The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.
--
-- * 'icInstanceType' - The instance type supported by the Dedicated Host.
--
-- * 'icTotalCapacity' - The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.
instanceCapacity
    :: InstanceCapacity
instanceCapacity =
  InstanceCapacity'
    { _icAvailableCapacity = Nothing
    , _icInstanceType = Nothing
    , _icTotalCapacity = Nothing
    }


-- | The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.
icAvailableCapacity :: Lens' InstanceCapacity (Maybe Int)
icAvailableCapacity = lens _icAvailableCapacity (\ s a -> s{_icAvailableCapacity = a})

-- | The instance type supported by the Dedicated Host.
icInstanceType :: Lens' InstanceCapacity (Maybe Text)
icInstanceType = lens _icInstanceType (\ s a -> s{_icInstanceType = a})

-- | The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.
icTotalCapacity :: Lens' InstanceCapacity (Maybe Int)
icTotalCapacity = lens _icTotalCapacity (\ s a -> s{_icTotalCapacity = a})

instance FromXML InstanceCapacity where
        parseXML x
          = InstanceCapacity' <$>
              (x .@? "availableCapacity") <*>
                (x .@? "instanceType")
                <*> (x .@? "totalCapacity")

instance Hashable InstanceCapacity where

instance NFData InstanceCapacity where

-- | Describes a Reserved Instance listing state.
--
--
--
-- /See:/ 'instanceCount' smart constructor.
data InstanceCount = InstanceCount'
  { _icState         :: !(Maybe ListingState)
  , _icInstanceCount :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceCount' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'icState' - The states of the listed Reserved Instances.
--
-- * 'icInstanceCount' - The number of listed Reserved Instances in the state specified by the @state@ .
instanceCount
    :: InstanceCount
instanceCount = InstanceCount' {_icState = Nothing, _icInstanceCount = Nothing}


-- | The states of the listed Reserved Instances.
icState :: Lens' InstanceCount (Maybe ListingState)
icState = lens _icState (\ s a -> s{_icState = a})

-- | The number of listed Reserved Instances in the state specified by the @state@ .
icInstanceCount :: Lens' InstanceCount (Maybe Int)
icInstanceCount = lens _icInstanceCount (\ s a -> s{_icInstanceCount = a})

instance FromXML InstanceCount where
        parseXML x
          = InstanceCount' <$>
              (x .@? "state") <*> (x .@? "instanceCount")

instance Hashable InstanceCount where

instance NFData InstanceCount where

-- | Describes the credit option for CPU usage of a burstable performance instance.
--
--
--
-- /See:/ 'instanceCreditSpecification' smart constructor.
data InstanceCreditSpecification = InstanceCreditSpecification'
  { _icsInstanceId :: !(Maybe Text)
  , _icsCPUCredits :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceCreditSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'icsInstanceId' - The ID of the instance.
--
-- * 'icsCPUCredits' - The credit option for CPU usage of the instance. Valid values are @standard@ and @unlimited@ .
instanceCreditSpecification
    :: InstanceCreditSpecification
instanceCreditSpecification =
  InstanceCreditSpecification'
    {_icsInstanceId = Nothing, _icsCPUCredits = Nothing}


-- | The ID of the instance.
icsInstanceId :: Lens' InstanceCreditSpecification (Maybe Text)
icsInstanceId = lens _icsInstanceId (\ s a -> s{_icsInstanceId = a})

-- | The credit option for CPU usage of the instance. Valid values are @standard@ and @unlimited@ .
icsCPUCredits :: Lens' InstanceCreditSpecification (Maybe Text)
icsCPUCredits = lens _icsCPUCredits (\ s a -> s{_icsCPUCredits = a})

instance FromXML InstanceCreditSpecification where
        parseXML x
          = InstanceCreditSpecification' <$>
              (x .@? "instanceId") <*> (x .@? "cpuCredits")

instance Hashable InstanceCreditSpecification where

instance NFData InstanceCreditSpecification where

-- | Describes the credit option for CPU usage of a burstable performance instance.
--
--
--
-- /See:/ 'instanceCreditSpecificationRequest' smart constructor.
data InstanceCreditSpecificationRequest = InstanceCreditSpecificationRequest'
  { _icsrInstanceId :: !(Maybe Text)
  , _icsrCPUCredits :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceCreditSpecificationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'icsrInstanceId' - The ID of the instance.
--
-- * 'icsrCPUCredits' - The credit option for CPU usage of the instance. Valid values are @standard@ and @unlimited@ .
instanceCreditSpecificationRequest
    :: InstanceCreditSpecificationRequest
instanceCreditSpecificationRequest =
  InstanceCreditSpecificationRequest'
    {_icsrInstanceId = Nothing, _icsrCPUCredits = Nothing}


-- | The ID of the instance.
icsrInstanceId :: Lens' InstanceCreditSpecificationRequest (Maybe Text)
icsrInstanceId = lens _icsrInstanceId (\ s a -> s{_icsrInstanceId = a})

-- | The credit option for CPU usage of the instance. Valid values are @standard@ and @unlimited@ .
icsrCPUCredits :: Lens' InstanceCreditSpecificationRequest (Maybe Text)
icsrCPUCredits = lens _icsrCPUCredits (\ s a -> s{_icsrCPUCredits = a})

instance Hashable InstanceCreditSpecificationRequest
         where

instance NFData InstanceCreditSpecificationRequest
         where

instance ToQuery InstanceCreditSpecificationRequest
         where
        toQuery InstanceCreditSpecificationRequest'{..}
          = mconcat
              ["InstanceId" =: _icsrInstanceId,
               "CpuCredits" =: _icsrCPUCredits]

-- | Describes an instance to export.
--
--
--
-- /See:/ 'instanceExportDetails' smart constructor.
data InstanceExportDetails = InstanceExportDetails'
  { _iedTargetEnvironment :: !(Maybe ExportEnvironment)
  , _iedInstanceId        :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceExportDetails' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iedTargetEnvironment' - The target virtualization environment.
--
-- * 'iedInstanceId' - The ID of the resource being exported.
instanceExportDetails
    :: InstanceExportDetails
instanceExportDetails =
  InstanceExportDetails'
    {_iedTargetEnvironment = Nothing, _iedInstanceId = Nothing}


-- | The target virtualization environment.
iedTargetEnvironment :: Lens' InstanceExportDetails (Maybe ExportEnvironment)
iedTargetEnvironment = lens _iedTargetEnvironment (\ s a -> s{_iedTargetEnvironment = a})

-- | The ID of the resource being exported.
iedInstanceId :: Lens' InstanceExportDetails (Maybe Text)
iedInstanceId = lens _iedInstanceId (\ s a -> s{_iedInstanceId = a})

instance FromXML InstanceExportDetails where
        parseXML x
          = InstanceExportDetails' <$>
              (x .@? "targetEnvironment") <*> (x .@? "instanceId")

instance Hashable InstanceExportDetails where

instance NFData InstanceExportDetails where

-- | Describes the default credit option for CPU usage of a burstable performance instance family.
--
--
--
-- /See:/ 'instanceFamilyCreditSpecification' smart constructor.
data InstanceFamilyCreditSpecification = InstanceFamilyCreditSpecification'
  { _ifcsInstanceFamily :: !(Maybe UnlimitedSupportedInstanceFamily)
  , _ifcsCPUCredits     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceFamilyCreditSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ifcsInstanceFamily' - The instance family.
--
-- * 'ifcsCPUCredits' - The default credit option for CPU usage of the instance family. Valid values are @standard@ and @unlimited@ .
instanceFamilyCreditSpecification
    :: InstanceFamilyCreditSpecification
instanceFamilyCreditSpecification =
  InstanceFamilyCreditSpecification'
    {_ifcsInstanceFamily = Nothing, _ifcsCPUCredits = Nothing}


-- | The instance family.
ifcsInstanceFamily :: Lens' InstanceFamilyCreditSpecification (Maybe UnlimitedSupportedInstanceFamily)
ifcsInstanceFamily = lens _ifcsInstanceFamily (\ s a -> s{_ifcsInstanceFamily = a})

-- | The default credit option for CPU usage of the instance family. Valid values are @standard@ and @unlimited@ .
ifcsCPUCredits :: Lens' InstanceFamilyCreditSpecification (Maybe Text)
ifcsCPUCredits = lens _ifcsCPUCredits (\ s a -> s{_ifcsCPUCredits = a})

instance FromXML InstanceFamilyCreditSpecification
         where
        parseXML x
          = InstanceFamilyCreditSpecification' <$>
              (x .@? "instanceFamily") <*> (x .@? "cpuCredits")

instance Hashable InstanceFamilyCreditSpecification
         where

instance NFData InstanceFamilyCreditSpecification
         where

-- | Describes an IPv6 address.
--
--
--
-- /See:/ 'instanceIPv6Address' smart constructor.
newtype InstanceIPv6Address = InstanceIPv6Address'
  { _iiaIPv6Address :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceIPv6Address' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iiaIPv6Address' - The IPv6 address.
instanceIPv6Address
    :: InstanceIPv6Address
instanceIPv6Address = InstanceIPv6Address' {_iiaIPv6Address = Nothing}


-- | The IPv6 address.
iiaIPv6Address :: Lens' InstanceIPv6Address (Maybe Text)
iiaIPv6Address = lens _iiaIPv6Address (\ s a -> s{_iiaIPv6Address = a})

instance FromXML InstanceIPv6Address where
        parseXML x
          = InstanceIPv6Address' <$> (x .@? "ipv6Address")

instance Hashable InstanceIPv6Address where

instance NFData InstanceIPv6Address where

instance ToQuery InstanceIPv6Address where
        toQuery InstanceIPv6Address'{..}
          = mconcat ["Ipv6Address" =: _iiaIPv6Address]

-- | Describes an IPv6 address.
--
--
--
-- /See:/ 'instanceIPv6AddressRequest' smart constructor.
newtype InstanceIPv6AddressRequest = InstanceIPv6AddressRequest'
  { _iiarIPv6Address :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceIPv6AddressRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iiarIPv6Address' - The IPv6 address.
instanceIPv6AddressRequest
    :: InstanceIPv6AddressRequest
instanceIPv6AddressRequest =
  InstanceIPv6AddressRequest' {_iiarIPv6Address = Nothing}


-- | The IPv6 address.
iiarIPv6Address :: Lens' InstanceIPv6AddressRequest (Maybe Text)
iiarIPv6Address = lens _iiarIPv6Address (\ s a -> s{_iiarIPv6Address = a})

instance Hashable InstanceIPv6AddressRequest where

instance NFData InstanceIPv6AddressRequest where

instance ToQuery InstanceIPv6AddressRequest where
        toQuery InstanceIPv6AddressRequest'{..}
          = mconcat ["Ipv6Address" =: _iiarIPv6Address]

-- | Describes the market (purchasing) option for the instances.
--
--
--
-- /See:/ 'instanceMarketOptionsRequest' smart constructor.
data InstanceMarketOptionsRequest = InstanceMarketOptionsRequest'
  { _imorMarketType  :: !(Maybe MarketType)
  , _imorSpotOptions :: !(Maybe SpotMarketOptions)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceMarketOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'imorMarketType' - The market type.
--
-- * 'imorSpotOptions' - The options for Spot Instances.
instanceMarketOptionsRequest
    :: InstanceMarketOptionsRequest
instanceMarketOptionsRequest =
  InstanceMarketOptionsRequest'
    {_imorMarketType = Nothing, _imorSpotOptions = Nothing}


-- | The market type.
imorMarketType :: Lens' InstanceMarketOptionsRequest (Maybe MarketType)
imorMarketType = lens _imorMarketType (\ s a -> s{_imorMarketType = a})

-- | The options for Spot Instances.
imorSpotOptions :: Lens' InstanceMarketOptionsRequest (Maybe SpotMarketOptions)
imorSpotOptions = lens _imorSpotOptions (\ s a -> s{_imorSpotOptions = a})

instance Hashable InstanceMarketOptionsRequest where

instance NFData InstanceMarketOptionsRequest where

instance ToQuery InstanceMarketOptionsRequest where
        toQuery InstanceMarketOptionsRequest'{..}
          = mconcat
              ["MarketType" =: _imorMarketType,
               "SpotOptions" =: _imorSpotOptions]

-- | The metadata options for the instance.
--
--
--
-- /See:/ 'instanceMetadataOptionsRequest' smart constructor.
data InstanceMetadataOptionsRequest = InstanceMetadataOptionsRequest'
  { _imorHTTPEndpoint            :: !(Maybe InstanceMetadataEndpointState)
  , _imorHTTPPutResponseHopLimit :: !(Maybe Int)
  , _imorHTTPTokens              :: !(Maybe HTTPTokensState)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceMetadataOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'imorHTTPEndpoint' - This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is @enabled@ .
--
-- * 'imorHTTPPutResponseHopLimit' - The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
--
-- * 'imorHTTPTokens' - The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is @optional@ . If the state is @optional@ , you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is @required@ , you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
instanceMetadataOptionsRequest
    :: InstanceMetadataOptionsRequest
instanceMetadataOptionsRequest =
  InstanceMetadataOptionsRequest'
    { _imorHTTPEndpoint = Nothing
    , _imorHTTPPutResponseHopLimit = Nothing
    , _imorHTTPTokens = Nothing
    }


-- | This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is @enabled@ .
imorHTTPEndpoint :: Lens' InstanceMetadataOptionsRequest (Maybe InstanceMetadataEndpointState)
imorHTTPEndpoint = lens _imorHTTPEndpoint (\ s a -> s{_imorHTTPEndpoint = a})

-- | The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
imorHTTPPutResponseHopLimit :: Lens' InstanceMetadataOptionsRequest (Maybe Int)
imorHTTPPutResponseHopLimit = lens _imorHTTPPutResponseHopLimit (\ s a -> s{_imorHTTPPutResponseHopLimit = a})

-- | The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is @optional@ . If the state is @optional@ , you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is @required@ , you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
imorHTTPTokens :: Lens' InstanceMetadataOptionsRequest (Maybe HTTPTokensState)
imorHTTPTokens = lens _imorHTTPTokens (\ s a -> s{_imorHTTPTokens = a})

instance Hashable InstanceMetadataOptionsRequest
         where

instance NFData InstanceMetadataOptionsRequest where

instance ToQuery InstanceMetadataOptionsRequest where
        toQuery InstanceMetadataOptionsRequest'{..}
          = mconcat
              ["HttpEndpoint" =: _imorHTTPEndpoint,
               "HttpPutResponseHopLimit" =:
                 _imorHTTPPutResponseHopLimit,
               "HttpTokens" =: _imorHTTPTokens]

-- | The metadata options for the instance.
--
--
--
-- /See:/ 'instanceMetadataOptionsResponse' smart constructor.
data InstanceMetadataOptionsResponse = InstanceMetadataOptionsResponse'
  { _imoState                   :: !(Maybe InstanceMetadataOptionsState)
  , _imoHTTPEndpoint            :: !(Maybe InstanceMetadataEndpointState)
  , _imoHTTPPutResponseHopLimit :: !(Maybe Int)
  , _imoHTTPTokens              :: !(Maybe HTTPTokensState)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceMetadataOptionsResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'imoState' - The state of the metadata option changes. @pending@ - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection. @applied@ - The metadata options have been successfully applied on the instance.
--
-- * 'imoHTTPEndpoint' - This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is @enabled@ .
--
-- * 'imoHTTPPutResponseHopLimit' - The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
--
-- * 'imoHTTPTokens' - The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is @optional@ . If the state is @optional@ , you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is @required@ , you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials; the version 1.0 credentials are not available.
instanceMetadataOptionsResponse
    :: InstanceMetadataOptionsResponse
instanceMetadataOptionsResponse =
  InstanceMetadataOptionsResponse'
    { _imoState = Nothing
    , _imoHTTPEndpoint = Nothing
    , _imoHTTPPutResponseHopLimit = Nothing
    , _imoHTTPTokens = Nothing
    }


-- | The state of the metadata option changes. @pending@ - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection. @applied@ - The metadata options have been successfully applied on the instance.
imoState :: Lens' InstanceMetadataOptionsResponse (Maybe InstanceMetadataOptionsState)
imoState = lens _imoState (\ s a -> s{_imoState = a})

-- | This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is @enabled@ .
imoHTTPEndpoint :: Lens' InstanceMetadataOptionsResponse (Maybe InstanceMetadataEndpointState)
imoHTTPEndpoint = lens _imoHTTPEndpoint (\ s a -> s{_imoHTTPEndpoint = a})

-- | The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
imoHTTPPutResponseHopLimit :: Lens' InstanceMetadataOptionsResponse (Maybe Int)
imoHTTPPutResponseHopLimit = lens _imoHTTPPutResponseHopLimit (\ s a -> s{_imoHTTPPutResponseHopLimit = a})

-- | The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is @optional@ . If the state is @optional@ , you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is @required@ , you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials; the version 1.0 credentials are not available.
imoHTTPTokens :: Lens' InstanceMetadataOptionsResponse (Maybe HTTPTokensState)
imoHTTPTokens = lens _imoHTTPTokens (\ s a -> s{_imoHTTPTokens = a})

instance FromXML InstanceMetadataOptionsResponse
         where
        parseXML x
          = InstanceMetadataOptionsResponse' <$>
              (x .@? "state") <*> (x .@? "httpEndpoint") <*>
                (x .@? "httpPutResponseHopLimit")
                <*> (x .@? "httpTokens")

instance Hashable InstanceMetadataOptionsResponse
         where

instance NFData InstanceMetadataOptionsResponse where

-- | Describes the monitoring of an instance.
--
--
--
-- /See:/ 'instanceMonitoring' smart constructor.
data InstanceMonitoring = InstanceMonitoring'
  { _imInstanceId :: !(Maybe Text)
  , _imMonitoring :: !(Maybe Monitoring)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceMonitoring' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'imInstanceId' - The ID of the instance.
--
-- * 'imMonitoring' - The monitoring for the instance.
instanceMonitoring
    :: InstanceMonitoring
instanceMonitoring =
  InstanceMonitoring' {_imInstanceId = Nothing, _imMonitoring = Nothing}


-- | The ID of the instance.
imInstanceId :: Lens' InstanceMonitoring (Maybe Text)
imInstanceId = lens _imInstanceId (\ s a -> s{_imInstanceId = a})

-- | The monitoring for the instance.
imMonitoring :: Lens' InstanceMonitoring (Maybe Monitoring)
imMonitoring = lens _imMonitoring (\ s a -> s{_imMonitoring = a})

instance FromXML InstanceMonitoring where
        parseXML x
          = InstanceMonitoring' <$>
              (x .@? "instanceId") <*> (x .@? "monitoring")

instance Hashable InstanceMonitoring where

instance NFData InstanceMonitoring where

-- | Describes a network interface.
--
--
--
-- /See:/ 'instanceNetworkInterface' smart constructor.
data InstanceNetworkInterface = InstanceNetworkInterface'
  { _iniGroups             :: !(Maybe [GroupIdentifier])
  , _iniStatus             :: !(Maybe NetworkInterfaceStatus)
  , _iniPrivateIPAddresses :: !(Maybe [InstancePrivateIPAddress])
  , _iniSourceDestCheck    :: !(Maybe Bool)
  , _iniInterfaceType      :: !(Maybe Text)
  , _iniVPCId              :: !(Maybe Text)
  , _iniNetworkInterfaceId :: !(Maybe Text)
  , _iniSubnetId           :: !(Maybe Text)
  , _iniMACAddress         :: !(Maybe Text)
  , _iniAttachment         :: !(Maybe InstanceNetworkInterfaceAttachment)
  , _iniOwnerId            :: !(Maybe Text)
  , _iniPrivateIPAddress   :: !(Maybe Text)
  , _iniPrivateDNSName     :: !(Maybe Text)
  , _iniDescription        :: !(Maybe Text)
  , _iniAssociation        :: !(Maybe InstanceNetworkInterfaceAssociation)
  , _iniIPv6Addresses      :: !(Maybe [InstanceIPv6Address])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceNetworkInterface' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iniGroups' - One or more security groups.
--
-- * 'iniStatus' - The status of the network interface.
--
-- * 'iniPrivateIPAddresses' - One or more private IPv4 addresses associated with the network interface.
--
-- * 'iniSourceDestCheck' - Indicates whether to validate network traffic to or from this network interface.
--
-- * 'iniInterfaceType' - Describes the type of network interface. Valid values: @interface@ | @efa@
--
-- * 'iniVPCId' - The ID of the VPC.
--
-- * 'iniNetworkInterfaceId' - The ID of the network interface.
--
-- * 'iniSubnetId' - The ID of the subnet.
--
-- * 'iniMACAddress' - The MAC address.
--
-- * 'iniAttachment' - The network interface attachment.
--
-- * 'iniOwnerId' - The ID of the AWS account that created the network interface.
--
-- * 'iniPrivateIPAddress' - The IPv4 address of the network interface within the subnet.
--
-- * 'iniPrivateDNSName' - The private DNS name.
--
-- * 'iniDescription' - The description.
--
-- * 'iniAssociation' - The association information for an Elastic IPv4 associated with the network interface.
--
-- * 'iniIPv6Addresses' - One or more IPv6 addresses associated with the network interface.
instanceNetworkInterface
    :: InstanceNetworkInterface
instanceNetworkInterface =
  InstanceNetworkInterface'
    { _iniGroups = Nothing
    , _iniStatus = Nothing
    , _iniPrivateIPAddresses = Nothing
    , _iniSourceDestCheck = Nothing
    , _iniInterfaceType = Nothing
    , _iniVPCId = Nothing
    , _iniNetworkInterfaceId = Nothing
    , _iniSubnetId = Nothing
    , _iniMACAddress = Nothing
    , _iniAttachment = Nothing
    , _iniOwnerId = Nothing
    , _iniPrivateIPAddress = Nothing
    , _iniPrivateDNSName = Nothing
    , _iniDescription = Nothing
    , _iniAssociation = Nothing
    , _iniIPv6Addresses = Nothing
    }


-- | One or more security groups.
iniGroups :: Lens' InstanceNetworkInterface [GroupIdentifier]
iniGroups = lens _iniGroups (\ s a -> s{_iniGroups = a}) . _Default . _Coerce

-- | The status of the network interface.
iniStatus :: Lens' InstanceNetworkInterface (Maybe NetworkInterfaceStatus)
iniStatus = lens _iniStatus (\ s a -> s{_iniStatus = a})

-- | One or more private IPv4 addresses associated with the network interface.
iniPrivateIPAddresses :: Lens' InstanceNetworkInterface [InstancePrivateIPAddress]
iniPrivateIPAddresses = lens _iniPrivateIPAddresses (\ s a -> s{_iniPrivateIPAddresses = a}) . _Default . _Coerce

-- | Indicates whether to validate network traffic to or from this network interface.
iniSourceDestCheck :: Lens' InstanceNetworkInterface (Maybe Bool)
iniSourceDestCheck = lens _iniSourceDestCheck (\ s a -> s{_iniSourceDestCheck = a})

-- | Describes the type of network interface. Valid values: @interface@ | @efa@
iniInterfaceType :: Lens' InstanceNetworkInterface (Maybe Text)
iniInterfaceType = lens _iniInterfaceType (\ s a -> s{_iniInterfaceType = a})

-- | The ID of the VPC.
iniVPCId :: Lens' InstanceNetworkInterface (Maybe Text)
iniVPCId = lens _iniVPCId (\ s a -> s{_iniVPCId = a})

-- | The ID of the network interface.
iniNetworkInterfaceId :: Lens' InstanceNetworkInterface (Maybe Text)
iniNetworkInterfaceId = lens _iniNetworkInterfaceId (\ s a -> s{_iniNetworkInterfaceId = a})

-- | The ID of the subnet.
iniSubnetId :: Lens' InstanceNetworkInterface (Maybe Text)
iniSubnetId = lens _iniSubnetId (\ s a -> s{_iniSubnetId = a})

-- | The MAC address.
iniMACAddress :: Lens' InstanceNetworkInterface (Maybe Text)
iniMACAddress = lens _iniMACAddress (\ s a -> s{_iniMACAddress = a})

-- | The network interface attachment.
iniAttachment :: Lens' InstanceNetworkInterface (Maybe InstanceNetworkInterfaceAttachment)
iniAttachment = lens _iniAttachment (\ s a -> s{_iniAttachment = a})

-- | The ID of the AWS account that created the network interface.
iniOwnerId :: Lens' InstanceNetworkInterface (Maybe Text)
iniOwnerId = lens _iniOwnerId (\ s a -> s{_iniOwnerId = a})

-- | The IPv4 address of the network interface within the subnet.
iniPrivateIPAddress :: Lens' InstanceNetworkInterface (Maybe Text)
iniPrivateIPAddress = lens _iniPrivateIPAddress (\ s a -> s{_iniPrivateIPAddress = a})

-- | The private DNS name.
iniPrivateDNSName :: Lens' InstanceNetworkInterface (Maybe Text)
iniPrivateDNSName = lens _iniPrivateDNSName (\ s a -> s{_iniPrivateDNSName = a})

-- | The description.
iniDescription :: Lens' InstanceNetworkInterface (Maybe Text)
iniDescription = lens _iniDescription (\ s a -> s{_iniDescription = a})

-- | The association information for an Elastic IPv4 associated with the network interface.
iniAssociation :: Lens' InstanceNetworkInterface (Maybe InstanceNetworkInterfaceAssociation)
iniAssociation = lens _iniAssociation (\ s a -> s{_iniAssociation = a})

-- | One or more IPv6 addresses associated with the network interface.
iniIPv6Addresses :: Lens' InstanceNetworkInterface [InstanceIPv6Address]
iniIPv6Addresses = lens _iniIPv6Addresses (\ s a -> s{_iniIPv6Addresses = a}) . _Default . _Coerce

instance FromXML InstanceNetworkInterface where
        parseXML x
          = InstanceNetworkInterface' <$>
              (x .@? "groupSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "status")
                <*>
                (x .@? "privateIpAddressesSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "sourceDestCheck")
                <*> (x .@? "interfaceType")
                <*> (x .@? "vpcId")
                <*> (x .@? "networkInterfaceId")
                <*> (x .@? "subnetId")
                <*> (x .@? "macAddress")
                <*> (x .@? "attachment")
                <*> (x .@? "ownerId")
                <*> (x .@? "privateIpAddress")
                <*> (x .@? "privateDnsName")
                <*> (x .@? "description")
                <*> (x .@? "association")
                <*>
                (x .@? "ipv6AddressesSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable InstanceNetworkInterface where

instance NFData InstanceNetworkInterface where

-- | Describes association information for an Elastic IP address (IPv4).
--
--
--
-- /See:/ 'instanceNetworkInterfaceAssociation' smart constructor.
data InstanceNetworkInterfaceAssociation = InstanceNetworkInterfaceAssociation'
  { _iniaPublicDNSName :: !(Maybe Text)
  , _iniaCarrierIP     :: !(Maybe Text)
  , _iniaIPOwnerId     :: !(Maybe Text)
  , _iniaPublicIP      :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceNetworkInterfaceAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iniaPublicDNSName' - The public DNS name.
--
-- * 'iniaCarrierIP' - The carrier IP address associated with the network interface.
--
-- * 'iniaIPOwnerId' - The ID of the owner of the Elastic IP address.
--
-- * 'iniaPublicIP' - The public IP address or Elastic IP address bound to the network interface.
instanceNetworkInterfaceAssociation
    :: InstanceNetworkInterfaceAssociation
instanceNetworkInterfaceAssociation =
  InstanceNetworkInterfaceAssociation'
    { _iniaPublicDNSName = Nothing
    , _iniaCarrierIP = Nothing
    , _iniaIPOwnerId = Nothing
    , _iniaPublicIP = Nothing
    }


-- | The public DNS name.
iniaPublicDNSName :: Lens' InstanceNetworkInterfaceAssociation (Maybe Text)
iniaPublicDNSName = lens _iniaPublicDNSName (\ s a -> s{_iniaPublicDNSName = a})

-- | The carrier IP address associated with the network interface.
iniaCarrierIP :: Lens' InstanceNetworkInterfaceAssociation (Maybe Text)
iniaCarrierIP = lens _iniaCarrierIP (\ s a -> s{_iniaCarrierIP = a})

-- | The ID of the owner of the Elastic IP address.
iniaIPOwnerId :: Lens' InstanceNetworkInterfaceAssociation (Maybe Text)
iniaIPOwnerId = lens _iniaIPOwnerId (\ s a -> s{_iniaIPOwnerId = a})

-- | The public IP address or Elastic IP address bound to the network interface.
iniaPublicIP :: Lens' InstanceNetworkInterfaceAssociation (Maybe Text)
iniaPublicIP = lens _iniaPublicIP (\ s a -> s{_iniaPublicIP = a})

instance FromXML InstanceNetworkInterfaceAssociation
         where
        parseXML x
          = InstanceNetworkInterfaceAssociation' <$>
              (x .@? "publicDnsName") <*> (x .@? "carrierIp") <*>
                (x .@? "ipOwnerId")
                <*> (x .@? "publicIp")

instance Hashable InstanceNetworkInterfaceAssociation
         where

instance NFData InstanceNetworkInterfaceAssociation
         where

-- | Describes a network interface attachment.
--
--
--
-- /See:/ 'instanceNetworkInterfaceAttachment' smart constructor.
data InstanceNetworkInterfaceAttachment = InstanceNetworkInterfaceAttachment'
  { _iniaStatus              :: !(Maybe AttachmentStatus)
  , _iniaDeleteOnTermination :: !(Maybe Bool)
  , _iniaAttachmentId        :: !(Maybe Text)
  , _iniaNetworkCardIndex    :: !(Maybe Int)
  , _iniaAttachTime          :: !(Maybe ISO8601)
  , _iniaDeviceIndex         :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceNetworkInterfaceAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iniaStatus' - The attachment state.
--
-- * 'iniaDeleteOnTermination' - Indicates whether the network interface is deleted when the instance is terminated.
--
-- * 'iniaAttachmentId' - The ID of the network interface attachment.
--
-- * 'iniaNetworkCardIndex' - The index of the network card.
--
-- * 'iniaAttachTime' - The time stamp when the attachment initiated.
--
-- * 'iniaDeviceIndex' - The index of the device on the instance for the network interface attachment.
instanceNetworkInterfaceAttachment
    :: InstanceNetworkInterfaceAttachment
instanceNetworkInterfaceAttachment =
  InstanceNetworkInterfaceAttachment'
    { _iniaStatus = Nothing
    , _iniaDeleteOnTermination = Nothing
    , _iniaAttachmentId = Nothing
    , _iniaNetworkCardIndex = Nothing
    , _iniaAttachTime = Nothing
    , _iniaDeviceIndex = Nothing
    }


-- | The attachment state.
iniaStatus :: Lens' InstanceNetworkInterfaceAttachment (Maybe AttachmentStatus)
iniaStatus = lens _iniaStatus (\ s a -> s{_iniaStatus = a})

-- | Indicates whether the network interface is deleted when the instance is terminated.
iniaDeleteOnTermination :: Lens' InstanceNetworkInterfaceAttachment (Maybe Bool)
iniaDeleteOnTermination = lens _iniaDeleteOnTermination (\ s a -> s{_iniaDeleteOnTermination = a})

-- | The ID of the network interface attachment.
iniaAttachmentId :: Lens' InstanceNetworkInterfaceAttachment (Maybe Text)
iniaAttachmentId = lens _iniaAttachmentId (\ s a -> s{_iniaAttachmentId = a})

-- | The index of the network card.
iniaNetworkCardIndex :: Lens' InstanceNetworkInterfaceAttachment (Maybe Int)
iniaNetworkCardIndex = lens _iniaNetworkCardIndex (\ s a -> s{_iniaNetworkCardIndex = a})

-- | The time stamp when the attachment initiated.
iniaAttachTime :: Lens' InstanceNetworkInterfaceAttachment (Maybe UTCTime)
iniaAttachTime = lens _iniaAttachTime (\ s a -> s{_iniaAttachTime = a}) . mapping _Time

-- | The index of the device on the instance for the network interface attachment.
iniaDeviceIndex :: Lens' InstanceNetworkInterfaceAttachment (Maybe Int)
iniaDeviceIndex = lens _iniaDeviceIndex (\ s a -> s{_iniaDeviceIndex = a})

instance FromXML InstanceNetworkInterfaceAttachment
         where
        parseXML x
          = InstanceNetworkInterfaceAttachment' <$>
              (x .@? "status") <*> (x .@? "deleteOnTermination")
                <*> (x .@? "attachmentId")
                <*> (x .@? "networkCardIndex")
                <*> (x .@? "attachTime")
                <*> (x .@? "deviceIndex")

instance Hashable InstanceNetworkInterfaceAttachment
         where

instance NFData InstanceNetworkInterfaceAttachment
         where

-- | Describes a network interface.
--
--
--
-- /See:/ 'instanceNetworkInterfaceSpecification' smart constructor.
data InstanceNetworkInterfaceSpecification = InstanceNetworkInterfaceSpecification'
  { _inisGroups :: !(Maybe [Text])
  , _inisPrivateIPAddresses :: !(Maybe [PrivateIPAddressSpecification])
  , _inisDeleteOnTermination :: !(Maybe Bool)
  , _inisAssociateCarrierIPAddress :: !(Maybe Bool)
  , _inisAssociatePublicIPAddress :: !(Maybe Bool)
  , _inisInterfaceType :: !(Maybe Text)
  , _inisNetworkInterfaceId :: !(Maybe Text)
  , _inisSubnetId :: !(Maybe Text)
  , _inisIPv6AddressCount :: !(Maybe Int)
  , _inisNetworkCardIndex :: !(Maybe Int)
  , _inisPrivateIPAddress :: !(Maybe Text)
  , _inisSecondaryPrivateIPAddressCount :: !(Maybe Int)
  , _inisDescription :: !(Maybe Text)
  , _inisDeviceIndex :: !(Maybe Int)
  , _inisIPv6Addresses :: !(Maybe [InstanceIPv6Address])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceNetworkInterfaceSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'inisGroups' - The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
--
-- * 'inisPrivateIPAddresses' - One or more private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html RunInstances> request.
--
-- * 'inisDeleteOnTermination' - If set to @true@ , the interface is deleted when the instance is terminated. You can specify @true@ only if creating a new network interface when launching an instance.
--
-- * 'inisAssociateCarrierIPAddress' - Indicates whether to assign a carrier IP address to the network interface. You can only assign a carrier IP address to a network interface that is in a subnet in a Wavelength Zone. For more information about carrier IP addresses, see Carrier IP addresses in the AWS Wavelength Developer Guide.
--
-- * 'inisAssociatePublicIPAddress' - Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is @true@ .
--
-- * 'inisInterfaceType' - The type of network interface. To create an Elastic Fabric Adapter (EFA), specify @efa@ . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html Elastic Fabric Adapter> in the /Amazon Elastic Compute Cloud User Guide/ . If you are not creating an EFA, specify @interface@ or omit this parameter. Valid values: @interface@ | @efa@
--
-- * 'inisNetworkInterfaceId' - The ID of the network interface. If you are creating a Spot Fleet, omit this parameter because you can’t specify a network interface ID in a launch specification.
--
-- * 'inisSubnetId' - The ID of the subnet associated with the network interface. Applies only if creating a network interface when launching an instance.
--
-- * 'inisIPv6AddressCount' - A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
--
-- * 'inisNetworkCardIndex' - The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
--
-- * 'inisPrivateIPAddress' - The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html RunInstances> request.
--
-- * 'inisSecondaryPrivateIPAddressCount' - The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html RunInstances> request.
--
-- * 'inisDescription' - The description of the network interface. Applies only if creating a network interface when launching an instance.
--
-- * 'inisDeviceIndex' - The position of the network interface in the attachment order. A primary network interface has a device index of 0. If you specify a network interface when launching an instance, you must specify the device index.
--
-- * 'inisIPv6Addresses' - One or more IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
instanceNetworkInterfaceSpecification
    :: InstanceNetworkInterfaceSpecification
instanceNetworkInterfaceSpecification =
  InstanceNetworkInterfaceSpecification'
    { _inisGroups = Nothing
    , _inisPrivateIPAddresses = Nothing
    , _inisDeleteOnTermination = Nothing
    , _inisAssociateCarrierIPAddress = Nothing
    , _inisAssociatePublicIPAddress = Nothing
    , _inisInterfaceType = Nothing
    , _inisNetworkInterfaceId = Nothing
    , _inisSubnetId = Nothing
    , _inisIPv6AddressCount = Nothing
    , _inisNetworkCardIndex = Nothing
    , _inisPrivateIPAddress = Nothing
    , _inisSecondaryPrivateIPAddressCount = Nothing
    , _inisDescription = Nothing
    , _inisDeviceIndex = Nothing
    , _inisIPv6Addresses = Nothing
    }


-- | The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
inisGroups :: Lens' InstanceNetworkInterfaceSpecification [Text]
inisGroups = lens _inisGroups (\ s a -> s{_inisGroups = a}) . _Default . _Coerce

-- | One or more private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html RunInstances> request.
inisPrivateIPAddresses :: Lens' InstanceNetworkInterfaceSpecification [PrivateIPAddressSpecification]
inisPrivateIPAddresses = lens _inisPrivateIPAddresses (\ s a -> s{_inisPrivateIPAddresses = a}) . _Default . _Coerce

-- | If set to @true@ , the interface is deleted when the instance is terminated. You can specify @true@ only if creating a new network interface when launching an instance.
inisDeleteOnTermination :: Lens' InstanceNetworkInterfaceSpecification (Maybe Bool)
inisDeleteOnTermination = lens _inisDeleteOnTermination (\ s a -> s{_inisDeleteOnTermination = a})

-- | Indicates whether to assign a carrier IP address to the network interface. You can only assign a carrier IP address to a network interface that is in a subnet in a Wavelength Zone. For more information about carrier IP addresses, see Carrier IP addresses in the AWS Wavelength Developer Guide.
inisAssociateCarrierIPAddress :: Lens' InstanceNetworkInterfaceSpecification (Maybe Bool)
inisAssociateCarrierIPAddress = lens _inisAssociateCarrierIPAddress (\ s a -> s{_inisAssociateCarrierIPAddress = a})

-- | Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is @true@ .
inisAssociatePublicIPAddress :: Lens' InstanceNetworkInterfaceSpecification (Maybe Bool)
inisAssociatePublicIPAddress = lens _inisAssociatePublicIPAddress (\ s a -> s{_inisAssociatePublicIPAddress = a})

-- | The type of network interface. To create an Elastic Fabric Adapter (EFA), specify @efa@ . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html Elastic Fabric Adapter> in the /Amazon Elastic Compute Cloud User Guide/ . If you are not creating an EFA, specify @interface@ or omit this parameter. Valid values: @interface@ | @efa@
inisInterfaceType :: Lens' InstanceNetworkInterfaceSpecification (Maybe Text)
inisInterfaceType = lens _inisInterfaceType (\ s a -> s{_inisInterfaceType = a})

-- | The ID of the network interface. If you are creating a Spot Fleet, omit this parameter because you can’t specify a network interface ID in a launch specification.
inisNetworkInterfaceId :: Lens' InstanceNetworkInterfaceSpecification (Maybe Text)
inisNetworkInterfaceId = lens _inisNetworkInterfaceId (\ s a -> s{_inisNetworkInterfaceId = a})

-- | The ID of the subnet associated with the network interface. Applies only if creating a network interface when launching an instance.
inisSubnetId :: Lens' InstanceNetworkInterfaceSpecification (Maybe Text)
inisSubnetId = lens _inisSubnetId (\ s a -> s{_inisSubnetId = a})

-- | A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
inisIPv6AddressCount :: Lens' InstanceNetworkInterfaceSpecification (Maybe Int)
inisIPv6AddressCount = lens _inisIPv6AddressCount (\ s a -> s{_inisIPv6AddressCount = a})

-- | The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
inisNetworkCardIndex :: Lens' InstanceNetworkInterfaceSpecification (Maybe Int)
inisNetworkCardIndex = lens _inisNetworkCardIndex (\ s a -> s{_inisNetworkCardIndex = a})

-- | The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html RunInstances> request.
inisPrivateIPAddress :: Lens' InstanceNetworkInterfaceSpecification (Maybe Text)
inisPrivateIPAddress = lens _inisPrivateIPAddress (\ s a -> s{_inisPrivateIPAddress = a})

-- | The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html RunInstances> request.
inisSecondaryPrivateIPAddressCount :: Lens' InstanceNetworkInterfaceSpecification (Maybe Int)
inisSecondaryPrivateIPAddressCount = lens _inisSecondaryPrivateIPAddressCount (\ s a -> s{_inisSecondaryPrivateIPAddressCount = a})

-- | The description of the network interface. Applies only if creating a network interface when launching an instance.
inisDescription :: Lens' InstanceNetworkInterfaceSpecification (Maybe Text)
inisDescription = lens _inisDescription (\ s a -> s{_inisDescription = a})

-- | The position of the network interface in the attachment order. A primary network interface has a device index of 0. If you specify a network interface when launching an instance, you must specify the device index.
inisDeviceIndex :: Lens' InstanceNetworkInterfaceSpecification (Maybe Int)
inisDeviceIndex = lens _inisDeviceIndex (\ s a -> s{_inisDeviceIndex = a})

-- | One or more IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
inisIPv6Addresses :: Lens' InstanceNetworkInterfaceSpecification [InstanceIPv6Address]
inisIPv6Addresses = lens _inisIPv6Addresses (\ s a -> s{_inisIPv6Addresses = a}) . _Default . _Coerce

instance FromXML
           InstanceNetworkInterfaceSpecification
         where
        parseXML x
          = InstanceNetworkInterfaceSpecification' <$>
              (x .@? "SecurityGroupId" .!@ mempty >>=
                 may (parseXMLList "SecurityGroupId"))
                <*>
                (x .@? "privateIpAddressesSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "deleteOnTermination")
                <*> (x .@? "AssociateCarrierIpAddress")
                <*> (x .@? "associatePublicIpAddress")
                <*> (x .@? "InterfaceType")
                <*> (x .@? "networkInterfaceId")
                <*> (x .@? "subnetId")
                <*> (x .@? "ipv6AddressCount")
                <*> (x .@? "NetworkCardIndex")
                <*> (x .@? "privateIpAddress")
                <*> (x .@? "secondaryPrivateIpAddressCount")
                <*> (x .@? "description")
                <*> (x .@? "deviceIndex")
                <*>
                (x .@? "ipv6AddressesSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable
           InstanceNetworkInterfaceSpecification
         where

instance NFData InstanceNetworkInterfaceSpecification
         where

instance ToQuery
           InstanceNetworkInterfaceSpecification
         where
        toQuery InstanceNetworkInterfaceSpecification'{..}
          = mconcat
              [toQuery
                 (toQueryList "SecurityGroupId" <$> _inisGroups),
               toQuery
                 (toQueryList "PrivateIpAddresses" <$>
                    _inisPrivateIPAddresses),
               "DeleteOnTermination" =: _inisDeleteOnTermination,
               "AssociateCarrierIpAddress" =:
                 _inisAssociateCarrierIPAddress,
               "AssociatePublicIpAddress" =:
                 _inisAssociatePublicIPAddress,
               "InterfaceType" =: _inisInterfaceType,
               "NetworkInterfaceId" =: _inisNetworkInterfaceId,
               "SubnetId" =: _inisSubnetId,
               "Ipv6AddressCount" =: _inisIPv6AddressCount,
               "NetworkCardIndex" =: _inisNetworkCardIndex,
               "PrivateIpAddress" =: _inisPrivateIPAddress,
               "SecondaryPrivateIpAddressCount" =:
                 _inisSecondaryPrivateIPAddressCount,
               "Description" =: _inisDescription,
               "DeviceIndex" =: _inisDeviceIndex,
               toQuery
                 (toQueryList "Ipv6Addresses" <$> _inisIPv6Addresses)]

-- | Describes a private IPv4 address.
--
--
--
-- /See:/ 'instancePrivateIPAddress' smart constructor.
data InstancePrivateIPAddress = InstancePrivateIPAddress'
  { _ipiaPrimary          :: !(Maybe Bool)
  , _ipiaPrivateIPAddress :: !(Maybe Text)
  , _ipiaPrivateDNSName   :: !(Maybe Text)
  , _ipiaAssociation      :: !(Maybe InstanceNetworkInterfaceAssociation)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstancePrivateIPAddress' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ipiaPrimary' - Indicates whether this IPv4 address is the primary private IP address of the network interface.
--
-- * 'ipiaPrivateIPAddress' - The private IPv4 address of the network interface.
--
-- * 'ipiaPrivateDNSName' - The private IPv4 DNS name.
--
-- * 'ipiaAssociation' - The association information for an Elastic IP address for the network interface.
instancePrivateIPAddress
    :: InstancePrivateIPAddress
instancePrivateIPAddress =
  InstancePrivateIPAddress'
    { _ipiaPrimary = Nothing
    , _ipiaPrivateIPAddress = Nothing
    , _ipiaPrivateDNSName = Nothing
    , _ipiaAssociation = Nothing
    }


-- | Indicates whether this IPv4 address is the primary private IP address of the network interface.
ipiaPrimary :: Lens' InstancePrivateIPAddress (Maybe Bool)
ipiaPrimary = lens _ipiaPrimary (\ s a -> s{_ipiaPrimary = a})

-- | The private IPv4 address of the network interface.
ipiaPrivateIPAddress :: Lens' InstancePrivateIPAddress (Maybe Text)
ipiaPrivateIPAddress = lens _ipiaPrivateIPAddress (\ s a -> s{_ipiaPrivateIPAddress = a})

-- | The private IPv4 DNS name.
ipiaPrivateDNSName :: Lens' InstancePrivateIPAddress (Maybe Text)
ipiaPrivateDNSName = lens _ipiaPrivateDNSName (\ s a -> s{_ipiaPrivateDNSName = a})

-- | The association information for an Elastic IP address for the network interface.
ipiaAssociation :: Lens' InstancePrivateIPAddress (Maybe InstanceNetworkInterfaceAssociation)
ipiaAssociation = lens _ipiaAssociation (\ s a -> s{_ipiaAssociation = a})

instance FromXML InstancePrivateIPAddress where
        parseXML x
          = InstancePrivateIPAddress' <$>
              (x .@? "primary") <*> (x .@? "privateIpAddress") <*>
                (x .@? "privateDnsName")
                <*> (x .@? "association")

instance Hashable InstancePrivateIPAddress where

instance NFData InstancePrivateIPAddress where

-- | The instance details to specify which volumes should be snapshotted.
--
--
--
-- /See:/ 'instanceSpecification' smart constructor.
data InstanceSpecification = InstanceSpecification'
  { _isInstanceId        :: !(Maybe Text)
  , _isExcludeBootVolume :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'isInstanceId' - The instance to specify which volumes should be snapshotted.
--
-- * 'isExcludeBootVolume' - Excludes the root volume from being snapshotted.
instanceSpecification
    :: InstanceSpecification
instanceSpecification =
  InstanceSpecification'
    {_isInstanceId = Nothing, _isExcludeBootVolume = Nothing}


-- | The instance to specify which volumes should be snapshotted.
isInstanceId :: Lens' InstanceSpecification (Maybe Text)
isInstanceId = lens _isInstanceId (\ s a -> s{_isInstanceId = a})

-- | Excludes the root volume from being snapshotted.
isExcludeBootVolume :: Lens' InstanceSpecification (Maybe Bool)
isExcludeBootVolume = lens _isExcludeBootVolume (\ s a -> s{_isExcludeBootVolume = a})

instance Hashable InstanceSpecification where

instance NFData InstanceSpecification where

instance ToQuery InstanceSpecification where
        toQuery InstanceSpecification'{..}
          = mconcat
              ["InstanceId" =: _isInstanceId,
               "ExcludeBootVolume" =: _isExcludeBootVolume]

-- | Describes the current state of an instance.
--
--
--
-- /See:/ 'instanceState' smart constructor.
data InstanceState = InstanceState'
  { _isName :: !InstanceStateName
  , _isCode :: !Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceState' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'isName' - The current state of the instance.
--
-- * 'isCode' - The state of the instance as a 16-bit unsigned integer.  The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These numerical values are used for internal purposes and should be ignored. The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255.  The valid values for instance-state-code will all be in the range of the low byte and they are:     * @0@ : @pending@      * @16@ : @running@      * @32@ : @shutting-down@      * @48@ : @terminated@      * @64@ : @stopping@      * @80@ : @stopped@  You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in decimal.
instanceState
    :: InstanceStateName -- ^ 'isName'
    -> Int -- ^ 'isCode'
    -> InstanceState
instanceState pName_ pCode_ =
  InstanceState' {_isName = pName_, _isCode = pCode_}


-- | The current state of the instance.
isName :: Lens' InstanceState InstanceStateName
isName = lens _isName (\ s a -> s{_isName = a})

-- | The state of the instance as a 16-bit unsigned integer.  The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These numerical values are used for internal purposes and should be ignored. The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255.  The valid values for instance-state-code will all be in the range of the low byte and they are:     * @0@ : @pending@      * @16@ : @running@      * @32@ : @shutting-down@      * @48@ : @terminated@      * @64@ : @stopping@      * @80@ : @stopped@  You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in decimal.
isCode :: Lens' InstanceState Int
isCode = lens _isCode (\ s a -> s{_isCode = a})

instance FromXML InstanceState where
        parseXML x
          = InstanceState' <$> (x .@ "name") <*> (x .@ "code")

instance Hashable InstanceState where

instance NFData InstanceState where

-- | Describes an instance state change.
--
--
--
-- /See:/ 'instanceStateChange' smart constructor.
data InstanceStateChange = InstanceStateChange'
  { _iscInstanceId    :: !(Maybe Text)
  , _iscCurrentState  :: !(Maybe InstanceState)
  , _iscPreviousState :: !(Maybe InstanceState)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceStateChange' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iscInstanceId' - The ID of the instance.
--
-- * 'iscCurrentState' - The current state of the instance.
--
-- * 'iscPreviousState' - The previous state of the instance.
instanceStateChange
    :: InstanceStateChange
instanceStateChange =
  InstanceStateChange'
    { _iscInstanceId = Nothing
    , _iscCurrentState = Nothing
    , _iscPreviousState = Nothing
    }


-- | The ID of the instance.
iscInstanceId :: Lens' InstanceStateChange (Maybe Text)
iscInstanceId = lens _iscInstanceId (\ s a -> s{_iscInstanceId = a})

-- | The current state of the instance.
iscCurrentState :: Lens' InstanceStateChange (Maybe InstanceState)
iscCurrentState = lens _iscCurrentState (\ s a -> s{_iscCurrentState = a})

-- | The previous state of the instance.
iscPreviousState :: Lens' InstanceStateChange (Maybe InstanceState)
iscPreviousState = lens _iscPreviousState (\ s a -> s{_iscPreviousState = a})

instance FromXML InstanceStateChange where
        parseXML x
          = InstanceStateChange' <$>
              (x .@? "instanceId") <*> (x .@? "currentState") <*>
                (x .@? "previousState")

instance Hashable InstanceStateChange where

instance NFData InstanceStateChange where

-- | Describes the status of an instance.
--
--
--
-- /See:/ 'instanceStatus' smart constructor.
data InstanceStatus = InstanceStatus'
  { _iInstanceId       :: !(Maybe Text)
  , _iOutpostARN       :: !(Maybe Text)
  , _iSystemStatus     :: !(Maybe InstanceStatusSummary)
  , _iEvents           :: !(Maybe [InstanceStatusEvent])
  , _iAvailabilityZone :: !(Maybe Text)
  , _iInstanceStatus   :: !(Maybe InstanceStatusSummary)
  , _iInstanceState    :: !(Maybe InstanceState)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iInstanceId' - The ID of the instance.
--
-- * 'iOutpostARN' - The Amazon Resource Name (ARN) of the Outpost.
--
-- * 'iSystemStatus' - Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.
--
-- * 'iEvents' - Any scheduled events associated with the instance.
--
-- * 'iAvailabilityZone' - The Availability Zone of the instance.
--
-- * 'iInstanceStatus' - Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.
--
-- * 'iInstanceState' - The intended state of the instance. 'DescribeInstanceStatus' requires that an instance be in the @running@ state.
instanceStatus
    :: InstanceStatus
instanceStatus =
  InstanceStatus'
    { _iInstanceId = Nothing
    , _iOutpostARN = Nothing
    , _iSystemStatus = Nothing
    , _iEvents = Nothing
    , _iAvailabilityZone = Nothing
    , _iInstanceStatus = Nothing
    , _iInstanceState = Nothing
    }


-- | The ID of the instance.
iInstanceId :: Lens' InstanceStatus (Maybe Text)
iInstanceId = lens _iInstanceId (\ s a -> s{_iInstanceId = a})

-- | The Amazon Resource Name (ARN) of the Outpost.
iOutpostARN :: Lens' InstanceStatus (Maybe Text)
iOutpostARN = lens _iOutpostARN (\ s a -> s{_iOutpostARN = a})

-- | Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.
iSystemStatus :: Lens' InstanceStatus (Maybe InstanceStatusSummary)
iSystemStatus = lens _iSystemStatus (\ s a -> s{_iSystemStatus = a})

-- | Any scheduled events associated with the instance.
iEvents :: Lens' InstanceStatus [InstanceStatusEvent]
iEvents = lens _iEvents (\ s a -> s{_iEvents = a}) . _Default . _Coerce

-- | The Availability Zone of the instance.
iAvailabilityZone :: Lens' InstanceStatus (Maybe Text)
iAvailabilityZone = lens _iAvailabilityZone (\ s a -> s{_iAvailabilityZone = a})

-- | Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.
iInstanceStatus :: Lens' InstanceStatus (Maybe InstanceStatusSummary)
iInstanceStatus = lens _iInstanceStatus (\ s a -> s{_iInstanceStatus = a})

-- | The intended state of the instance. 'DescribeInstanceStatus' requires that an instance be in the @running@ state.
iInstanceState :: Lens' InstanceStatus (Maybe InstanceState)
iInstanceState = lens _iInstanceState (\ s a -> s{_iInstanceState = a})

instance FromXML InstanceStatus where
        parseXML x
          = InstanceStatus' <$>
              (x .@? "instanceId") <*> (x .@? "outpostArn") <*>
                (x .@? "systemStatus")
                <*>
                (x .@? "eventsSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "availabilityZone")
                <*> (x .@? "instanceStatus")
                <*> (x .@? "instanceState")

instance Hashable InstanceStatus where

instance NFData InstanceStatus where

-- | Describes the instance status.
--
--
--
-- /See:/ 'instanceStatusDetails' smart constructor.
data InstanceStatusDetails = InstanceStatusDetails'
  { _isdStatus        :: !(Maybe StatusType)
  , _isdImpairedSince :: !(Maybe ISO8601)
  , _isdName          :: !(Maybe StatusName)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceStatusDetails' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'isdStatus' - The status.
--
-- * 'isdImpairedSince' - The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.
--
-- * 'isdName' - The type of instance status.
instanceStatusDetails
    :: InstanceStatusDetails
instanceStatusDetails =
  InstanceStatusDetails'
    {_isdStatus = Nothing, _isdImpairedSince = Nothing, _isdName = Nothing}


-- | The status.
isdStatus :: Lens' InstanceStatusDetails (Maybe StatusType)
isdStatus = lens _isdStatus (\ s a -> s{_isdStatus = a})

-- | The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.
isdImpairedSince :: Lens' InstanceStatusDetails (Maybe UTCTime)
isdImpairedSince = lens _isdImpairedSince (\ s a -> s{_isdImpairedSince = a}) . mapping _Time

-- | The type of instance status.
isdName :: Lens' InstanceStatusDetails (Maybe StatusName)
isdName = lens _isdName (\ s a -> s{_isdName = a})

instance FromXML InstanceStatusDetails where
        parseXML x
          = InstanceStatusDetails' <$>
              (x .@? "status") <*> (x .@? "impairedSince") <*>
                (x .@? "name")

instance Hashable InstanceStatusDetails where

instance NFData InstanceStatusDetails where

-- | Describes a scheduled event for an instance.
--
--
--
-- /See:/ 'instanceStatusEvent' smart constructor.
data InstanceStatusEvent = InstanceStatusEvent'
  { _iseNotBefore         :: !(Maybe ISO8601)
  , _iseCode              :: !(Maybe EventCode)
  , _iseInstanceEventId   :: !(Maybe Text)
  , _iseDescription       :: !(Maybe Text)
  , _iseNotBeforeDeadline :: !(Maybe ISO8601)
  , _iseNotAfter          :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceStatusEvent' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iseNotBefore' - The earliest scheduled start time for the event.
--
-- * 'iseCode' - The event code.
--
-- * 'iseInstanceEventId' - The ID of the event.
--
-- * 'iseDescription' - A description of the event. After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].
--
-- * 'iseNotBeforeDeadline' - The deadline for starting the event.
--
-- * 'iseNotAfter' - The latest scheduled end time for the event.
instanceStatusEvent
    :: InstanceStatusEvent
instanceStatusEvent =
  InstanceStatusEvent'
    { _iseNotBefore = Nothing
    , _iseCode = Nothing
    , _iseInstanceEventId = Nothing
    , _iseDescription = Nothing
    , _iseNotBeforeDeadline = Nothing
    , _iseNotAfter = Nothing
    }


-- | The earliest scheduled start time for the event.
iseNotBefore :: Lens' InstanceStatusEvent (Maybe UTCTime)
iseNotBefore = lens _iseNotBefore (\ s a -> s{_iseNotBefore = a}) . mapping _Time

-- | The event code.
iseCode :: Lens' InstanceStatusEvent (Maybe EventCode)
iseCode = lens _iseCode (\ s a -> s{_iseCode = a})

-- | The ID of the event.
iseInstanceEventId :: Lens' InstanceStatusEvent (Maybe Text)
iseInstanceEventId = lens _iseInstanceEventId (\ s a -> s{_iseInstanceEventId = a})

-- | A description of the event. After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].
iseDescription :: Lens' InstanceStatusEvent (Maybe Text)
iseDescription = lens _iseDescription (\ s a -> s{_iseDescription = a})

-- | The deadline for starting the event.
iseNotBeforeDeadline :: Lens' InstanceStatusEvent (Maybe UTCTime)
iseNotBeforeDeadline = lens _iseNotBeforeDeadline (\ s a -> s{_iseNotBeforeDeadline = a}) . mapping _Time

-- | The latest scheduled end time for the event.
iseNotAfter :: Lens' InstanceStatusEvent (Maybe UTCTime)
iseNotAfter = lens _iseNotAfter (\ s a -> s{_iseNotAfter = a}) . mapping _Time

instance FromXML InstanceStatusEvent where
        parseXML x
          = InstanceStatusEvent' <$>
              (x .@? "notBefore") <*> (x .@? "code") <*>
                (x .@? "instanceEventId")
                <*> (x .@? "description")
                <*> (x .@? "notBeforeDeadline")
                <*> (x .@? "notAfter")

instance Hashable InstanceStatusEvent where

instance NFData InstanceStatusEvent where

-- | Describes the status of an instance.
--
--
--
-- /See:/ 'instanceStatusSummary' smart constructor.
data InstanceStatusSummary = InstanceStatusSummary'
  { _issDetails :: !(Maybe [InstanceStatusDetails])
  , _issStatus  :: !SummaryStatus
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceStatusSummary' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'issDetails' - The system instance health or application instance health.
--
-- * 'issStatus' - The status.
instanceStatusSummary
    :: SummaryStatus -- ^ 'issStatus'
    -> InstanceStatusSummary
instanceStatusSummary pStatus_ =
  InstanceStatusSummary' {_issDetails = Nothing, _issStatus = pStatus_}


-- | The system instance health or application instance health.
issDetails :: Lens' InstanceStatusSummary [InstanceStatusDetails]
issDetails = lens _issDetails (\ s a -> s{_issDetails = a}) . _Default . _Coerce

-- | The status.
issStatus :: Lens' InstanceStatusSummary SummaryStatus
issStatus = lens _issStatus (\ s a -> s{_issStatus = a})

instance FromXML InstanceStatusSummary where
        parseXML x
          = InstanceStatusSummary' <$>
              (x .@? "details" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@ "status")

instance Hashable InstanceStatusSummary where

instance NFData InstanceStatusSummary where

-- | Describes the disks that are available for the instance type.
--
--
--
-- /See:/ 'instanceStorageInfo' smart constructor.
data InstanceStorageInfo = InstanceStorageInfo'
  { _isiTotalSizeInGB :: !(Maybe Integer)
  , _isiNvmeSupport   :: !(Maybe EphemeralNvmeSupport)
  , _isiDisks         :: !(Maybe [DiskInfo])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceStorageInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'isiTotalSizeInGB' - The total size of the disks, in GB.
--
-- * 'isiNvmeSupport' - Indicates whether non-volatile memory express (NVMe) is supported for instance store.
--
-- * 'isiDisks' - Describes the disks that are available for the instance type.
instanceStorageInfo
    :: InstanceStorageInfo
instanceStorageInfo =
  InstanceStorageInfo'
    { _isiTotalSizeInGB = Nothing
    , _isiNvmeSupport = Nothing
    , _isiDisks = Nothing
    }


-- | The total size of the disks, in GB.
isiTotalSizeInGB :: Lens' InstanceStorageInfo (Maybe Integer)
isiTotalSizeInGB = lens _isiTotalSizeInGB (\ s a -> s{_isiTotalSizeInGB = a})

-- | Indicates whether non-volatile memory express (NVMe) is supported for instance store.
isiNvmeSupport :: Lens' InstanceStorageInfo (Maybe EphemeralNvmeSupport)
isiNvmeSupport = lens _isiNvmeSupport (\ s a -> s{_isiNvmeSupport = a})

-- | Describes the disks that are available for the instance type.
isiDisks :: Lens' InstanceStorageInfo [DiskInfo]
isiDisks = lens _isiDisks (\ s a -> s{_isiDisks = a}) . _Default . _Coerce

instance FromXML InstanceStorageInfo where
        parseXML x
          = InstanceStorageInfo' <$>
              (x .@? "totalSizeInGB") <*> (x .@? "nvmeSupport") <*>
                (x .@? "disks" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable InstanceStorageInfo where

instance NFData InstanceStorageInfo where

-- | Describes the registered tag keys for the current Region.
--
--
--
-- /See:/ 'instanceTagNotificationAttribute' smart constructor.
data InstanceTagNotificationAttribute = InstanceTagNotificationAttribute'
  { _itnaIncludeAllTagsOfInstance :: !(Maybe Bool)
  , _itnaInstanceTagKeys          :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceTagNotificationAttribute' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'itnaIncludeAllTagsOfInstance' - Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. @true@ indicates that all tag keys in the current Region are registered.
--
-- * 'itnaInstanceTagKeys' - The registered tag keys.
instanceTagNotificationAttribute
    :: InstanceTagNotificationAttribute
instanceTagNotificationAttribute =
  InstanceTagNotificationAttribute'
    {_itnaIncludeAllTagsOfInstance = Nothing, _itnaInstanceTagKeys = Nothing}


-- | Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. @true@ indicates that all tag keys in the current Region are registered.
itnaIncludeAllTagsOfInstance :: Lens' InstanceTagNotificationAttribute (Maybe Bool)
itnaIncludeAllTagsOfInstance = lens _itnaIncludeAllTagsOfInstance (\ s a -> s{_itnaIncludeAllTagsOfInstance = a})

-- | The registered tag keys.
itnaInstanceTagKeys :: Lens' InstanceTagNotificationAttribute [Text]
itnaInstanceTagKeys = lens _itnaInstanceTagKeys (\ s a -> s{_itnaInstanceTagKeys = a}) . _Default . _Coerce

instance FromXML InstanceTagNotificationAttribute
         where
        parseXML x
          = InstanceTagNotificationAttribute' <$>
              (x .@? "includeAllTagsOfInstance") <*>
                (x .@? "instanceTagKeySet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable InstanceTagNotificationAttribute
         where

instance NFData InstanceTagNotificationAttribute
         where

-- | Describes the instance type.
--
--
--
-- /See:/ 'instanceTypeInfo' smart constructor.
data InstanceTypeInfo = InstanceTypeInfo'
  { _itiHypervisor                    :: !(Maybe InstanceTypeHypervisor)
  , _itiCurrentGeneration             :: !(Maybe Bool)
  , _itiMemoryInfo                    :: !(Maybe MemoryInfo)
  , _itiPlacementGroupInfo            :: !(Maybe PlacementGroupInfo)
  , _itiSupportedRootDeviceTypes      :: !(Maybe [RootDeviceType])
  , _itiSupportedUsageClasses         :: !(Maybe [UsageClassType])
  , _itiInstanceStorageSupported      :: !(Maybe Bool)
  , _itiFpgaInfo                      :: !(Maybe FpgaInfo)
  , _itiBurstablePerformanceSupported :: !(Maybe Bool)
  , _itiInstanceType                  :: !(Maybe InstanceType)
  , _itiGpuInfo                       :: !(Maybe GpuInfo)
  , _itiSupportedVirtualizationTypes  :: !(Maybe [VirtualizationType])
  , _itiEBSInfo                       :: !(Maybe EBSInfo)
  , _itiAutoRecoverySupported         :: !(Maybe Bool)
  , _itiInferenceAcceleratorInfo      :: !(Maybe InferenceAcceleratorInfo)
  , _itiBareMetal                     :: !(Maybe Bool)
  , _itiNetworkInfo                   :: !(Maybe NetworkInfo)
  , _itiProcessorInfo                 :: !(Maybe ProcessorInfo)
  , _itiFreeTierEligible              :: !(Maybe Bool)
  , _itiVCPUInfo                      :: !(Maybe VCPUInfo)
  , _itiInstanceStorageInfo           :: !(Maybe InstanceStorageInfo)
  , _itiDedicatedHostsSupported       :: !(Maybe Bool)
  , _itiHibernationSupported          :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceTypeInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'itiHypervisor' - The hypervisor for the instance type.
--
-- * 'itiCurrentGeneration' - Indicates whether the instance type is current generation.
--
-- * 'itiMemoryInfo' - Describes the memory for the instance type.
--
-- * 'itiPlacementGroupInfo' - Describes the placement group settings for the instance type.
--
-- * 'itiSupportedRootDeviceTypes' - The supported root device types.
--
-- * 'itiSupportedUsageClasses' - Indicates whether the instance type is offered for spot or On-Demand.
--
-- * 'itiInstanceStorageSupported' - Indicates whether instance storage is supported.
--
-- * 'itiFpgaInfo' - Describes the FPGA accelerator settings for the instance type.
--
-- * 'itiBurstablePerformanceSupported' - Indicates whether the instance type is a burstable performance instance type.
--
-- * 'itiInstanceType' - The instance type. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html Instance types> in the /Amazon EC2 User Guide/ .
--
-- * 'itiGpuInfo' - Describes the GPU accelerator settings for the instance type.
--
-- * 'itiSupportedVirtualizationTypes' - The supported virtualization types.
--
-- * 'itiEBSInfo' - Describes the Amazon EBS settings for the instance type.
--
-- * 'itiAutoRecoverySupported' - Indicates whether auto recovery is supported.
--
-- * 'itiInferenceAcceleratorInfo' - Describes the Inference accelerator settings for the instance type.
--
-- * 'itiBareMetal' - Indicates whether the instance is a bare metal instance type.
--
-- * 'itiNetworkInfo' - Describes the network settings for the instance type.
--
-- * 'itiProcessorInfo' - Describes the processor.
--
-- * 'itiFreeTierEligible' - Indicates whether the instance type is eligible for the free tier.
--
-- * 'itiVCPUInfo' - Describes the vCPU configurations for the instance type.
--
-- * 'itiInstanceStorageInfo' - Describes the instance storage for the instance type.
--
-- * 'itiDedicatedHostsSupported' - Indicates whether Dedicated Hosts are supported on the instance type.
--
-- * 'itiHibernationSupported' - Indicates whether On-Demand hibernation is supported.
instanceTypeInfo
    :: InstanceTypeInfo
instanceTypeInfo =
  InstanceTypeInfo'
    { _itiHypervisor = Nothing
    , _itiCurrentGeneration = Nothing
    , _itiMemoryInfo = Nothing
    , _itiPlacementGroupInfo = Nothing
    , _itiSupportedRootDeviceTypes = Nothing
    , _itiSupportedUsageClasses = Nothing
    , _itiInstanceStorageSupported = Nothing
    , _itiFpgaInfo = Nothing
    , _itiBurstablePerformanceSupported = Nothing
    , _itiInstanceType = Nothing
    , _itiGpuInfo = Nothing
    , _itiSupportedVirtualizationTypes = Nothing
    , _itiEBSInfo = Nothing
    , _itiAutoRecoverySupported = Nothing
    , _itiInferenceAcceleratorInfo = Nothing
    , _itiBareMetal = Nothing
    , _itiNetworkInfo = Nothing
    , _itiProcessorInfo = Nothing
    , _itiFreeTierEligible = Nothing
    , _itiVCPUInfo = Nothing
    , _itiInstanceStorageInfo = Nothing
    , _itiDedicatedHostsSupported = Nothing
    , _itiHibernationSupported = Nothing
    }


-- | The hypervisor for the instance type.
itiHypervisor :: Lens' InstanceTypeInfo (Maybe InstanceTypeHypervisor)
itiHypervisor = lens _itiHypervisor (\ s a -> s{_itiHypervisor = a})

-- | Indicates whether the instance type is current generation.
itiCurrentGeneration :: Lens' InstanceTypeInfo (Maybe Bool)
itiCurrentGeneration = lens _itiCurrentGeneration (\ s a -> s{_itiCurrentGeneration = a})

-- | Describes the memory for the instance type.
itiMemoryInfo :: Lens' InstanceTypeInfo (Maybe MemoryInfo)
itiMemoryInfo = lens _itiMemoryInfo (\ s a -> s{_itiMemoryInfo = a})

-- | Describes the placement group settings for the instance type.
itiPlacementGroupInfo :: Lens' InstanceTypeInfo (Maybe PlacementGroupInfo)
itiPlacementGroupInfo = lens _itiPlacementGroupInfo (\ s a -> s{_itiPlacementGroupInfo = a})

-- | The supported root device types.
itiSupportedRootDeviceTypes :: Lens' InstanceTypeInfo [RootDeviceType]
itiSupportedRootDeviceTypes = lens _itiSupportedRootDeviceTypes (\ s a -> s{_itiSupportedRootDeviceTypes = a}) . _Default . _Coerce

-- | Indicates whether the instance type is offered for spot or On-Demand.
itiSupportedUsageClasses :: Lens' InstanceTypeInfo [UsageClassType]
itiSupportedUsageClasses = lens _itiSupportedUsageClasses (\ s a -> s{_itiSupportedUsageClasses = a}) . _Default . _Coerce

-- | Indicates whether instance storage is supported.
itiInstanceStorageSupported :: Lens' InstanceTypeInfo (Maybe Bool)
itiInstanceStorageSupported = lens _itiInstanceStorageSupported (\ s a -> s{_itiInstanceStorageSupported = a})

-- | Describes the FPGA accelerator settings for the instance type.
itiFpgaInfo :: Lens' InstanceTypeInfo (Maybe FpgaInfo)
itiFpgaInfo = lens _itiFpgaInfo (\ s a -> s{_itiFpgaInfo = a})

-- | Indicates whether the instance type is a burstable performance instance type.
itiBurstablePerformanceSupported :: Lens' InstanceTypeInfo (Maybe Bool)
itiBurstablePerformanceSupported = lens _itiBurstablePerformanceSupported (\ s a -> s{_itiBurstablePerformanceSupported = a})

-- | The instance type. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html Instance types> in the /Amazon EC2 User Guide/ .
itiInstanceType :: Lens' InstanceTypeInfo (Maybe InstanceType)
itiInstanceType = lens _itiInstanceType (\ s a -> s{_itiInstanceType = a})

-- | Describes the GPU accelerator settings for the instance type.
itiGpuInfo :: Lens' InstanceTypeInfo (Maybe GpuInfo)
itiGpuInfo = lens _itiGpuInfo (\ s a -> s{_itiGpuInfo = a})

-- | The supported virtualization types.
itiSupportedVirtualizationTypes :: Lens' InstanceTypeInfo [VirtualizationType]
itiSupportedVirtualizationTypes = lens _itiSupportedVirtualizationTypes (\ s a -> s{_itiSupportedVirtualizationTypes = a}) . _Default . _Coerce

-- | Describes the Amazon EBS settings for the instance type.
itiEBSInfo :: Lens' InstanceTypeInfo (Maybe EBSInfo)
itiEBSInfo = lens _itiEBSInfo (\ s a -> s{_itiEBSInfo = a})

-- | Indicates whether auto recovery is supported.
itiAutoRecoverySupported :: Lens' InstanceTypeInfo (Maybe Bool)
itiAutoRecoverySupported = lens _itiAutoRecoverySupported (\ s a -> s{_itiAutoRecoverySupported = a})

-- | Describes the Inference accelerator settings for the instance type.
itiInferenceAcceleratorInfo :: Lens' InstanceTypeInfo (Maybe InferenceAcceleratorInfo)
itiInferenceAcceleratorInfo = lens _itiInferenceAcceleratorInfo (\ s a -> s{_itiInferenceAcceleratorInfo = a})

-- | Indicates whether the instance is a bare metal instance type.
itiBareMetal :: Lens' InstanceTypeInfo (Maybe Bool)
itiBareMetal = lens _itiBareMetal (\ s a -> s{_itiBareMetal = a})

-- | Describes the network settings for the instance type.
itiNetworkInfo :: Lens' InstanceTypeInfo (Maybe NetworkInfo)
itiNetworkInfo = lens _itiNetworkInfo (\ s a -> s{_itiNetworkInfo = a})

-- | Describes the processor.
itiProcessorInfo :: Lens' InstanceTypeInfo (Maybe ProcessorInfo)
itiProcessorInfo = lens _itiProcessorInfo (\ s a -> s{_itiProcessorInfo = a})

-- | Indicates whether the instance type is eligible for the free tier.
itiFreeTierEligible :: Lens' InstanceTypeInfo (Maybe Bool)
itiFreeTierEligible = lens _itiFreeTierEligible (\ s a -> s{_itiFreeTierEligible = a})

-- | Describes the vCPU configurations for the instance type.
itiVCPUInfo :: Lens' InstanceTypeInfo (Maybe VCPUInfo)
itiVCPUInfo = lens _itiVCPUInfo (\ s a -> s{_itiVCPUInfo = a})

-- | Describes the instance storage for the instance type.
itiInstanceStorageInfo :: Lens' InstanceTypeInfo (Maybe InstanceStorageInfo)
itiInstanceStorageInfo = lens _itiInstanceStorageInfo (\ s a -> s{_itiInstanceStorageInfo = a})

-- | Indicates whether Dedicated Hosts are supported on the instance type.
itiDedicatedHostsSupported :: Lens' InstanceTypeInfo (Maybe Bool)
itiDedicatedHostsSupported = lens _itiDedicatedHostsSupported (\ s a -> s{_itiDedicatedHostsSupported = a})

-- | Indicates whether On-Demand hibernation is supported.
itiHibernationSupported :: Lens' InstanceTypeInfo (Maybe Bool)
itiHibernationSupported = lens _itiHibernationSupported (\ s a -> s{_itiHibernationSupported = a})

instance FromXML InstanceTypeInfo where
        parseXML x
          = InstanceTypeInfo' <$>
              (x .@? "hypervisor") <*> (x .@? "currentGeneration")
                <*> (x .@? "memoryInfo")
                <*> (x .@? "placementGroupInfo")
                <*>
                (x .@? "supportedRootDeviceTypes" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "supportedUsageClasses" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "instanceStorageSupported")
                <*> (x .@? "fpgaInfo")
                <*> (x .@? "burstablePerformanceSupported")
                <*> (x .@? "instanceType")
                <*> (x .@? "gpuInfo")
                <*>
                (x .@? "supportedVirtualizationTypes" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "ebsInfo")
                <*> (x .@? "autoRecoverySupported")
                <*> (x .@? "inferenceAcceleratorInfo")
                <*> (x .@? "bareMetal")
                <*> (x .@? "networkInfo")
                <*> (x .@? "processorInfo")
                <*> (x .@? "freeTierEligible")
                <*> (x .@? "vCpuInfo")
                <*> (x .@? "instanceStorageInfo")
                <*> (x .@? "dedicatedHostsSupported")
                <*> (x .@? "hibernationSupported")

instance Hashable InstanceTypeInfo where

instance NFData InstanceTypeInfo where

-- | The instance types offered.
--
--
--
-- /See:/ 'instanceTypeOffering' smart constructor.
data InstanceTypeOffering = InstanceTypeOffering'
  { _itoLocation     :: !(Maybe Text)
  , _itoInstanceType :: !(Maybe InstanceType)
  , _itoLocationType :: !(Maybe LocationType)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceTypeOffering' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'itoLocation' - The identifier for the location. This depends on the location type. For example, if the location type is @region@ , the location is the Region code (for example, @us-east-2@ .)
--
-- * 'itoInstanceType' - The instance type. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html Instance types> in the /Amazon EC2 User Guide/ .
--
-- * 'itoLocationType' - The location type.
instanceTypeOffering
    :: InstanceTypeOffering
instanceTypeOffering =
  InstanceTypeOffering'
    { _itoLocation = Nothing
    , _itoInstanceType = Nothing
    , _itoLocationType = Nothing
    }


-- | The identifier for the location. This depends on the location type. For example, if the location type is @region@ , the location is the Region code (for example, @us-east-2@ .)
itoLocation :: Lens' InstanceTypeOffering (Maybe Text)
itoLocation = lens _itoLocation (\ s a -> s{_itoLocation = a})

-- | The instance type. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html Instance types> in the /Amazon EC2 User Guide/ .
itoInstanceType :: Lens' InstanceTypeOffering (Maybe InstanceType)
itoInstanceType = lens _itoInstanceType (\ s a -> s{_itoInstanceType = a})

-- | The location type.
itoLocationType :: Lens' InstanceTypeOffering (Maybe LocationType)
itoLocationType = lens _itoLocationType (\ s a -> s{_itoLocationType = a})

instance FromXML InstanceTypeOffering where
        parseXML x
          = InstanceTypeOffering' <$>
              (x .@? "location") <*> (x .@? "instanceType") <*>
                (x .@? "locationType")

instance Hashable InstanceTypeOffering where

instance NFData InstanceTypeOffering where

-- | Information about the Capacity Reservation usage.
--
--
--
-- /See:/ 'instanceUsage' smart constructor.
data InstanceUsage = InstanceUsage'
  { _iuAccountId         :: !(Maybe Text)
  , _iuUsedInstanceCount :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InstanceUsage' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'iuAccountId' - The ID of the AWS account that is making use of the Capacity Reservation.
--
-- * 'iuUsedInstanceCount' - The number of instances the AWS account currently has in the Capacity Reservation.
instanceUsage
    :: InstanceUsage
instanceUsage =
  InstanceUsage' {_iuAccountId = Nothing, _iuUsedInstanceCount = Nothing}


-- | The ID of the AWS account that is making use of the Capacity Reservation.
iuAccountId :: Lens' InstanceUsage (Maybe Text)
iuAccountId = lens _iuAccountId (\ s a -> s{_iuAccountId = a})

-- | The number of instances the AWS account currently has in the Capacity Reservation.
iuUsedInstanceCount :: Lens' InstanceUsage (Maybe Int)
iuUsedInstanceCount = lens _iuUsedInstanceCount (\ s a -> s{_iuUsedInstanceCount = a})

instance FromXML InstanceUsage where
        parseXML x
          = InstanceUsage' <$>
              (x .@? "accountId") <*> (x .@? "usedInstanceCount")

instance Hashable InstanceUsage where

instance NFData InstanceUsage where

-- | Describes an internet gateway.
--
--
--
-- /See:/ 'internetGateway' smart constructor.
data InternetGateway = InternetGateway'
  { _igAttachments       :: !(Maybe [InternetGatewayAttachment])
  , _igOwnerId           :: !(Maybe Text)
  , _igTags              :: !(Maybe [Tag])
  , _igInternetGatewayId :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InternetGateway' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'igAttachments' - Any VPCs attached to the internet gateway.
--
-- * 'igOwnerId' - The ID of the AWS account that owns the internet gateway.
--
-- * 'igTags' - Any tags assigned to the internet gateway.
--
-- * 'igInternetGatewayId' - The ID of the internet gateway.
internetGateway
    :: Text -- ^ 'igInternetGatewayId'
    -> InternetGateway
internetGateway pInternetGatewayId_ =
  InternetGateway'
    { _igAttachments = Nothing
    , _igOwnerId = Nothing
    , _igTags = Nothing
    , _igInternetGatewayId = pInternetGatewayId_
    }


-- | Any VPCs attached to the internet gateway.
igAttachments :: Lens' InternetGateway [InternetGatewayAttachment]
igAttachments = lens _igAttachments (\ s a -> s{_igAttachments = a}) . _Default . _Coerce

-- | The ID of the AWS account that owns the internet gateway.
igOwnerId :: Lens' InternetGateway (Maybe Text)
igOwnerId = lens _igOwnerId (\ s a -> s{_igOwnerId = a})

-- | Any tags assigned to the internet gateway.
igTags :: Lens' InternetGateway [Tag]
igTags = lens _igTags (\ s a -> s{_igTags = a}) . _Default . _Coerce

-- | The ID of the internet gateway.
igInternetGatewayId :: Lens' InternetGateway Text
igInternetGatewayId = lens _igInternetGatewayId (\ s a -> s{_igInternetGatewayId = a})

instance FromXML InternetGateway where
        parseXML x
          = InternetGateway' <$>
              (x .@? "attachmentSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "ownerId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@ "internetGatewayId")

instance Hashable InternetGateway where

instance NFData InternetGateway where

-- | Describes the attachment of a VPC to an internet gateway or an egress-only internet gateway.
--
--
--
-- /See:/ 'internetGatewayAttachment' smart constructor.
data InternetGatewayAttachment = InternetGatewayAttachment'
  { _igaState :: !AttachmentStatus
  , _igaVPCId :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'InternetGatewayAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'igaState' - The current state of the attachment. For an internet gateway, the state is @available@ when attached to a VPC; otherwise, this value is not returned.
--
-- * 'igaVPCId' - The ID of the VPC.
internetGatewayAttachment
    :: AttachmentStatus -- ^ 'igaState'
    -> Text -- ^ 'igaVPCId'
    -> InternetGatewayAttachment
internetGatewayAttachment pState_ pVPCId_ =
  InternetGatewayAttachment' {_igaState = pState_, _igaVPCId = pVPCId_}


-- | The current state of the attachment. For an internet gateway, the state is @available@ when attached to a VPC; otherwise, this value is not returned.
igaState :: Lens' InternetGatewayAttachment AttachmentStatus
igaState = lens _igaState (\ s a -> s{_igaState = a})

-- | The ID of the VPC.
igaVPCId :: Lens' InternetGatewayAttachment Text
igaVPCId = lens _igaVPCId (\ s a -> s{_igaVPCId = a})

instance FromXML InternetGatewayAttachment where
        parseXML x
          = InternetGatewayAttachment' <$>
              (x .@ "state") <*> (x .@ "vpcId")

instance Hashable InternetGatewayAttachment where

instance NFData InternetGatewayAttachment where

-- | Describes a key pair.
--
--
--
-- /See:/ 'keyPairInfo' smart constructor.
data KeyPairInfo = KeyPairInfo'
  { _kpiKeyFingerprint :: !(Maybe Text)
  , _kpiKeyName        :: !(Maybe Text)
  , _kpiKeyPairId      :: !(Maybe Text)
  , _kpiTags           :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'KeyPairInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'kpiKeyFingerprint' - If you used 'CreateKeyPair' to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used 'ImportKeyPair' to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.
--
-- * 'kpiKeyName' - The name of the key pair.
--
-- * 'kpiKeyPairId' - The ID of the key pair.
--
-- * 'kpiTags' - Any tags applied to the key pair.
keyPairInfo
    :: KeyPairInfo
keyPairInfo =
  KeyPairInfo'
    { _kpiKeyFingerprint = Nothing
    , _kpiKeyName = Nothing
    , _kpiKeyPairId = Nothing
    , _kpiTags = Nothing
    }


-- | If you used 'CreateKeyPair' to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used 'ImportKeyPair' to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.
kpiKeyFingerprint :: Lens' KeyPairInfo (Maybe Text)
kpiKeyFingerprint = lens _kpiKeyFingerprint (\ s a -> s{_kpiKeyFingerprint = a})

-- | The name of the key pair.
kpiKeyName :: Lens' KeyPairInfo (Maybe Text)
kpiKeyName = lens _kpiKeyName (\ s a -> s{_kpiKeyName = a})

-- | The ID of the key pair.
kpiKeyPairId :: Lens' KeyPairInfo (Maybe Text)
kpiKeyPairId = lens _kpiKeyPairId (\ s a -> s{_kpiKeyPairId = a})

-- | Any tags applied to the key pair.
kpiTags :: Lens' KeyPairInfo [Tag]
kpiTags = lens _kpiTags (\ s a -> s{_kpiTags = a}) . _Default . _Coerce

instance FromXML KeyPairInfo where
        parseXML x
          = KeyPairInfo' <$>
              (x .@? "keyFingerprint") <*> (x .@? "keyName") <*>
                (x .@? "keyPairId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable KeyPairInfo where

instance NFData KeyPairInfo where

-- | The last error that occurred for a VPC endpoint.
--
--
--
-- /See:/ 'lastError' smart constructor.
data LastError = LastError'
  { _leCode    :: !(Maybe Text)
  , _leMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LastError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'leCode' - The error code for the VPC endpoint error.
--
-- * 'leMessage' - The error message for the VPC endpoint error.
lastError
    :: LastError
lastError = LastError' {_leCode = Nothing, _leMessage = Nothing}


-- | The error code for the VPC endpoint error.
leCode :: Lens' LastError (Maybe Text)
leCode = lens _leCode (\ s a -> s{_leCode = a})

-- | The error message for the VPC endpoint error.
leMessage :: Lens' LastError (Maybe Text)
leMessage = lens _leMessage (\ s a -> s{_leMessage = a})

instance FromXML LastError where
        parseXML x
          = LastError' <$> (x .@? "code") <*> (x .@? "message")

instance Hashable LastError where

instance NFData LastError where

-- | Describes a launch permission.
--
--
--
-- /See:/ 'launchPermission' smart constructor.
data LaunchPermission = LaunchPermission'
  { _lGroup  :: !(Maybe PermissionGroup)
  , _lUserId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchPermission' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lGroup' - The name of the group.
--
-- * 'lUserId' - The AWS account ID. Constraints: Up to 10 000 account IDs can be specified in a single request.
launchPermission
    :: LaunchPermission
launchPermission = LaunchPermission' {_lGroup = Nothing, _lUserId = Nothing}


-- | The name of the group.
lGroup :: Lens' LaunchPermission (Maybe PermissionGroup)
lGroup = lens _lGroup (\ s a -> s{_lGroup = a})

-- | The AWS account ID. Constraints: Up to 10 000 account IDs can be specified in a single request.
lUserId :: Lens' LaunchPermission (Maybe Text)
lUserId = lens _lUserId (\ s a -> s{_lUserId = a})

instance FromXML LaunchPermission where
        parseXML x
          = LaunchPermission' <$>
              (x .@? "group") <*> (x .@? "userId")

instance Hashable LaunchPermission where

instance NFData LaunchPermission where

instance ToQuery LaunchPermission where
        toQuery LaunchPermission'{..}
          = mconcat ["Group" =: _lGroup, "UserId" =: _lUserId]

-- | Describes a launch permission modification.
--
--
--
-- /See:/ 'launchPermissionModifications' smart constructor.
data LaunchPermissionModifications = LaunchPermissionModifications'
  { _lRemove :: !(Maybe [LaunchPermission])
  , _lAdd    :: !(Maybe [LaunchPermission])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchPermissionModifications' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lRemove' - The AWS account ID to remove from the list of launch permissions for the AMI.
--
-- * 'lAdd' - The AWS account ID to add to the list of launch permissions for the AMI.
launchPermissionModifications
    :: LaunchPermissionModifications
launchPermissionModifications =
  LaunchPermissionModifications' {_lRemove = Nothing, _lAdd = Nothing}


-- | The AWS account ID to remove from the list of launch permissions for the AMI.
lRemove :: Lens' LaunchPermissionModifications [LaunchPermission]
lRemove = lens _lRemove (\ s a -> s{_lRemove = a}) . _Default . _Coerce

-- | The AWS account ID to add to the list of launch permissions for the AMI.
lAdd :: Lens' LaunchPermissionModifications [LaunchPermission]
lAdd = lens _lAdd (\ s a -> s{_lAdd = a}) . _Default . _Coerce

instance Hashable LaunchPermissionModifications where

instance NFData LaunchPermissionModifications where

instance ToQuery LaunchPermissionModifications where
        toQuery LaunchPermissionModifications'{..}
          = mconcat
              [toQuery (toQueryList "Remove" <$> _lRemove),
               toQuery (toQueryList "Add" <$> _lAdd)]

-- | Describes the launch specification for an instance.
--
--
--
-- /See:/ 'launchSpecification' smart constructor.
data LaunchSpecification = LaunchSpecification'
  { _lsSecurityGroups      :: !(Maybe [GroupIdentifier])
  , _lsKeyName             :: !(Maybe Text)
  , _lsNetworkInterfaces   :: !(Maybe [InstanceNetworkInterfaceSpecification])
  , _lsRAMDiskId           :: !(Maybe Text)
  , _lsSubnetId            :: !(Maybe Text)
  , _lsKernelId            :: !(Maybe Text)
  , _lsInstanceType        :: !(Maybe InstanceType)
  , _lsEBSOptimized        :: !(Maybe Bool)
  , _lsUserData            :: !(Maybe Text)
  , _lsMonitoring          :: !(Maybe RunInstancesMonitoringEnabled)
  , _lsIAMInstanceProfile  :: !(Maybe IAMInstanceProfileSpecification)
  , _lsImageId             :: !(Maybe Text)
  , _lsAddressingType      :: !(Maybe Text)
  , _lsBlockDeviceMappings :: !(Maybe [BlockDeviceMapping])
  , _lsPlacement           :: !(Maybe SpotPlacement)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lsSecurityGroups' - One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
--
-- * 'lsKeyName' - The name of the key pair.
--
-- * 'lsNetworkInterfaces' - One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
--
-- * 'lsRAMDiskId' - The ID of the RAM disk.
--
-- * 'lsSubnetId' - The ID of the subnet in which to launch the instance.
--
-- * 'lsKernelId' - The ID of the kernel.
--
-- * 'lsInstanceType' - The instance type.
--
-- * 'lsEBSOptimized' - Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: @false@
--
-- * 'lsUserData' - The Base64-encoded user data for the instance.
--
-- * 'lsMonitoring' - Undocumented member.
--
-- * 'lsIAMInstanceProfile' - The IAM instance profile.
--
-- * 'lsImageId' - The ID of the AMI.
--
-- * 'lsAddressingType' - Deprecated.
--
-- * 'lsBlockDeviceMappings' - One or more block device mapping entries.
--
-- * 'lsPlacement' - The placement information for the instance.
launchSpecification
    :: LaunchSpecification
launchSpecification =
  LaunchSpecification'
    { _lsSecurityGroups = Nothing
    , _lsKeyName = Nothing
    , _lsNetworkInterfaces = Nothing
    , _lsRAMDiskId = Nothing
    , _lsSubnetId = Nothing
    , _lsKernelId = Nothing
    , _lsInstanceType = Nothing
    , _lsEBSOptimized = Nothing
    , _lsUserData = Nothing
    , _lsMonitoring = Nothing
    , _lsIAMInstanceProfile = Nothing
    , _lsImageId = Nothing
    , _lsAddressingType = Nothing
    , _lsBlockDeviceMappings = Nothing
    , _lsPlacement = Nothing
    }


-- | One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
lsSecurityGroups :: Lens' LaunchSpecification [GroupIdentifier]
lsSecurityGroups = lens _lsSecurityGroups (\ s a -> s{_lsSecurityGroups = a}) . _Default . _Coerce

-- | The name of the key pair.
lsKeyName :: Lens' LaunchSpecification (Maybe Text)
lsKeyName = lens _lsKeyName (\ s a -> s{_lsKeyName = a})

-- | One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
lsNetworkInterfaces :: Lens' LaunchSpecification [InstanceNetworkInterfaceSpecification]
lsNetworkInterfaces = lens _lsNetworkInterfaces (\ s a -> s{_lsNetworkInterfaces = a}) . _Default . _Coerce

-- | The ID of the RAM disk.
lsRAMDiskId :: Lens' LaunchSpecification (Maybe Text)
lsRAMDiskId = lens _lsRAMDiskId (\ s a -> s{_lsRAMDiskId = a})

-- | The ID of the subnet in which to launch the instance.
lsSubnetId :: Lens' LaunchSpecification (Maybe Text)
lsSubnetId = lens _lsSubnetId (\ s a -> s{_lsSubnetId = a})

-- | The ID of the kernel.
lsKernelId :: Lens' LaunchSpecification (Maybe Text)
lsKernelId = lens _lsKernelId (\ s a -> s{_lsKernelId = a})

-- | The instance type.
lsInstanceType :: Lens' LaunchSpecification (Maybe InstanceType)
lsInstanceType = lens _lsInstanceType (\ s a -> s{_lsInstanceType = a})

-- | Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: @false@
lsEBSOptimized :: Lens' LaunchSpecification (Maybe Bool)
lsEBSOptimized = lens _lsEBSOptimized (\ s a -> s{_lsEBSOptimized = a})

-- | The Base64-encoded user data for the instance.
lsUserData :: Lens' LaunchSpecification (Maybe Text)
lsUserData = lens _lsUserData (\ s a -> s{_lsUserData = a})

-- | Undocumented member.
lsMonitoring :: Lens' LaunchSpecification (Maybe RunInstancesMonitoringEnabled)
lsMonitoring = lens _lsMonitoring (\ s a -> s{_lsMonitoring = a})

-- | The IAM instance profile.
lsIAMInstanceProfile :: Lens' LaunchSpecification (Maybe IAMInstanceProfileSpecification)
lsIAMInstanceProfile = lens _lsIAMInstanceProfile (\ s a -> s{_lsIAMInstanceProfile = a})

-- | The ID of the AMI.
lsImageId :: Lens' LaunchSpecification (Maybe Text)
lsImageId = lens _lsImageId (\ s a -> s{_lsImageId = a})

-- | Deprecated.
lsAddressingType :: Lens' LaunchSpecification (Maybe Text)
lsAddressingType = lens _lsAddressingType (\ s a -> s{_lsAddressingType = a})

-- | One or more block device mapping entries.
lsBlockDeviceMappings :: Lens' LaunchSpecification [BlockDeviceMapping]
lsBlockDeviceMappings = lens _lsBlockDeviceMappings (\ s a -> s{_lsBlockDeviceMappings = a}) . _Default . _Coerce

-- | The placement information for the instance.
lsPlacement :: Lens' LaunchSpecification (Maybe SpotPlacement)
lsPlacement = lens _lsPlacement (\ s a -> s{_lsPlacement = a})

instance FromXML LaunchSpecification where
        parseXML x
          = LaunchSpecification' <$>
              (x .@? "groupSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "keyName")
                <*>
                (x .@? "networkInterfaceSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "ramdiskId")
                <*> (x .@? "subnetId")
                <*> (x .@? "kernelId")
                <*> (x .@? "instanceType")
                <*> (x .@? "ebsOptimized")
                <*> (x .@? "userData")
                <*> (x .@? "monitoring")
                <*> (x .@? "iamInstanceProfile")
                <*> (x .@? "imageId")
                <*> (x .@? "addressingType")
                <*>
                (x .@? "blockDeviceMapping" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "placement")

instance Hashable LaunchSpecification where

instance NFData LaunchSpecification where

-- | Describes a launch template.
--
--
--
-- /See:/ 'launchTemplate' smart constructor.
data LaunchTemplate = LaunchTemplate'
  { _ltLaunchTemplateName   :: !(Maybe Text)
  , _ltLatestVersionNumber  :: !(Maybe Integer)
  , _ltLaunchTemplateId     :: !(Maybe Text)
  , _ltCreatedBy            :: !(Maybe Text)
  , _ltDefaultVersionNumber :: !(Maybe Integer)
  , _ltCreateTime           :: !(Maybe ISO8601)
  , _ltTags                 :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplate' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltLaunchTemplateName' - The name of the launch template.
--
-- * 'ltLatestVersionNumber' - The version number of the latest version of the launch template.
--
-- * 'ltLaunchTemplateId' - The ID of the launch template.
--
-- * 'ltCreatedBy' - The principal that created the launch template.
--
-- * 'ltDefaultVersionNumber' - The version number of the default version of the launch template.
--
-- * 'ltCreateTime' - The time launch template was created.
--
-- * 'ltTags' - The tags for the launch template.
launchTemplate
    :: LaunchTemplate
launchTemplate =
  LaunchTemplate'
    { _ltLaunchTemplateName = Nothing
    , _ltLatestVersionNumber = Nothing
    , _ltLaunchTemplateId = Nothing
    , _ltCreatedBy = Nothing
    , _ltDefaultVersionNumber = Nothing
    , _ltCreateTime = Nothing
    , _ltTags = Nothing
    }


-- | The name of the launch template.
ltLaunchTemplateName :: Lens' LaunchTemplate (Maybe Text)
ltLaunchTemplateName = lens _ltLaunchTemplateName (\ s a -> s{_ltLaunchTemplateName = a})

-- | The version number of the latest version of the launch template.
ltLatestVersionNumber :: Lens' LaunchTemplate (Maybe Integer)
ltLatestVersionNumber = lens _ltLatestVersionNumber (\ s a -> s{_ltLatestVersionNumber = a})

-- | The ID of the launch template.
ltLaunchTemplateId :: Lens' LaunchTemplate (Maybe Text)
ltLaunchTemplateId = lens _ltLaunchTemplateId (\ s a -> s{_ltLaunchTemplateId = a})

-- | The principal that created the launch template.
ltCreatedBy :: Lens' LaunchTemplate (Maybe Text)
ltCreatedBy = lens _ltCreatedBy (\ s a -> s{_ltCreatedBy = a})

-- | The version number of the default version of the launch template.
ltDefaultVersionNumber :: Lens' LaunchTemplate (Maybe Integer)
ltDefaultVersionNumber = lens _ltDefaultVersionNumber (\ s a -> s{_ltDefaultVersionNumber = a})

-- | The time launch template was created.
ltCreateTime :: Lens' LaunchTemplate (Maybe UTCTime)
ltCreateTime = lens _ltCreateTime (\ s a -> s{_ltCreateTime = a}) . mapping _Time

-- | The tags for the launch template.
ltTags :: Lens' LaunchTemplate [Tag]
ltTags = lens _ltTags (\ s a -> s{_ltTags = a}) . _Default . _Coerce

instance FromXML LaunchTemplate where
        parseXML x
          = LaunchTemplate' <$>
              (x .@? "launchTemplateName") <*>
                (x .@? "latestVersionNumber")
                <*> (x .@? "launchTemplateId")
                <*> (x .@? "createdBy")
                <*> (x .@? "defaultVersionNumber")
                <*> (x .@? "createTime")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable LaunchTemplate where

instance NFData LaunchTemplate where

-- | Describes a launch template and overrides.
--
--
--
-- /See:/ 'launchTemplateAndOverridesResponse' smart constructor.
data LaunchTemplateAndOverridesResponse = LaunchTemplateAndOverridesResponse'
  { _ltaoOverrides :: !(Maybe FleetLaunchTemplateOverrides)
  , _ltaoLaunchTemplateSpecification :: !(Maybe FleetLaunchTemplateSpecification)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateAndOverridesResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltaoOverrides' - Any parameters that you specify override the same parameters in the launch template.
--
-- * 'ltaoLaunchTemplateSpecification' - The launch template.
launchTemplateAndOverridesResponse
    :: LaunchTemplateAndOverridesResponse
launchTemplateAndOverridesResponse =
  LaunchTemplateAndOverridesResponse'
    {_ltaoOverrides = Nothing, _ltaoLaunchTemplateSpecification = Nothing}


-- | Any parameters that you specify override the same parameters in the launch template.
ltaoOverrides :: Lens' LaunchTemplateAndOverridesResponse (Maybe FleetLaunchTemplateOverrides)
ltaoOverrides = lens _ltaoOverrides (\ s a -> s{_ltaoOverrides = a})

-- | The launch template.
ltaoLaunchTemplateSpecification :: Lens' LaunchTemplateAndOverridesResponse (Maybe FleetLaunchTemplateSpecification)
ltaoLaunchTemplateSpecification = lens _ltaoLaunchTemplateSpecification (\ s a -> s{_ltaoLaunchTemplateSpecification = a})

instance FromXML LaunchTemplateAndOverridesResponse
         where
        parseXML x
          = LaunchTemplateAndOverridesResponse' <$>
              (x .@? "overrides") <*>
                (x .@? "launchTemplateSpecification")

instance Hashable LaunchTemplateAndOverridesResponse
         where

instance NFData LaunchTemplateAndOverridesResponse
         where

-- | Describes a block device mapping.
--
--
--
-- /See:/ 'launchTemplateBlockDeviceMapping' smart constructor.
data LaunchTemplateBlockDeviceMapping = LaunchTemplateBlockDeviceMapping'
  { _ltbdmVirtualName :: !(Maybe Text)
  , _ltbdmNoDevice    :: !(Maybe Text)
  , _ltbdmEBS         :: !(Maybe LaunchTemplateEBSBlockDevice)
  , _ltbdmDeviceName  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateBlockDeviceMapping' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltbdmVirtualName' - The virtual device name (ephemeralN).
--
-- * 'ltbdmNoDevice' - Suppresses the specified device included in the block device mapping of the AMI.
--
-- * 'ltbdmEBS' - Information about the block device for an EBS volume.
--
-- * 'ltbdmDeviceName' - The device name.
launchTemplateBlockDeviceMapping
    :: LaunchTemplateBlockDeviceMapping
launchTemplateBlockDeviceMapping =
  LaunchTemplateBlockDeviceMapping'
    { _ltbdmVirtualName = Nothing
    , _ltbdmNoDevice = Nothing
    , _ltbdmEBS = Nothing
    , _ltbdmDeviceName = Nothing
    }


-- | The virtual device name (ephemeralN).
ltbdmVirtualName :: Lens' LaunchTemplateBlockDeviceMapping (Maybe Text)
ltbdmVirtualName = lens _ltbdmVirtualName (\ s a -> s{_ltbdmVirtualName = a})

-- | Suppresses the specified device included in the block device mapping of the AMI.
ltbdmNoDevice :: Lens' LaunchTemplateBlockDeviceMapping (Maybe Text)
ltbdmNoDevice = lens _ltbdmNoDevice (\ s a -> s{_ltbdmNoDevice = a})

-- | Information about the block device for an EBS volume.
ltbdmEBS :: Lens' LaunchTemplateBlockDeviceMapping (Maybe LaunchTemplateEBSBlockDevice)
ltbdmEBS = lens _ltbdmEBS (\ s a -> s{_ltbdmEBS = a})

-- | The device name.
ltbdmDeviceName :: Lens' LaunchTemplateBlockDeviceMapping (Maybe Text)
ltbdmDeviceName = lens _ltbdmDeviceName (\ s a -> s{_ltbdmDeviceName = a})

instance FromXML LaunchTemplateBlockDeviceMapping
         where
        parseXML x
          = LaunchTemplateBlockDeviceMapping' <$>
              (x .@? "virtualName") <*> (x .@? "noDevice") <*>
                (x .@? "ebs")
                <*> (x .@? "deviceName")

instance Hashable LaunchTemplateBlockDeviceMapping
         where

instance NFData LaunchTemplateBlockDeviceMapping
         where

-- | Describes a block device mapping.
--
--
--
-- /See:/ 'launchTemplateBlockDeviceMappingRequest' smart constructor.
data LaunchTemplateBlockDeviceMappingRequest = LaunchTemplateBlockDeviceMappingRequest'
  { _ltbdmrVirtualName :: !(Maybe Text)
  , _ltbdmrNoDevice    :: !(Maybe Text)
  , _ltbdmrEBS         :: !(Maybe LaunchTemplateEBSBlockDeviceRequest)
  , _ltbdmrDeviceName  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateBlockDeviceMappingRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltbdmrVirtualName' - The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
--
-- * 'ltbdmrNoDevice' - Suppresses the specified device included in the block device mapping of the AMI.
--
-- * 'ltbdmrEBS' - Parameters used to automatically set up EBS volumes when the instance is launched.
--
-- * 'ltbdmrDeviceName' - The device name (for example, /dev/sdh or xvdh).
launchTemplateBlockDeviceMappingRequest
    :: LaunchTemplateBlockDeviceMappingRequest
launchTemplateBlockDeviceMappingRequest =
  LaunchTemplateBlockDeviceMappingRequest'
    { _ltbdmrVirtualName = Nothing
    , _ltbdmrNoDevice = Nothing
    , _ltbdmrEBS = Nothing
    , _ltbdmrDeviceName = Nothing
    }


-- | The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
ltbdmrVirtualName :: Lens' LaunchTemplateBlockDeviceMappingRequest (Maybe Text)
ltbdmrVirtualName = lens _ltbdmrVirtualName (\ s a -> s{_ltbdmrVirtualName = a})

-- | Suppresses the specified device included in the block device mapping of the AMI.
ltbdmrNoDevice :: Lens' LaunchTemplateBlockDeviceMappingRequest (Maybe Text)
ltbdmrNoDevice = lens _ltbdmrNoDevice (\ s a -> s{_ltbdmrNoDevice = a})

-- | Parameters used to automatically set up EBS volumes when the instance is launched.
ltbdmrEBS :: Lens' LaunchTemplateBlockDeviceMappingRequest (Maybe LaunchTemplateEBSBlockDeviceRequest)
ltbdmrEBS = lens _ltbdmrEBS (\ s a -> s{_ltbdmrEBS = a})

-- | The device name (for example, /dev/sdh or xvdh).
ltbdmrDeviceName :: Lens' LaunchTemplateBlockDeviceMappingRequest (Maybe Text)
ltbdmrDeviceName = lens _ltbdmrDeviceName (\ s a -> s{_ltbdmrDeviceName = a})

instance Hashable
           LaunchTemplateBlockDeviceMappingRequest
         where

instance NFData
           LaunchTemplateBlockDeviceMappingRequest
         where

instance ToQuery
           LaunchTemplateBlockDeviceMappingRequest
         where
        toQuery LaunchTemplateBlockDeviceMappingRequest'{..}
          = mconcat
              ["VirtualName" =: _ltbdmrVirtualName,
               "NoDevice" =: _ltbdmrNoDevice, "Ebs" =: _ltbdmrEBS,
               "DeviceName" =: _ltbdmrDeviceName]

-- | The CPU options for the instance.
--
--
--
-- /See:/ 'launchTemplateCPUOptions' smart constructor.
data LaunchTemplateCPUOptions = LaunchTemplateCPUOptions'
  { _ltcoCoreCount      :: !(Maybe Int)
  , _ltcoThreadsPerCore :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateCPUOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltcoCoreCount' - The number of CPU cores for the instance.
--
-- * 'ltcoThreadsPerCore' - The number of threads per CPU core.
launchTemplateCPUOptions
    :: LaunchTemplateCPUOptions
launchTemplateCPUOptions =
  LaunchTemplateCPUOptions'
    {_ltcoCoreCount = Nothing, _ltcoThreadsPerCore = Nothing}


-- | The number of CPU cores for the instance.
ltcoCoreCount :: Lens' LaunchTemplateCPUOptions (Maybe Int)
ltcoCoreCount = lens _ltcoCoreCount (\ s a -> s{_ltcoCoreCount = a})

-- | The number of threads per CPU core.
ltcoThreadsPerCore :: Lens' LaunchTemplateCPUOptions (Maybe Int)
ltcoThreadsPerCore = lens _ltcoThreadsPerCore (\ s a -> s{_ltcoThreadsPerCore = a})

instance FromXML LaunchTemplateCPUOptions where
        parseXML x
          = LaunchTemplateCPUOptions' <$>
              (x .@? "coreCount") <*> (x .@? "threadsPerCore")

instance Hashable LaunchTemplateCPUOptions where

instance NFData LaunchTemplateCPUOptions where

-- | The CPU options for the instance. Both the core count and threads per core must be specified in the request.
--
--
--
-- /See:/ 'launchTemplateCPUOptionsRequest' smart constructor.
data LaunchTemplateCPUOptionsRequest = LaunchTemplateCPUOptionsRequest'
  { _ltcorCoreCount      :: !(Maybe Int)
  , _ltcorThreadsPerCore :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateCPUOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltcorCoreCount' - The number of CPU cores for the instance.
--
-- * 'ltcorThreadsPerCore' - The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
launchTemplateCPUOptionsRequest
    :: LaunchTemplateCPUOptionsRequest
launchTemplateCPUOptionsRequest =
  LaunchTemplateCPUOptionsRequest'
    {_ltcorCoreCount = Nothing, _ltcorThreadsPerCore = Nothing}


-- | The number of CPU cores for the instance.
ltcorCoreCount :: Lens' LaunchTemplateCPUOptionsRequest (Maybe Int)
ltcorCoreCount = lens _ltcorCoreCount (\ s a -> s{_ltcorCoreCount = a})

-- | The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
ltcorThreadsPerCore :: Lens' LaunchTemplateCPUOptionsRequest (Maybe Int)
ltcorThreadsPerCore = lens _ltcorThreadsPerCore (\ s a -> s{_ltcorThreadsPerCore = a})

instance Hashable LaunchTemplateCPUOptionsRequest
         where

instance NFData LaunchTemplateCPUOptionsRequest where

instance ToQuery LaunchTemplateCPUOptionsRequest
         where
        toQuery LaunchTemplateCPUOptionsRequest'{..}
          = mconcat
              ["CoreCount" =: _ltcorCoreCount,
               "ThreadsPerCore" =: _ltcorThreadsPerCore]

-- | Describes an instance's Capacity Reservation targeting option. You can specify only one option at a time. Use the @CapacityReservationPreference@ parameter to configure the instance to run in On-Demand capacity or to run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the @CapacityReservationTarget@ parameter to explicitly target a specific Capacity Reservation or a Capacity Reservation group.
--
--
--
-- /See:/ 'launchTemplateCapacityReservationSpecificationRequest' smart constructor.
data LaunchTemplateCapacityReservationSpecificationRequest = LaunchTemplateCapacityReservationSpecificationRequest'
  { _ltcrsrCapacityReservationTarget :: !(Maybe CapacityReservationTarget)
  , _ltcrsrCapacityReservationPreference :: !(Maybe CapacityReservationPreference)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateCapacityReservationSpecificationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltcrsrCapacityReservationTarget' - Information about the target Capacity Reservation or Capacity Reservation group.
--
-- * 'ltcrsrCapacityReservationPreference' - Indicates the instance's Capacity Reservation preferences. Possible preferences include:     * @open@ - The instance can run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).     * @none@ - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
launchTemplateCapacityReservationSpecificationRequest
    :: LaunchTemplateCapacityReservationSpecificationRequest
launchTemplateCapacityReservationSpecificationRequest =
  LaunchTemplateCapacityReservationSpecificationRequest'
    { _ltcrsrCapacityReservationTarget = Nothing
    , _ltcrsrCapacityReservationPreference = Nothing
    }


-- | Information about the target Capacity Reservation or Capacity Reservation group.
ltcrsrCapacityReservationTarget :: Lens' LaunchTemplateCapacityReservationSpecificationRequest (Maybe CapacityReservationTarget)
ltcrsrCapacityReservationTarget = lens _ltcrsrCapacityReservationTarget (\ s a -> s{_ltcrsrCapacityReservationTarget = a})

-- | Indicates the instance's Capacity Reservation preferences. Possible preferences include:     * @open@ - The instance can run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).     * @none@ - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
ltcrsrCapacityReservationPreference :: Lens' LaunchTemplateCapacityReservationSpecificationRequest (Maybe CapacityReservationPreference)
ltcrsrCapacityReservationPreference = lens _ltcrsrCapacityReservationPreference (\ s a -> s{_ltcrsrCapacityReservationPreference = a})

instance Hashable
           LaunchTemplateCapacityReservationSpecificationRequest
         where

instance NFData
           LaunchTemplateCapacityReservationSpecificationRequest
         where

instance ToQuery
           LaunchTemplateCapacityReservationSpecificationRequest
         where
        toQuery
          LaunchTemplateCapacityReservationSpecificationRequest'{..}
          = mconcat
              ["CapacityReservationTarget" =:
                 _ltcrsrCapacityReservationTarget,
               "CapacityReservationPreference" =:
                 _ltcrsrCapacityReservationPreference]

-- | Information about the Capacity Reservation targeting option.
--
--
--
-- /See:/ 'launchTemplateCapacityReservationSpecificationResponse' smart constructor.
data LaunchTemplateCapacityReservationSpecificationResponse = LaunchTemplateCapacityReservationSpecificationResponse'
  { _ltcrsCapacityReservationTarget :: !(Maybe CapacityReservationTargetResponse)
  , _ltcrsCapacityReservationPreference :: !(Maybe CapacityReservationPreference)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateCapacityReservationSpecificationResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltcrsCapacityReservationTarget' - Information about the target Capacity Reservation or Capacity Reservation group.
--
-- * 'ltcrsCapacityReservationPreference' - Indicates the instance's Capacity Reservation preferences. Possible preferences include:     * @open@ - The instance can run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).     * @none@ - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
launchTemplateCapacityReservationSpecificationResponse
    :: LaunchTemplateCapacityReservationSpecificationResponse
launchTemplateCapacityReservationSpecificationResponse =
  LaunchTemplateCapacityReservationSpecificationResponse'
    { _ltcrsCapacityReservationTarget = Nothing
    , _ltcrsCapacityReservationPreference = Nothing
    }


-- | Information about the target Capacity Reservation or Capacity Reservation group.
ltcrsCapacityReservationTarget :: Lens' LaunchTemplateCapacityReservationSpecificationResponse (Maybe CapacityReservationTargetResponse)
ltcrsCapacityReservationTarget = lens _ltcrsCapacityReservationTarget (\ s a -> s{_ltcrsCapacityReservationTarget = a})

-- | Indicates the instance's Capacity Reservation preferences. Possible preferences include:     * @open@ - The instance can run in any @open@ Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).     * @none@ - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
ltcrsCapacityReservationPreference :: Lens' LaunchTemplateCapacityReservationSpecificationResponse (Maybe CapacityReservationPreference)
ltcrsCapacityReservationPreference = lens _ltcrsCapacityReservationPreference (\ s a -> s{_ltcrsCapacityReservationPreference = a})

instance FromXML
           LaunchTemplateCapacityReservationSpecificationResponse
         where
        parseXML x
          = LaunchTemplateCapacityReservationSpecificationResponse'
              <$>
              (x .@? "capacityReservationTarget") <*>
                (x .@? "capacityReservationPreference")

instance Hashable
           LaunchTemplateCapacityReservationSpecificationResponse
         where

instance NFData
           LaunchTemplateCapacityReservationSpecificationResponse
         where

-- | Describes a launch template and overrides.
--
--
--
-- /See:/ 'launchTemplateConfig' smart constructor.
data LaunchTemplateConfig = LaunchTemplateConfig'
  { _ltcOverrides                   :: !(Maybe [LaunchTemplateOverrides])
  , _ltcLaunchTemplateSpecification :: !(Maybe FleetLaunchTemplateSpecification)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateConfig' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltcOverrides' - Any parameters that you specify override the same parameters in the launch template.
--
-- * 'ltcLaunchTemplateSpecification' - The launch template.
launchTemplateConfig
    :: LaunchTemplateConfig
launchTemplateConfig =
  LaunchTemplateConfig'
    {_ltcOverrides = Nothing, _ltcLaunchTemplateSpecification = Nothing}


-- | Any parameters that you specify override the same parameters in the launch template.
ltcOverrides :: Lens' LaunchTemplateConfig [LaunchTemplateOverrides]
ltcOverrides = lens _ltcOverrides (\ s a -> s{_ltcOverrides = a}) . _Default . _Coerce

-- | The launch template.
ltcLaunchTemplateSpecification :: Lens' LaunchTemplateConfig (Maybe FleetLaunchTemplateSpecification)
ltcLaunchTemplateSpecification = lens _ltcLaunchTemplateSpecification (\ s a -> s{_ltcLaunchTemplateSpecification = a})

instance FromXML LaunchTemplateConfig where
        parseXML x
          = LaunchTemplateConfig' <$>
              (x .@? "overrides" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "launchTemplateSpecification")

instance Hashable LaunchTemplateConfig where

instance NFData LaunchTemplateConfig where

instance ToQuery LaunchTemplateConfig where
        toQuery LaunchTemplateConfig'{..}
          = mconcat
              [toQuery (toQueryList "Overrides" <$> _ltcOverrides),
               "LaunchTemplateSpecification" =:
                 _ltcLaunchTemplateSpecification]

-- | Describes a block device for an EBS volume.
--
--
--
-- /See:/ 'launchTemplateEBSBlockDevice' smart constructor.
data LaunchTemplateEBSBlockDevice = LaunchTemplateEBSBlockDevice'
  { _ltebdDeleteOnTermination :: !(Maybe Bool)
  , _ltebdThroughput          :: !(Maybe Int)
  , _ltebdVolumeSize          :: !(Maybe Int)
  , _ltebdIOPS                :: !(Maybe Int)
  , _ltebdEncrypted           :: !(Maybe Bool)
  , _ltebdKMSKeyId            :: !(Maybe Text)
  , _ltebdVolumeType          :: !(Maybe VolumeType)
  , _ltebdSnapshotId          :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateEBSBlockDevice' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltebdDeleteOnTermination' - Indicates whether the EBS volume is deleted on instance termination.
--
-- * 'ltebdThroughput' - The throughput that the volume supports, in MiB/s.
--
-- * 'ltebdVolumeSize' - The size of the volume, in GiB.
--
-- * 'ltebdIOPS' - The number of I/O operations per second (IOPS) that the volume supports.
--
-- * 'ltebdEncrypted' - Indicates whether the EBS volume is encrypted.
--
-- * 'ltebdKMSKeyId' - The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.
--
-- * 'ltebdVolumeType' - The volume type.
--
-- * 'ltebdSnapshotId' - The ID of the snapshot.
launchTemplateEBSBlockDevice
    :: LaunchTemplateEBSBlockDevice
launchTemplateEBSBlockDevice =
  LaunchTemplateEBSBlockDevice'
    { _ltebdDeleteOnTermination = Nothing
    , _ltebdThroughput = Nothing
    , _ltebdVolumeSize = Nothing
    , _ltebdIOPS = Nothing
    , _ltebdEncrypted = Nothing
    , _ltebdKMSKeyId = Nothing
    , _ltebdVolumeType = Nothing
    , _ltebdSnapshotId = Nothing
    }


-- | Indicates whether the EBS volume is deleted on instance termination.
ltebdDeleteOnTermination :: Lens' LaunchTemplateEBSBlockDevice (Maybe Bool)
ltebdDeleteOnTermination = lens _ltebdDeleteOnTermination (\ s a -> s{_ltebdDeleteOnTermination = a})

-- | The throughput that the volume supports, in MiB/s.
ltebdThroughput :: Lens' LaunchTemplateEBSBlockDevice (Maybe Int)
ltebdThroughput = lens _ltebdThroughput (\ s a -> s{_ltebdThroughput = a})

-- | The size of the volume, in GiB.
ltebdVolumeSize :: Lens' LaunchTemplateEBSBlockDevice (Maybe Int)
ltebdVolumeSize = lens _ltebdVolumeSize (\ s a -> s{_ltebdVolumeSize = a})

-- | The number of I/O operations per second (IOPS) that the volume supports.
ltebdIOPS :: Lens' LaunchTemplateEBSBlockDevice (Maybe Int)
ltebdIOPS = lens _ltebdIOPS (\ s a -> s{_ltebdIOPS = a})

-- | Indicates whether the EBS volume is encrypted.
ltebdEncrypted :: Lens' LaunchTemplateEBSBlockDevice (Maybe Bool)
ltebdEncrypted = lens _ltebdEncrypted (\ s a -> s{_ltebdEncrypted = a})

-- | The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.
ltebdKMSKeyId :: Lens' LaunchTemplateEBSBlockDevice (Maybe Text)
ltebdKMSKeyId = lens _ltebdKMSKeyId (\ s a -> s{_ltebdKMSKeyId = a})

-- | The volume type.
ltebdVolumeType :: Lens' LaunchTemplateEBSBlockDevice (Maybe VolumeType)
ltebdVolumeType = lens _ltebdVolumeType (\ s a -> s{_ltebdVolumeType = a})

-- | The ID of the snapshot.
ltebdSnapshotId :: Lens' LaunchTemplateEBSBlockDevice (Maybe Text)
ltebdSnapshotId = lens _ltebdSnapshotId (\ s a -> s{_ltebdSnapshotId = a})

instance FromXML LaunchTemplateEBSBlockDevice where
        parseXML x
          = LaunchTemplateEBSBlockDevice' <$>
              (x .@? "deleteOnTermination") <*>
                (x .@? "throughput")
                <*> (x .@? "volumeSize")
                <*> (x .@? "iops")
                <*> (x .@? "encrypted")
                <*> (x .@? "kmsKeyId")
                <*> (x .@? "volumeType")
                <*> (x .@? "snapshotId")

instance Hashable LaunchTemplateEBSBlockDevice where

instance NFData LaunchTemplateEBSBlockDevice where

-- | The parameters for a block device for an EBS volume.
--
--
--
-- /See:/ 'launchTemplateEBSBlockDeviceRequest' smart constructor.
data LaunchTemplateEBSBlockDeviceRequest = LaunchTemplateEBSBlockDeviceRequest'
  { _ltebdrDeleteOnTermination :: !(Maybe Bool)
  , _ltebdrThroughput          :: !(Maybe Int)
  , _ltebdrVolumeSize          :: !(Maybe Int)
  , _ltebdrIOPS                :: !(Maybe Int)
  , _ltebdrEncrypted           :: !(Maybe Bool)
  , _ltebdrKMSKeyId            :: !(Maybe Text)
  , _ltebdrVolumeType          :: !(Maybe VolumeType)
  , _ltebdrSnapshotId          :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateEBSBlockDeviceRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltebdrDeleteOnTermination' - Indicates whether the EBS volume is deleted on instance termination.
--
-- * 'ltebdrThroughput' - The throughput to provision for a @gp3@ volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.
--
-- * 'ltebdrVolumeSize' - The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:     * @gp2@ and @gp3@ : 1-16,384     * @io1@ and @io2@ : 4-16,384     * @st1@ and @sc1@ : 125-16,384     * @standard@ : 1-1,024
--
-- * 'ltebdrIOPS' - The number of I/O operations per second (IOPS). For @gp3@ , @io1@ , and @io2@ volumes, this represents the number of IOPS that are provisioned for the volume. For @gp2@ volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:     * @gp3@ : 3,000-16,000 IOPS     * @io1@ : 100-64,000 IOPS     * @io2@ : 100-64,000 IOPS For @io1@ and @io2@ volumes, we guarantee 64,000 IOPS only for <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances Instances built on the Nitro System> . Other instance families guarantee performance up to 32,000 IOPS. This parameter is required for @io1@ and @io2@ volumes. The default for @gp3@ volumes is 3,000 IOPS. This parameter is not supported for @gp2@ , @st1@ , @sc1@ , or @standard@ volumes.
--
-- * 'ltebdrEncrypted' - Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
--
-- * 'ltebdrKMSKeyId' - The ARN of the symmetric AWS Key Management Service (AWS KMS) CMK used for encryption.
--
-- * 'ltebdrVolumeType' - The volume type. The default is @gp2@ . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html Amazon EBS volume types> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'ltebdrSnapshotId' - The ID of the snapshot.
launchTemplateEBSBlockDeviceRequest
    :: LaunchTemplateEBSBlockDeviceRequest
launchTemplateEBSBlockDeviceRequest =
  LaunchTemplateEBSBlockDeviceRequest'
    { _ltebdrDeleteOnTermination = Nothing
    , _ltebdrThroughput = Nothing
    , _ltebdrVolumeSize = Nothing
    , _ltebdrIOPS = Nothing
    , _ltebdrEncrypted = Nothing
    , _ltebdrKMSKeyId = Nothing
    , _ltebdrVolumeType = Nothing
    , _ltebdrSnapshotId = Nothing
    }


-- | Indicates whether the EBS volume is deleted on instance termination.
ltebdrDeleteOnTermination :: Lens' LaunchTemplateEBSBlockDeviceRequest (Maybe Bool)
ltebdrDeleteOnTermination = lens _ltebdrDeleteOnTermination (\ s a -> s{_ltebdrDeleteOnTermination = a})

-- | The throughput to provision for a @gp3@ volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.
ltebdrThroughput :: Lens' LaunchTemplateEBSBlockDeviceRequest (Maybe Int)
ltebdrThroughput = lens _ltebdrThroughput (\ s a -> s{_ltebdrThroughput = a})

-- | The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:     * @gp2@ and @gp3@ : 1-16,384     * @io1@ and @io2@ : 4-16,384     * @st1@ and @sc1@ : 125-16,384     * @standard@ : 1-1,024
ltebdrVolumeSize :: Lens' LaunchTemplateEBSBlockDeviceRequest (Maybe Int)
ltebdrVolumeSize = lens _ltebdrVolumeSize (\ s a -> s{_ltebdrVolumeSize = a})

-- | The number of I/O operations per second (IOPS). For @gp3@ , @io1@ , and @io2@ volumes, this represents the number of IOPS that are provisioned for the volume. For @gp2@ volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:     * @gp3@ : 3,000-16,000 IOPS     * @io1@ : 100-64,000 IOPS     * @io2@ : 100-64,000 IOPS For @io1@ and @io2@ volumes, we guarantee 64,000 IOPS only for <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances Instances built on the Nitro System> . Other instance families guarantee performance up to 32,000 IOPS. This parameter is required for @io1@ and @io2@ volumes. The default for @gp3@ volumes is 3,000 IOPS. This parameter is not supported for @gp2@ , @st1@ , @sc1@ , or @standard@ volumes.
ltebdrIOPS :: Lens' LaunchTemplateEBSBlockDeviceRequest (Maybe Int)
ltebdrIOPS = lens _ltebdrIOPS (\ s a -> s{_ltebdrIOPS = a})

-- | Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
ltebdrEncrypted :: Lens' LaunchTemplateEBSBlockDeviceRequest (Maybe Bool)
ltebdrEncrypted = lens _ltebdrEncrypted (\ s a -> s{_ltebdrEncrypted = a})

-- | The ARN of the symmetric AWS Key Management Service (AWS KMS) CMK used for encryption.
ltebdrKMSKeyId :: Lens' LaunchTemplateEBSBlockDeviceRequest (Maybe Text)
ltebdrKMSKeyId = lens _ltebdrKMSKeyId (\ s a -> s{_ltebdrKMSKeyId = a})

-- | The volume type. The default is @gp2@ . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html Amazon EBS volume types> in the /Amazon Elastic Compute Cloud User Guide/ .
ltebdrVolumeType :: Lens' LaunchTemplateEBSBlockDeviceRequest (Maybe VolumeType)
ltebdrVolumeType = lens _ltebdrVolumeType (\ s a -> s{_ltebdrVolumeType = a})

-- | The ID of the snapshot.
ltebdrSnapshotId :: Lens' LaunchTemplateEBSBlockDeviceRequest (Maybe Text)
ltebdrSnapshotId = lens _ltebdrSnapshotId (\ s a -> s{_ltebdrSnapshotId = a})

instance Hashable LaunchTemplateEBSBlockDeviceRequest
         where

instance NFData LaunchTemplateEBSBlockDeviceRequest
         where

instance ToQuery LaunchTemplateEBSBlockDeviceRequest
         where
        toQuery LaunchTemplateEBSBlockDeviceRequest'{..}
          = mconcat
              ["DeleteOnTermination" =: _ltebdrDeleteOnTermination,
               "Throughput" =: _ltebdrThroughput,
               "VolumeSize" =: _ltebdrVolumeSize,
               "Iops" =: _ltebdrIOPS,
               "Encrypted" =: _ltebdrEncrypted,
               "KmsKeyId" =: _ltebdrKMSKeyId,
               "VolumeType" =: _ltebdrVolumeType,
               "SnapshotId" =: _ltebdrSnapshotId]

-- | Describes an elastic inference accelerator.
--
--
--
-- /See:/ 'launchTemplateElasticInferenceAccelerator' smart constructor.
data LaunchTemplateElasticInferenceAccelerator = LaunchTemplateElasticInferenceAccelerator'
  { _lteiaCount :: !(Maybe Nat)
  , _lteiaType  :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateElasticInferenceAccelerator' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lteiaCount' - The number of elastic inference accelerators to attach to the instance.  Default: 1
--
-- * 'lteiaType' - The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
launchTemplateElasticInferenceAccelerator
    :: Text -- ^ 'lteiaType'
    -> LaunchTemplateElasticInferenceAccelerator
launchTemplateElasticInferenceAccelerator pType_ =
  LaunchTemplateElasticInferenceAccelerator'
    {_lteiaCount = Nothing, _lteiaType = pType_}


-- | The number of elastic inference accelerators to attach to the instance.  Default: 1
lteiaCount :: Lens' LaunchTemplateElasticInferenceAccelerator (Maybe Natural)
lteiaCount = lens _lteiaCount (\ s a -> s{_lteiaCount = a}) . mapping _Nat

-- | The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
lteiaType :: Lens' LaunchTemplateElasticInferenceAccelerator Text
lteiaType = lens _lteiaType (\ s a -> s{_lteiaType = a})

instance Hashable
           LaunchTemplateElasticInferenceAccelerator
         where

instance NFData
           LaunchTemplateElasticInferenceAccelerator
         where

instance ToQuery
           LaunchTemplateElasticInferenceAccelerator
         where
        toQuery
          LaunchTemplateElasticInferenceAccelerator'{..}
          = mconcat
              ["Count" =: _lteiaCount, "Type" =: _lteiaType]

-- | Describes an elastic inference accelerator.
--
--
--
-- /See:/ 'launchTemplateElasticInferenceAcceleratorResponse' smart constructor.
data LaunchTemplateElasticInferenceAcceleratorResponse = LaunchTemplateElasticInferenceAcceleratorResponse'
  { _lCount :: !(Maybe Int)
  , _lType  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateElasticInferenceAcceleratorResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lCount' - The number of elastic inference accelerators to attach to the instance.  Default: 1
--
-- * 'lType' - The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
launchTemplateElasticInferenceAcceleratorResponse
    :: LaunchTemplateElasticInferenceAcceleratorResponse
launchTemplateElasticInferenceAcceleratorResponse =
  LaunchTemplateElasticInferenceAcceleratorResponse'
    {_lCount = Nothing, _lType = Nothing}


-- | The number of elastic inference accelerators to attach to the instance.  Default: 1
lCount :: Lens' LaunchTemplateElasticInferenceAcceleratorResponse (Maybe Int)
lCount = lens _lCount (\ s a -> s{_lCount = a})

-- | The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
lType :: Lens' LaunchTemplateElasticInferenceAcceleratorResponse (Maybe Text)
lType = lens _lType (\ s a -> s{_lType = a})

instance FromXML
           LaunchTemplateElasticInferenceAcceleratorResponse
         where
        parseXML x
          = LaunchTemplateElasticInferenceAcceleratorResponse'
              <$> (x .@? "count") <*> (x .@? "type")

instance Hashable
           LaunchTemplateElasticInferenceAcceleratorResponse
         where

instance NFData
           LaunchTemplateElasticInferenceAcceleratorResponse
         where

-- | Indicates whether the instance is enabled for AWS Nitro Enclaves.
--
--
--
-- /See:/ 'launchTemplateEnclaveOptions' smart constructor.
newtype LaunchTemplateEnclaveOptions = LaunchTemplateEnclaveOptions'
  { _lteoEnabled :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateEnclaveOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lteoEnabled' - If this parameter is set to @true@ , the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
launchTemplateEnclaveOptions
    :: LaunchTemplateEnclaveOptions
launchTemplateEnclaveOptions =
  LaunchTemplateEnclaveOptions' {_lteoEnabled = Nothing}


-- | If this parameter is set to @true@ , the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
lteoEnabled :: Lens' LaunchTemplateEnclaveOptions (Maybe Bool)
lteoEnabled = lens _lteoEnabled (\ s a -> s{_lteoEnabled = a})

instance FromXML LaunchTemplateEnclaveOptions where
        parseXML x
          = LaunchTemplateEnclaveOptions' <$> (x .@? "enabled")

instance Hashable LaunchTemplateEnclaveOptions where

instance NFData LaunchTemplateEnclaveOptions where

-- | Indicates whether the instance is enabled for AWS Nitro Enclaves. For more information, see <https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html What is AWS Nitro Enclaves?> in the /AWS Nitro Enclaves User Guide/ .
--
--
--
-- /See:/ 'launchTemplateEnclaveOptionsRequest' smart constructor.
newtype LaunchTemplateEnclaveOptionsRequest = LaunchTemplateEnclaveOptionsRequest'
  { _lteorEnabled :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateEnclaveOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lteorEnabled' - To enable the instance for AWS Nitro Enclaves, set this parameter to @true@ .
launchTemplateEnclaveOptionsRequest
    :: LaunchTemplateEnclaveOptionsRequest
launchTemplateEnclaveOptionsRequest =
  LaunchTemplateEnclaveOptionsRequest' {_lteorEnabled = Nothing}


-- | To enable the instance for AWS Nitro Enclaves, set this parameter to @true@ .
lteorEnabled :: Lens' LaunchTemplateEnclaveOptionsRequest (Maybe Bool)
lteorEnabled = lens _lteorEnabled (\ s a -> s{_lteorEnabled = a})

instance Hashable LaunchTemplateEnclaveOptionsRequest
         where

instance NFData LaunchTemplateEnclaveOptionsRequest
         where

instance ToQuery LaunchTemplateEnclaveOptionsRequest
         where
        toQuery LaunchTemplateEnclaveOptionsRequest'{..}
          = mconcat ["Enabled" =: _lteorEnabled]

-- | Indicates whether an instance is configured for hibernation.
--
--
--
-- /See:/ 'launchTemplateHibernationOptions' smart constructor.
newtype LaunchTemplateHibernationOptions = LaunchTemplateHibernationOptions'
  { _lthoConfigured :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateHibernationOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lthoConfigured' - If this parameter is set to @true@ , the instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
launchTemplateHibernationOptions
    :: LaunchTemplateHibernationOptions
launchTemplateHibernationOptions =
  LaunchTemplateHibernationOptions' {_lthoConfigured = Nothing}


-- | If this parameter is set to @true@ , the instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
lthoConfigured :: Lens' LaunchTemplateHibernationOptions (Maybe Bool)
lthoConfigured = lens _lthoConfigured (\ s a -> s{_lthoConfigured = a})

instance FromXML LaunchTemplateHibernationOptions
         where
        parseXML x
          = LaunchTemplateHibernationOptions' <$>
              (x .@? "configured")

instance Hashable LaunchTemplateHibernationOptions
         where

instance NFData LaunchTemplateHibernationOptions
         where

-- | Indicates whether the instance is configured for hibernation. This parameter is valid only if the instance meets the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites hibernation prerequisites> .
--
--
--
-- /See:/ 'launchTemplateHibernationOptionsRequest' smart constructor.
newtype LaunchTemplateHibernationOptionsRequest = LaunchTemplateHibernationOptionsRequest'
  { _lthorConfigured :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateHibernationOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lthorConfigured' - If you set this parameter to @true@ , the instance is enabled for hibernation. Default: @false@
launchTemplateHibernationOptionsRequest
    :: LaunchTemplateHibernationOptionsRequest
launchTemplateHibernationOptionsRequest =
  LaunchTemplateHibernationOptionsRequest' {_lthorConfigured = Nothing}


-- | If you set this parameter to @true@ , the instance is enabled for hibernation. Default: @false@
lthorConfigured :: Lens' LaunchTemplateHibernationOptionsRequest (Maybe Bool)
lthorConfigured = lens _lthorConfigured (\ s a -> s{_lthorConfigured = a})

instance Hashable
           LaunchTemplateHibernationOptionsRequest
         where

instance NFData
           LaunchTemplateHibernationOptionsRequest
         where

instance ToQuery
           LaunchTemplateHibernationOptionsRequest
         where
        toQuery LaunchTemplateHibernationOptionsRequest'{..}
          = mconcat ["Configured" =: _lthorConfigured]

-- | Describes an IAM instance profile.
--
--
--
-- /See:/ 'launchTemplateIAMInstanceProfileSpecification' smart constructor.
data LaunchTemplateIAMInstanceProfileSpecification = LaunchTemplateIAMInstanceProfileSpecification'
  { _ltiapsARN  :: !(Maybe Text)
  , _ltiapsName :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateIAMInstanceProfileSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltiapsARN' - The Amazon Resource Name (ARN) of the instance profile.
--
-- * 'ltiapsName' - The name of the instance profile.
launchTemplateIAMInstanceProfileSpecification
    :: LaunchTemplateIAMInstanceProfileSpecification
launchTemplateIAMInstanceProfileSpecification =
  LaunchTemplateIAMInstanceProfileSpecification'
    {_ltiapsARN = Nothing, _ltiapsName = Nothing}


-- | The Amazon Resource Name (ARN) of the instance profile.
ltiapsARN :: Lens' LaunchTemplateIAMInstanceProfileSpecification (Maybe Text)
ltiapsARN = lens _ltiapsARN (\ s a -> s{_ltiapsARN = a})

-- | The name of the instance profile.
ltiapsName :: Lens' LaunchTemplateIAMInstanceProfileSpecification (Maybe Text)
ltiapsName = lens _ltiapsName (\ s a -> s{_ltiapsName = a})

instance FromXML
           LaunchTemplateIAMInstanceProfileSpecification
         where
        parseXML x
          = LaunchTemplateIAMInstanceProfileSpecification' <$>
              (x .@? "arn") <*> (x .@? "name")

instance Hashable
           LaunchTemplateIAMInstanceProfileSpecification
         where

instance NFData
           LaunchTemplateIAMInstanceProfileSpecification
         where

-- | An IAM instance profile.
--
--
--
-- /See:/ 'launchTemplateIAMInstanceProfileSpecificationRequest' smart constructor.
data LaunchTemplateIAMInstanceProfileSpecificationRequest = LaunchTemplateIAMInstanceProfileSpecificationRequest'
  { _ltiapsrARN  :: !(Maybe Text)
  , _ltiapsrName :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateIAMInstanceProfileSpecificationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltiapsrARN' - The Amazon Resource Name (ARN) of the instance profile.
--
-- * 'ltiapsrName' - The name of the instance profile.
launchTemplateIAMInstanceProfileSpecificationRequest
    :: LaunchTemplateIAMInstanceProfileSpecificationRequest
launchTemplateIAMInstanceProfileSpecificationRequest =
  LaunchTemplateIAMInstanceProfileSpecificationRequest'
    {_ltiapsrARN = Nothing, _ltiapsrName = Nothing}


-- | The Amazon Resource Name (ARN) of the instance profile.
ltiapsrARN :: Lens' LaunchTemplateIAMInstanceProfileSpecificationRequest (Maybe Text)
ltiapsrARN = lens _ltiapsrARN (\ s a -> s{_ltiapsrARN = a})

-- | The name of the instance profile.
ltiapsrName :: Lens' LaunchTemplateIAMInstanceProfileSpecificationRequest (Maybe Text)
ltiapsrName = lens _ltiapsrName (\ s a -> s{_ltiapsrName = a})

instance Hashable
           LaunchTemplateIAMInstanceProfileSpecificationRequest
         where

instance NFData
           LaunchTemplateIAMInstanceProfileSpecificationRequest
         where

instance ToQuery
           LaunchTemplateIAMInstanceProfileSpecificationRequest
         where
        toQuery
          LaunchTemplateIAMInstanceProfileSpecificationRequest'{..}
          = mconcat
              ["Arn" =: _ltiapsrARN, "Name" =: _ltiapsrName]

-- | The market (purchasing) option for the instances.
--
--
--
-- /See:/ 'launchTemplateInstanceMarketOptions' smart constructor.
data LaunchTemplateInstanceMarketOptions = LaunchTemplateInstanceMarketOptions'
  { _ltimoMarketType  :: !(Maybe MarketType)
  , _ltimoSpotOptions :: !(Maybe LaunchTemplateSpotMarketOptions)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateInstanceMarketOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltimoMarketType' - The market type.
--
-- * 'ltimoSpotOptions' - The options for Spot Instances.
launchTemplateInstanceMarketOptions
    :: LaunchTemplateInstanceMarketOptions
launchTemplateInstanceMarketOptions =
  LaunchTemplateInstanceMarketOptions'
    {_ltimoMarketType = Nothing, _ltimoSpotOptions = Nothing}


-- | The market type.
ltimoMarketType :: Lens' LaunchTemplateInstanceMarketOptions (Maybe MarketType)
ltimoMarketType = lens _ltimoMarketType (\ s a -> s{_ltimoMarketType = a})

-- | The options for Spot Instances.
ltimoSpotOptions :: Lens' LaunchTemplateInstanceMarketOptions (Maybe LaunchTemplateSpotMarketOptions)
ltimoSpotOptions = lens _ltimoSpotOptions (\ s a -> s{_ltimoSpotOptions = a})

instance FromXML LaunchTemplateInstanceMarketOptions
         where
        parseXML x
          = LaunchTemplateInstanceMarketOptions' <$>
              (x .@? "marketType") <*> (x .@? "spotOptions")

instance Hashable LaunchTemplateInstanceMarketOptions
         where

instance NFData LaunchTemplateInstanceMarketOptions
         where

-- | The market (purchasing) option for the instances.
--
--
--
-- /See:/ 'launchTemplateInstanceMarketOptionsRequest' smart constructor.
data LaunchTemplateInstanceMarketOptionsRequest = LaunchTemplateInstanceMarketOptionsRequest'
  { _ltimorMarketType  :: !(Maybe MarketType)
  , _ltimorSpotOptions :: !(Maybe LaunchTemplateSpotMarketOptionsRequest)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateInstanceMarketOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltimorMarketType' - The market type.
--
-- * 'ltimorSpotOptions' - The options for Spot Instances.
launchTemplateInstanceMarketOptionsRequest
    :: LaunchTemplateInstanceMarketOptionsRequest
launchTemplateInstanceMarketOptionsRequest =
  LaunchTemplateInstanceMarketOptionsRequest'
    {_ltimorMarketType = Nothing, _ltimorSpotOptions = Nothing}


-- | The market type.
ltimorMarketType :: Lens' LaunchTemplateInstanceMarketOptionsRequest (Maybe MarketType)
ltimorMarketType = lens _ltimorMarketType (\ s a -> s{_ltimorMarketType = a})

-- | The options for Spot Instances.
ltimorSpotOptions :: Lens' LaunchTemplateInstanceMarketOptionsRequest (Maybe LaunchTemplateSpotMarketOptionsRequest)
ltimorSpotOptions = lens _ltimorSpotOptions (\ s a -> s{_ltimorSpotOptions = a})

instance Hashable
           LaunchTemplateInstanceMarketOptionsRequest
         where

instance NFData
           LaunchTemplateInstanceMarketOptionsRequest
         where

instance ToQuery
           LaunchTemplateInstanceMarketOptionsRequest
         where
        toQuery
          LaunchTemplateInstanceMarketOptionsRequest'{..}
          = mconcat
              ["MarketType" =: _ltimorMarketType,
               "SpotOptions" =: _ltimorSpotOptions]

-- | The metadata options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html Instance Metadata and User Data> in the /Amazon Elastic Compute Cloud User Guide/ .
--
--
--
-- /See:/ 'launchTemplateInstanceMetadataOptions' smart constructor.
data LaunchTemplateInstanceMetadataOptions = LaunchTemplateInstanceMetadataOptions'
  { _ltimoState :: !(Maybe LaunchTemplateInstanceMetadataOptionsState)
  , _ltimoHTTPEndpoint :: !(Maybe LaunchTemplateInstanceMetadataEndpointState)
  , _ltimoHTTPPutResponseHopLimit :: !(Maybe Int)
  , _ltimoHTTPTokens :: !(Maybe LaunchTemplateHTTPTokensState)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateInstanceMetadataOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltimoState' - The state of the metadata option changes. @pending@ - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection. @applied@ - The metadata options have been successfully applied on the instance.
--
-- * 'ltimoHTTPEndpoint' - This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is @enabled@ .
--
-- * 'ltimoHTTPPutResponseHopLimit' - The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
--
-- * 'ltimoHTTPTokens' - The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is @optional@ . If the state is @optional@ , you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is @required@ , you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
launchTemplateInstanceMetadataOptions
    :: LaunchTemplateInstanceMetadataOptions
launchTemplateInstanceMetadataOptions =
  LaunchTemplateInstanceMetadataOptions'
    { _ltimoState = Nothing
    , _ltimoHTTPEndpoint = Nothing
    , _ltimoHTTPPutResponseHopLimit = Nothing
    , _ltimoHTTPTokens = Nothing
    }


-- | The state of the metadata option changes. @pending@ - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection. @applied@ - The metadata options have been successfully applied on the instance.
ltimoState :: Lens' LaunchTemplateInstanceMetadataOptions (Maybe LaunchTemplateInstanceMetadataOptionsState)
ltimoState = lens _ltimoState (\ s a -> s{_ltimoState = a})

-- | This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is @enabled@ .
ltimoHTTPEndpoint :: Lens' LaunchTemplateInstanceMetadataOptions (Maybe LaunchTemplateInstanceMetadataEndpointState)
ltimoHTTPEndpoint = lens _ltimoHTTPEndpoint (\ s a -> s{_ltimoHTTPEndpoint = a})

-- | The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
ltimoHTTPPutResponseHopLimit :: Lens' LaunchTemplateInstanceMetadataOptions (Maybe Int)
ltimoHTTPPutResponseHopLimit = lens _ltimoHTTPPutResponseHopLimit (\ s a -> s{_ltimoHTTPPutResponseHopLimit = a})

-- | The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is @optional@ . If the state is @optional@ , you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is @required@ , you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
ltimoHTTPTokens :: Lens' LaunchTemplateInstanceMetadataOptions (Maybe LaunchTemplateHTTPTokensState)
ltimoHTTPTokens = lens _ltimoHTTPTokens (\ s a -> s{_ltimoHTTPTokens = a})

instance FromXML
           LaunchTemplateInstanceMetadataOptions
         where
        parseXML x
          = LaunchTemplateInstanceMetadataOptions' <$>
              (x .@? "state") <*> (x .@? "httpEndpoint") <*>
                (x .@? "httpPutResponseHopLimit")
                <*> (x .@? "httpTokens")

instance Hashable
           LaunchTemplateInstanceMetadataOptions
         where

instance NFData LaunchTemplateInstanceMetadataOptions
         where

-- | The metadata options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html Instance Metadata and User Data> in the /Amazon Elastic Compute Cloud User Guide/ .
--
--
--
-- /See:/ 'launchTemplateInstanceMetadataOptionsRequest' smart constructor.
data LaunchTemplateInstanceMetadataOptionsRequest = LaunchTemplateInstanceMetadataOptionsRequest'
  { _ltimorHTTPEndpoint :: !(Maybe LaunchTemplateInstanceMetadataEndpointState)
  , _ltimorHTTPPutResponseHopLimit :: !(Maybe Int)
  , _ltimorHTTPTokens :: !(Maybe LaunchTemplateHTTPTokensState)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateInstanceMetadataOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltimorHTTPEndpoint' - This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is @enabled@ .
--
-- * 'ltimorHTTPPutResponseHopLimit' - The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
--
-- * 'ltimorHTTPTokens' - The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is @optional@ . If the state is @optional@ , you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is @required@ , you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
launchTemplateInstanceMetadataOptionsRequest
    :: LaunchTemplateInstanceMetadataOptionsRequest
launchTemplateInstanceMetadataOptionsRequest =
  LaunchTemplateInstanceMetadataOptionsRequest'
    { _ltimorHTTPEndpoint = Nothing
    , _ltimorHTTPPutResponseHopLimit = Nothing
    , _ltimorHTTPTokens = Nothing
    }


-- | This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is @enabled@ .
ltimorHTTPEndpoint :: Lens' LaunchTemplateInstanceMetadataOptionsRequest (Maybe LaunchTemplateInstanceMetadataEndpointState)
ltimorHTTPEndpoint = lens _ltimorHTTPEndpoint (\ s a -> s{_ltimorHTTPEndpoint = a})

-- | The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
ltimorHTTPPutResponseHopLimit :: Lens' LaunchTemplateInstanceMetadataOptionsRequest (Maybe Int)
ltimorHTTPPutResponseHopLimit = lens _ltimorHTTPPutResponseHopLimit (\ s a -> s{_ltimorHTTPPutResponseHopLimit = a})

-- | The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is @optional@ . If the state is @optional@ , you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is @required@ , you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
ltimorHTTPTokens :: Lens' LaunchTemplateInstanceMetadataOptionsRequest (Maybe LaunchTemplateHTTPTokensState)
ltimorHTTPTokens = lens _ltimorHTTPTokens (\ s a -> s{_ltimorHTTPTokens = a})

instance Hashable
           LaunchTemplateInstanceMetadataOptionsRequest
         where

instance NFData
           LaunchTemplateInstanceMetadataOptionsRequest
         where

instance ToQuery
           LaunchTemplateInstanceMetadataOptionsRequest
         where
        toQuery
          LaunchTemplateInstanceMetadataOptionsRequest'{..}
          = mconcat
              ["HttpEndpoint" =: _ltimorHTTPEndpoint,
               "HttpPutResponseHopLimit" =:
                 _ltimorHTTPPutResponseHopLimit,
               "HttpTokens" =: _ltimorHTTPTokens]

-- | Describes a network interface.
--
--
--
-- /See:/ 'launchTemplateInstanceNetworkInterfaceSpecification' smart constructor.
data LaunchTemplateInstanceNetworkInterfaceSpecification = LaunchTemplateInstanceNetworkInterfaceSpecification'
  { _ltinisGroups :: !(Maybe [Text])
  , _ltinisPrivateIPAddresses :: !(Maybe [PrivateIPAddressSpecification])
  , _ltinisDeleteOnTermination :: !(Maybe Bool)
  , _ltinisAssociateCarrierIPAddress :: !(Maybe Bool)
  , _ltinisAssociatePublicIPAddress :: !(Maybe Bool)
  , _ltinisInterfaceType :: !(Maybe Text)
  , _ltinisNetworkInterfaceId :: !(Maybe Text)
  , _ltinisSubnetId :: !(Maybe Text)
  , _ltinisIPv6AddressCount :: !(Maybe Int)
  , _ltinisNetworkCardIndex :: !(Maybe Int)
  , _ltinisPrivateIPAddress :: !(Maybe Text)
  , _ltinisSecondaryPrivateIPAddressCount :: !(Maybe Int)
  , _ltinisDescription :: !(Maybe Text)
  , _ltinisDeviceIndex :: !(Maybe Int)
  , _ltinisIPv6Addresses :: !(Maybe [InstanceIPv6Address])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateInstanceNetworkInterfaceSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltinisGroups' - The IDs of one or more security groups.
--
-- * 'ltinisPrivateIPAddresses' - One or more private IPv4 addresses.
--
-- * 'ltinisDeleteOnTermination' - Indicates whether the network interface is deleted when the instance is terminated.
--
-- * 'ltinisAssociateCarrierIPAddress' - Indicates whether to associate a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see <https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip Carrier IP addresses> in the /AWS Wavelength Developer Guide/ .
--
-- * 'ltinisAssociatePublicIPAddress' - Indicates whether to associate a public IPv4 address with eth0 for a new network interface.
--
-- * 'ltinisInterfaceType' - The type of network interface.
--
-- * 'ltinisNetworkInterfaceId' - The ID of the network interface.
--
-- * 'ltinisSubnetId' - The ID of the subnet for the network interface.
--
-- * 'ltinisIPv6AddressCount' - The number of IPv6 addresses for the network interface.
--
-- * 'ltinisNetworkCardIndex' - The index of the network card.
--
-- * 'ltinisPrivateIPAddress' - The primary private IPv4 address of the network interface.
--
-- * 'ltinisSecondaryPrivateIPAddressCount' - The number of secondary private IPv4 addresses for the network interface.
--
-- * 'ltinisDescription' - A description for the network interface.
--
-- * 'ltinisDeviceIndex' - The device index for the network interface attachment.
--
-- * 'ltinisIPv6Addresses' - The IPv6 addresses for the network interface.
launchTemplateInstanceNetworkInterfaceSpecification
    :: LaunchTemplateInstanceNetworkInterfaceSpecification
launchTemplateInstanceNetworkInterfaceSpecification =
  LaunchTemplateInstanceNetworkInterfaceSpecification'
    { _ltinisGroups = Nothing
    , _ltinisPrivateIPAddresses = Nothing
    , _ltinisDeleteOnTermination = Nothing
    , _ltinisAssociateCarrierIPAddress = Nothing
    , _ltinisAssociatePublicIPAddress = Nothing
    , _ltinisInterfaceType = Nothing
    , _ltinisNetworkInterfaceId = Nothing
    , _ltinisSubnetId = Nothing
    , _ltinisIPv6AddressCount = Nothing
    , _ltinisNetworkCardIndex = Nothing
    , _ltinisPrivateIPAddress = Nothing
    , _ltinisSecondaryPrivateIPAddressCount = Nothing
    , _ltinisDescription = Nothing
    , _ltinisDeviceIndex = Nothing
    , _ltinisIPv6Addresses = Nothing
    }


-- | The IDs of one or more security groups.
ltinisGroups :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification [Text]
ltinisGroups = lens _ltinisGroups (\ s a -> s{_ltinisGroups = a}) . _Default . _Coerce

-- | One or more private IPv4 addresses.
ltinisPrivateIPAddresses :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification [PrivateIPAddressSpecification]
ltinisPrivateIPAddresses = lens _ltinisPrivateIPAddresses (\ s a -> s{_ltinisPrivateIPAddresses = a}) . _Default . _Coerce

-- | Indicates whether the network interface is deleted when the instance is terminated.
ltinisDeleteOnTermination :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Bool)
ltinisDeleteOnTermination = lens _ltinisDeleteOnTermination (\ s a -> s{_ltinisDeleteOnTermination = a})

-- | Indicates whether to associate a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see <https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip Carrier IP addresses> in the /AWS Wavelength Developer Guide/ .
ltinisAssociateCarrierIPAddress :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Bool)
ltinisAssociateCarrierIPAddress = lens _ltinisAssociateCarrierIPAddress (\ s a -> s{_ltinisAssociateCarrierIPAddress = a})

-- | Indicates whether to associate a public IPv4 address with eth0 for a new network interface.
ltinisAssociatePublicIPAddress :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Bool)
ltinisAssociatePublicIPAddress = lens _ltinisAssociatePublicIPAddress (\ s a -> s{_ltinisAssociatePublicIPAddress = a})

-- | The type of network interface.
ltinisInterfaceType :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Text)
ltinisInterfaceType = lens _ltinisInterfaceType (\ s a -> s{_ltinisInterfaceType = a})

-- | The ID of the network interface.
ltinisNetworkInterfaceId :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Text)
ltinisNetworkInterfaceId = lens _ltinisNetworkInterfaceId (\ s a -> s{_ltinisNetworkInterfaceId = a})

-- | The ID of the subnet for the network interface.
ltinisSubnetId :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Text)
ltinisSubnetId = lens _ltinisSubnetId (\ s a -> s{_ltinisSubnetId = a})

-- | The number of IPv6 addresses for the network interface.
ltinisIPv6AddressCount :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Int)
ltinisIPv6AddressCount = lens _ltinisIPv6AddressCount (\ s a -> s{_ltinisIPv6AddressCount = a})

-- | The index of the network card.
ltinisNetworkCardIndex :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Int)
ltinisNetworkCardIndex = lens _ltinisNetworkCardIndex (\ s a -> s{_ltinisNetworkCardIndex = a})

-- | The primary private IPv4 address of the network interface.
ltinisPrivateIPAddress :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Text)
ltinisPrivateIPAddress = lens _ltinisPrivateIPAddress (\ s a -> s{_ltinisPrivateIPAddress = a})

-- | The number of secondary private IPv4 addresses for the network interface.
ltinisSecondaryPrivateIPAddressCount :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Int)
ltinisSecondaryPrivateIPAddressCount = lens _ltinisSecondaryPrivateIPAddressCount (\ s a -> s{_ltinisSecondaryPrivateIPAddressCount = a})

-- | A description for the network interface.
ltinisDescription :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Text)
ltinisDescription = lens _ltinisDescription (\ s a -> s{_ltinisDescription = a})

-- | The device index for the network interface attachment.
ltinisDeviceIndex :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification (Maybe Int)
ltinisDeviceIndex = lens _ltinisDeviceIndex (\ s a -> s{_ltinisDeviceIndex = a})

-- | The IPv6 addresses for the network interface.
ltinisIPv6Addresses :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecification [InstanceIPv6Address]
ltinisIPv6Addresses = lens _ltinisIPv6Addresses (\ s a -> s{_ltinisIPv6Addresses = a}) . _Default . _Coerce

instance FromXML
           LaunchTemplateInstanceNetworkInterfaceSpecification
         where
        parseXML x
          = LaunchTemplateInstanceNetworkInterfaceSpecification'
              <$>
              (x .@? "groupSet" .!@ mempty >>=
                 may (parseXMLList "groupId"))
                <*>
                (x .@? "privateIpAddressesSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "deleteOnTermination")
                <*> (x .@? "associateCarrierIpAddress")
                <*> (x .@? "associatePublicIpAddress")
                <*> (x .@? "interfaceType")
                <*> (x .@? "networkInterfaceId")
                <*> (x .@? "subnetId")
                <*> (x .@? "ipv6AddressCount")
                <*> (x .@? "networkCardIndex")
                <*> (x .@? "privateIpAddress")
                <*> (x .@? "secondaryPrivateIpAddressCount")
                <*> (x .@? "description")
                <*> (x .@? "deviceIndex")
                <*>
                (x .@? "ipv6AddressesSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable
           LaunchTemplateInstanceNetworkInterfaceSpecification
         where

instance NFData
           LaunchTemplateInstanceNetworkInterfaceSpecification
         where

-- | The parameters for a network interface.
--
--
--
-- /See:/ 'launchTemplateInstanceNetworkInterfaceSpecificationRequest' smart constructor.
data LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = LaunchTemplateInstanceNetworkInterfaceSpecificationRequest'
  { _ltinisrGroups :: !(Maybe [Text])
  , _ltinisrPrivateIPAddresses :: !(Maybe [PrivateIPAddressSpecification])
  , _ltinisrDeleteOnTermination :: !(Maybe Bool)
  , _ltinisrAssociateCarrierIPAddress :: !(Maybe Bool)
  , _ltinisrAssociatePublicIPAddress :: !(Maybe Bool)
  , _ltinisrInterfaceType :: !(Maybe Text)
  , _ltinisrNetworkInterfaceId :: !(Maybe Text)
  , _ltinisrSubnetId :: !(Maybe Text)
  , _ltinisrIPv6AddressCount :: !(Maybe Int)
  , _ltinisrNetworkCardIndex :: !(Maybe Int)
  , _ltinisrPrivateIPAddress :: !(Maybe Text)
  , _ltinisrSecondaryPrivateIPAddressCount :: !(Maybe Int)
  , _ltinisrDescription :: !(Maybe Text)
  , _ltinisrDeviceIndex :: !(Maybe Int)
  , _ltinisrIPv6Addresses :: !(Maybe [InstanceIPv6AddressRequest])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateInstanceNetworkInterfaceSpecificationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltinisrGroups' - The IDs of one or more security groups.
--
-- * 'ltinisrPrivateIPAddresses' - One or more private IPv4 addresses.
--
-- * 'ltinisrDeleteOnTermination' - Indicates whether the network interface is deleted when the instance is terminated.
--
-- * 'ltinisrAssociateCarrierIPAddress' - Associates a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see <https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip Carrier IP addresses> in the /AWS Wavelength Developer Guide/ .
--
-- * 'ltinisrAssociatePublicIPAddress' - Associates a public IPv4 address with eth0 for a new network interface.
--
-- * 'ltinisrInterfaceType' - The type of network interface. To create an Elastic Fabric Adapter (EFA), specify @efa@ . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html Elastic Fabric Adapter> in the /Amazon Elastic Compute Cloud User Guide/ . If you are not creating an EFA, specify @interface@ or omit this parameter. Valid values: @interface@ | @efa@
--
-- * 'ltinisrNetworkInterfaceId' - The ID of the network interface.
--
-- * 'ltinisrSubnetId' - The ID of the subnet for the network interface.
--
-- * 'ltinisrIPv6AddressCount' - The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
--
-- * 'ltinisrNetworkCardIndex' - The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
--
-- * 'ltinisrPrivateIPAddress' - The primary private IPv4 address of the network interface.
--
-- * 'ltinisrSecondaryPrivateIPAddressCount' - The number of secondary private IPv4 addresses to assign to a network interface.
--
-- * 'ltinisrDescription' - A description for the network interface.
--
-- * 'ltinisrDeviceIndex' - The device index for the network interface attachment.
--
-- * 'ltinisrIPv6Addresses' - One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
launchTemplateInstanceNetworkInterfaceSpecificationRequest
    :: LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
launchTemplateInstanceNetworkInterfaceSpecificationRequest =
  LaunchTemplateInstanceNetworkInterfaceSpecificationRequest'
    { _ltinisrGroups = Nothing
    , _ltinisrPrivateIPAddresses = Nothing
    , _ltinisrDeleteOnTermination = Nothing
    , _ltinisrAssociateCarrierIPAddress = Nothing
    , _ltinisrAssociatePublicIPAddress = Nothing
    , _ltinisrInterfaceType = Nothing
    , _ltinisrNetworkInterfaceId = Nothing
    , _ltinisrSubnetId = Nothing
    , _ltinisrIPv6AddressCount = Nothing
    , _ltinisrNetworkCardIndex = Nothing
    , _ltinisrPrivateIPAddress = Nothing
    , _ltinisrSecondaryPrivateIPAddressCount = Nothing
    , _ltinisrDescription = Nothing
    , _ltinisrDeviceIndex = Nothing
    , _ltinisrIPv6Addresses = Nothing
    }


-- | The IDs of one or more security groups.
ltinisrGroups :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest [Text]
ltinisrGroups = lens _ltinisrGroups (\ s a -> s{_ltinisrGroups = a}) . _Default . _Coerce

-- | One or more private IPv4 addresses.
ltinisrPrivateIPAddresses :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest [PrivateIPAddressSpecification]
ltinisrPrivateIPAddresses = lens _ltinisrPrivateIPAddresses (\ s a -> s{_ltinisrPrivateIPAddresses = a}) . _Default . _Coerce

-- | Indicates whether the network interface is deleted when the instance is terminated.
ltinisrDeleteOnTermination :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Bool)
ltinisrDeleteOnTermination = lens _ltinisrDeleteOnTermination (\ s a -> s{_ltinisrDeleteOnTermination = a})

-- | Associates a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see <https://docs.aws.amazon.com/wavelength/latest/developerguide/how-wavelengths-work.html#provider-owned-ip Carrier IP addresses> in the /AWS Wavelength Developer Guide/ .
ltinisrAssociateCarrierIPAddress :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Bool)
ltinisrAssociateCarrierIPAddress = lens _ltinisrAssociateCarrierIPAddress (\ s a -> s{_ltinisrAssociateCarrierIPAddress = a})

-- | Associates a public IPv4 address with eth0 for a new network interface.
ltinisrAssociatePublicIPAddress :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Bool)
ltinisrAssociatePublicIPAddress = lens _ltinisrAssociatePublicIPAddress (\ s a -> s{_ltinisrAssociatePublicIPAddress = a})

-- | The type of network interface. To create an Elastic Fabric Adapter (EFA), specify @efa@ . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html Elastic Fabric Adapter> in the /Amazon Elastic Compute Cloud User Guide/ . If you are not creating an EFA, specify @interface@ or omit this parameter. Valid values: @interface@ | @efa@
ltinisrInterfaceType :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Text)
ltinisrInterfaceType = lens _ltinisrInterfaceType (\ s a -> s{_ltinisrInterfaceType = a})

-- | The ID of the network interface.
ltinisrNetworkInterfaceId :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Text)
ltinisrNetworkInterfaceId = lens _ltinisrNetworkInterfaceId (\ s a -> s{_ltinisrNetworkInterfaceId = a})

-- | The ID of the subnet for the network interface.
ltinisrSubnetId :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Text)
ltinisrSubnetId = lens _ltinisrSubnetId (\ s a -> s{_ltinisrSubnetId = a})

-- | The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
ltinisrIPv6AddressCount :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Int)
ltinisrIPv6AddressCount = lens _ltinisrIPv6AddressCount (\ s a -> s{_ltinisrIPv6AddressCount = a})

-- | The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
ltinisrNetworkCardIndex :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Int)
ltinisrNetworkCardIndex = lens _ltinisrNetworkCardIndex (\ s a -> s{_ltinisrNetworkCardIndex = a})

-- | The primary private IPv4 address of the network interface.
ltinisrPrivateIPAddress :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Text)
ltinisrPrivateIPAddress = lens _ltinisrPrivateIPAddress (\ s a -> s{_ltinisrPrivateIPAddress = a})

-- | The number of secondary private IPv4 addresses to assign to a network interface.
ltinisrSecondaryPrivateIPAddressCount :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Int)
ltinisrSecondaryPrivateIPAddressCount = lens _ltinisrSecondaryPrivateIPAddressCount (\ s a -> s{_ltinisrSecondaryPrivateIPAddressCount = a})

-- | A description for the network interface.
ltinisrDescription :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Text)
ltinisrDescription = lens _ltinisrDescription (\ s a -> s{_ltinisrDescription = a})

-- | The device index for the network interface attachment.
ltinisrDeviceIndex :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest (Maybe Int)
ltinisrDeviceIndex = lens _ltinisrDeviceIndex (\ s a -> s{_ltinisrDeviceIndex = a})

-- | One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
ltinisrIPv6Addresses :: Lens' LaunchTemplateInstanceNetworkInterfaceSpecificationRequest [InstanceIPv6AddressRequest]
ltinisrIPv6Addresses = lens _ltinisrIPv6Addresses (\ s a -> s{_ltinisrIPv6Addresses = a}) . _Default . _Coerce

instance Hashable
           LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
         where

instance NFData
           LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
         where

instance ToQuery
           LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
         where
        toQuery
          LaunchTemplateInstanceNetworkInterfaceSpecificationRequest'{..}
          = mconcat
              [toQuery
                 (toQueryList "SecurityGroupId" <$> _ltinisrGroups),
               toQuery
                 (toQueryList "PrivateIpAddresses" <$>
                    _ltinisrPrivateIPAddresses),
               "DeleteOnTermination" =: _ltinisrDeleteOnTermination,
               "AssociateCarrierIpAddress" =:
                 _ltinisrAssociateCarrierIPAddress,
               "AssociatePublicIpAddress" =:
                 _ltinisrAssociatePublicIPAddress,
               "InterfaceType" =: _ltinisrInterfaceType,
               "NetworkInterfaceId" =: _ltinisrNetworkInterfaceId,
               "SubnetId" =: _ltinisrSubnetId,
               "Ipv6AddressCount" =: _ltinisrIPv6AddressCount,
               "NetworkCardIndex" =: _ltinisrNetworkCardIndex,
               "PrivateIpAddress" =: _ltinisrPrivateIPAddress,
               "SecondaryPrivateIpAddressCount" =:
                 _ltinisrSecondaryPrivateIPAddressCount,
               "Description" =: _ltinisrDescription,
               "DeviceIndex" =: _ltinisrDeviceIndex,
               toQuery
                 (toQueryList "Ipv6Addresses" <$>
                    _ltinisrIPv6Addresses)]

-- | Describes a license configuration.
--
--
--
-- /See:/ 'launchTemplateLicenseConfiguration' smart constructor.
newtype LaunchTemplateLicenseConfiguration = LaunchTemplateLicenseConfiguration'
  { _ltlcLicenseConfigurationARN :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateLicenseConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltlcLicenseConfigurationARN' - The Amazon Resource Name (ARN) of the license configuration.
launchTemplateLicenseConfiguration
    :: LaunchTemplateLicenseConfiguration
launchTemplateLicenseConfiguration =
  LaunchTemplateLicenseConfiguration' {_ltlcLicenseConfigurationARN = Nothing}


-- | The Amazon Resource Name (ARN) of the license configuration.
ltlcLicenseConfigurationARN :: Lens' LaunchTemplateLicenseConfiguration (Maybe Text)
ltlcLicenseConfigurationARN = lens _ltlcLicenseConfigurationARN (\ s a -> s{_ltlcLicenseConfigurationARN = a})

instance FromXML LaunchTemplateLicenseConfiguration
         where
        parseXML x
          = LaunchTemplateLicenseConfiguration' <$>
              (x .@? "licenseConfigurationArn")

instance Hashable LaunchTemplateLicenseConfiguration
         where

instance NFData LaunchTemplateLicenseConfiguration
         where

-- | Describes a license configuration.
--
--
--
-- /See:/ 'launchTemplateLicenseConfigurationRequest' smart constructor.
newtype LaunchTemplateLicenseConfigurationRequest = LaunchTemplateLicenseConfigurationRequest'
  { _ltlcrLicenseConfigurationARN :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateLicenseConfigurationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltlcrLicenseConfigurationARN' - The Amazon Resource Name (ARN) of the license configuration.
launchTemplateLicenseConfigurationRequest
    :: LaunchTemplateLicenseConfigurationRequest
launchTemplateLicenseConfigurationRequest =
  LaunchTemplateLicenseConfigurationRequest'
    {_ltlcrLicenseConfigurationARN = Nothing}


-- | The Amazon Resource Name (ARN) of the license configuration.
ltlcrLicenseConfigurationARN :: Lens' LaunchTemplateLicenseConfigurationRequest (Maybe Text)
ltlcrLicenseConfigurationARN = lens _ltlcrLicenseConfigurationARN (\ s a -> s{_ltlcrLicenseConfigurationARN = a})

instance Hashable
           LaunchTemplateLicenseConfigurationRequest
         where

instance NFData
           LaunchTemplateLicenseConfigurationRequest
         where

instance ToQuery
           LaunchTemplateLicenseConfigurationRequest
         where
        toQuery
          LaunchTemplateLicenseConfigurationRequest'{..}
          = mconcat
              ["LicenseConfigurationArn" =:
                 _ltlcrLicenseConfigurationARN]

-- | Describes overrides for a launch template.
--
--
--
-- /See:/ 'launchTemplateOverrides' smart constructor.
data LaunchTemplateOverrides = LaunchTemplateOverrides'
  { _ltoPriority         :: !(Maybe Double)
  , _ltoSpotPrice        :: !(Maybe Text)
  , _ltoWeightedCapacity :: !(Maybe Double)
  , _ltoSubnetId         :: !(Maybe Text)
  , _ltoInstanceType     :: !(Maybe InstanceType)
  , _ltoAvailabilityZone :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateOverrides' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltoPriority' - The priority for the launch template override. If __OnDemandAllocationStrategy__ is set to @prioritized@ , Spot Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at @0@ . The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
--
-- * 'ltoSpotPrice' - The maximum price per unit hour that you are willing to pay for a Spot Instance.
--
-- * 'ltoWeightedCapacity' - The number of units provided by the specified instance type.
--
-- * 'ltoSubnetId' - The ID of the subnet in which to launch the instances.
--
-- * 'ltoInstanceType' - The instance type.
--
-- * 'ltoAvailabilityZone' - The Availability Zone in which to launch the instances.
launchTemplateOverrides
    :: LaunchTemplateOverrides
launchTemplateOverrides =
  LaunchTemplateOverrides'
    { _ltoPriority = Nothing
    , _ltoSpotPrice = Nothing
    , _ltoWeightedCapacity = Nothing
    , _ltoSubnetId = Nothing
    , _ltoInstanceType = Nothing
    , _ltoAvailabilityZone = Nothing
    }


-- | The priority for the launch template override. If __OnDemandAllocationStrategy__ is set to @prioritized@ , Spot Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at @0@ . The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
ltoPriority :: Lens' LaunchTemplateOverrides (Maybe Double)
ltoPriority = lens _ltoPriority (\ s a -> s{_ltoPriority = a})

-- | The maximum price per unit hour that you are willing to pay for a Spot Instance.
ltoSpotPrice :: Lens' LaunchTemplateOverrides (Maybe Text)
ltoSpotPrice = lens _ltoSpotPrice (\ s a -> s{_ltoSpotPrice = a})

-- | The number of units provided by the specified instance type.
ltoWeightedCapacity :: Lens' LaunchTemplateOverrides (Maybe Double)
ltoWeightedCapacity = lens _ltoWeightedCapacity (\ s a -> s{_ltoWeightedCapacity = a})

-- | The ID of the subnet in which to launch the instances.
ltoSubnetId :: Lens' LaunchTemplateOverrides (Maybe Text)
ltoSubnetId = lens _ltoSubnetId (\ s a -> s{_ltoSubnetId = a})

-- | The instance type.
ltoInstanceType :: Lens' LaunchTemplateOverrides (Maybe InstanceType)
ltoInstanceType = lens _ltoInstanceType (\ s a -> s{_ltoInstanceType = a})

-- | The Availability Zone in which to launch the instances.
ltoAvailabilityZone :: Lens' LaunchTemplateOverrides (Maybe Text)
ltoAvailabilityZone = lens _ltoAvailabilityZone (\ s a -> s{_ltoAvailabilityZone = a})

instance FromXML LaunchTemplateOverrides where
        parseXML x
          = LaunchTemplateOverrides' <$>
              (x .@? "priority") <*> (x .@? "spotPrice") <*>
                (x .@? "weightedCapacity")
                <*> (x .@? "subnetId")
                <*> (x .@? "instanceType")
                <*> (x .@? "availabilityZone")

instance Hashable LaunchTemplateOverrides where

instance NFData LaunchTemplateOverrides where

instance ToQuery LaunchTemplateOverrides where
        toQuery LaunchTemplateOverrides'{..}
          = mconcat
              ["Priority" =: _ltoPriority,
               "SpotPrice" =: _ltoSpotPrice,
               "WeightedCapacity" =: _ltoWeightedCapacity,
               "SubnetId" =: _ltoSubnetId,
               "InstanceType" =: _ltoInstanceType,
               "AvailabilityZone" =: _ltoAvailabilityZone]

-- | Describes the placement of an instance.
--
--
--
-- /See:/ 'launchTemplatePlacement' smart constructor.
data LaunchTemplatePlacement = LaunchTemplatePlacement'
  { _ltpAffinity             :: !(Maybe Text)
  , _ltpHostId               :: !(Maybe Text)
  , _ltpPartitionNumber      :: !(Maybe Int)
  , _ltpSpreadDomain         :: !(Maybe Text)
  , _ltpAvailabilityZone     :: !(Maybe Text)
  , _ltpTenancy              :: !(Maybe Tenancy)
  , _ltpGroupName            :: !(Maybe Text)
  , _ltpHostResourceGroupARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplatePlacement' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltpAffinity' - The affinity setting for the instance on the Dedicated Host.
--
-- * 'ltpHostId' - The ID of the Dedicated Host for the instance.
--
-- * 'ltpPartitionNumber' - The number of the partition the instance should launch in. Valid only if the placement group strategy is set to @partition@ .
--
-- * 'ltpSpreadDomain' - Reserved for future use.
--
-- * 'ltpAvailabilityZone' - The Availability Zone of the instance.
--
-- * 'ltpTenancy' - The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of @dedicated@ runs on single-tenant hardware.
--
-- * 'ltpGroupName' - The name of the placement group for the instance.
--
-- * 'ltpHostResourceGroupARN' - The ARN of the host resource group in which to launch the instances.
launchTemplatePlacement
    :: LaunchTemplatePlacement
launchTemplatePlacement =
  LaunchTemplatePlacement'
    { _ltpAffinity = Nothing
    , _ltpHostId = Nothing
    , _ltpPartitionNumber = Nothing
    , _ltpSpreadDomain = Nothing
    , _ltpAvailabilityZone = Nothing
    , _ltpTenancy = Nothing
    , _ltpGroupName = Nothing
    , _ltpHostResourceGroupARN = Nothing
    }


-- | The affinity setting for the instance on the Dedicated Host.
ltpAffinity :: Lens' LaunchTemplatePlacement (Maybe Text)
ltpAffinity = lens _ltpAffinity (\ s a -> s{_ltpAffinity = a})

-- | The ID of the Dedicated Host for the instance.
ltpHostId :: Lens' LaunchTemplatePlacement (Maybe Text)
ltpHostId = lens _ltpHostId (\ s a -> s{_ltpHostId = a})

-- | The number of the partition the instance should launch in. Valid only if the placement group strategy is set to @partition@ .
ltpPartitionNumber :: Lens' LaunchTemplatePlacement (Maybe Int)
ltpPartitionNumber = lens _ltpPartitionNumber (\ s a -> s{_ltpPartitionNumber = a})

-- | Reserved for future use.
ltpSpreadDomain :: Lens' LaunchTemplatePlacement (Maybe Text)
ltpSpreadDomain = lens _ltpSpreadDomain (\ s a -> s{_ltpSpreadDomain = a})

-- | The Availability Zone of the instance.
ltpAvailabilityZone :: Lens' LaunchTemplatePlacement (Maybe Text)
ltpAvailabilityZone = lens _ltpAvailabilityZone (\ s a -> s{_ltpAvailabilityZone = a})

-- | The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of @dedicated@ runs on single-tenant hardware.
ltpTenancy :: Lens' LaunchTemplatePlacement (Maybe Tenancy)
ltpTenancy = lens _ltpTenancy (\ s a -> s{_ltpTenancy = a})

-- | The name of the placement group for the instance.
ltpGroupName :: Lens' LaunchTemplatePlacement (Maybe Text)
ltpGroupName = lens _ltpGroupName (\ s a -> s{_ltpGroupName = a})

-- | The ARN of the host resource group in which to launch the instances.
ltpHostResourceGroupARN :: Lens' LaunchTemplatePlacement (Maybe Text)
ltpHostResourceGroupARN = lens _ltpHostResourceGroupARN (\ s a -> s{_ltpHostResourceGroupARN = a})

instance FromXML LaunchTemplatePlacement where
        parseXML x
          = LaunchTemplatePlacement' <$>
              (x .@? "affinity") <*> (x .@? "hostId") <*>
                (x .@? "partitionNumber")
                <*> (x .@? "spreadDomain")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "tenancy")
                <*> (x .@? "groupName")
                <*> (x .@? "hostResourceGroupArn")

instance Hashable LaunchTemplatePlacement where

instance NFData LaunchTemplatePlacement where

-- | Describes the placement of an instance.
--
--
--
-- /See:/ 'launchTemplatePlacementRequest' smart constructor.
data LaunchTemplatePlacementRequest = LaunchTemplatePlacementRequest'
  { _ltprAffinity             :: !(Maybe Text)
  , _ltprHostId               :: !(Maybe Text)
  , _ltprPartitionNumber      :: !(Maybe Int)
  , _ltprSpreadDomain         :: !(Maybe Text)
  , _ltprAvailabilityZone     :: !(Maybe Text)
  , _ltprTenancy              :: !(Maybe Tenancy)
  , _ltprGroupName            :: !(Maybe Text)
  , _ltprHostResourceGroupARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplatePlacementRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltprAffinity' - The affinity setting for an instance on a Dedicated Host.
--
-- * 'ltprHostId' - The ID of the Dedicated Host for the instance.
--
-- * 'ltprPartitionNumber' - The number of the partition the instance should launch in. Valid only if the placement group strategy is set to @partition@ .
--
-- * 'ltprSpreadDomain' - Reserved for future use.
--
-- * 'ltprAvailabilityZone' - The Availability Zone for the instance.
--
-- * 'ltprTenancy' - The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
--
-- * 'ltprGroupName' - The name of the placement group for the instance.
--
-- * 'ltprHostResourceGroupARN' - The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the __Tenancy__ parameter or set it to @host@ .
launchTemplatePlacementRequest
    :: LaunchTemplatePlacementRequest
launchTemplatePlacementRequest =
  LaunchTemplatePlacementRequest'
    { _ltprAffinity = Nothing
    , _ltprHostId = Nothing
    , _ltprPartitionNumber = Nothing
    , _ltprSpreadDomain = Nothing
    , _ltprAvailabilityZone = Nothing
    , _ltprTenancy = Nothing
    , _ltprGroupName = Nothing
    , _ltprHostResourceGroupARN = Nothing
    }


-- | The affinity setting for an instance on a Dedicated Host.
ltprAffinity :: Lens' LaunchTemplatePlacementRequest (Maybe Text)
ltprAffinity = lens _ltprAffinity (\ s a -> s{_ltprAffinity = a})

-- | The ID of the Dedicated Host for the instance.
ltprHostId :: Lens' LaunchTemplatePlacementRequest (Maybe Text)
ltprHostId = lens _ltprHostId (\ s a -> s{_ltprHostId = a})

-- | The number of the partition the instance should launch in. Valid only if the placement group strategy is set to @partition@ .
ltprPartitionNumber :: Lens' LaunchTemplatePlacementRequest (Maybe Int)
ltprPartitionNumber = lens _ltprPartitionNumber (\ s a -> s{_ltprPartitionNumber = a})

-- | Reserved for future use.
ltprSpreadDomain :: Lens' LaunchTemplatePlacementRequest (Maybe Text)
ltprSpreadDomain = lens _ltprSpreadDomain (\ s a -> s{_ltprSpreadDomain = a})

-- | The Availability Zone for the instance.
ltprAvailabilityZone :: Lens' LaunchTemplatePlacementRequest (Maybe Text)
ltprAvailabilityZone = lens _ltprAvailabilityZone (\ s a -> s{_ltprAvailabilityZone = a})

-- | The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
ltprTenancy :: Lens' LaunchTemplatePlacementRequest (Maybe Tenancy)
ltprTenancy = lens _ltprTenancy (\ s a -> s{_ltprTenancy = a})

-- | The name of the placement group for the instance.
ltprGroupName :: Lens' LaunchTemplatePlacementRequest (Maybe Text)
ltprGroupName = lens _ltprGroupName (\ s a -> s{_ltprGroupName = a})

-- | The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the __Tenancy__ parameter or set it to @host@ .
ltprHostResourceGroupARN :: Lens' LaunchTemplatePlacementRequest (Maybe Text)
ltprHostResourceGroupARN = lens _ltprHostResourceGroupARN (\ s a -> s{_ltprHostResourceGroupARN = a})

instance Hashable LaunchTemplatePlacementRequest
         where

instance NFData LaunchTemplatePlacementRequest where

instance ToQuery LaunchTemplatePlacementRequest where
        toQuery LaunchTemplatePlacementRequest'{..}
          = mconcat
              ["Affinity" =: _ltprAffinity,
               "HostId" =: _ltprHostId,
               "PartitionNumber" =: _ltprPartitionNumber,
               "SpreadDomain" =: _ltprSpreadDomain,
               "AvailabilityZone" =: _ltprAvailabilityZone,
               "Tenancy" =: _ltprTenancy,
               "GroupName" =: _ltprGroupName,
               "HostResourceGroupArn" =: _ltprHostResourceGroupARN]

-- | The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both.
--
--
--
-- /See:/ 'launchTemplateSpecification' smart constructor.
data LaunchTemplateSpecification = LaunchTemplateSpecification'
  { _ltsLaunchTemplateName :: !(Maybe Text)
  , _ltsLaunchTemplateId   :: !(Maybe Text)
  , _ltsVersion            :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltsLaunchTemplateName' - The name of the launch template.
--
-- * 'ltsLaunchTemplateId' - The ID of the launch template.
--
-- * 'ltsVersion' - The version number of the launch template. Default: The default version for the launch template.
launchTemplateSpecification
    :: LaunchTemplateSpecification
launchTemplateSpecification =
  LaunchTemplateSpecification'
    { _ltsLaunchTemplateName = Nothing
    , _ltsLaunchTemplateId = Nothing
    , _ltsVersion = Nothing
    }


-- | The name of the launch template.
ltsLaunchTemplateName :: Lens' LaunchTemplateSpecification (Maybe Text)
ltsLaunchTemplateName = lens _ltsLaunchTemplateName (\ s a -> s{_ltsLaunchTemplateName = a})

-- | The ID of the launch template.
ltsLaunchTemplateId :: Lens' LaunchTemplateSpecification (Maybe Text)
ltsLaunchTemplateId = lens _ltsLaunchTemplateId (\ s a -> s{_ltsLaunchTemplateId = a})

-- | The version number of the launch template. Default: The default version for the launch template.
ltsVersion :: Lens' LaunchTemplateSpecification (Maybe Text)
ltsVersion = lens _ltsVersion (\ s a -> s{_ltsVersion = a})

instance Hashable LaunchTemplateSpecification where

instance NFData LaunchTemplateSpecification where

instance ToQuery LaunchTemplateSpecification where
        toQuery LaunchTemplateSpecification'{..}
          = mconcat
              ["LaunchTemplateName" =: _ltsLaunchTemplateName,
               "LaunchTemplateId" =: _ltsLaunchTemplateId,
               "Version" =: _ltsVersion]

-- | The options for Spot Instances.
--
--
--
-- /See:/ 'launchTemplateSpotMarketOptions' smart constructor.
data LaunchTemplateSpotMarketOptions = LaunchTemplateSpotMarketOptions'
  { _ltsmoBlockDurationMinutes         :: !(Maybe Int)
  , _ltsmoInstanceInterruptionBehavior :: !(Maybe InstanceInterruptionBehavior)
  , _ltsmoValidUntil                   :: !(Maybe ISO8601)
  , _ltsmoSpotInstanceType             :: !(Maybe SpotInstanceType)
  , _ltsmoMaxPrice                     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateSpotMarketOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltsmoBlockDurationMinutes' - The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
--
-- * 'ltsmoInstanceInterruptionBehavior' - The behavior when a Spot Instance is interrupted.
--
-- * 'ltsmoValidUntil' - The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.
--
-- * 'ltsmoSpotInstanceType' - The Spot Instance request type.
--
-- * 'ltsmoMaxPrice' - The maximum hourly price you're willing to pay for the Spot Instances.
launchTemplateSpotMarketOptions
    :: LaunchTemplateSpotMarketOptions
launchTemplateSpotMarketOptions =
  LaunchTemplateSpotMarketOptions'
    { _ltsmoBlockDurationMinutes = Nothing
    , _ltsmoInstanceInterruptionBehavior = Nothing
    , _ltsmoValidUntil = Nothing
    , _ltsmoSpotInstanceType = Nothing
    , _ltsmoMaxPrice = Nothing
    }


-- | The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
ltsmoBlockDurationMinutes :: Lens' LaunchTemplateSpotMarketOptions (Maybe Int)
ltsmoBlockDurationMinutes = lens _ltsmoBlockDurationMinutes (\ s a -> s{_ltsmoBlockDurationMinutes = a})

-- | The behavior when a Spot Instance is interrupted.
ltsmoInstanceInterruptionBehavior :: Lens' LaunchTemplateSpotMarketOptions (Maybe InstanceInterruptionBehavior)
ltsmoInstanceInterruptionBehavior = lens _ltsmoInstanceInterruptionBehavior (\ s a -> s{_ltsmoInstanceInterruptionBehavior = a})

-- | The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.
ltsmoValidUntil :: Lens' LaunchTemplateSpotMarketOptions (Maybe UTCTime)
ltsmoValidUntil = lens _ltsmoValidUntil (\ s a -> s{_ltsmoValidUntil = a}) . mapping _Time

-- | The Spot Instance request type.
ltsmoSpotInstanceType :: Lens' LaunchTemplateSpotMarketOptions (Maybe SpotInstanceType)
ltsmoSpotInstanceType = lens _ltsmoSpotInstanceType (\ s a -> s{_ltsmoSpotInstanceType = a})

-- | The maximum hourly price you're willing to pay for the Spot Instances.
ltsmoMaxPrice :: Lens' LaunchTemplateSpotMarketOptions (Maybe Text)
ltsmoMaxPrice = lens _ltsmoMaxPrice (\ s a -> s{_ltsmoMaxPrice = a})

instance FromXML LaunchTemplateSpotMarketOptions
         where
        parseXML x
          = LaunchTemplateSpotMarketOptions' <$>
              (x .@? "blockDurationMinutes") <*>
                (x .@? "instanceInterruptionBehavior")
                <*> (x .@? "validUntil")
                <*> (x .@? "spotInstanceType")
                <*> (x .@? "maxPrice")

instance Hashable LaunchTemplateSpotMarketOptions
         where

instance NFData LaunchTemplateSpotMarketOptions where

-- | The options for Spot Instances.
--
--
--
-- /See:/ 'launchTemplateSpotMarketOptionsRequest' smart constructor.
data LaunchTemplateSpotMarketOptionsRequest = LaunchTemplateSpotMarketOptionsRequest'
  { _ltsmorBlockDurationMinutes         :: !(Maybe Int)
  , _ltsmorInstanceInterruptionBehavior :: !(Maybe InstanceInterruptionBehavior)
  , _ltsmorValidUntil                   :: !(Maybe ISO8601)
  , _ltsmorSpotInstanceType             :: !(Maybe SpotInstanceType)
  , _ltsmorMaxPrice                     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateSpotMarketOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltsmorBlockDurationMinutes' - The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
--
-- * 'ltsmorInstanceInterruptionBehavior' - The behavior when a Spot Instance is interrupted. The default is @terminate@ .
--
-- * 'ltsmorValidUntil' - The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.
--
-- * 'ltsmorSpotInstanceType' - The Spot Instance request type.
--
-- * 'ltsmorMaxPrice' - The maximum hourly price you're willing to pay for the Spot Instances.
launchTemplateSpotMarketOptionsRequest
    :: LaunchTemplateSpotMarketOptionsRequest
launchTemplateSpotMarketOptionsRequest =
  LaunchTemplateSpotMarketOptionsRequest'
    { _ltsmorBlockDurationMinutes = Nothing
    , _ltsmorInstanceInterruptionBehavior = Nothing
    , _ltsmorValidUntil = Nothing
    , _ltsmorSpotInstanceType = Nothing
    , _ltsmorMaxPrice = Nothing
    }


-- | The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
ltsmorBlockDurationMinutes :: Lens' LaunchTemplateSpotMarketOptionsRequest (Maybe Int)
ltsmorBlockDurationMinutes = lens _ltsmorBlockDurationMinutes (\ s a -> s{_ltsmorBlockDurationMinutes = a})

-- | The behavior when a Spot Instance is interrupted. The default is @terminate@ .
ltsmorInstanceInterruptionBehavior :: Lens' LaunchTemplateSpotMarketOptionsRequest (Maybe InstanceInterruptionBehavior)
ltsmorInstanceInterruptionBehavior = lens _ltsmorInstanceInterruptionBehavior (\ s a -> s{_ltsmorInstanceInterruptionBehavior = a})

-- | The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.
ltsmorValidUntil :: Lens' LaunchTemplateSpotMarketOptionsRequest (Maybe UTCTime)
ltsmorValidUntil = lens _ltsmorValidUntil (\ s a -> s{_ltsmorValidUntil = a}) . mapping _Time

-- | The Spot Instance request type.
ltsmorSpotInstanceType :: Lens' LaunchTemplateSpotMarketOptionsRequest (Maybe SpotInstanceType)
ltsmorSpotInstanceType = lens _ltsmorSpotInstanceType (\ s a -> s{_ltsmorSpotInstanceType = a})

-- | The maximum hourly price you're willing to pay for the Spot Instances.
ltsmorMaxPrice :: Lens' LaunchTemplateSpotMarketOptionsRequest (Maybe Text)
ltsmorMaxPrice = lens _ltsmorMaxPrice (\ s a -> s{_ltsmorMaxPrice = a})

instance Hashable
           LaunchTemplateSpotMarketOptionsRequest
         where

instance NFData
           LaunchTemplateSpotMarketOptionsRequest
         where

instance ToQuery
           LaunchTemplateSpotMarketOptionsRequest
         where
        toQuery LaunchTemplateSpotMarketOptionsRequest'{..}
          = mconcat
              ["BlockDurationMinutes" =:
                 _ltsmorBlockDurationMinutes,
               "InstanceInterruptionBehavior" =:
                 _ltsmorInstanceInterruptionBehavior,
               "ValidUntil" =: _ltsmorValidUntil,
               "SpotInstanceType" =: _ltsmorSpotInstanceType,
               "MaxPrice" =: _ltsmorMaxPrice]

-- | The tag specification for the launch template.
--
--
--
-- /See:/ 'launchTemplateTagSpecification' smart constructor.
data LaunchTemplateTagSpecification = LaunchTemplateTagSpecification'
  { _lttsResourceType :: !(Maybe ResourceType)
  , _lttsTags         :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateTagSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lttsResourceType' - The type of resource.
--
-- * 'lttsTags' - The tags for the resource.
launchTemplateTagSpecification
    :: LaunchTemplateTagSpecification
launchTemplateTagSpecification =
  LaunchTemplateTagSpecification'
    {_lttsResourceType = Nothing, _lttsTags = Nothing}


-- | The type of resource.
lttsResourceType :: Lens' LaunchTemplateTagSpecification (Maybe ResourceType)
lttsResourceType = lens _lttsResourceType (\ s a -> s{_lttsResourceType = a})

-- | The tags for the resource.
lttsTags :: Lens' LaunchTemplateTagSpecification [Tag]
lttsTags = lens _lttsTags (\ s a -> s{_lttsTags = a}) . _Default . _Coerce

instance FromXML LaunchTemplateTagSpecification where
        parseXML x
          = LaunchTemplateTagSpecification' <$>
              (x .@? "resourceType") <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable LaunchTemplateTagSpecification
         where

instance NFData LaunchTemplateTagSpecification where

-- | The tags specification for the launch template.
--
--
--
-- /See:/ 'launchTemplateTagSpecificationRequest' smart constructor.
data LaunchTemplateTagSpecificationRequest = LaunchTemplateTagSpecificationRequest'
  { _lttsrResourceType :: !(Maybe ResourceType)
  , _lttsrTags         :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateTagSpecificationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lttsrResourceType' - The type of resource to tag. Currently, the resource types that support tagging on creation are @instance@ and @volume@ . To tag a resource after it has been created, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html CreateTags> .
--
-- * 'lttsrTags' - The tags to apply to the resource.
launchTemplateTagSpecificationRequest
    :: LaunchTemplateTagSpecificationRequest
launchTemplateTagSpecificationRequest =
  LaunchTemplateTagSpecificationRequest'
    {_lttsrResourceType = Nothing, _lttsrTags = Nothing}


-- | The type of resource to tag. Currently, the resource types that support tagging on creation are @instance@ and @volume@ . To tag a resource after it has been created, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html CreateTags> .
lttsrResourceType :: Lens' LaunchTemplateTagSpecificationRequest (Maybe ResourceType)
lttsrResourceType = lens _lttsrResourceType (\ s a -> s{_lttsrResourceType = a})

-- | The tags to apply to the resource.
lttsrTags :: Lens' LaunchTemplateTagSpecificationRequest [Tag]
lttsrTags = lens _lttsrTags (\ s a -> s{_lttsrTags = a}) . _Default . _Coerce

instance Hashable
           LaunchTemplateTagSpecificationRequest
         where

instance NFData LaunchTemplateTagSpecificationRequest
         where

instance ToQuery
           LaunchTemplateTagSpecificationRequest
         where
        toQuery LaunchTemplateTagSpecificationRequest'{..}
          = mconcat
              ["ResourceType" =: _lttsrResourceType,
               toQuery (toQueryList "Tag" <$> _lttsrTags)]

-- | Describes a launch template version.
--
--
--
-- /See:/ 'launchTemplateVersion' smart constructor.
data LaunchTemplateVersion = LaunchTemplateVersion'
  { _ltvLaunchTemplateName :: !(Maybe Text)
  , _ltvLaunchTemplateId   :: !(Maybe Text)
  , _ltvCreatedBy          :: !(Maybe Text)
  , _ltvDefaultVersion     :: !(Maybe Bool)
  , _ltvVersionNumber      :: !(Maybe Integer)
  , _ltvVersionDescription :: !(Maybe Text)
  , _ltvLaunchTemplateData :: !(Maybe ResponseLaunchTemplateData)
  , _ltvCreateTime         :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplateVersion' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltvLaunchTemplateName' - The name of the launch template.
--
-- * 'ltvLaunchTemplateId' - The ID of the launch template.
--
-- * 'ltvCreatedBy' - The principal that created the version.
--
-- * 'ltvDefaultVersion' - Indicates whether the version is the default version.
--
-- * 'ltvVersionNumber' - The version number.
--
-- * 'ltvVersionDescription' - The description for the version.
--
-- * 'ltvLaunchTemplateData' - Information about the launch template.
--
-- * 'ltvCreateTime' - The time the version was created.
launchTemplateVersion
    :: LaunchTemplateVersion
launchTemplateVersion =
  LaunchTemplateVersion'
    { _ltvLaunchTemplateName = Nothing
    , _ltvLaunchTemplateId = Nothing
    , _ltvCreatedBy = Nothing
    , _ltvDefaultVersion = Nothing
    , _ltvVersionNumber = Nothing
    , _ltvVersionDescription = Nothing
    , _ltvLaunchTemplateData = Nothing
    , _ltvCreateTime = Nothing
    }


-- | The name of the launch template.
ltvLaunchTemplateName :: Lens' LaunchTemplateVersion (Maybe Text)
ltvLaunchTemplateName = lens _ltvLaunchTemplateName (\ s a -> s{_ltvLaunchTemplateName = a})

-- | The ID of the launch template.
ltvLaunchTemplateId :: Lens' LaunchTemplateVersion (Maybe Text)
ltvLaunchTemplateId = lens _ltvLaunchTemplateId (\ s a -> s{_ltvLaunchTemplateId = a})

-- | The principal that created the version.
ltvCreatedBy :: Lens' LaunchTemplateVersion (Maybe Text)
ltvCreatedBy = lens _ltvCreatedBy (\ s a -> s{_ltvCreatedBy = a})

-- | Indicates whether the version is the default version.
ltvDefaultVersion :: Lens' LaunchTemplateVersion (Maybe Bool)
ltvDefaultVersion = lens _ltvDefaultVersion (\ s a -> s{_ltvDefaultVersion = a})

-- | The version number.
ltvVersionNumber :: Lens' LaunchTemplateVersion (Maybe Integer)
ltvVersionNumber = lens _ltvVersionNumber (\ s a -> s{_ltvVersionNumber = a})

-- | The description for the version.
ltvVersionDescription :: Lens' LaunchTemplateVersion (Maybe Text)
ltvVersionDescription = lens _ltvVersionDescription (\ s a -> s{_ltvVersionDescription = a})

-- | Information about the launch template.
ltvLaunchTemplateData :: Lens' LaunchTemplateVersion (Maybe ResponseLaunchTemplateData)
ltvLaunchTemplateData = lens _ltvLaunchTemplateData (\ s a -> s{_ltvLaunchTemplateData = a})

-- | The time the version was created.
ltvCreateTime :: Lens' LaunchTemplateVersion (Maybe UTCTime)
ltvCreateTime = lens _ltvCreateTime (\ s a -> s{_ltvCreateTime = a}) . mapping _Time

instance FromXML LaunchTemplateVersion where
        parseXML x
          = LaunchTemplateVersion' <$>
              (x .@? "launchTemplateName") <*>
                (x .@? "launchTemplateId")
                <*> (x .@? "createdBy")
                <*> (x .@? "defaultVersion")
                <*> (x .@? "versionNumber")
                <*> (x .@? "versionDescription")
                <*> (x .@? "launchTemplateData")
                <*> (x .@? "createTime")

instance Hashable LaunchTemplateVersion where

instance NFData LaunchTemplateVersion where

-- | Describes the monitoring for the instance.
--
--
--
-- /See:/ 'launchTemplatesMonitoring' smart constructor.
newtype LaunchTemplatesMonitoring = LaunchTemplatesMonitoring'
  { _ltmEnabled :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplatesMonitoring' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltmEnabled' - Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
launchTemplatesMonitoring
    :: LaunchTemplatesMonitoring
launchTemplatesMonitoring = LaunchTemplatesMonitoring' {_ltmEnabled = Nothing}


-- | Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
ltmEnabled :: Lens' LaunchTemplatesMonitoring (Maybe Bool)
ltmEnabled = lens _ltmEnabled (\ s a -> s{_ltmEnabled = a})

instance FromXML LaunchTemplatesMonitoring where
        parseXML x
          = LaunchTemplatesMonitoring' <$> (x .@? "enabled")

instance Hashable LaunchTemplatesMonitoring where

instance NFData LaunchTemplatesMonitoring where

-- | Describes the monitoring for the instance.
--
--
--
-- /See:/ 'launchTemplatesMonitoringRequest' smart constructor.
newtype LaunchTemplatesMonitoringRequest = LaunchTemplatesMonitoringRequest'
  { _ltmrEnabled :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LaunchTemplatesMonitoringRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ltmrEnabled' - Specify @true@ to enable detailed monitoring. Otherwise, basic monitoring is enabled.
launchTemplatesMonitoringRequest
    :: LaunchTemplatesMonitoringRequest
launchTemplatesMonitoringRequest =
  LaunchTemplatesMonitoringRequest' {_ltmrEnabled = Nothing}


-- | Specify @true@ to enable detailed monitoring. Otherwise, basic monitoring is enabled.
ltmrEnabled :: Lens' LaunchTemplatesMonitoringRequest (Maybe Bool)
ltmrEnabled = lens _ltmrEnabled (\ s a -> s{_ltmrEnabled = a})

instance Hashable LaunchTemplatesMonitoringRequest
         where

instance NFData LaunchTemplatesMonitoringRequest
         where

instance ToQuery LaunchTemplatesMonitoringRequest
         where
        toQuery LaunchTemplatesMonitoringRequest'{..}
          = mconcat ["Enabled" =: _ltmrEnabled]

-- | Describes a license configuration.
--
--
--
-- /See:/ 'licenseConfiguration' smart constructor.
newtype LicenseConfiguration = LicenseConfiguration'
  { _lcLicenseConfigurationARN :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LicenseConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lcLicenseConfigurationARN' - The Amazon Resource Name (ARN) of the license configuration.
licenseConfiguration
    :: LicenseConfiguration
licenseConfiguration =
  LicenseConfiguration' {_lcLicenseConfigurationARN = Nothing}


-- | The Amazon Resource Name (ARN) of the license configuration.
lcLicenseConfigurationARN :: Lens' LicenseConfiguration (Maybe Text)
lcLicenseConfigurationARN = lens _lcLicenseConfigurationARN (\ s a -> s{_lcLicenseConfigurationARN = a})

instance FromXML LicenseConfiguration where
        parseXML x
          = LicenseConfiguration' <$>
              (x .@? "licenseConfigurationArn")

instance Hashable LicenseConfiguration where

instance NFData LicenseConfiguration where

-- | Describes a license configuration.
--
--
--
-- /See:/ 'licenseConfigurationRequest' smart constructor.
newtype LicenseConfigurationRequest = LicenseConfigurationRequest'
  { _lcrLicenseConfigurationARN :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LicenseConfigurationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lcrLicenseConfigurationARN' - The Amazon Resource Name (ARN) of the license configuration.
licenseConfigurationRequest
    :: LicenseConfigurationRequest
licenseConfigurationRequest =
  LicenseConfigurationRequest' {_lcrLicenseConfigurationARN = Nothing}


-- | The Amazon Resource Name (ARN) of the license configuration.
lcrLicenseConfigurationARN :: Lens' LicenseConfigurationRequest (Maybe Text)
lcrLicenseConfigurationARN = lens _lcrLicenseConfigurationARN (\ s a -> s{_lcrLicenseConfigurationARN = a})

instance Hashable LicenseConfigurationRequest where

instance NFData LicenseConfigurationRequest where

instance ToQuery LicenseConfigurationRequest where
        toQuery LicenseConfigurationRequest'{..}
          = mconcat
              ["LicenseConfigurationArn" =:
                 _lcrLicenseConfigurationARN]

-- | Describes the Classic Load Balancers and target groups to attach to a Spot Fleet request.
--
--
--
-- /See:/ 'loadBalancersConfig' smart constructor.
data LoadBalancersConfig = LoadBalancersConfig'
  { _lbcClassicLoadBalancersConfig :: !(Maybe ClassicLoadBalancersConfig)
  , _lbcTargetGroupsConfig         :: !(Maybe TargetGroupsConfig)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LoadBalancersConfig' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lbcClassicLoadBalancersConfig' - The Classic Load Balancers.
--
-- * 'lbcTargetGroupsConfig' - The target groups.
loadBalancersConfig
    :: LoadBalancersConfig
loadBalancersConfig =
  LoadBalancersConfig'
    {_lbcClassicLoadBalancersConfig = Nothing, _lbcTargetGroupsConfig = Nothing}


-- | The Classic Load Balancers.
lbcClassicLoadBalancersConfig :: Lens' LoadBalancersConfig (Maybe ClassicLoadBalancersConfig)
lbcClassicLoadBalancersConfig = lens _lbcClassicLoadBalancersConfig (\ s a -> s{_lbcClassicLoadBalancersConfig = a})

-- | The target groups.
lbcTargetGroupsConfig :: Lens' LoadBalancersConfig (Maybe TargetGroupsConfig)
lbcTargetGroupsConfig = lens _lbcTargetGroupsConfig (\ s a -> s{_lbcTargetGroupsConfig = a})

instance FromXML LoadBalancersConfig where
        parseXML x
          = LoadBalancersConfig' <$>
              (x .@? "classicLoadBalancersConfig") <*>
                (x .@? "targetGroupsConfig")

instance Hashable LoadBalancersConfig where

instance NFData LoadBalancersConfig where

instance ToQuery LoadBalancersConfig where
        toQuery LoadBalancersConfig'{..}
          = mconcat
              ["ClassicLoadBalancersConfig" =:
                 _lbcClassicLoadBalancersConfig,
               "TargetGroupsConfig" =: _lbcTargetGroupsConfig]

-- | Describes a load permission.
--
--
--
-- /See:/ 'loadPermission' smart constructor.
data LoadPermission = LoadPermission'
  { _lpGroup  :: !(Maybe PermissionGroup)
  , _lpUserId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LoadPermission' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lpGroup' - The name of the group.
--
-- * 'lpUserId' - The AWS account ID.
loadPermission
    :: LoadPermission
loadPermission = LoadPermission' {_lpGroup = Nothing, _lpUserId = Nothing}


-- | The name of the group.
lpGroup :: Lens' LoadPermission (Maybe PermissionGroup)
lpGroup = lens _lpGroup (\ s a -> s{_lpGroup = a})

-- | The AWS account ID.
lpUserId :: Lens' LoadPermission (Maybe Text)
lpUserId = lens _lpUserId (\ s a -> s{_lpUserId = a})

instance FromXML LoadPermission where
        parseXML x
          = LoadPermission' <$>
              (x .@? "group") <*> (x .@? "userId")

instance Hashable LoadPermission where

instance NFData LoadPermission where

-- | Describes modifications to the load permissions of an Amazon FPGA image (AFI).
--
--
--
-- /See:/ 'loadPermissionModifications' smart constructor.
data LoadPermissionModifications = LoadPermissionModifications'
  { _lpmRemove :: !(Maybe [LoadPermissionRequest])
  , _lpmAdd    :: !(Maybe [LoadPermissionRequest])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LoadPermissionModifications' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lpmRemove' - The load permissions to remove.
--
-- * 'lpmAdd' - The load permissions to add.
loadPermissionModifications
    :: LoadPermissionModifications
loadPermissionModifications =
  LoadPermissionModifications' {_lpmRemove = Nothing, _lpmAdd = Nothing}


-- | The load permissions to remove.
lpmRemove :: Lens' LoadPermissionModifications [LoadPermissionRequest]
lpmRemove = lens _lpmRemove (\ s a -> s{_lpmRemove = a}) . _Default . _Coerce

-- | The load permissions to add.
lpmAdd :: Lens' LoadPermissionModifications [LoadPermissionRequest]
lpmAdd = lens _lpmAdd (\ s a -> s{_lpmAdd = a}) . _Default . _Coerce

instance Hashable LoadPermissionModifications where

instance NFData LoadPermissionModifications where

instance ToQuery LoadPermissionModifications where
        toQuery LoadPermissionModifications'{..}
          = mconcat
              [toQuery (toQueryList "Remove" <$> _lpmRemove),
               toQuery (toQueryList "Add" <$> _lpmAdd)]

-- | Describes a load permission.
--
--
--
-- /See:/ 'loadPermissionRequest' smart constructor.
data LoadPermissionRequest = LoadPermissionRequest'
  { _lprGroup  :: !(Maybe PermissionGroup)
  , _lprUserId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LoadPermissionRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lprGroup' - The name of the group.
--
-- * 'lprUserId' - The AWS account ID.
loadPermissionRequest
    :: LoadPermissionRequest
loadPermissionRequest =
  LoadPermissionRequest' {_lprGroup = Nothing, _lprUserId = Nothing}


-- | The name of the group.
lprGroup :: Lens' LoadPermissionRequest (Maybe PermissionGroup)
lprGroup = lens _lprGroup (\ s a -> s{_lprGroup = a})

-- | The AWS account ID.
lprUserId :: Lens' LoadPermissionRequest (Maybe Text)
lprUserId = lens _lprUserId (\ s a -> s{_lprUserId = a})

instance Hashable LoadPermissionRequest where

instance NFData LoadPermissionRequest where

instance ToQuery LoadPermissionRequest where
        toQuery LoadPermissionRequest'{..}
          = mconcat
              ["Group" =: _lprGroup, "UserId" =: _lprUserId]

-- | Describes a local gateway.
--
--
--
-- /See:/ 'localGateway' smart constructor.
data LocalGateway = LocalGateway'
  { _lgState          :: !(Maybe Text)
  , _lgLocalGatewayId :: !(Maybe Text)
  , _lgOutpostARN     :: !(Maybe Text)
  , _lgOwnerId        :: !(Maybe Text)
  , _lgTags           :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LocalGateway' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lgState' - The state of the local gateway.
--
-- * 'lgLocalGatewayId' - The ID of the local gateway.
--
-- * 'lgOutpostARN' - The Amazon Resource Name (ARN) of the Outpost.
--
-- * 'lgOwnerId' - The AWS account ID that owns the local gateway.
--
-- * 'lgTags' - The tags assigned to the local gateway.
localGateway
    :: LocalGateway
localGateway =
  LocalGateway'
    { _lgState = Nothing
    , _lgLocalGatewayId = Nothing
    , _lgOutpostARN = Nothing
    , _lgOwnerId = Nothing
    , _lgTags = Nothing
    }


-- | The state of the local gateway.
lgState :: Lens' LocalGateway (Maybe Text)
lgState = lens _lgState (\ s a -> s{_lgState = a})

-- | The ID of the local gateway.
lgLocalGatewayId :: Lens' LocalGateway (Maybe Text)
lgLocalGatewayId = lens _lgLocalGatewayId (\ s a -> s{_lgLocalGatewayId = a})

-- | The Amazon Resource Name (ARN) of the Outpost.
lgOutpostARN :: Lens' LocalGateway (Maybe Text)
lgOutpostARN = lens _lgOutpostARN (\ s a -> s{_lgOutpostARN = a})

-- | The AWS account ID that owns the local gateway.
lgOwnerId :: Lens' LocalGateway (Maybe Text)
lgOwnerId = lens _lgOwnerId (\ s a -> s{_lgOwnerId = a})

-- | The tags assigned to the local gateway.
lgTags :: Lens' LocalGateway [Tag]
lgTags = lens _lgTags (\ s a -> s{_lgTags = a}) . _Default . _Coerce

instance FromXML LocalGateway where
        parseXML x
          = LocalGateway' <$>
              (x .@? "state") <*> (x .@? "localGatewayId") <*>
                (x .@? "outpostArn")
                <*> (x .@? "ownerId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable LocalGateway where

instance NFData LocalGateway where

-- | Describes a route for a local gateway route table.
--
--
--
-- /See:/ 'localGatewayRoute' smart constructor.
data LocalGatewayRoute = LocalGatewayRoute'
  { _lgrState                               :: !(Maybe LocalGatewayRouteState)
  , _lgrLocalGatewayRouteTableARN           :: !(Maybe Text)
  , _lgrOwnerId                             :: !(Maybe Text)
  , _lgrLocalGatewayRouteTableId            :: !(Maybe Text)
  , _lgrType                                :: !(Maybe LocalGatewayRouteType)
  , _lgrLocalGatewayVirtualInterfaceGroupId :: !(Maybe Text)
  , _lgrDestinationCidrBlock                :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LocalGatewayRoute' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lgrState' - The state of the route.
--
-- * 'lgrLocalGatewayRouteTableARN' - The Amazon Resource Name (ARN) of the local gateway route table.
--
-- * 'lgrOwnerId' - The AWS account ID that owns the local gateway route.
--
-- * 'lgrLocalGatewayRouteTableId' - The ID of the local gateway route table.
--
-- * 'lgrType' - The route type.
--
-- * 'lgrLocalGatewayVirtualInterfaceGroupId' - The ID of the virtual interface group.
--
-- * 'lgrDestinationCidrBlock' - The CIDR block used for destination matches.
localGatewayRoute
    :: LocalGatewayRoute
localGatewayRoute =
  LocalGatewayRoute'
    { _lgrState = Nothing
    , _lgrLocalGatewayRouteTableARN = Nothing
    , _lgrOwnerId = Nothing
    , _lgrLocalGatewayRouteTableId = Nothing
    , _lgrType = Nothing
    , _lgrLocalGatewayVirtualInterfaceGroupId = Nothing
    , _lgrDestinationCidrBlock = Nothing
    }


-- | The state of the route.
lgrState :: Lens' LocalGatewayRoute (Maybe LocalGatewayRouteState)
lgrState = lens _lgrState (\ s a -> s{_lgrState = a})

-- | The Amazon Resource Name (ARN) of the local gateway route table.
lgrLocalGatewayRouteTableARN :: Lens' LocalGatewayRoute (Maybe Text)
lgrLocalGatewayRouteTableARN = lens _lgrLocalGatewayRouteTableARN (\ s a -> s{_lgrLocalGatewayRouteTableARN = a})

-- | The AWS account ID that owns the local gateway route.
lgrOwnerId :: Lens' LocalGatewayRoute (Maybe Text)
lgrOwnerId = lens _lgrOwnerId (\ s a -> s{_lgrOwnerId = a})

-- | The ID of the local gateway route table.
lgrLocalGatewayRouteTableId :: Lens' LocalGatewayRoute (Maybe Text)
lgrLocalGatewayRouteTableId = lens _lgrLocalGatewayRouteTableId (\ s a -> s{_lgrLocalGatewayRouteTableId = a})

-- | The route type.
lgrType :: Lens' LocalGatewayRoute (Maybe LocalGatewayRouteType)
lgrType = lens _lgrType (\ s a -> s{_lgrType = a})

-- | The ID of the virtual interface group.
lgrLocalGatewayVirtualInterfaceGroupId :: Lens' LocalGatewayRoute (Maybe Text)
lgrLocalGatewayVirtualInterfaceGroupId = lens _lgrLocalGatewayVirtualInterfaceGroupId (\ s a -> s{_lgrLocalGatewayVirtualInterfaceGroupId = a})

-- | The CIDR block used for destination matches.
lgrDestinationCidrBlock :: Lens' LocalGatewayRoute (Maybe Text)
lgrDestinationCidrBlock = lens _lgrDestinationCidrBlock (\ s a -> s{_lgrDestinationCidrBlock = a})

instance FromXML LocalGatewayRoute where
        parseXML x
          = LocalGatewayRoute' <$>
              (x .@? "state") <*>
                (x .@? "localGatewayRouteTableArn")
                <*> (x .@? "ownerId")
                <*> (x .@? "localGatewayRouteTableId")
                <*> (x .@? "type")
                <*> (x .@? "localGatewayVirtualInterfaceGroupId")
                <*> (x .@? "destinationCidrBlock")

instance Hashable LocalGatewayRoute where

instance NFData LocalGatewayRoute where

-- | Describes a local gateway route table.
--
--
--
-- /See:/ 'localGatewayRouteTable' smart constructor.
data LocalGatewayRouteTable = LocalGatewayRouteTable'
  { _lgrtState                     :: !(Maybe Text)
  , _lgrtLocalGatewayRouteTableARN :: !(Maybe Text)
  , _lgrtLocalGatewayId            :: !(Maybe Text)
  , _lgrtOutpostARN                :: !(Maybe Text)
  , _lgrtOwnerId                   :: !(Maybe Text)
  , _lgrtLocalGatewayRouteTableId  :: !(Maybe Text)
  , _lgrtTags                      :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LocalGatewayRouteTable' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lgrtState' - The state of the local gateway route table.
--
-- * 'lgrtLocalGatewayRouteTableARN' - The Amazon Resource Name (ARN) of the local gateway route table.
--
-- * 'lgrtLocalGatewayId' - The ID of the local gateway.
--
-- * 'lgrtOutpostARN' - The Amazon Resource Name (ARN) of the Outpost.
--
-- * 'lgrtOwnerId' - The AWS account ID that owns the local gateway route table.
--
-- * 'lgrtLocalGatewayRouteTableId' - The ID of the local gateway route table.
--
-- * 'lgrtTags' - The tags assigned to the local gateway route table.
localGatewayRouteTable
    :: LocalGatewayRouteTable
localGatewayRouteTable =
  LocalGatewayRouteTable'
    { _lgrtState = Nothing
    , _lgrtLocalGatewayRouteTableARN = Nothing
    , _lgrtLocalGatewayId = Nothing
    , _lgrtOutpostARN = Nothing
    , _lgrtOwnerId = Nothing
    , _lgrtLocalGatewayRouteTableId = Nothing
    , _lgrtTags = Nothing
    }


-- | The state of the local gateway route table.
lgrtState :: Lens' LocalGatewayRouteTable (Maybe Text)
lgrtState = lens _lgrtState (\ s a -> s{_lgrtState = a})

-- | The Amazon Resource Name (ARN) of the local gateway route table.
lgrtLocalGatewayRouteTableARN :: Lens' LocalGatewayRouteTable (Maybe Text)
lgrtLocalGatewayRouteTableARN = lens _lgrtLocalGatewayRouteTableARN (\ s a -> s{_lgrtLocalGatewayRouteTableARN = a})

-- | The ID of the local gateway.
lgrtLocalGatewayId :: Lens' LocalGatewayRouteTable (Maybe Text)
lgrtLocalGatewayId = lens _lgrtLocalGatewayId (\ s a -> s{_lgrtLocalGatewayId = a})

-- | The Amazon Resource Name (ARN) of the Outpost.
lgrtOutpostARN :: Lens' LocalGatewayRouteTable (Maybe Text)
lgrtOutpostARN = lens _lgrtOutpostARN (\ s a -> s{_lgrtOutpostARN = a})

-- | The AWS account ID that owns the local gateway route table.
lgrtOwnerId :: Lens' LocalGatewayRouteTable (Maybe Text)
lgrtOwnerId = lens _lgrtOwnerId (\ s a -> s{_lgrtOwnerId = a})

-- | The ID of the local gateway route table.
lgrtLocalGatewayRouteTableId :: Lens' LocalGatewayRouteTable (Maybe Text)
lgrtLocalGatewayRouteTableId = lens _lgrtLocalGatewayRouteTableId (\ s a -> s{_lgrtLocalGatewayRouteTableId = a})

-- | The tags assigned to the local gateway route table.
lgrtTags :: Lens' LocalGatewayRouteTable [Tag]
lgrtTags = lens _lgrtTags (\ s a -> s{_lgrtTags = a}) . _Default . _Coerce

instance FromXML LocalGatewayRouteTable where
        parseXML x
          = LocalGatewayRouteTable' <$>
              (x .@? "state") <*>
                (x .@? "localGatewayRouteTableArn")
                <*> (x .@? "localGatewayId")
                <*> (x .@? "outpostArn")
                <*> (x .@? "ownerId")
                <*> (x .@? "localGatewayRouteTableId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable LocalGatewayRouteTable where

instance NFData LocalGatewayRouteTable where

-- | Describes an association between a local gateway route table and a VPC.
--
--
--
-- /See:/ 'localGatewayRouteTableVPCAssociation' smart constructor.
data LocalGatewayRouteTableVPCAssociation = LocalGatewayRouteTableVPCAssociation'
  { _lgrtvaState                                  :: !(Maybe Text)
  , _lgrtvaLocalGatewayRouteTableARN              :: !(Maybe Text)
  , _lgrtvaVPCId                                  :: !(Maybe Text)
  , _lgrtvaLocalGatewayId                         :: !(Maybe Text)
  , _lgrtvaLocalGatewayRouteTableVPCAssociationId :: !(Maybe Text)
  , _lgrtvaOwnerId                                :: !(Maybe Text)
  , _lgrtvaLocalGatewayRouteTableId               :: !(Maybe Text)
  , _lgrtvaTags                                   :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LocalGatewayRouteTableVPCAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lgrtvaState' - The state of the association.
--
-- * 'lgrtvaLocalGatewayRouteTableARN' - The Amazon Resource Name (ARN) of the local gateway route table for the association.
--
-- * 'lgrtvaVPCId' - The ID of the VPC.
--
-- * 'lgrtvaLocalGatewayId' - The ID of the local gateway.
--
-- * 'lgrtvaLocalGatewayRouteTableVPCAssociationId' - The ID of the association.
--
-- * 'lgrtvaOwnerId' - The AWS account ID that owns the local gateway route table for the association.
--
-- * 'lgrtvaLocalGatewayRouteTableId' - The ID of the local gateway route table.
--
-- * 'lgrtvaTags' - The tags assigned to the association.
localGatewayRouteTableVPCAssociation
    :: LocalGatewayRouteTableVPCAssociation
localGatewayRouteTableVPCAssociation =
  LocalGatewayRouteTableVPCAssociation'
    { _lgrtvaState = Nothing
    , _lgrtvaLocalGatewayRouteTableARN = Nothing
    , _lgrtvaVPCId = Nothing
    , _lgrtvaLocalGatewayId = Nothing
    , _lgrtvaLocalGatewayRouteTableVPCAssociationId = Nothing
    , _lgrtvaOwnerId = Nothing
    , _lgrtvaLocalGatewayRouteTableId = Nothing
    , _lgrtvaTags = Nothing
    }


-- | The state of the association.
lgrtvaState :: Lens' LocalGatewayRouteTableVPCAssociation (Maybe Text)
lgrtvaState = lens _lgrtvaState (\ s a -> s{_lgrtvaState = a})

-- | The Amazon Resource Name (ARN) of the local gateway route table for the association.
lgrtvaLocalGatewayRouteTableARN :: Lens' LocalGatewayRouteTableVPCAssociation (Maybe Text)
lgrtvaLocalGatewayRouteTableARN = lens _lgrtvaLocalGatewayRouteTableARN (\ s a -> s{_lgrtvaLocalGatewayRouteTableARN = a})

-- | The ID of the VPC.
lgrtvaVPCId :: Lens' LocalGatewayRouteTableVPCAssociation (Maybe Text)
lgrtvaVPCId = lens _lgrtvaVPCId (\ s a -> s{_lgrtvaVPCId = a})

-- | The ID of the local gateway.
lgrtvaLocalGatewayId :: Lens' LocalGatewayRouteTableVPCAssociation (Maybe Text)
lgrtvaLocalGatewayId = lens _lgrtvaLocalGatewayId (\ s a -> s{_lgrtvaLocalGatewayId = a})

-- | The ID of the association.
lgrtvaLocalGatewayRouteTableVPCAssociationId :: Lens' LocalGatewayRouteTableVPCAssociation (Maybe Text)
lgrtvaLocalGatewayRouteTableVPCAssociationId = lens _lgrtvaLocalGatewayRouteTableVPCAssociationId (\ s a -> s{_lgrtvaLocalGatewayRouteTableVPCAssociationId = a})

-- | The AWS account ID that owns the local gateway route table for the association.
lgrtvaOwnerId :: Lens' LocalGatewayRouteTableVPCAssociation (Maybe Text)
lgrtvaOwnerId = lens _lgrtvaOwnerId (\ s a -> s{_lgrtvaOwnerId = a})

-- | The ID of the local gateway route table.
lgrtvaLocalGatewayRouteTableId :: Lens' LocalGatewayRouteTableVPCAssociation (Maybe Text)
lgrtvaLocalGatewayRouteTableId = lens _lgrtvaLocalGatewayRouteTableId (\ s a -> s{_lgrtvaLocalGatewayRouteTableId = a})

-- | The tags assigned to the association.
lgrtvaTags :: Lens' LocalGatewayRouteTableVPCAssociation [Tag]
lgrtvaTags = lens _lgrtvaTags (\ s a -> s{_lgrtvaTags = a}) . _Default . _Coerce

instance FromXML LocalGatewayRouteTableVPCAssociation
         where
        parseXML x
          = LocalGatewayRouteTableVPCAssociation' <$>
              (x .@? "state") <*>
                (x .@? "localGatewayRouteTableArn")
                <*> (x .@? "vpcId")
                <*> (x .@? "localGatewayId")
                <*> (x .@? "localGatewayRouteTableVpcAssociationId")
                <*> (x .@? "ownerId")
                <*> (x .@? "localGatewayRouteTableId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable
           LocalGatewayRouteTableVPCAssociation
         where

instance NFData LocalGatewayRouteTableVPCAssociation
         where

-- | Describes an association between a local gateway route table and a virtual interface group.
--
--
--
-- /See:/ 'localGatewayRouteTableVirtualInterfaceGroupAssociation' smart constructor.
data LocalGatewayRouteTableVirtualInterfaceGroupAssociation = LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
  { _lgrtvigaState :: !(Maybe Text)
  , _lgrtvigaLocalGatewayRouteTableARN :: !(Maybe Text)
  , _lgrtvigaLocalGatewayId :: !(Maybe Text)
  , _lgrtvigaOwnerId :: !(Maybe Text)
  , _lgrtvigaLocalGatewayRouteTableId :: !(Maybe Text)
  , _lgrtvigaLocalGatewayRouteTableVirtualInterfaceGroupAssociationId :: !(Maybe Text)
  , _lgrtvigaLocalGatewayVirtualInterfaceGroupId :: !(Maybe Text)
  , _lgrtvigaTags :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LocalGatewayRouteTableVirtualInterfaceGroupAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lgrtvigaState' - The state of the association.
--
-- * 'lgrtvigaLocalGatewayRouteTableARN' - The Amazon Resource Name (ARN) of the local gateway route table for the virtual interface group.
--
-- * 'lgrtvigaLocalGatewayId' - The ID of the local gateway.
--
-- * 'lgrtvigaOwnerId' - The AWS account ID that owns the local gateway virtual interface group association.
--
-- * 'lgrtvigaLocalGatewayRouteTableId' - The ID of the local gateway route table.
--
-- * 'lgrtvigaLocalGatewayRouteTableVirtualInterfaceGroupAssociationId' - The ID of the association.
--
-- * 'lgrtvigaLocalGatewayVirtualInterfaceGroupId' - The ID of the virtual interface group.
--
-- * 'lgrtvigaTags' - The tags assigned to the association.
localGatewayRouteTableVirtualInterfaceGroupAssociation
    :: LocalGatewayRouteTableVirtualInterfaceGroupAssociation
localGatewayRouteTableVirtualInterfaceGroupAssociation =
  LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
    { _lgrtvigaState = Nothing
    , _lgrtvigaLocalGatewayRouteTableARN = Nothing
    , _lgrtvigaLocalGatewayId = Nothing
    , _lgrtvigaOwnerId = Nothing
    , _lgrtvigaLocalGatewayRouteTableId = Nothing
    , _lgrtvigaLocalGatewayRouteTableVirtualInterfaceGroupAssociationId =
        Nothing
    , _lgrtvigaLocalGatewayVirtualInterfaceGroupId = Nothing
    , _lgrtvigaTags = Nothing
    }


-- | The state of the association.
lgrtvigaState :: Lens' LocalGatewayRouteTableVirtualInterfaceGroupAssociation (Maybe Text)
lgrtvigaState = lens _lgrtvigaState (\ s a -> s{_lgrtvigaState = a})

-- | The Amazon Resource Name (ARN) of the local gateway route table for the virtual interface group.
lgrtvigaLocalGatewayRouteTableARN :: Lens' LocalGatewayRouteTableVirtualInterfaceGroupAssociation (Maybe Text)
lgrtvigaLocalGatewayRouteTableARN = lens _lgrtvigaLocalGatewayRouteTableARN (\ s a -> s{_lgrtvigaLocalGatewayRouteTableARN = a})

-- | The ID of the local gateway.
lgrtvigaLocalGatewayId :: Lens' LocalGatewayRouteTableVirtualInterfaceGroupAssociation (Maybe Text)
lgrtvigaLocalGatewayId = lens _lgrtvigaLocalGatewayId (\ s a -> s{_lgrtvigaLocalGatewayId = a})

-- | The AWS account ID that owns the local gateway virtual interface group association.
lgrtvigaOwnerId :: Lens' LocalGatewayRouteTableVirtualInterfaceGroupAssociation (Maybe Text)
lgrtvigaOwnerId = lens _lgrtvigaOwnerId (\ s a -> s{_lgrtvigaOwnerId = a})

-- | The ID of the local gateway route table.
lgrtvigaLocalGatewayRouteTableId :: Lens' LocalGatewayRouteTableVirtualInterfaceGroupAssociation (Maybe Text)
lgrtvigaLocalGatewayRouteTableId = lens _lgrtvigaLocalGatewayRouteTableId (\ s a -> s{_lgrtvigaLocalGatewayRouteTableId = a})

-- | The ID of the association.
lgrtvigaLocalGatewayRouteTableVirtualInterfaceGroupAssociationId :: Lens' LocalGatewayRouteTableVirtualInterfaceGroupAssociation (Maybe Text)
lgrtvigaLocalGatewayRouteTableVirtualInterfaceGroupAssociationId = lens _lgrtvigaLocalGatewayRouteTableVirtualInterfaceGroupAssociationId (\ s a -> s{_lgrtvigaLocalGatewayRouteTableVirtualInterfaceGroupAssociationId = a})

-- | The ID of the virtual interface group.
lgrtvigaLocalGatewayVirtualInterfaceGroupId :: Lens' LocalGatewayRouteTableVirtualInterfaceGroupAssociation (Maybe Text)
lgrtvigaLocalGatewayVirtualInterfaceGroupId = lens _lgrtvigaLocalGatewayVirtualInterfaceGroupId (\ s a -> s{_lgrtvigaLocalGatewayVirtualInterfaceGroupId = a})

-- | The tags assigned to the association.
lgrtvigaTags :: Lens' LocalGatewayRouteTableVirtualInterfaceGroupAssociation [Tag]
lgrtvigaTags = lens _lgrtvigaTags (\ s a -> s{_lgrtvigaTags = a}) . _Default . _Coerce

instance FromXML
           LocalGatewayRouteTableVirtualInterfaceGroupAssociation
         where
        parseXML x
          = LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
              <$>
              (x .@? "state") <*>
                (x .@? "localGatewayRouteTableArn")
                <*> (x .@? "localGatewayId")
                <*> (x .@? "ownerId")
                <*> (x .@? "localGatewayRouteTableId")
                <*>
                (x .@?
                   "localGatewayRouteTableVirtualInterfaceGroupAssociationId")
                <*> (x .@? "localGatewayVirtualInterfaceGroupId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable
           LocalGatewayRouteTableVirtualInterfaceGroupAssociation
         where

instance NFData
           LocalGatewayRouteTableVirtualInterfaceGroupAssociation
         where

-- | Describes a local gateway virtual interface.
--
--
--
-- /See:/ 'localGatewayVirtualInterface' smart constructor.
data LocalGatewayVirtualInterface = LocalGatewayVirtualInterface'
  { _lgviLocalGatewayVirtualInterfaceId :: !(Maybe Text)
  , _lgviLocalBGPASN                    :: !(Maybe Int)
  , _lgviVLAN                           :: !(Maybe Int)
  , _lgviLocalGatewayId                 :: !(Maybe Text)
  , _lgviLocalAddress                   :: !(Maybe Text)
  , _lgviPeerBGPASN                     :: !(Maybe Int)
  , _lgviOwnerId                        :: !(Maybe Text)
  , _lgviPeerAddress                    :: !(Maybe Text)
  , _lgviTags                           :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LocalGatewayVirtualInterface' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lgviLocalGatewayVirtualInterfaceId' - The ID of the virtual interface.
--
-- * 'lgviLocalBGPASN' - The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of the local gateway.
--
-- * 'lgviVLAN' - The ID of the VLAN.
--
-- * 'lgviLocalGatewayId' - The ID of the local gateway.
--
-- * 'lgviLocalAddress' - The local address.
--
-- * 'lgviPeerBGPASN' - The peer BGP ASN.
--
-- * 'lgviOwnerId' - The AWS account ID that owns the local gateway virtual interface.
--
-- * 'lgviPeerAddress' - The peer address.
--
-- * 'lgviTags' - The tags assigned to the virtual interface.
localGatewayVirtualInterface
    :: LocalGatewayVirtualInterface
localGatewayVirtualInterface =
  LocalGatewayVirtualInterface'
    { _lgviLocalGatewayVirtualInterfaceId = Nothing
    , _lgviLocalBGPASN = Nothing
    , _lgviVLAN = Nothing
    , _lgviLocalGatewayId = Nothing
    , _lgviLocalAddress = Nothing
    , _lgviPeerBGPASN = Nothing
    , _lgviOwnerId = Nothing
    , _lgviPeerAddress = Nothing
    , _lgviTags = Nothing
    }


-- | The ID of the virtual interface.
lgviLocalGatewayVirtualInterfaceId :: Lens' LocalGatewayVirtualInterface (Maybe Text)
lgviLocalGatewayVirtualInterfaceId = lens _lgviLocalGatewayVirtualInterfaceId (\ s a -> s{_lgviLocalGatewayVirtualInterfaceId = a})

-- | The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of the local gateway.
lgviLocalBGPASN :: Lens' LocalGatewayVirtualInterface (Maybe Int)
lgviLocalBGPASN = lens _lgviLocalBGPASN (\ s a -> s{_lgviLocalBGPASN = a})

-- | The ID of the VLAN.
lgviVLAN :: Lens' LocalGatewayVirtualInterface (Maybe Int)
lgviVLAN = lens _lgviVLAN (\ s a -> s{_lgviVLAN = a})

-- | The ID of the local gateway.
lgviLocalGatewayId :: Lens' LocalGatewayVirtualInterface (Maybe Text)
lgviLocalGatewayId = lens _lgviLocalGatewayId (\ s a -> s{_lgviLocalGatewayId = a})

-- | The local address.
lgviLocalAddress :: Lens' LocalGatewayVirtualInterface (Maybe Text)
lgviLocalAddress = lens _lgviLocalAddress (\ s a -> s{_lgviLocalAddress = a})

-- | The peer BGP ASN.
lgviPeerBGPASN :: Lens' LocalGatewayVirtualInterface (Maybe Int)
lgviPeerBGPASN = lens _lgviPeerBGPASN (\ s a -> s{_lgviPeerBGPASN = a})

-- | The AWS account ID that owns the local gateway virtual interface.
lgviOwnerId :: Lens' LocalGatewayVirtualInterface (Maybe Text)
lgviOwnerId = lens _lgviOwnerId (\ s a -> s{_lgviOwnerId = a})

-- | The peer address.
lgviPeerAddress :: Lens' LocalGatewayVirtualInterface (Maybe Text)
lgviPeerAddress = lens _lgviPeerAddress (\ s a -> s{_lgviPeerAddress = a})

-- | The tags assigned to the virtual interface.
lgviTags :: Lens' LocalGatewayVirtualInterface [Tag]
lgviTags = lens _lgviTags (\ s a -> s{_lgviTags = a}) . _Default . _Coerce

instance FromXML LocalGatewayVirtualInterface where
        parseXML x
          = LocalGatewayVirtualInterface' <$>
              (x .@? "localGatewayVirtualInterfaceId") <*>
                (x .@? "localBgpAsn")
                <*> (x .@? "vlan")
                <*> (x .@? "localGatewayId")
                <*> (x .@? "localAddress")
                <*> (x .@? "peerBgpAsn")
                <*> (x .@? "ownerId")
                <*> (x .@? "peerAddress")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable LocalGatewayVirtualInterface where

instance NFData LocalGatewayVirtualInterface where

-- | Describes a local gateway virtual interface group.
--
--
--
-- /See:/ 'localGatewayVirtualInterfaceGroup' smart constructor.
data LocalGatewayVirtualInterfaceGroup = LocalGatewayVirtualInterfaceGroup'
  { _lgvigLocalGatewayId                      :: !(Maybe Text)
  , _lgvigOwnerId                             :: !(Maybe Text)
  , _lgvigLocalGatewayVirtualInterfaceIds     :: !(Maybe [Text])
  , _lgvigLocalGatewayVirtualInterfaceGroupId :: !(Maybe Text)
  , _lgvigTags                                :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'LocalGatewayVirtualInterfaceGroup' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'lgvigLocalGatewayId' - The ID of the local gateway.
--
-- * 'lgvigOwnerId' - The AWS account ID that owns the local gateway virtual interface group.
--
-- * 'lgvigLocalGatewayVirtualInterfaceIds' - The IDs of the virtual interfaces.
--
-- * 'lgvigLocalGatewayVirtualInterfaceGroupId' - The ID of the virtual interface group.
--
-- * 'lgvigTags' - The tags assigned to the virtual interface group.
localGatewayVirtualInterfaceGroup
    :: LocalGatewayVirtualInterfaceGroup
localGatewayVirtualInterfaceGroup =
  LocalGatewayVirtualInterfaceGroup'
    { _lgvigLocalGatewayId = Nothing
    , _lgvigOwnerId = Nothing
    , _lgvigLocalGatewayVirtualInterfaceIds = Nothing
    , _lgvigLocalGatewayVirtualInterfaceGroupId = Nothing
    , _lgvigTags = Nothing
    }


-- | The ID of the local gateway.
lgvigLocalGatewayId :: Lens' LocalGatewayVirtualInterfaceGroup (Maybe Text)
lgvigLocalGatewayId = lens _lgvigLocalGatewayId (\ s a -> s{_lgvigLocalGatewayId = a})

-- | The AWS account ID that owns the local gateway virtual interface group.
lgvigOwnerId :: Lens' LocalGatewayVirtualInterfaceGroup (Maybe Text)
lgvigOwnerId = lens _lgvigOwnerId (\ s a -> s{_lgvigOwnerId = a})

-- | The IDs of the virtual interfaces.
lgvigLocalGatewayVirtualInterfaceIds :: Lens' LocalGatewayVirtualInterfaceGroup [Text]
lgvigLocalGatewayVirtualInterfaceIds = lens _lgvigLocalGatewayVirtualInterfaceIds (\ s a -> s{_lgvigLocalGatewayVirtualInterfaceIds = a}) . _Default . _Coerce

-- | The ID of the virtual interface group.
lgvigLocalGatewayVirtualInterfaceGroupId :: Lens' LocalGatewayVirtualInterfaceGroup (Maybe Text)
lgvigLocalGatewayVirtualInterfaceGroupId = lens _lgvigLocalGatewayVirtualInterfaceGroupId (\ s a -> s{_lgvigLocalGatewayVirtualInterfaceGroupId = a})

-- | The tags assigned to the virtual interface group.
lgvigTags :: Lens' LocalGatewayVirtualInterfaceGroup [Tag]
lgvigTags = lens _lgvigTags (\ s a -> s{_lgvigTags = a}) . _Default . _Coerce

instance FromXML LocalGatewayVirtualInterfaceGroup
         where
        parseXML x
          = LocalGatewayVirtualInterfaceGroup' <$>
              (x .@? "localGatewayId") <*> (x .@? "ownerId") <*>
                (x .@? "localGatewayVirtualInterfaceIdSet" .!@ mempty
                   >>= may (parseXMLList "item"))
                <*> (x .@? "localGatewayVirtualInterfaceGroupId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable LocalGatewayVirtualInterfaceGroup
         where

instance NFData LocalGatewayVirtualInterfaceGroup
         where

-- | Describes a managed prefix list.
--
--
--
-- /See:/ 'managedPrefixList' smart constructor.
data ManagedPrefixList = ManagedPrefixList'
  { _mplStateMessage   :: !(Maybe Text)
  , _mplState          :: !(Maybe PrefixListState)
  , _mplPrefixListARN  :: !(Maybe Text)
  , _mplAddressFamily  :: !(Maybe Text)
  , _mplOwnerId        :: !(Maybe Text)
  , _mplPrefixListId   :: !(Maybe Text)
  , _mplVersion        :: !(Maybe Integer)
  , _mplPrefixListName :: !(Maybe Text)
  , _mplMaxEntries     :: !(Maybe Int)
  , _mplTags           :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ManagedPrefixList' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'mplStateMessage' - The state message.
--
-- * 'mplState' - The state of the prefix list.
--
-- * 'mplPrefixListARN' - The Amazon Resource Name (ARN) for the prefix list.
--
-- * 'mplAddressFamily' - The IP address version.
--
-- * 'mplOwnerId' - The ID of the owner of the prefix list.
--
-- * 'mplPrefixListId' - The ID of the prefix list.
--
-- * 'mplVersion' - The version of the prefix list.
--
-- * 'mplPrefixListName' - The name of the prefix list.
--
-- * 'mplMaxEntries' - The maximum number of entries for the prefix list.
--
-- * 'mplTags' - The tags for the prefix list.
managedPrefixList
    :: ManagedPrefixList
managedPrefixList =
  ManagedPrefixList'
    { _mplStateMessage = Nothing
    , _mplState = Nothing
    , _mplPrefixListARN = Nothing
    , _mplAddressFamily = Nothing
    , _mplOwnerId = Nothing
    , _mplPrefixListId = Nothing
    , _mplVersion = Nothing
    , _mplPrefixListName = Nothing
    , _mplMaxEntries = Nothing
    , _mplTags = Nothing
    }


-- | The state message.
mplStateMessage :: Lens' ManagedPrefixList (Maybe Text)
mplStateMessage = lens _mplStateMessage (\ s a -> s{_mplStateMessage = a})

-- | The state of the prefix list.
mplState :: Lens' ManagedPrefixList (Maybe PrefixListState)
mplState = lens _mplState (\ s a -> s{_mplState = a})

-- | The Amazon Resource Name (ARN) for the prefix list.
mplPrefixListARN :: Lens' ManagedPrefixList (Maybe Text)
mplPrefixListARN = lens _mplPrefixListARN (\ s a -> s{_mplPrefixListARN = a})

-- | The IP address version.
mplAddressFamily :: Lens' ManagedPrefixList (Maybe Text)
mplAddressFamily = lens _mplAddressFamily (\ s a -> s{_mplAddressFamily = a})

-- | The ID of the owner of the prefix list.
mplOwnerId :: Lens' ManagedPrefixList (Maybe Text)
mplOwnerId = lens _mplOwnerId (\ s a -> s{_mplOwnerId = a})

-- | The ID of the prefix list.
mplPrefixListId :: Lens' ManagedPrefixList (Maybe Text)
mplPrefixListId = lens _mplPrefixListId (\ s a -> s{_mplPrefixListId = a})

-- | The version of the prefix list.
mplVersion :: Lens' ManagedPrefixList (Maybe Integer)
mplVersion = lens _mplVersion (\ s a -> s{_mplVersion = a})

-- | The name of the prefix list.
mplPrefixListName :: Lens' ManagedPrefixList (Maybe Text)
mplPrefixListName = lens _mplPrefixListName (\ s a -> s{_mplPrefixListName = a})

-- | The maximum number of entries for the prefix list.
mplMaxEntries :: Lens' ManagedPrefixList (Maybe Int)
mplMaxEntries = lens _mplMaxEntries (\ s a -> s{_mplMaxEntries = a})

-- | The tags for the prefix list.
mplTags :: Lens' ManagedPrefixList [Tag]
mplTags = lens _mplTags (\ s a -> s{_mplTags = a}) . _Default . _Coerce

instance FromXML ManagedPrefixList where
        parseXML x
          = ManagedPrefixList' <$>
              (x .@? "stateMessage") <*> (x .@? "state") <*>
                (x .@? "prefixListArn")
                <*> (x .@? "addressFamily")
                <*> (x .@? "ownerId")
                <*> (x .@? "prefixListId")
                <*> (x .@? "version")
                <*> (x .@? "prefixListName")
                <*> (x .@? "maxEntries")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ManagedPrefixList where

instance NFData ManagedPrefixList where

-- | Describes the memory for the instance type.
--
--
--
-- /See:/ 'memoryInfo' smart constructor.
newtype MemoryInfo = MemoryInfo'
  { _miSizeInMiB :: Maybe Integer
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'MemoryInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'miSizeInMiB' - The size of the memory, in MiB.
memoryInfo
    :: MemoryInfo
memoryInfo = MemoryInfo' {_miSizeInMiB = Nothing}


-- | The size of the memory, in MiB.
miSizeInMiB :: Lens' MemoryInfo (Maybe Integer)
miSizeInMiB = lens _miSizeInMiB (\ s a -> s{_miSizeInMiB = a})

instance FromXML MemoryInfo where
        parseXML x = MemoryInfo' <$> (x .@? "sizeInMiB")

instance Hashable MemoryInfo where

instance NFData MemoryInfo where

-- | The transit gateway options.
--
--
--
-- /See:/ 'modifyTransitGatewayOptions' smart constructor.
data ModifyTransitGatewayOptions = ModifyTransitGatewayOptions'
  { _mtgoVPNEcmpSupport :: !(Maybe VPNEcmpSupportValue)
  , _mtgoAutoAcceptSharedAttachments :: !(Maybe AutoAcceptSharedAttachmentsValue)
  , _mtgoPropagationDefaultRouteTableId :: !(Maybe Text)
  , _mtgoRemoveTransitGatewayCidrBlocks :: !(Maybe [Text])
  , _mtgoDefaultRouteTableAssociation :: !(Maybe DefaultRouteTableAssociationValue)
  , _mtgoAssociationDefaultRouteTableId :: !(Maybe Text)
  , _mtgoDefaultRouteTablePropagation :: !(Maybe DefaultRouteTablePropagationValue)
  , _mtgoAddTransitGatewayCidrBlocks :: !(Maybe [Text])
  , _mtgoDNSSupport :: !(Maybe DNSSupportValue)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ModifyTransitGatewayOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'mtgoVPNEcmpSupport' - Enable or disable Equal Cost Multipath Protocol support.
--
-- * 'mtgoAutoAcceptSharedAttachments' - Enable or disable automatic acceptance of attachment requests.
--
-- * 'mtgoPropagationDefaultRouteTableId' - The ID of the default propagation route table.
--
-- * 'mtgoRemoveTransitGatewayCidrBlocks' - Removes CIDR blocks for the transit gateway.
--
-- * 'mtgoDefaultRouteTableAssociation' - Enable or disable automatic association with the default association route table.
--
-- * 'mtgoAssociationDefaultRouteTableId' - The ID of the default association route table.
--
-- * 'mtgoDefaultRouteTablePropagation' - Enable or disable automatic propagation of routes to the default propagation route table.
--
-- * 'mtgoAddTransitGatewayCidrBlocks' - Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
--
-- * 'mtgoDNSSupport' - Enable or disable DNS support.
modifyTransitGatewayOptions
    :: ModifyTransitGatewayOptions
modifyTransitGatewayOptions =
  ModifyTransitGatewayOptions'
    { _mtgoVPNEcmpSupport = Nothing
    , _mtgoAutoAcceptSharedAttachments = Nothing
    , _mtgoPropagationDefaultRouteTableId = Nothing
    , _mtgoRemoveTransitGatewayCidrBlocks = Nothing
    , _mtgoDefaultRouteTableAssociation = Nothing
    , _mtgoAssociationDefaultRouteTableId = Nothing
    , _mtgoDefaultRouteTablePropagation = Nothing
    , _mtgoAddTransitGatewayCidrBlocks = Nothing
    , _mtgoDNSSupport = Nothing
    }


-- | Enable or disable Equal Cost Multipath Protocol support.
mtgoVPNEcmpSupport :: Lens' ModifyTransitGatewayOptions (Maybe VPNEcmpSupportValue)
mtgoVPNEcmpSupport = lens _mtgoVPNEcmpSupport (\ s a -> s{_mtgoVPNEcmpSupport = a})

-- | Enable or disable automatic acceptance of attachment requests.
mtgoAutoAcceptSharedAttachments :: Lens' ModifyTransitGatewayOptions (Maybe AutoAcceptSharedAttachmentsValue)
mtgoAutoAcceptSharedAttachments = lens _mtgoAutoAcceptSharedAttachments (\ s a -> s{_mtgoAutoAcceptSharedAttachments = a})

-- | The ID of the default propagation route table.
mtgoPropagationDefaultRouteTableId :: Lens' ModifyTransitGatewayOptions (Maybe Text)
mtgoPropagationDefaultRouteTableId = lens _mtgoPropagationDefaultRouteTableId (\ s a -> s{_mtgoPropagationDefaultRouteTableId = a})

-- | Removes CIDR blocks for the transit gateway.
mtgoRemoveTransitGatewayCidrBlocks :: Lens' ModifyTransitGatewayOptions [Text]
mtgoRemoveTransitGatewayCidrBlocks = lens _mtgoRemoveTransitGatewayCidrBlocks (\ s a -> s{_mtgoRemoveTransitGatewayCidrBlocks = a}) . _Default . _Coerce

-- | Enable or disable automatic association with the default association route table.
mtgoDefaultRouteTableAssociation :: Lens' ModifyTransitGatewayOptions (Maybe DefaultRouteTableAssociationValue)
mtgoDefaultRouteTableAssociation = lens _mtgoDefaultRouteTableAssociation (\ s a -> s{_mtgoDefaultRouteTableAssociation = a})

-- | The ID of the default association route table.
mtgoAssociationDefaultRouteTableId :: Lens' ModifyTransitGatewayOptions (Maybe Text)
mtgoAssociationDefaultRouteTableId = lens _mtgoAssociationDefaultRouteTableId (\ s a -> s{_mtgoAssociationDefaultRouteTableId = a})

-- | Enable or disable automatic propagation of routes to the default propagation route table.
mtgoDefaultRouteTablePropagation :: Lens' ModifyTransitGatewayOptions (Maybe DefaultRouteTablePropagationValue)
mtgoDefaultRouteTablePropagation = lens _mtgoDefaultRouteTablePropagation (\ s a -> s{_mtgoDefaultRouteTablePropagation = a})

-- | Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
mtgoAddTransitGatewayCidrBlocks :: Lens' ModifyTransitGatewayOptions [Text]
mtgoAddTransitGatewayCidrBlocks = lens _mtgoAddTransitGatewayCidrBlocks (\ s a -> s{_mtgoAddTransitGatewayCidrBlocks = a}) . _Default . _Coerce

-- | Enable or disable DNS support.
mtgoDNSSupport :: Lens' ModifyTransitGatewayOptions (Maybe DNSSupportValue)
mtgoDNSSupport = lens _mtgoDNSSupport (\ s a -> s{_mtgoDNSSupport = a})

instance Hashable ModifyTransitGatewayOptions where

instance NFData ModifyTransitGatewayOptions where

instance ToQuery ModifyTransitGatewayOptions where
        toQuery ModifyTransitGatewayOptions'{..}
          = mconcat
              ["VpnEcmpSupport" =: _mtgoVPNEcmpSupport,
               "AutoAcceptSharedAttachments" =:
                 _mtgoAutoAcceptSharedAttachments,
               "PropagationDefaultRouteTableId" =:
                 _mtgoPropagationDefaultRouteTableId,
               toQuery
                 (toQueryList "RemoveTransitGatewayCidrBlocks" <$>
                    _mtgoRemoveTransitGatewayCidrBlocks),
               "DefaultRouteTableAssociation" =:
                 _mtgoDefaultRouteTableAssociation,
               "AssociationDefaultRouteTableId" =:
                 _mtgoAssociationDefaultRouteTableId,
               "DefaultRouteTablePropagation" =:
                 _mtgoDefaultRouteTablePropagation,
               toQuery
                 (toQueryList "AddTransitGatewayCidrBlocks" <$>
                    _mtgoAddTransitGatewayCidrBlocks),
               "DnsSupport" =: _mtgoDNSSupport]

-- | Describes the options for a VPC attachment.
--
--
--
-- /See:/ 'modifyTransitGatewayVPCAttachmentRequestOptions' smart constructor.
data ModifyTransitGatewayVPCAttachmentRequestOptions = ModifyTransitGatewayVPCAttachmentRequestOptions'
  { _mtgvaroIPv6Support          :: !(Maybe IPv6SupportValue)
  , _mtgvaroApplianceModeSupport :: !(Maybe ApplianceModeSupportValue)
  , _mtgvaroDNSSupport           :: !(Maybe DNSSupportValue)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ModifyTransitGatewayVPCAttachmentRequestOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'mtgvaroIPv6Support' - Enable or disable IPv6 support. The default is @enable@ .
--
-- * 'mtgvaroApplianceModeSupport' - Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is @disable@ .
--
-- * 'mtgvaroDNSSupport' - Enable or disable DNS support. The default is @enable@ .
modifyTransitGatewayVPCAttachmentRequestOptions
    :: ModifyTransitGatewayVPCAttachmentRequestOptions
modifyTransitGatewayVPCAttachmentRequestOptions =
  ModifyTransitGatewayVPCAttachmentRequestOptions'
    { _mtgvaroIPv6Support = Nothing
    , _mtgvaroApplianceModeSupport = Nothing
    , _mtgvaroDNSSupport = Nothing
    }


-- | Enable or disable IPv6 support. The default is @enable@ .
mtgvaroIPv6Support :: Lens' ModifyTransitGatewayVPCAttachmentRequestOptions (Maybe IPv6SupportValue)
mtgvaroIPv6Support = lens _mtgvaroIPv6Support (\ s a -> s{_mtgvaroIPv6Support = a})

-- | Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is @disable@ .
mtgvaroApplianceModeSupport :: Lens' ModifyTransitGatewayVPCAttachmentRequestOptions (Maybe ApplianceModeSupportValue)
mtgvaroApplianceModeSupport = lens _mtgvaroApplianceModeSupport (\ s a -> s{_mtgvaroApplianceModeSupport = a})

-- | Enable or disable DNS support. The default is @enable@ .
mtgvaroDNSSupport :: Lens' ModifyTransitGatewayVPCAttachmentRequestOptions (Maybe DNSSupportValue)
mtgvaroDNSSupport = lens _mtgvaroDNSSupport (\ s a -> s{_mtgvaroDNSSupport = a})

instance Hashable
           ModifyTransitGatewayVPCAttachmentRequestOptions
         where

instance NFData
           ModifyTransitGatewayVPCAttachmentRequestOptions
         where

instance ToQuery
           ModifyTransitGatewayVPCAttachmentRequestOptions
         where
        toQuery
          ModifyTransitGatewayVPCAttachmentRequestOptions'{..}
          = mconcat
              ["Ipv6Support" =: _mtgvaroIPv6Support,
               "ApplianceModeSupport" =:
                 _mtgvaroApplianceModeSupport,
               "DnsSupport" =: _mtgvaroDNSSupport]

-- | The AWS Site-to-Site VPN tunnel options to modify.
--
--
--
-- /See:/ 'modifyVPNTunnelOptionsSpecification' smart constructor.
data ModifyVPNTunnelOptionsSpecification = ModifyVPNTunnelOptionsSpecification'
  { _mvtosReplayWindowSize :: !(Maybe Int)
  , _mvtosDPDTimeoutAction :: !(Maybe Text)
  , _mvtosRekeyFuzzPercentage :: !(Maybe Int)
  , _mvtosPhase1LifetimeSeconds :: !(Maybe Int)
  , _mvtosIKEVersions :: !(Maybe [IKEVersionsRequestListValue])
  , _mvtosPhase2IntegrityAlgorithms :: !(Maybe [Phase2IntegrityAlgorithmsRequestListValue])
  , _mvtosPhase2LifetimeSeconds :: !(Maybe Int)
  , _mvtosPhase1EncryptionAlgorithms :: !(Maybe [Phase1EncryptionAlgorithmsRequestListValue])
  , _mvtosPhase1DHGroupNumbers :: !(Maybe [Phase1DHGroupNumbersRequestListValue])
  , _mvtosPhase1IntegrityAlgorithms :: !(Maybe [Phase1IntegrityAlgorithmsRequestListValue])
  , _mvtosRekeyMarginTimeSeconds :: !(Maybe Int)
  , _mvtosDPDTimeoutSeconds :: !(Maybe Int)
  , _mvtosTunnelInsideCidr :: !(Maybe Text)
  , _mvtosStartupAction :: !(Maybe Text)
  , _mvtosPhase2EncryptionAlgorithms :: !(Maybe [Phase2EncryptionAlgorithmsRequestListValue])
  , _mvtosPhase2DHGroupNumbers :: !(Maybe [Phase2DHGroupNumbersRequestListValue])
  , _mvtosPreSharedKey :: !(Maybe Text)
  , _mvtosTunnelInsideIPv6Cidr :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ModifyVPNTunnelOptionsSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'mvtosReplayWindowSize' - The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: @1024@
--
-- * 'mvtosDPDTimeoutAction' - The action to take after DPD timeout occurs. Specify @restart@ to restart the IKE initiation. Specify @clear@ to end the IKE session. Valid Values: @clear@ | @none@ | @restart@  Default: @clear@
--
-- * 'mvtosRekeyFuzzPercentage' - The percentage of the rekey window (determined by @RekeyMarginTimeSeconds@ ) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: @100@
--
-- * 'mvtosPhase1LifetimeSeconds' - The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: @28800@
--
-- * 'mvtosIKEVersions' - The IKE versions that are permitted for the VPN tunnel. Valid values: @ikev1@ | @ikev2@
--
-- * 'mvtosPhase2IntegrityAlgorithms' - One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @SHA1@ | @SHA2-256@ | @SHA2-384@ | @SHA2-512@
--
-- * 'mvtosPhase2LifetimeSeconds' - The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for @Phase1LifetimeSeconds@ . Default: @3600@
--
-- * 'mvtosPhase1EncryptionAlgorithms' - One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @AES128@ | @AES256@ | @AES128-GCM-16@ | @AES256-GCM-16@
--
-- * 'mvtosPhase1DHGroupNumbers' - One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @2@ | @14@ | @15@ | @16@ | @17@ | @18@ | @19@ | @20@ | @21@ | @22@ | @23@ | @24@
--
-- * 'mvtosPhase1IntegrityAlgorithms' - One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @SHA1@ | @SHA2-256@ | @SHA2-384@ | @SHA2-512@
--
-- * 'mvtosRekeyMarginTimeSeconds' - The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for @RekeyFuzzPercentage@ . Constraints: A value between 60 and half of @Phase2LifetimeSeconds@ . Default: @540@
--
-- * 'mvtosDPDTimeoutSeconds' - The number of seconds after which a DPD timeout occurs. Constraints: A value between 0 and 30. Default: @30@
--
-- * 'mvtosTunnelInsideCidr' - The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the @169.254.0.0/16@ range. The following CIDR blocks are reserved and cannot be used:     * @169.254.0.0/30@      * @169.254.1.0/30@      * @169.254.2.0/30@      * @169.254.3.0/30@      * @169.254.4.0/30@      * @169.254.5.0/30@      * @169.254.169.252/30@
--
-- * 'mvtosStartupAction' - The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify @start@ for AWS to initiate the IKE negotiation. Valid Values: @add@ | @start@  Default: @add@
--
-- * 'mvtosPhase2EncryptionAlgorithms' - One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @AES128@ | @AES256@ | @AES128-GCM-16@ | @AES256-GCM-16@
--
-- * 'mvtosPhase2DHGroupNumbers' - One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @2@ | @5@ | @14@ | @15@ | @16@ | @17@ | @18@ | @19@ | @20@ | @21@ | @22@ | @23@ | @24@
--
-- * 'mvtosPreSharedKey' - The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
--
-- * 'mvtosTunnelInsideIPv6Cidr' - The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local @fd00::/8@ range.
modifyVPNTunnelOptionsSpecification
    :: ModifyVPNTunnelOptionsSpecification
modifyVPNTunnelOptionsSpecification =
  ModifyVPNTunnelOptionsSpecification'
    { _mvtosReplayWindowSize = Nothing
    , _mvtosDPDTimeoutAction = Nothing
    , _mvtosRekeyFuzzPercentage = Nothing
    , _mvtosPhase1LifetimeSeconds = Nothing
    , _mvtosIKEVersions = Nothing
    , _mvtosPhase2IntegrityAlgorithms = Nothing
    , _mvtosPhase2LifetimeSeconds = Nothing
    , _mvtosPhase1EncryptionAlgorithms = Nothing
    , _mvtosPhase1DHGroupNumbers = Nothing
    , _mvtosPhase1IntegrityAlgorithms = Nothing
    , _mvtosRekeyMarginTimeSeconds = Nothing
    , _mvtosDPDTimeoutSeconds = Nothing
    , _mvtosTunnelInsideCidr = Nothing
    , _mvtosStartupAction = Nothing
    , _mvtosPhase2EncryptionAlgorithms = Nothing
    , _mvtosPhase2DHGroupNumbers = Nothing
    , _mvtosPreSharedKey = Nothing
    , _mvtosTunnelInsideIPv6Cidr = Nothing
    }


-- | The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: @1024@
mvtosReplayWindowSize :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Int)
mvtosReplayWindowSize = lens _mvtosReplayWindowSize (\ s a -> s{_mvtosReplayWindowSize = a})

-- | The action to take after DPD timeout occurs. Specify @restart@ to restart the IKE initiation. Specify @clear@ to end the IKE session. Valid Values: @clear@ | @none@ | @restart@  Default: @clear@
mvtosDPDTimeoutAction :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Text)
mvtosDPDTimeoutAction = lens _mvtosDPDTimeoutAction (\ s a -> s{_mvtosDPDTimeoutAction = a})

-- | The percentage of the rekey window (determined by @RekeyMarginTimeSeconds@ ) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: @100@
mvtosRekeyFuzzPercentage :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Int)
mvtosRekeyFuzzPercentage = lens _mvtosRekeyFuzzPercentage (\ s a -> s{_mvtosRekeyFuzzPercentage = a})

-- | The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: @28800@
mvtosPhase1LifetimeSeconds :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Int)
mvtosPhase1LifetimeSeconds = lens _mvtosPhase1LifetimeSeconds (\ s a -> s{_mvtosPhase1LifetimeSeconds = a})

-- | The IKE versions that are permitted for the VPN tunnel. Valid values: @ikev1@ | @ikev2@
mvtosIKEVersions :: Lens' ModifyVPNTunnelOptionsSpecification [IKEVersionsRequestListValue]
mvtosIKEVersions = lens _mvtosIKEVersions (\ s a -> s{_mvtosIKEVersions = a}) . _Default . _Coerce

-- | One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @SHA1@ | @SHA2-256@ | @SHA2-384@ | @SHA2-512@
mvtosPhase2IntegrityAlgorithms :: Lens' ModifyVPNTunnelOptionsSpecification [Phase2IntegrityAlgorithmsRequestListValue]
mvtosPhase2IntegrityAlgorithms = lens _mvtosPhase2IntegrityAlgorithms (\ s a -> s{_mvtosPhase2IntegrityAlgorithms = a}) . _Default . _Coerce

-- | The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for @Phase1LifetimeSeconds@ . Default: @3600@
mvtosPhase2LifetimeSeconds :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Int)
mvtosPhase2LifetimeSeconds = lens _mvtosPhase2LifetimeSeconds (\ s a -> s{_mvtosPhase2LifetimeSeconds = a})

-- | One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @AES128@ | @AES256@ | @AES128-GCM-16@ | @AES256-GCM-16@
mvtosPhase1EncryptionAlgorithms :: Lens' ModifyVPNTunnelOptionsSpecification [Phase1EncryptionAlgorithmsRequestListValue]
mvtosPhase1EncryptionAlgorithms = lens _mvtosPhase1EncryptionAlgorithms (\ s a -> s{_mvtosPhase1EncryptionAlgorithms = a}) . _Default . _Coerce

-- | One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @2@ | @14@ | @15@ | @16@ | @17@ | @18@ | @19@ | @20@ | @21@ | @22@ | @23@ | @24@
mvtosPhase1DHGroupNumbers :: Lens' ModifyVPNTunnelOptionsSpecification [Phase1DHGroupNumbersRequestListValue]
mvtosPhase1DHGroupNumbers = lens _mvtosPhase1DHGroupNumbers (\ s a -> s{_mvtosPhase1DHGroupNumbers = a}) . _Default . _Coerce

-- | One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @SHA1@ | @SHA2-256@ | @SHA2-384@ | @SHA2-512@
mvtosPhase1IntegrityAlgorithms :: Lens' ModifyVPNTunnelOptionsSpecification [Phase1IntegrityAlgorithmsRequestListValue]
mvtosPhase1IntegrityAlgorithms = lens _mvtosPhase1IntegrityAlgorithms (\ s a -> s{_mvtosPhase1IntegrityAlgorithms = a}) . _Default . _Coerce

-- | The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for @RekeyFuzzPercentage@ . Constraints: A value between 60 and half of @Phase2LifetimeSeconds@ . Default: @540@
mvtosRekeyMarginTimeSeconds :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Int)
mvtosRekeyMarginTimeSeconds = lens _mvtosRekeyMarginTimeSeconds (\ s a -> s{_mvtosRekeyMarginTimeSeconds = a})

-- | The number of seconds after which a DPD timeout occurs. Constraints: A value between 0 and 30. Default: @30@
mvtosDPDTimeoutSeconds :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Int)
mvtosDPDTimeoutSeconds = lens _mvtosDPDTimeoutSeconds (\ s a -> s{_mvtosDPDTimeoutSeconds = a})

-- | The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the @169.254.0.0/16@ range. The following CIDR blocks are reserved and cannot be used:     * @169.254.0.0/30@      * @169.254.1.0/30@      * @169.254.2.0/30@      * @169.254.3.0/30@      * @169.254.4.0/30@      * @169.254.5.0/30@      * @169.254.169.252/30@
mvtosTunnelInsideCidr :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Text)
mvtosTunnelInsideCidr = lens _mvtosTunnelInsideCidr (\ s a -> s{_mvtosTunnelInsideCidr = a})

-- | The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify @start@ for AWS to initiate the IKE negotiation. Valid Values: @add@ | @start@  Default: @add@
mvtosStartupAction :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Text)
mvtosStartupAction = lens _mvtosStartupAction (\ s a -> s{_mvtosStartupAction = a})

-- | One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @AES128@ | @AES256@ | @AES128-GCM-16@ | @AES256-GCM-16@
mvtosPhase2EncryptionAlgorithms :: Lens' ModifyVPNTunnelOptionsSpecification [Phase2EncryptionAlgorithmsRequestListValue]
mvtosPhase2EncryptionAlgorithms = lens _mvtosPhase2EncryptionAlgorithms (\ s a -> s{_mvtosPhase2EncryptionAlgorithms = a}) . _Default . _Coerce

-- | One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @2@ | @5@ | @14@ | @15@ | @16@ | @17@ | @18@ | @19@ | @20@ | @21@ | @22@ | @23@ | @24@
mvtosPhase2DHGroupNumbers :: Lens' ModifyVPNTunnelOptionsSpecification [Phase2DHGroupNumbersRequestListValue]
mvtosPhase2DHGroupNumbers = lens _mvtosPhase2DHGroupNumbers (\ s a -> s{_mvtosPhase2DHGroupNumbers = a}) . _Default . _Coerce

-- | The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
mvtosPreSharedKey :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Text)
mvtosPreSharedKey = lens _mvtosPreSharedKey (\ s a -> s{_mvtosPreSharedKey = a})

-- | The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local @fd00::/8@ range.
mvtosTunnelInsideIPv6Cidr :: Lens' ModifyVPNTunnelOptionsSpecification (Maybe Text)
mvtosTunnelInsideIPv6Cidr = lens _mvtosTunnelInsideIPv6Cidr (\ s a -> s{_mvtosTunnelInsideIPv6Cidr = a})

instance Hashable ModifyVPNTunnelOptionsSpecification
         where

instance NFData ModifyVPNTunnelOptionsSpecification
         where

instance ToQuery ModifyVPNTunnelOptionsSpecification
         where
        toQuery ModifyVPNTunnelOptionsSpecification'{..}
          = mconcat
              ["ReplayWindowSize" =: _mvtosReplayWindowSize,
               "DPDTimeoutAction" =: _mvtosDPDTimeoutAction,
               "RekeyFuzzPercentage" =: _mvtosRekeyFuzzPercentage,
               "Phase1LifetimeSeconds" =:
                 _mvtosPhase1LifetimeSeconds,
               toQuery
                 (toQueryList "IKEVersion" <$> _mvtosIKEVersions),
               toQuery
                 (toQueryList "Phase2IntegrityAlgorithm" <$>
                    _mvtosPhase2IntegrityAlgorithms),
               "Phase2LifetimeSeconds" =:
                 _mvtosPhase2LifetimeSeconds,
               toQuery
                 (toQueryList "Phase1EncryptionAlgorithm" <$>
                    _mvtosPhase1EncryptionAlgorithms),
               toQuery
                 (toQueryList "Phase1DHGroupNumber" <$>
                    _mvtosPhase1DHGroupNumbers),
               toQuery
                 (toQueryList "Phase1IntegrityAlgorithm" <$>
                    _mvtosPhase1IntegrityAlgorithms),
               "RekeyMarginTimeSeconds" =:
                 _mvtosRekeyMarginTimeSeconds,
               "DPDTimeoutSeconds" =: _mvtosDPDTimeoutSeconds,
               "TunnelInsideCidr" =: _mvtosTunnelInsideCidr,
               "StartupAction" =: _mvtosStartupAction,
               toQuery
                 (toQueryList "Phase2EncryptionAlgorithm" <$>
                    _mvtosPhase2EncryptionAlgorithms),
               toQuery
                 (toQueryList "Phase2DHGroupNumber" <$>
                    _mvtosPhase2DHGroupNumbers),
               "PreSharedKey" =: _mvtosPreSharedKey,
               "TunnelInsideIpv6Cidr" =: _mvtosTunnelInsideIPv6Cidr]

-- | Describes the monitoring of an instance.
--
--
--
-- /See:/ 'monitoring' smart constructor.
newtype Monitoring = Monitoring'
  { _mState :: Maybe MonitoringState
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Monitoring' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'mState' - Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
monitoring
    :: Monitoring
monitoring = Monitoring' {_mState = Nothing}


-- | Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
mState :: Lens' Monitoring (Maybe MonitoringState)
mState = lens _mState (\ s a -> s{_mState = a})

instance FromXML Monitoring where
        parseXML x = Monitoring' <$> (x .@? "state")

instance Hashable Monitoring where

instance NFData Monitoring where

-- | Describes the status of a moving Elastic IP address.
--
--
--
-- /See:/ 'movingAddressStatus' smart constructor.
data MovingAddressStatus = MovingAddressStatus'
  { _masMoveStatus :: !(Maybe MoveStatus)
  , _masPublicIP   :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'MovingAddressStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'masMoveStatus' - The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.
--
-- * 'masPublicIP' - The Elastic IP address.
movingAddressStatus
    :: MovingAddressStatus
movingAddressStatus =
  MovingAddressStatus' {_masMoveStatus = Nothing, _masPublicIP = Nothing}


-- | The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.
masMoveStatus :: Lens' MovingAddressStatus (Maybe MoveStatus)
masMoveStatus = lens _masMoveStatus (\ s a -> s{_masMoveStatus = a})

-- | The Elastic IP address.
masPublicIP :: Lens' MovingAddressStatus (Maybe Text)
masPublicIP = lens _masPublicIP (\ s a -> s{_masPublicIP = a})

instance FromXML MovingAddressStatus where
        parseXML x
          = MovingAddressStatus' <$>
              (x .@? "moveStatus") <*> (x .@? "publicIp")

instance Hashable MovingAddressStatus where

instance NFData MovingAddressStatus where

-- | Describes a NAT gateway.
--
--
--
-- /See:/ 'natGateway' smart constructor.
data NatGateway = NatGateway'
  { _ngState                :: !(Maybe NatGatewayState)
  , _ngFailureCode          :: !(Maybe Text)
  , _ngVPCId                :: !(Maybe Text)
  , _ngFailureMessage       :: !(Maybe Text)
  , _ngNatGatewayId         :: !(Maybe Text)
  , _ngSubnetId             :: !(Maybe Text)
  , _ngDeleteTime           :: !(Maybe ISO8601)
  , _ngProvisionedBandwidth :: !(Maybe ProvisionedBandwidth)
  , _ngNatGatewayAddresses  :: !(Maybe [NatGatewayAddress])
  , _ngCreateTime           :: !(Maybe ISO8601)
  , _ngTags                 :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NatGateway' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ngState' - The state of the NAT gateway.     * @pending@ : The NAT gateway is being created and is not ready to process traffic.     * @failed@ : The NAT gateway could not be created. Check the @failureCode@ and @failureMessage@ fields for the reason.     * @available@ : The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.     * @deleting@ : The NAT gateway is in the process of being terminated and may still be processing traffic.     * @deleted@ : The NAT gateway has been terminated and is no longer processing traffic.
--
-- * 'ngFailureCode' - If the NAT gateway could not be created, specifies the error code for the failure. (@InsufficientFreeAddressesInSubnet@ | @Gateway.NotAttached@ | @InvalidAllocationID.NotFound@ | @Resource.AlreadyAssociated@ | @InternalError@ | @InvalidSubnetID.NotFound@ )
--
-- * 'ngVPCId' - The ID of the VPC in which the NAT gateway is located.
--
-- * 'ngFailureMessage' - If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.     * For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"     * For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"     * For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"     * For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"     * For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."     * For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."
--
-- * 'ngNatGatewayId' - The ID of the NAT gateway.
--
-- * 'ngSubnetId' - The ID of the subnet in which the NAT gateway is located.
--
-- * 'ngDeleteTime' - The date and time the NAT gateway was deleted, if applicable.
--
-- * 'ngProvisionedBandwidth' - Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
--
-- * 'ngNatGatewayAddresses' - Information about the IP addresses and network interface associated with the NAT gateway.
--
-- * 'ngCreateTime' - The date and time the NAT gateway was created.
--
-- * 'ngTags' - The tags for the NAT gateway.
natGateway
    :: NatGateway
natGateway =
  NatGateway'
    { _ngState = Nothing
    , _ngFailureCode = Nothing
    , _ngVPCId = Nothing
    , _ngFailureMessage = Nothing
    , _ngNatGatewayId = Nothing
    , _ngSubnetId = Nothing
    , _ngDeleteTime = Nothing
    , _ngProvisionedBandwidth = Nothing
    , _ngNatGatewayAddresses = Nothing
    , _ngCreateTime = Nothing
    , _ngTags = Nothing
    }


-- | The state of the NAT gateway.     * @pending@ : The NAT gateway is being created and is not ready to process traffic.     * @failed@ : The NAT gateway could not be created. Check the @failureCode@ and @failureMessage@ fields for the reason.     * @available@ : The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.     * @deleting@ : The NAT gateway is in the process of being terminated and may still be processing traffic.     * @deleted@ : The NAT gateway has been terminated and is no longer processing traffic.
ngState :: Lens' NatGateway (Maybe NatGatewayState)
ngState = lens _ngState (\ s a -> s{_ngState = a})

-- | If the NAT gateway could not be created, specifies the error code for the failure. (@InsufficientFreeAddressesInSubnet@ | @Gateway.NotAttached@ | @InvalidAllocationID.NotFound@ | @Resource.AlreadyAssociated@ | @InternalError@ | @InvalidSubnetID.NotFound@ )
ngFailureCode :: Lens' NatGateway (Maybe Text)
ngFailureCode = lens _ngFailureCode (\ s a -> s{_ngFailureCode = a})

-- | The ID of the VPC in which the NAT gateway is located.
ngVPCId :: Lens' NatGateway (Maybe Text)
ngVPCId = lens _ngVPCId (\ s a -> s{_ngVPCId = a})

-- | If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.     * For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"     * For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"     * For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"     * For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"     * For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."     * For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."
ngFailureMessage :: Lens' NatGateway (Maybe Text)
ngFailureMessage = lens _ngFailureMessage (\ s a -> s{_ngFailureMessage = a})

-- | The ID of the NAT gateway.
ngNatGatewayId :: Lens' NatGateway (Maybe Text)
ngNatGatewayId = lens _ngNatGatewayId (\ s a -> s{_ngNatGatewayId = a})

-- | The ID of the subnet in which the NAT gateway is located.
ngSubnetId :: Lens' NatGateway (Maybe Text)
ngSubnetId = lens _ngSubnetId (\ s a -> s{_ngSubnetId = a})

-- | The date and time the NAT gateway was deleted, if applicable.
ngDeleteTime :: Lens' NatGateway (Maybe UTCTime)
ngDeleteTime = lens _ngDeleteTime (\ s a -> s{_ngDeleteTime = a}) . mapping _Time

-- | Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
ngProvisionedBandwidth :: Lens' NatGateway (Maybe ProvisionedBandwidth)
ngProvisionedBandwidth = lens _ngProvisionedBandwidth (\ s a -> s{_ngProvisionedBandwidth = a})

-- | Information about the IP addresses and network interface associated with the NAT gateway.
ngNatGatewayAddresses :: Lens' NatGateway [NatGatewayAddress]
ngNatGatewayAddresses = lens _ngNatGatewayAddresses (\ s a -> s{_ngNatGatewayAddresses = a}) . _Default . _Coerce

-- | The date and time the NAT gateway was created.
ngCreateTime :: Lens' NatGateway (Maybe UTCTime)
ngCreateTime = lens _ngCreateTime (\ s a -> s{_ngCreateTime = a}) . mapping _Time

-- | The tags for the NAT gateway.
ngTags :: Lens' NatGateway [Tag]
ngTags = lens _ngTags (\ s a -> s{_ngTags = a}) . _Default . _Coerce

instance FromXML NatGateway where
        parseXML x
          = NatGateway' <$>
              (x .@? "state") <*> (x .@? "failureCode") <*>
                (x .@? "vpcId")
                <*> (x .@? "failureMessage")
                <*> (x .@? "natGatewayId")
                <*> (x .@? "subnetId")
                <*> (x .@? "deleteTime")
                <*> (x .@? "provisionedBandwidth")
                <*>
                (x .@? "natGatewayAddressSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "createTime")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable NatGateway where

instance NFData NatGateway where

-- | Describes the IP addresses and network interface associated with a NAT gateway.
--
--
--
-- /See:/ 'natGatewayAddress' smart constructor.
data NatGatewayAddress = NatGatewayAddress'
  { _ngaPrivateIP          :: !(Maybe Text)
  , _ngaAllocationId       :: !(Maybe Text)
  , _ngaNetworkInterfaceId :: !(Maybe Text)
  , _ngaPublicIP           :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NatGatewayAddress' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ngaPrivateIP' - The private IP address associated with the Elastic IP address.
--
-- * 'ngaAllocationId' - The allocation ID of the Elastic IP address that's associated with the NAT gateway.
--
-- * 'ngaNetworkInterfaceId' - The ID of the network interface associated with the NAT gateway.
--
-- * 'ngaPublicIP' - The Elastic IP address associated with the NAT gateway.
natGatewayAddress
    :: NatGatewayAddress
natGatewayAddress =
  NatGatewayAddress'
    { _ngaPrivateIP = Nothing
    , _ngaAllocationId = Nothing
    , _ngaNetworkInterfaceId = Nothing
    , _ngaPublicIP = Nothing
    }


-- | The private IP address associated with the Elastic IP address.
ngaPrivateIP :: Lens' NatGatewayAddress (Maybe Text)
ngaPrivateIP = lens _ngaPrivateIP (\ s a -> s{_ngaPrivateIP = a})

-- | The allocation ID of the Elastic IP address that's associated with the NAT gateway.
ngaAllocationId :: Lens' NatGatewayAddress (Maybe Text)
ngaAllocationId = lens _ngaAllocationId (\ s a -> s{_ngaAllocationId = a})

-- | The ID of the network interface associated with the NAT gateway.
ngaNetworkInterfaceId :: Lens' NatGatewayAddress (Maybe Text)
ngaNetworkInterfaceId = lens _ngaNetworkInterfaceId (\ s a -> s{_ngaNetworkInterfaceId = a})

-- | The Elastic IP address associated with the NAT gateway.
ngaPublicIP :: Lens' NatGatewayAddress (Maybe Text)
ngaPublicIP = lens _ngaPublicIP (\ s a -> s{_ngaPublicIP = a})

instance FromXML NatGatewayAddress where
        parseXML x
          = NatGatewayAddress' <$>
              (x .@? "privateIp") <*> (x .@? "allocationId") <*>
                (x .@? "networkInterfaceId")
                <*> (x .@? "publicIp")

instance Hashable NatGatewayAddress where

instance NFData NatGatewayAddress where

-- | Describes a network ACL.
--
--
--
-- /See:/ 'networkACL' smart constructor.
data NetworkACL = NetworkACL'
  { _naEntries      :: !(Maybe [NetworkACLEntry])
  , _naNetworkACLId :: !(Maybe Text)
  , _naVPCId        :: !(Maybe Text)
  , _naOwnerId      :: !(Maybe Text)
  , _naAssociations :: !(Maybe [NetworkACLAssociation])
  , _naTags         :: !(Maybe [Tag])
  , _naIsDefault    :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkACL' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'naEntries' - One or more entries (rules) in the network ACL.
--
-- * 'naNetworkACLId' - The ID of the network ACL.
--
-- * 'naVPCId' - The ID of the VPC for the network ACL.
--
-- * 'naOwnerId' - The ID of the AWS account that owns the network ACL.
--
-- * 'naAssociations' - Any associations between the network ACL and one or more subnets
--
-- * 'naTags' - Any tags assigned to the network ACL.
--
-- * 'naIsDefault' - Indicates whether this is the default network ACL for the VPC.
networkACL
    :: NetworkACL
networkACL =
  NetworkACL'
    { _naEntries = Nothing
    , _naNetworkACLId = Nothing
    , _naVPCId = Nothing
    , _naOwnerId = Nothing
    , _naAssociations = Nothing
    , _naTags = Nothing
    , _naIsDefault = Nothing
    }


-- | One or more entries (rules) in the network ACL.
naEntries :: Lens' NetworkACL [NetworkACLEntry]
naEntries = lens _naEntries (\ s a -> s{_naEntries = a}) . _Default . _Coerce

-- | The ID of the network ACL.
naNetworkACLId :: Lens' NetworkACL (Maybe Text)
naNetworkACLId = lens _naNetworkACLId (\ s a -> s{_naNetworkACLId = a})

-- | The ID of the VPC for the network ACL.
naVPCId :: Lens' NetworkACL (Maybe Text)
naVPCId = lens _naVPCId (\ s a -> s{_naVPCId = a})

-- | The ID of the AWS account that owns the network ACL.
naOwnerId :: Lens' NetworkACL (Maybe Text)
naOwnerId = lens _naOwnerId (\ s a -> s{_naOwnerId = a})

-- | Any associations between the network ACL and one or more subnets
naAssociations :: Lens' NetworkACL [NetworkACLAssociation]
naAssociations = lens _naAssociations (\ s a -> s{_naAssociations = a}) . _Default . _Coerce

-- | Any tags assigned to the network ACL.
naTags :: Lens' NetworkACL [Tag]
naTags = lens _naTags (\ s a -> s{_naTags = a}) . _Default . _Coerce

-- | Indicates whether this is the default network ACL for the VPC.
naIsDefault :: Lens' NetworkACL (Maybe Bool)
naIsDefault = lens _naIsDefault (\ s a -> s{_naIsDefault = a})

instance FromXML NetworkACL where
        parseXML x
          = NetworkACL' <$>
              (x .@? "entrySet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "networkAclId")
                <*> (x .@? "vpcId")
                <*> (x .@? "ownerId")
                <*>
                (x .@? "associationSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "default")

instance Hashable NetworkACL where

instance NFData NetworkACL where

-- | Describes an association between a network ACL and a subnet.
--
--
--
-- /See:/ 'networkACLAssociation' smart constructor.
data NetworkACLAssociation = NetworkACLAssociation'
  { _naaNetworkACLId            :: !(Maybe Text)
  , _naaSubnetId                :: !(Maybe Text)
  , _naaNetworkACLAssociationId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkACLAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'naaNetworkACLId' - The ID of the network ACL.
--
-- * 'naaSubnetId' - The ID of the subnet.
--
-- * 'naaNetworkACLAssociationId' - The ID of the association between a network ACL and a subnet.
networkACLAssociation
    :: NetworkACLAssociation
networkACLAssociation =
  NetworkACLAssociation'
    { _naaNetworkACLId = Nothing
    , _naaSubnetId = Nothing
    , _naaNetworkACLAssociationId = Nothing
    }


-- | The ID of the network ACL.
naaNetworkACLId :: Lens' NetworkACLAssociation (Maybe Text)
naaNetworkACLId = lens _naaNetworkACLId (\ s a -> s{_naaNetworkACLId = a})

-- | The ID of the subnet.
naaSubnetId :: Lens' NetworkACLAssociation (Maybe Text)
naaSubnetId = lens _naaSubnetId (\ s a -> s{_naaSubnetId = a})

-- | The ID of the association between a network ACL and a subnet.
naaNetworkACLAssociationId :: Lens' NetworkACLAssociation (Maybe Text)
naaNetworkACLAssociationId = lens _naaNetworkACLAssociationId (\ s a -> s{_naaNetworkACLAssociationId = a})

instance FromXML NetworkACLAssociation where
        parseXML x
          = NetworkACLAssociation' <$>
              (x .@? "networkAclId") <*> (x .@? "subnetId") <*>
                (x .@? "networkAclAssociationId")

instance Hashable NetworkACLAssociation where

instance NFData NetworkACLAssociation where

-- | Describes an entry in a network ACL.
--
--
--
-- /See:/ 'networkACLEntry' smart constructor.
data NetworkACLEntry = NetworkACLEntry'
  { _naeIPv6CidrBlock :: !(Maybe Text)
  , _naeICMPTypeCode  :: !(Maybe ICMPTypeCode)
  , _naeRuleNumber    :: !(Maybe Int)
  , _naeRuleAction    :: !(Maybe RuleAction)
  , _naeProtocol      :: !(Maybe Text)
  , _naePortRange     :: !(Maybe PortRange)
  , _naeCidrBlock     :: !(Maybe Text)
  , _naeEgress        :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkACLEntry' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'naeIPv6CidrBlock' - The IPv6 network range to allow or deny, in CIDR notation.
--
-- * 'naeICMPTypeCode' - ICMP protocol: The ICMP type and code.
--
-- * 'naeRuleNumber' - The rule number for the entry. ACL entries are processed in ascending order by rule number.
--
-- * 'naeRuleAction' - Indicates whether to allow or deny the traffic that matches the rule.
--
-- * 'naeProtocol' - The protocol number. A value of "-1" means all protocols.
--
-- * 'naePortRange' - TCP or UDP protocols: The range of ports the rule applies to.
--
-- * 'naeCidrBlock' - The IPv4 network range to allow or deny, in CIDR notation.
--
-- * 'naeEgress' - Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).
networkACLEntry
    :: NetworkACLEntry
networkACLEntry =
  NetworkACLEntry'
    { _naeIPv6CidrBlock = Nothing
    , _naeICMPTypeCode = Nothing
    , _naeRuleNumber = Nothing
    , _naeRuleAction = Nothing
    , _naeProtocol = Nothing
    , _naePortRange = Nothing
    , _naeCidrBlock = Nothing
    , _naeEgress = Nothing
    }


-- | The IPv6 network range to allow or deny, in CIDR notation.
naeIPv6CidrBlock :: Lens' NetworkACLEntry (Maybe Text)
naeIPv6CidrBlock = lens _naeIPv6CidrBlock (\ s a -> s{_naeIPv6CidrBlock = a})

-- | ICMP protocol: The ICMP type and code.
naeICMPTypeCode :: Lens' NetworkACLEntry (Maybe ICMPTypeCode)
naeICMPTypeCode = lens _naeICMPTypeCode (\ s a -> s{_naeICMPTypeCode = a})

-- | The rule number for the entry. ACL entries are processed in ascending order by rule number.
naeRuleNumber :: Lens' NetworkACLEntry (Maybe Int)
naeRuleNumber = lens _naeRuleNumber (\ s a -> s{_naeRuleNumber = a})

-- | Indicates whether to allow or deny the traffic that matches the rule.
naeRuleAction :: Lens' NetworkACLEntry (Maybe RuleAction)
naeRuleAction = lens _naeRuleAction (\ s a -> s{_naeRuleAction = a})

-- | The protocol number. A value of "-1" means all protocols.
naeProtocol :: Lens' NetworkACLEntry (Maybe Text)
naeProtocol = lens _naeProtocol (\ s a -> s{_naeProtocol = a})

-- | TCP or UDP protocols: The range of ports the rule applies to.
naePortRange :: Lens' NetworkACLEntry (Maybe PortRange)
naePortRange = lens _naePortRange (\ s a -> s{_naePortRange = a})

-- | The IPv4 network range to allow or deny, in CIDR notation.
naeCidrBlock :: Lens' NetworkACLEntry (Maybe Text)
naeCidrBlock = lens _naeCidrBlock (\ s a -> s{_naeCidrBlock = a})

-- | Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).
naeEgress :: Lens' NetworkACLEntry (Maybe Bool)
naeEgress = lens _naeEgress (\ s a -> s{_naeEgress = a})

instance FromXML NetworkACLEntry where
        parseXML x
          = NetworkACLEntry' <$>
              (x .@? "ipv6CidrBlock") <*> (x .@? "icmpTypeCode")
                <*> (x .@? "ruleNumber")
                <*> (x .@? "ruleAction")
                <*> (x .@? "protocol")
                <*> (x .@? "portRange")
                <*> (x .@? "cidrBlock")
                <*> (x .@? "egress")

instance Hashable NetworkACLEntry where

instance NFData NetworkACLEntry where

-- | Describes the network card support of the instance type.
--
--
--
-- /See:/ 'networkCardInfo' smart constructor.
data NetworkCardInfo = NetworkCardInfo'
  { _nciMaximumNetworkInterfaces :: !(Maybe Int)
  , _nciNetworkPerformance       :: !(Maybe Text)
  , _nciNetworkCardIndex         :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkCardInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'nciMaximumNetworkInterfaces' - The maximum number of network interfaces for the network card.
--
-- * 'nciNetworkPerformance' - The network performance of the network card.
--
-- * 'nciNetworkCardIndex' - The index of the network card.
networkCardInfo
    :: NetworkCardInfo
networkCardInfo =
  NetworkCardInfo'
    { _nciMaximumNetworkInterfaces = Nothing
    , _nciNetworkPerformance = Nothing
    , _nciNetworkCardIndex = Nothing
    }


-- | The maximum number of network interfaces for the network card.
nciMaximumNetworkInterfaces :: Lens' NetworkCardInfo (Maybe Int)
nciMaximumNetworkInterfaces = lens _nciMaximumNetworkInterfaces (\ s a -> s{_nciMaximumNetworkInterfaces = a})

-- | The network performance of the network card.
nciNetworkPerformance :: Lens' NetworkCardInfo (Maybe Text)
nciNetworkPerformance = lens _nciNetworkPerformance (\ s a -> s{_nciNetworkPerformance = a})

-- | The index of the network card.
nciNetworkCardIndex :: Lens' NetworkCardInfo (Maybe Int)
nciNetworkCardIndex = lens _nciNetworkCardIndex (\ s a -> s{_nciNetworkCardIndex = a})

instance FromXML NetworkCardInfo where
        parseXML x
          = NetworkCardInfo' <$>
              (x .@? "maximumNetworkInterfaces") <*>
                (x .@? "networkPerformance")
                <*> (x .@? "networkCardIndex")

instance Hashable NetworkCardInfo where

instance NFData NetworkCardInfo where

-- | Describes the networking features of the instance type.
--
--
--
-- /See:/ 'networkInfo' smart constructor.
data NetworkInfo = NetworkInfo'
  { _niEfaSupported              :: !(Maybe Bool)
  , _niIPv6Supported             :: !(Maybe Bool)
  , _niEnaSupport                :: !(Maybe EnaSupport)
  , _niMaximumNetworkInterfaces  :: !(Maybe Int)
  , _niIPv6AddressesPerInterface :: !(Maybe Int)
  , _niNetworkPerformance        :: !(Maybe Text)
  , _niMaximumNetworkCards       :: !(Maybe Int)
  , _niNetworkCards              :: !(Maybe [NetworkCardInfo])
  , _niDefaultNetworkCardIndex   :: !(Maybe Int)
  , _niIPv4AddressesPerInterface :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'niEfaSupported' - Indicates whether Elastic Fabric Adapter (EFA) is supported.
--
-- * 'niIPv6Supported' - Indicates whether IPv6 is supported.
--
-- * 'niEnaSupport' - Indicates whether Elastic Network Adapter (ENA) is supported.
--
-- * 'niMaximumNetworkInterfaces' - The maximum number of network interfaces for the instance type.
--
-- * 'niIPv6AddressesPerInterface' - The maximum number of IPv6 addresses per network interface.
--
-- * 'niNetworkPerformance' - The network performance.
--
-- * 'niMaximumNetworkCards' - The maximum number of physical network cards that can be allocated to the instance.
--
-- * 'niNetworkCards' - Describes the network cards for the instance type.
--
-- * 'niDefaultNetworkCardIndex' - The index of the default network card, starting at 0.
--
-- * 'niIPv4AddressesPerInterface' - The maximum number of IPv4 addresses per network interface.
networkInfo
    :: NetworkInfo
networkInfo =
  NetworkInfo'
    { _niEfaSupported = Nothing
    , _niIPv6Supported = Nothing
    , _niEnaSupport = Nothing
    , _niMaximumNetworkInterfaces = Nothing
    , _niIPv6AddressesPerInterface = Nothing
    , _niNetworkPerformance = Nothing
    , _niMaximumNetworkCards = Nothing
    , _niNetworkCards = Nothing
    , _niDefaultNetworkCardIndex = Nothing
    , _niIPv4AddressesPerInterface = Nothing
    }


-- | Indicates whether Elastic Fabric Adapter (EFA) is supported.
niEfaSupported :: Lens' NetworkInfo (Maybe Bool)
niEfaSupported = lens _niEfaSupported (\ s a -> s{_niEfaSupported = a})

-- | Indicates whether IPv6 is supported.
niIPv6Supported :: Lens' NetworkInfo (Maybe Bool)
niIPv6Supported = lens _niIPv6Supported (\ s a -> s{_niIPv6Supported = a})

-- | Indicates whether Elastic Network Adapter (ENA) is supported.
niEnaSupport :: Lens' NetworkInfo (Maybe EnaSupport)
niEnaSupport = lens _niEnaSupport (\ s a -> s{_niEnaSupport = a})

-- | The maximum number of network interfaces for the instance type.
niMaximumNetworkInterfaces :: Lens' NetworkInfo (Maybe Int)
niMaximumNetworkInterfaces = lens _niMaximumNetworkInterfaces (\ s a -> s{_niMaximumNetworkInterfaces = a})

-- | The maximum number of IPv6 addresses per network interface.
niIPv6AddressesPerInterface :: Lens' NetworkInfo (Maybe Int)
niIPv6AddressesPerInterface = lens _niIPv6AddressesPerInterface (\ s a -> s{_niIPv6AddressesPerInterface = a})

-- | The network performance.
niNetworkPerformance :: Lens' NetworkInfo (Maybe Text)
niNetworkPerformance = lens _niNetworkPerformance (\ s a -> s{_niNetworkPerformance = a})

-- | The maximum number of physical network cards that can be allocated to the instance.
niMaximumNetworkCards :: Lens' NetworkInfo (Maybe Int)
niMaximumNetworkCards = lens _niMaximumNetworkCards (\ s a -> s{_niMaximumNetworkCards = a})

-- | Describes the network cards for the instance type.
niNetworkCards :: Lens' NetworkInfo [NetworkCardInfo]
niNetworkCards = lens _niNetworkCards (\ s a -> s{_niNetworkCards = a}) . _Default . _Coerce

-- | The index of the default network card, starting at 0.
niDefaultNetworkCardIndex :: Lens' NetworkInfo (Maybe Int)
niDefaultNetworkCardIndex = lens _niDefaultNetworkCardIndex (\ s a -> s{_niDefaultNetworkCardIndex = a})

-- | The maximum number of IPv4 addresses per network interface.
niIPv4AddressesPerInterface :: Lens' NetworkInfo (Maybe Int)
niIPv4AddressesPerInterface = lens _niIPv4AddressesPerInterface (\ s a -> s{_niIPv4AddressesPerInterface = a})

instance FromXML NetworkInfo where
        parseXML x
          = NetworkInfo' <$>
              (x .@? "efaSupported") <*> (x .@? "ipv6Supported")
                <*> (x .@? "enaSupport")
                <*> (x .@? "maximumNetworkInterfaces")
                <*> (x .@? "ipv6AddressesPerInterface")
                <*> (x .@? "networkPerformance")
                <*> (x .@? "maximumNetworkCards")
                <*>
                (x .@? "networkCards" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "defaultNetworkCardIndex")
                <*> (x .@? "ipv4AddressesPerInterface")

instance Hashable NetworkInfo where

instance NFData NetworkInfo where

-- | Describes a network insights analysis.
--
--
--
-- /See:/ 'networkInsightsAnalysis' smart constructor.
data NetworkInsightsAnalysis = NetworkInsightsAnalysis'
  { _nStatus                     :: !(Maybe AnalysisStatus)
  , _nForwardPathComponents      :: !(Maybe [PathComponent])
  , _nAlternatePathHints         :: !(Maybe [AlternatePathHint])
  , _nExplanations               :: !(Maybe [Explanation])
  , _nReturnPathComponents       :: !(Maybe [PathComponent])
  , _nNetworkInsightsPathId      :: !(Maybe Text)
  , _nFilterInARNs               :: !(Maybe [Text])
  , _nNetworkInsightsAnalysisId  :: !(Maybe Text)
  , _nStartDate                  :: !(Maybe ISO8601)
  , _nNetworkInsightsAnalysisARN :: !(Maybe Text)
  , _nStatusMessage              :: !(Maybe Text)
  , _nNetworkPathFound           :: !(Maybe Bool)
  , _nTags                       :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInsightsAnalysis' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'nStatus' - The status of the network insights analysis.
--
-- * 'nForwardPathComponents' - The components in the path from source to destination.
--
-- * 'nAlternatePathHints' - Potential intermediate components.
--
-- * 'nExplanations' - The explanations. For more information, see <https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html Reachability Analyzer explanation codes> .
--
-- * 'nReturnPathComponents' - The components in the path from destination to source.
--
-- * 'nNetworkInsightsPathId' - The ID of the path.
--
-- * 'nFilterInARNs' - The Amazon Resource Names (ARN) of the AWS resources that the path must traverse.
--
-- * 'nNetworkInsightsAnalysisId' - The ID of the network insights analysis.
--
-- * 'nStartDate' - The time the analysis started.
--
-- * 'nNetworkInsightsAnalysisARN' - The Amazon Resource Name (ARN) of the network insights analysis.
--
-- * 'nStatusMessage' - The status message, if the status is @failed@ .
--
-- * 'nNetworkPathFound' - Indicates whether the destination is reachable from the source.
--
-- * 'nTags' - The tags.
networkInsightsAnalysis
    :: NetworkInsightsAnalysis
networkInsightsAnalysis =
  NetworkInsightsAnalysis'
    { _nStatus = Nothing
    , _nForwardPathComponents = Nothing
    , _nAlternatePathHints = Nothing
    , _nExplanations = Nothing
    , _nReturnPathComponents = Nothing
    , _nNetworkInsightsPathId = Nothing
    , _nFilterInARNs = Nothing
    , _nNetworkInsightsAnalysisId = Nothing
    , _nStartDate = Nothing
    , _nNetworkInsightsAnalysisARN = Nothing
    , _nStatusMessage = Nothing
    , _nNetworkPathFound = Nothing
    , _nTags = Nothing
    }


-- | The status of the network insights analysis.
nStatus :: Lens' NetworkInsightsAnalysis (Maybe AnalysisStatus)
nStatus = lens _nStatus (\ s a -> s{_nStatus = a})

-- | The components in the path from source to destination.
nForwardPathComponents :: Lens' NetworkInsightsAnalysis [PathComponent]
nForwardPathComponents = lens _nForwardPathComponents (\ s a -> s{_nForwardPathComponents = a}) . _Default . _Coerce

-- | Potential intermediate components.
nAlternatePathHints :: Lens' NetworkInsightsAnalysis [AlternatePathHint]
nAlternatePathHints = lens _nAlternatePathHints (\ s a -> s{_nAlternatePathHints = a}) . _Default . _Coerce

-- | The explanations. For more information, see <https://docs.aws.amazon.com/vpc/latest/reachability/explanation-codes.html Reachability Analyzer explanation codes> .
nExplanations :: Lens' NetworkInsightsAnalysis [Explanation]
nExplanations = lens _nExplanations (\ s a -> s{_nExplanations = a}) . _Default . _Coerce

-- | The components in the path from destination to source.
nReturnPathComponents :: Lens' NetworkInsightsAnalysis [PathComponent]
nReturnPathComponents = lens _nReturnPathComponents (\ s a -> s{_nReturnPathComponents = a}) . _Default . _Coerce

-- | The ID of the path.
nNetworkInsightsPathId :: Lens' NetworkInsightsAnalysis (Maybe Text)
nNetworkInsightsPathId = lens _nNetworkInsightsPathId (\ s a -> s{_nNetworkInsightsPathId = a})

-- | The Amazon Resource Names (ARN) of the AWS resources that the path must traverse.
nFilterInARNs :: Lens' NetworkInsightsAnalysis [Text]
nFilterInARNs = lens _nFilterInARNs (\ s a -> s{_nFilterInARNs = a}) . _Default . _Coerce

-- | The ID of the network insights analysis.
nNetworkInsightsAnalysisId :: Lens' NetworkInsightsAnalysis (Maybe Text)
nNetworkInsightsAnalysisId = lens _nNetworkInsightsAnalysisId (\ s a -> s{_nNetworkInsightsAnalysisId = a})

-- | The time the analysis started.
nStartDate :: Lens' NetworkInsightsAnalysis (Maybe UTCTime)
nStartDate = lens _nStartDate (\ s a -> s{_nStartDate = a}) . mapping _Time

-- | The Amazon Resource Name (ARN) of the network insights analysis.
nNetworkInsightsAnalysisARN :: Lens' NetworkInsightsAnalysis (Maybe Text)
nNetworkInsightsAnalysisARN = lens _nNetworkInsightsAnalysisARN (\ s a -> s{_nNetworkInsightsAnalysisARN = a})

-- | The status message, if the status is @failed@ .
nStatusMessage :: Lens' NetworkInsightsAnalysis (Maybe Text)
nStatusMessage = lens _nStatusMessage (\ s a -> s{_nStatusMessage = a})

-- | Indicates whether the destination is reachable from the source.
nNetworkPathFound :: Lens' NetworkInsightsAnalysis (Maybe Bool)
nNetworkPathFound = lens _nNetworkPathFound (\ s a -> s{_nNetworkPathFound = a})

-- | The tags.
nTags :: Lens' NetworkInsightsAnalysis [Tag]
nTags = lens _nTags (\ s a -> s{_nTags = a}) . _Default . _Coerce

instance FromXML NetworkInsightsAnalysis where
        parseXML x
          = NetworkInsightsAnalysis' <$>
              (x .@? "status") <*>
                (x .@? "forwardPathComponentSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "alternatePathHintSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "explanationSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "returnPathComponentSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "networkInsightsPathId")
                <*>
                (x .@? "filterInArnSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "networkInsightsAnalysisId")
                <*> (x .@? "startDate")
                <*> (x .@? "networkInsightsAnalysisArn")
                <*> (x .@? "statusMessage")
                <*> (x .@? "networkPathFound")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable NetworkInsightsAnalysis where

instance NFData NetworkInsightsAnalysis where

-- | Describes a path.
--
--
--
-- /See:/ 'networkInsightsPath' smart constructor.
data NetworkInsightsPath = NetworkInsightsPath'
  { _nipDestination            :: !(Maybe Text)
  , _nipDestinationIP          :: !(Maybe Text)
  , _nipNetworkInsightsPathId  :: !(Maybe Text)
  , _nipProtocol               :: !(Maybe Protocol)
  , _nipCreatedDate            :: !(Maybe ISO8601)
  , _nipSourceIP               :: !(Maybe Text)
  , _nipSource                 :: !(Maybe Text)
  , _nipDestinationPort        :: !(Maybe Int)
  , _nipNetworkInsightsPathARN :: !(Maybe Text)
  , _nipTags                   :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInsightsPath' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'nipDestination' - The AWS resource that is the destination of the path.
--
-- * 'nipDestinationIP' - The IP address of the AWS resource that is the destination of the path.
--
-- * 'nipNetworkInsightsPathId' - The ID of the path.
--
-- * 'nipProtocol' - The protocol.
--
-- * 'nipCreatedDate' - The time stamp when the path was created.
--
-- * 'nipSourceIP' - The IP address of the AWS resource that is the source of the path.
--
-- * 'nipSource' - The AWS resource that is the source of the path.
--
-- * 'nipDestinationPort' - The destination port.
--
-- * 'nipNetworkInsightsPathARN' - The Amazon Resource Name (ARN) of the path.
--
-- * 'nipTags' - The tags associated with the path.
networkInsightsPath
    :: NetworkInsightsPath
networkInsightsPath =
  NetworkInsightsPath'
    { _nipDestination = Nothing
    , _nipDestinationIP = Nothing
    , _nipNetworkInsightsPathId = Nothing
    , _nipProtocol = Nothing
    , _nipCreatedDate = Nothing
    , _nipSourceIP = Nothing
    , _nipSource = Nothing
    , _nipDestinationPort = Nothing
    , _nipNetworkInsightsPathARN = Nothing
    , _nipTags = Nothing
    }


-- | The AWS resource that is the destination of the path.
nipDestination :: Lens' NetworkInsightsPath (Maybe Text)
nipDestination = lens _nipDestination (\ s a -> s{_nipDestination = a})

-- | The IP address of the AWS resource that is the destination of the path.
nipDestinationIP :: Lens' NetworkInsightsPath (Maybe Text)
nipDestinationIP = lens _nipDestinationIP (\ s a -> s{_nipDestinationIP = a})

-- | The ID of the path.
nipNetworkInsightsPathId :: Lens' NetworkInsightsPath (Maybe Text)
nipNetworkInsightsPathId = lens _nipNetworkInsightsPathId (\ s a -> s{_nipNetworkInsightsPathId = a})

-- | The protocol.
nipProtocol :: Lens' NetworkInsightsPath (Maybe Protocol)
nipProtocol = lens _nipProtocol (\ s a -> s{_nipProtocol = a})

-- | The time stamp when the path was created.
nipCreatedDate :: Lens' NetworkInsightsPath (Maybe UTCTime)
nipCreatedDate = lens _nipCreatedDate (\ s a -> s{_nipCreatedDate = a}) . mapping _Time

-- | The IP address of the AWS resource that is the source of the path.
nipSourceIP :: Lens' NetworkInsightsPath (Maybe Text)
nipSourceIP = lens _nipSourceIP (\ s a -> s{_nipSourceIP = a})

-- | The AWS resource that is the source of the path.
nipSource :: Lens' NetworkInsightsPath (Maybe Text)
nipSource = lens _nipSource (\ s a -> s{_nipSource = a})

-- | The destination port.
nipDestinationPort :: Lens' NetworkInsightsPath (Maybe Int)
nipDestinationPort = lens _nipDestinationPort (\ s a -> s{_nipDestinationPort = a})

-- | The Amazon Resource Name (ARN) of the path.
nipNetworkInsightsPathARN :: Lens' NetworkInsightsPath (Maybe Text)
nipNetworkInsightsPathARN = lens _nipNetworkInsightsPathARN (\ s a -> s{_nipNetworkInsightsPathARN = a})

-- | The tags associated with the path.
nipTags :: Lens' NetworkInsightsPath [Tag]
nipTags = lens _nipTags (\ s a -> s{_nipTags = a}) . _Default . _Coerce

instance FromXML NetworkInsightsPath where
        parseXML x
          = NetworkInsightsPath' <$>
              (x .@? "destination") <*> (x .@? "destinationIp") <*>
                (x .@? "networkInsightsPathId")
                <*> (x .@? "protocol")
                <*> (x .@? "createdDate")
                <*> (x .@? "sourceIp")
                <*> (x .@? "source")
                <*> (x .@? "destinationPort")
                <*> (x .@? "networkInsightsPathArn")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable NetworkInsightsPath where

instance NFData NetworkInsightsPath where

-- | Describes a network interface.
--
--
--
-- /See:/ 'networkInterface' smart constructor.
data NetworkInterface = NetworkInterface'
  { _niGroups             :: !(Maybe [GroupIdentifier])
  , _niStatus             :: !(Maybe NetworkInterfaceStatus)
  , _niPrivateIPAddresses :: !(Maybe [NetworkInterfacePrivateIPAddress])
  , _niSourceDestCheck    :: !(Maybe Bool)
  , _niInterfaceType      :: !(Maybe NetworkInterfaceType)
  , _niVPCId              :: !(Maybe Text)
  , _niTagSet             :: !(Maybe [Tag])
  , _niRequesterManaged   :: !(Maybe Bool)
  , _niOutpostARN         :: !(Maybe Text)
  , _niNetworkInterfaceId :: !(Maybe Text)
  , _niSubnetId           :: !(Maybe Text)
  , _niMACAddress         :: !(Maybe Text)
  , _niAttachment         :: !(Maybe NetworkInterfaceAttachment)
  , _niOwnerId            :: !(Maybe Text)
  , _niAvailabilityZone   :: !(Maybe Text)
  , _niPrivateIPAddress   :: !(Maybe Text)
  , _niPrivateDNSName     :: !(Maybe Text)
  , _niRequesterId        :: !(Maybe Text)
  , _niDescription        :: !(Maybe Text)
  , _niAssociation        :: !(Maybe NetworkInterfaceAssociation)
  , _niIPv6Addresses      :: !(Maybe [NetworkInterfaceIPv6Address])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInterface' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'niGroups' - Any security groups for the network interface.
--
-- * 'niStatus' - The status of the network interface.
--
-- * 'niPrivateIPAddresses' - The private IPv4 addresses associated with the network interface.
--
-- * 'niSourceDestCheck' - Indicates whether traffic to or from the instance is validated.
--
-- * 'niInterfaceType' - The type of network interface.
--
-- * 'niVPCId' - The ID of the VPC.
--
-- * 'niTagSet' - Any tags assigned to the network interface.
--
-- * 'niRequesterManaged' - Indicates whether the network interface is being managed by AWS.
--
-- * 'niOutpostARN' - The Amazon Resource Name (ARN) of the Outpost.
--
-- * 'niNetworkInterfaceId' - The ID of the network interface.
--
-- * 'niSubnetId' - The ID of the subnet.
--
-- * 'niMACAddress' - The MAC address.
--
-- * 'niAttachment' - The network interface attachment.
--
-- * 'niOwnerId' - The AWS account ID of the owner of the network interface.
--
-- * 'niAvailabilityZone' - The Availability Zone.
--
-- * 'niPrivateIPAddress' - The IPv4 address of the network interface within the subnet.
--
-- * 'niPrivateDNSName' - The private DNS name.
--
-- * 'niRequesterId' - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).
--
-- * 'niDescription' - A description.
--
-- * 'niAssociation' - The association information for an Elastic IP address (IPv4) associated with the network interface.
--
-- * 'niIPv6Addresses' - The IPv6 addresses associated with the network interface.
networkInterface
    :: NetworkInterface
networkInterface =
  NetworkInterface'
    { _niGroups = Nothing
    , _niStatus = Nothing
    , _niPrivateIPAddresses = Nothing
    , _niSourceDestCheck = Nothing
    , _niInterfaceType = Nothing
    , _niVPCId = Nothing
    , _niTagSet = Nothing
    , _niRequesterManaged = Nothing
    , _niOutpostARN = Nothing
    , _niNetworkInterfaceId = Nothing
    , _niSubnetId = Nothing
    , _niMACAddress = Nothing
    , _niAttachment = Nothing
    , _niOwnerId = Nothing
    , _niAvailabilityZone = Nothing
    , _niPrivateIPAddress = Nothing
    , _niPrivateDNSName = Nothing
    , _niRequesterId = Nothing
    , _niDescription = Nothing
    , _niAssociation = Nothing
    , _niIPv6Addresses = Nothing
    }


-- | Any security groups for the network interface.
niGroups :: Lens' NetworkInterface [GroupIdentifier]
niGroups = lens _niGroups (\ s a -> s{_niGroups = a}) . _Default . _Coerce

-- | The status of the network interface.
niStatus :: Lens' NetworkInterface (Maybe NetworkInterfaceStatus)
niStatus = lens _niStatus (\ s a -> s{_niStatus = a})

-- | The private IPv4 addresses associated with the network interface.
niPrivateIPAddresses :: Lens' NetworkInterface [NetworkInterfacePrivateIPAddress]
niPrivateIPAddresses = lens _niPrivateIPAddresses (\ s a -> s{_niPrivateIPAddresses = a}) . _Default . _Coerce

-- | Indicates whether traffic to or from the instance is validated.
niSourceDestCheck :: Lens' NetworkInterface (Maybe Bool)
niSourceDestCheck = lens _niSourceDestCheck (\ s a -> s{_niSourceDestCheck = a})

-- | The type of network interface.
niInterfaceType :: Lens' NetworkInterface (Maybe NetworkInterfaceType)
niInterfaceType = lens _niInterfaceType (\ s a -> s{_niInterfaceType = a})

-- | The ID of the VPC.
niVPCId :: Lens' NetworkInterface (Maybe Text)
niVPCId = lens _niVPCId (\ s a -> s{_niVPCId = a})

-- | Any tags assigned to the network interface.
niTagSet :: Lens' NetworkInterface [Tag]
niTagSet = lens _niTagSet (\ s a -> s{_niTagSet = a}) . _Default . _Coerce

-- | Indicates whether the network interface is being managed by AWS.
niRequesterManaged :: Lens' NetworkInterface (Maybe Bool)
niRequesterManaged = lens _niRequesterManaged (\ s a -> s{_niRequesterManaged = a})

-- | The Amazon Resource Name (ARN) of the Outpost.
niOutpostARN :: Lens' NetworkInterface (Maybe Text)
niOutpostARN = lens _niOutpostARN (\ s a -> s{_niOutpostARN = a})

-- | The ID of the network interface.
niNetworkInterfaceId :: Lens' NetworkInterface (Maybe Text)
niNetworkInterfaceId = lens _niNetworkInterfaceId (\ s a -> s{_niNetworkInterfaceId = a})

-- | The ID of the subnet.
niSubnetId :: Lens' NetworkInterface (Maybe Text)
niSubnetId = lens _niSubnetId (\ s a -> s{_niSubnetId = a})

-- | The MAC address.
niMACAddress :: Lens' NetworkInterface (Maybe Text)
niMACAddress = lens _niMACAddress (\ s a -> s{_niMACAddress = a})

-- | The network interface attachment.
niAttachment :: Lens' NetworkInterface (Maybe NetworkInterfaceAttachment)
niAttachment = lens _niAttachment (\ s a -> s{_niAttachment = a})

-- | The AWS account ID of the owner of the network interface.
niOwnerId :: Lens' NetworkInterface (Maybe Text)
niOwnerId = lens _niOwnerId (\ s a -> s{_niOwnerId = a})

-- | The Availability Zone.
niAvailabilityZone :: Lens' NetworkInterface (Maybe Text)
niAvailabilityZone = lens _niAvailabilityZone (\ s a -> s{_niAvailabilityZone = a})

-- | The IPv4 address of the network interface within the subnet.
niPrivateIPAddress :: Lens' NetworkInterface (Maybe Text)
niPrivateIPAddress = lens _niPrivateIPAddress (\ s a -> s{_niPrivateIPAddress = a})

-- | The private DNS name.
niPrivateDNSName :: Lens' NetworkInterface (Maybe Text)
niPrivateDNSName = lens _niPrivateDNSName (\ s a -> s{_niPrivateDNSName = a})

-- | The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).
niRequesterId :: Lens' NetworkInterface (Maybe Text)
niRequesterId = lens _niRequesterId (\ s a -> s{_niRequesterId = a})

-- | A description.
niDescription :: Lens' NetworkInterface (Maybe Text)
niDescription = lens _niDescription (\ s a -> s{_niDescription = a})

-- | The association information for an Elastic IP address (IPv4) associated with the network interface.
niAssociation :: Lens' NetworkInterface (Maybe NetworkInterfaceAssociation)
niAssociation = lens _niAssociation (\ s a -> s{_niAssociation = a})

-- | The IPv6 addresses associated with the network interface.
niIPv6Addresses :: Lens' NetworkInterface [NetworkInterfaceIPv6Address]
niIPv6Addresses = lens _niIPv6Addresses (\ s a -> s{_niIPv6Addresses = a}) . _Default . _Coerce

instance FromXML NetworkInterface where
        parseXML x
          = NetworkInterface' <$>
              (x .@? "groupSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "status")
                <*>
                (x .@? "privateIpAddressesSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "sourceDestCheck")
                <*> (x .@? "interfaceType")
                <*> (x .@? "vpcId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "requesterManaged")
                <*> (x .@? "outpostArn")
                <*> (x .@? "networkInterfaceId")
                <*> (x .@? "subnetId")
                <*> (x .@? "macAddress")
                <*> (x .@? "attachment")
                <*> (x .@? "ownerId")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "privateIpAddress")
                <*> (x .@? "privateDnsName")
                <*> (x .@? "requesterId")
                <*> (x .@? "description")
                <*> (x .@? "association")
                <*>
                (x .@? "ipv6AddressesSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable NetworkInterface where

instance NFData NetworkInterface where

-- | Describes association information for an Elastic IP address (IPv4 only), or a Carrier IP address (for a network interface which resides in a subnet in a Wavelength Zone).
--
--
--
-- /See:/ 'networkInterfaceAssociation' smart constructor.
data NetworkInterfaceAssociation = NetworkInterfaceAssociation'
  { _niaAssociationId   :: !(Maybe Text)
  , _niaPublicDNSName   :: !(Maybe Text)
  , _niaAllocationId    :: !(Maybe Text)
  , _niaCarrierIP       :: !(Maybe Text)
  , _niaIPOwnerId       :: !(Maybe Text)
  , _niaCustomerOwnedIP :: !(Maybe Text)
  , _niaPublicIP        :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInterfaceAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'niaAssociationId' - The association ID.
--
-- * 'niaPublicDNSName' - The public DNS name.
--
-- * 'niaAllocationId' - The allocation ID.
--
-- * 'niaCarrierIP' - The carrier IP address associated with the network interface. This option is only available when the network interface is in a subnet which is associated with a Wavelength Zone.
--
-- * 'niaIPOwnerId' - The ID of the Elastic IP address owner.
--
-- * 'niaCustomerOwnedIP' - The customer-owned IP address associated with the network interface.
--
-- * 'niaPublicIP' - The address of the Elastic IP address bound to the network interface.
networkInterfaceAssociation
    :: NetworkInterfaceAssociation
networkInterfaceAssociation =
  NetworkInterfaceAssociation'
    { _niaAssociationId = Nothing
    , _niaPublicDNSName = Nothing
    , _niaAllocationId = Nothing
    , _niaCarrierIP = Nothing
    , _niaIPOwnerId = Nothing
    , _niaCustomerOwnedIP = Nothing
    , _niaPublicIP = Nothing
    }


-- | The association ID.
niaAssociationId :: Lens' NetworkInterfaceAssociation (Maybe Text)
niaAssociationId = lens _niaAssociationId (\ s a -> s{_niaAssociationId = a})

-- | The public DNS name.
niaPublicDNSName :: Lens' NetworkInterfaceAssociation (Maybe Text)
niaPublicDNSName = lens _niaPublicDNSName (\ s a -> s{_niaPublicDNSName = a})

-- | The allocation ID.
niaAllocationId :: Lens' NetworkInterfaceAssociation (Maybe Text)
niaAllocationId = lens _niaAllocationId (\ s a -> s{_niaAllocationId = a})

-- | The carrier IP address associated with the network interface. This option is only available when the network interface is in a subnet which is associated with a Wavelength Zone.
niaCarrierIP :: Lens' NetworkInterfaceAssociation (Maybe Text)
niaCarrierIP = lens _niaCarrierIP (\ s a -> s{_niaCarrierIP = a})

-- | The ID of the Elastic IP address owner.
niaIPOwnerId :: Lens' NetworkInterfaceAssociation (Maybe Text)
niaIPOwnerId = lens _niaIPOwnerId (\ s a -> s{_niaIPOwnerId = a})

-- | The customer-owned IP address associated with the network interface.
niaCustomerOwnedIP :: Lens' NetworkInterfaceAssociation (Maybe Text)
niaCustomerOwnedIP = lens _niaCustomerOwnedIP (\ s a -> s{_niaCustomerOwnedIP = a})

-- | The address of the Elastic IP address bound to the network interface.
niaPublicIP :: Lens' NetworkInterfaceAssociation (Maybe Text)
niaPublicIP = lens _niaPublicIP (\ s a -> s{_niaPublicIP = a})

instance FromXML NetworkInterfaceAssociation where
        parseXML x
          = NetworkInterfaceAssociation' <$>
              (x .@? "associationId") <*> (x .@? "publicDnsName")
                <*> (x .@? "allocationId")
                <*> (x .@? "carrierIp")
                <*> (x .@? "ipOwnerId")
                <*> (x .@? "customerOwnedIp")
                <*> (x .@? "publicIp")

instance Hashable NetworkInterfaceAssociation where

instance NFData NetworkInterfaceAssociation where

-- | Describes a network interface attachment.
--
--
--
-- /See:/ 'networkInterfaceAttachment' smart constructor.
data NetworkInterfaceAttachment = NetworkInterfaceAttachment'
  { _niaInstanceId          :: !(Maybe Text)
  , _niaStatus              :: !(Maybe AttachmentStatus)
  , _niaDeleteOnTermination :: !(Maybe Bool)
  , _niaAttachmentId        :: !(Maybe Text)
  , _niaNetworkCardIndex    :: !(Maybe Int)
  , _niaInstanceOwnerId     :: !(Maybe Text)
  , _niaAttachTime          :: !(Maybe ISO8601)
  , _niaDeviceIndex         :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInterfaceAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'niaInstanceId' - The ID of the instance.
--
-- * 'niaStatus' - The attachment state.
--
-- * 'niaDeleteOnTermination' - Indicates whether the network interface is deleted when the instance is terminated.
--
-- * 'niaAttachmentId' - The ID of the network interface attachment.
--
-- * 'niaNetworkCardIndex' - The index of the network card.
--
-- * 'niaInstanceOwnerId' - The AWS account ID of the owner of the instance.
--
-- * 'niaAttachTime' - The timestamp indicating when the attachment initiated.
--
-- * 'niaDeviceIndex' - The device index of the network interface attachment on the instance.
networkInterfaceAttachment
    :: NetworkInterfaceAttachment
networkInterfaceAttachment =
  NetworkInterfaceAttachment'
    { _niaInstanceId = Nothing
    , _niaStatus = Nothing
    , _niaDeleteOnTermination = Nothing
    , _niaAttachmentId = Nothing
    , _niaNetworkCardIndex = Nothing
    , _niaInstanceOwnerId = Nothing
    , _niaAttachTime = Nothing
    , _niaDeviceIndex = Nothing
    }


-- | The ID of the instance.
niaInstanceId :: Lens' NetworkInterfaceAttachment (Maybe Text)
niaInstanceId = lens _niaInstanceId (\ s a -> s{_niaInstanceId = a})

-- | The attachment state.
niaStatus :: Lens' NetworkInterfaceAttachment (Maybe AttachmentStatus)
niaStatus = lens _niaStatus (\ s a -> s{_niaStatus = a})

-- | Indicates whether the network interface is deleted when the instance is terminated.
niaDeleteOnTermination :: Lens' NetworkInterfaceAttachment (Maybe Bool)
niaDeleteOnTermination = lens _niaDeleteOnTermination (\ s a -> s{_niaDeleteOnTermination = a})

-- | The ID of the network interface attachment.
niaAttachmentId :: Lens' NetworkInterfaceAttachment (Maybe Text)
niaAttachmentId = lens _niaAttachmentId (\ s a -> s{_niaAttachmentId = a})

-- | The index of the network card.
niaNetworkCardIndex :: Lens' NetworkInterfaceAttachment (Maybe Int)
niaNetworkCardIndex = lens _niaNetworkCardIndex (\ s a -> s{_niaNetworkCardIndex = a})

-- | The AWS account ID of the owner of the instance.
niaInstanceOwnerId :: Lens' NetworkInterfaceAttachment (Maybe Text)
niaInstanceOwnerId = lens _niaInstanceOwnerId (\ s a -> s{_niaInstanceOwnerId = a})

-- | The timestamp indicating when the attachment initiated.
niaAttachTime :: Lens' NetworkInterfaceAttachment (Maybe UTCTime)
niaAttachTime = lens _niaAttachTime (\ s a -> s{_niaAttachTime = a}) . mapping _Time

-- | The device index of the network interface attachment on the instance.
niaDeviceIndex :: Lens' NetworkInterfaceAttachment (Maybe Int)
niaDeviceIndex = lens _niaDeviceIndex (\ s a -> s{_niaDeviceIndex = a})

instance FromXML NetworkInterfaceAttachment where
        parseXML x
          = NetworkInterfaceAttachment' <$>
              (x .@? "instanceId") <*> (x .@? "status") <*>
                (x .@? "deleteOnTermination")
                <*> (x .@? "attachmentId")
                <*> (x .@? "networkCardIndex")
                <*> (x .@? "instanceOwnerId")
                <*> (x .@? "attachTime")
                <*> (x .@? "deviceIndex")

instance Hashable NetworkInterfaceAttachment where

instance NFData NetworkInterfaceAttachment where

-- | Describes an attachment change.
--
--
--
-- /See:/ 'networkInterfaceAttachmentChanges' smart constructor.
data NetworkInterfaceAttachmentChanges = NetworkInterfaceAttachmentChanges'
  { _niacDeleteOnTermination :: !(Maybe Bool)
  , _niacAttachmentId        :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInterfaceAttachmentChanges' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'niacDeleteOnTermination' - Indicates whether the network interface is deleted when the instance is terminated.
--
-- * 'niacAttachmentId' - The ID of the network interface attachment.
networkInterfaceAttachmentChanges
    :: NetworkInterfaceAttachmentChanges
networkInterfaceAttachmentChanges =
  NetworkInterfaceAttachmentChanges'
    {_niacDeleteOnTermination = Nothing, _niacAttachmentId = Nothing}


-- | Indicates whether the network interface is deleted when the instance is terminated.
niacDeleteOnTermination :: Lens' NetworkInterfaceAttachmentChanges (Maybe Bool)
niacDeleteOnTermination = lens _niacDeleteOnTermination (\ s a -> s{_niacDeleteOnTermination = a})

-- | The ID of the network interface attachment.
niacAttachmentId :: Lens' NetworkInterfaceAttachmentChanges (Maybe Text)
niacAttachmentId = lens _niacAttachmentId (\ s a -> s{_niacAttachmentId = a})

instance Hashable NetworkInterfaceAttachmentChanges
         where

instance NFData NetworkInterfaceAttachmentChanges
         where

instance ToQuery NetworkInterfaceAttachmentChanges
         where
        toQuery NetworkInterfaceAttachmentChanges'{..}
          = mconcat
              ["DeleteOnTermination" =: _niacDeleteOnTermination,
               "AttachmentId" =: _niacAttachmentId]

-- | Describes an IPv6 address associated with a network interface.
--
--
--
-- /See:/ 'networkInterfaceIPv6Address' smart constructor.
newtype NetworkInterfaceIPv6Address = NetworkInterfaceIPv6Address'
  { _niiaIPv6Address :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInterfaceIPv6Address' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'niiaIPv6Address' - The IPv6 address.
networkInterfaceIPv6Address
    :: NetworkInterfaceIPv6Address
networkInterfaceIPv6Address =
  NetworkInterfaceIPv6Address' {_niiaIPv6Address = Nothing}


-- | The IPv6 address.
niiaIPv6Address :: Lens' NetworkInterfaceIPv6Address (Maybe Text)
niiaIPv6Address = lens _niiaIPv6Address (\ s a -> s{_niiaIPv6Address = a})

instance FromXML NetworkInterfaceIPv6Address where
        parseXML x
          = NetworkInterfaceIPv6Address' <$>
              (x .@? "ipv6Address")

instance Hashable NetworkInterfaceIPv6Address where

instance NFData NetworkInterfaceIPv6Address where

-- | Describes a permission for a network interface.
--
--
--
-- /See:/ 'networkInterfacePermission' smart constructor.
data NetworkInterfacePermission = NetworkInterfacePermission'
  { _nipPermissionState              :: !(Maybe NetworkInterfacePermissionState)
  , _nipNetworkInterfacePermissionId :: !(Maybe Text)
  , _nipNetworkInterfaceId           :: !(Maybe Text)
  , _nipAWSAccountId                 :: !(Maybe Text)
  , _nipAWSService                   :: !(Maybe Text)
  , _nipPermission                   :: !(Maybe InterfacePermissionType)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInterfacePermission' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'nipPermissionState' - Information about the state of the permission.
--
-- * 'nipNetworkInterfacePermissionId' - The ID of the network interface permission.
--
-- * 'nipNetworkInterfaceId' - The ID of the network interface.
--
-- * 'nipAWSAccountId' - The AWS account ID.
--
-- * 'nipAWSService' - The AWS service.
--
-- * 'nipPermission' - The type of permission.
networkInterfacePermission
    :: NetworkInterfacePermission
networkInterfacePermission =
  NetworkInterfacePermission'
    { _nipPermissionState = Nothing
    , _nipNetworkInterfacePermissionId = Nothing
    , _nipNetworkInterfaceId = Nothing
    , _nipAWSAccountId = Nothing
    , _nipAWSService = Nothing
    , _nipPermission = Nothing
    }


-- | Information about the state of the permission.
nipPermissionState :: Lens' NetworkInterfacePermission (Maybe NetworkInterfacePermissionState)
nipPermissionState = lens _nipPermissionState (\ s a -> s{_nipPermissionState = a})

-- | The ID of the network interface permission.
nipNetworkInterfacePermissionId :: Lens' NetworkInterfacePermission (Maybe Text)
nipNetworkInterfacePermissionId = lens _nipNetworkInterfacePermissionId (\ s a -> s{_nipNetworkInterfacePermissionId = a})

-- | The ID of the network interface.
nipNetworkInterfaceId :: Lens' NetworkInterfacePermission (Maybe Text)
nipNetworkInterfaceId = lens _nipNetworkInterfaceId (\ s a -> s{_nipNetworkInterfaceId = a})

-- | The AWS account ID.
nipAWSAccountId :: Lens' NetworkInterfacePermission (Maybe Text)
nipAWSAccountId = lens _nipAWSAccountId (\ s a -> s{_nipAWSAccountId = a})

-- | The AWS service.
nipAWSService :: Lens' NetworkInterfacePermission (Maybe Text)
nipAWSService = lens _nipAWSService (\ s a -> s{_nipAWSService = a})

-- | The type of permission.
nipPermission :: Lens' NetworkInterfacePermission (Maybe InterfacePermissionType)
nipPermission = lens _nipPermission (\ s a -> s{_nipPermission = a})

instance FromXML NetworkInterfacePermission where
        parseXML x
          = NetworkInterfacePermission' <$>
              (x .@? "permissionState") <*>
                (x .@? "networkInterfacePermissionId")
                <*> (x .@? "networkInterfaceId")
                <*> (x .@? "awsAccountId")
                <*> (x .@? "awsService")
                <*> (x .@? "permission")

instance Hashable NetworkInterfacePermission where

instance NFData NetworkInterfacePermission where

-- | Describes the state of a network interface permission.
--
--
--
-- /See:/ 'networkInterfacePermissionState' smart constructor.
data NetworkInterfacePermissionState = NetworkInterfacePermissionState'
  { _nipsState         :: !(Maybe NetworkInterfacePermissionStateCode)
  , _nipsStatusMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInterfacePermissionState' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'nipsState' - The state of the permission.
--
-- * 'nipsStatusMessage' - A status message, if applicable.
networkInterfacePermissionState
    :: NetworkInterfacePermissionState
networkInterfacePermissionState =
  NetworkInterfacePermissionState'
    {_nipsState = Nothing, _nipsStatusMessage = Nothing}


-- | The state of the permission.
nipsState :: Lens' NetworkInterfacePermissionState (Maybe NetworkInterfacePermissionStateCode)
nipsState = lens _nipsState (\ s a -> s{_nipsState = a})

-- | A status message, if applicable.
nipsStatusMessage :: Lens' NetworkInterfacePermissionState (Maybe Text)
nipsStatusMessage = lens _nipsStatusMessage (\ s a -> s{_nipsStatusMessage = a})

instance FromXML NetworkInterfacePermissionState
         where
        parseXML x
          = NetworkInterfacePermissionState' <$>
              (x .@? "state") <*> (x .@? "statusMessage")

instance Hashable NetworkInterfacePermissionState
         where

instance NFData NetworkInterfacePermissionState where

-- | Describes the private IPv4 address of a network interface.
--
--
--
-- /See:/ 'networkInterfacePrivateIPAddress' smart constructor.
data NetworkInterfacePrivateIPAddress = NetworkInterfacePrivateIPAddress'
  { _nipiaPrimary          :: !(Maybe Bool)
  , _nipiaPrivateIPAddress :: !(Maybe Text)
  , _nipiaPrivateDNSName   :: !(Maybe Text)
  , _nipiaAssociation      :: !(Maybe NetworkInterfaceAssociation)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NetworkInterfacePrivateIPAddress' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'nipiaPrimary' - Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.
--
-- * 'nipiaPrivateIPAddress' - The private IPv4 address.
--
-- * 'nipiaPrivateDNSName' - The private DNS name.
--
-- * 'nipiaAssociation' - The association information for an Elastic IP address (IPv4) associated with the network interface.
networkInterfacePrivateIPAddress
    :: NetworkInterfacePrivateIPAddress
networkInterfacePrivateIPAddress =
  NetworkInterfacePrivateIPAddress'
    { _nipiaPrimary = Nothing
    , _nipiaPrivateIPAddress = Nothing
    , _nipiaPrivateDNSName = Nothing
    , _nipiaAssociation = Nothing
    }


-- | Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.
nipiaPrimary :: Lens' NetworkInterfacePrivateIPAddress (Maybe Bool)
nipiaPrimary = lens _nipiaPrimary (\ s a -> s{_nipiaPrimary = a})

-- | The private IPv4 address.
nipiaPrivateIPAddress :: Lens' NetworkInterfacePrivateIPAddress (Maybe Text)
nipiaPrivateIPAddress = lens _nipiaPrivateIPAddress (\ s a -> s{_nipiaPrivateIPAddress = a})

-- | The private DNS name.
nipiaPrivateDNSName :: Lens' NetworkInterfacePrivateIPAddress (Maybe Text)
nipiaPrivateDNSName = lens _nipiaPrivateDNSName (\ s a -> s{_nipiaPrivateDNSName = a})

-- | The association information for an Elastic IP address (IPv4) associated with the network interface.
nipiaAssociation :: Lens' NetworkInterfacePrivateIPAddress (Maybe NetworkInterfaceAssociation)
nipiaAssociation = lens _nipiaAssociation (\ s a -> s{_nipiaAssociation = a})

instance FromXML NetworkInterfacePrivateIPAddress
         where
        parseXML x
          = NetworkInterfacePrivateIPAddress' <$>
              (x .@? "primary") <*> (x .@? "privateIpAddress") <*>
                (x .@? "privateDnsName")
                <*> (x .@? "association")

instance Hashable NetworkInterfacePrivateIPAddress
         where

instance NFData NetworkInterfacePrivateIPAddress
         where

-- | /See:/ 'newDHCPConfiguration' smart constructor.
data NewDHCPConfiguration = NewDHCPConfiguration'
  { _ndcValues :: !(Maybe [Text])
  , _ndcKey    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'NewDHCPConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ndcValues' - Undocumented member.
--
-- * 'ndcKey' - Undocumented member.
newDHCPConfiguration
    :: NewDHCPConfiguration
newDHCPConfiguration =
  NewDHCPConfiguration' {_ndcValues = Nothing, _ndcKey = Nothing}


-- | Undocumented member.
ndcValues :: Lens' NewDHCPConfiguration [Text]
ndcValues = lens _ndcValues (\ s a -> s{_ndcValues = a}) . _Default . _Coerce

-- | Undocumented member.
ndcKey :: Lens' NewDHCPConfiguration (Maybe Text)
ndcKey = lens _ndcKey (\ s a -> s{_ndcKey = a})

instance Hashable NewDHCPConfiguration where

instance NFData NewDHCPConfiguration where

instance ToQuery NewDHCPConfiguration where
        toQuery NewDHCPConfiguration'{..}
          = mconcat
              [toQuery (toQueryList "Value" <$> _ndcValues),
               "Key" =: _ndcKey]

-- | Describes the configuration of On-Demand Instances in an EC2 Fleet.
--
--
--
-- /See:/ 'onDemandOptions' smart constructor.
data OnDemandOptions = OnDemandOptions'
  { _odoCapacityReservationOptions :: !(Maybe CapacityReservationOptions)
  , _odoSingleAvailabilityZone     :: !(Maybe Bool)
  , _odoMaxTotalPrice              :: !(Maybe Text)
  , _odoMinTargetCapacity          :: !(Maybe Int)
  , _odoSingleInstanceType         :: !(Maybe Bool)
  , _odoAllocationStrategy         :: !(Maybe FleetOnDemandAllocationStrategy)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'OnDemandOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'odoCapacityReservationOptions' - The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type @instant@ .
--
-- * 'odoSingleAvailabilityZone' - Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type @instant@ .
--
-- * 'odoMaxTotalPrice' - The maximum amount per hour for On-Demand Instances that you're willing to pay.
--
-- * 'odoMinTargetCapacity' - The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
--
-- * 'odoSingleInstanceType' - Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type @instant@ .
--
-- * 'odoAllocationStrategy' - The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify @lowest-price@ , EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify @prioritized@ , EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to @lowest-price@ .
onDemandOptions
    :: OnDemandOptions
onDemandOptions =
  OnDemandOptions'
    { _odoCapacityReservationOptions = Nothing
    , _odoSingleAvailabilityZone = Nothing
    , _odoMaxTotalPrice = Nothing
    , _odoMinTargetCapacity = Nothing
    , _odoSingleInstanceType = Nothing
    , _odoAllocationStrategy = Nothing
    }


-- | The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type @instant@ .
odoCapacityReservationOptions :: Lens' OnDemandOptions (Maybe CapacityReservationOptions)
odoCapacityReservationOptions = lens _odoCapacityReservationOptions (\ s a -> s{_odoCapacityReservationOptions = a})

-- | Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type @instant@ .
odoSingleAvailabilityZone :: Lens' OnDemandOptions (Maybe Bool)
odoSingleAvailabilityZone = lens _odoSingleAvailabilityZone (\ s a -> s{_odoSingleAvailabilityZone = a})

-- | The maximum amount per hour for On-Demand Instances that you're willing to pay.
odoMaxTotalPrice :: Lens' OnDemandOptions (Maybe Text)
odoMaxTotalPrice = lens _odoMaxTotalPrice (\ s a -> s{_odoMaxTotalPrice = a})

-- | The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
odoMinTargetCapacity :: Lens' OnDemandOptions (Maybe Int)
odoMinTargetCapacity = lens _odoMinTargetCapacity (\ s a -> s{_odoMinTargetCapacity = a})

-- | Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type @instant@ .
odoSingleInstanceType :: Lens' OnDemandOptions (Maybe Bool)
odoSingleInstanceType = lens _odoSingleInstanceType (\ s a -> s{_odoSingleInstanceType = a})

-- | The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify @lowest-price@ , EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify @prioritized@ , EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to @lowest-price@ .
odoAllocationStrategy :: Lens' OnDemandOptions (Maybe FleetOnDemandAllocationStrategy)
odoAllocationStrategy = lens _odoAllocationStrategy (\ s a -> s{_odoAllocationStrategy = a})

instance FromXML OnDemandOptions where
        parseXML x
          = OnDemandOptions' <$>
              (x .@? "capacityReservationOptions") <*>
                (x .@? "singleAvailabilityZone")
                <*> (x .@? "maxTotalPrice")
                <*> (x .@? "minTargetCapacity")
                <*> (x .@? "singleInstanceType")
                <*> (x .@? "allocationStrategy")

instance Hashable OnDemandOptions where

instance NFData OnDemandOptions where

-- | Describes the configuration of On-Demand Instances in an EC2 Fleet.
--
--
--
-- /See:/ 'onDemandOptionsRequest' smart constructor.
data OnDemandOptionsRequest = OnDemandOptionsRequest'
  { _odorCapacityReservationOptions :: !(Maybe CapacityReservationOptionsRequest)
  , _odorSingleAvailabilityZone :: !(Maybe Bool)
  , _odorMaxTotalPrice :: !(Maybe Text)
  , _odorMinTargetCapacity :: !(Maybe Int)
  , _odorSingleInstanceType :: !(Maybe Bool)
  , _odorAllocationStrategy :: !(Maybe FleetOnDemandAllocationStrategy)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'OnDemandOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'odorCapacityReservationOptions' - The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type @instant@ .
--
-- * 'odorSingleAvailabilityZone' - Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type @instant@ .
--
-- * 'odorMaxTotalPrice' - The maximum amount per hour for On-Demand Instances that you're willing to pay.
--
-- * 'odorMinTargetCapacity' - The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
--
-- * 'odorSingleInstanceType' - Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type @instant@ .
--
-- * 'odorAllocationStrategy' - The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify @lowest-price@ , EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify @prioritized@ , EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to @lowest-price@ .
onDemandOptionsRequest
    :: OnDemandOptionsRequest
onDemandOptionsRequest =
  OnDemandOptionsRequest'
    { _odorCapacityReservationOptions = Nothing
    , _odorSingleAvailabilityZone = Nothing
    , _odorMaxTotalPrice = Nothing
    , _odorMinTargetCapacity = Nothing
    , _odorSingleInstanceType = Nothing
    , _odorAllocationStrategy = Nothing
    }


-- | The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type @instant@ .
odorCapacityReservationOptions :: Lens' OnDemandOptionsRequest (Maybe CapacityReservationOptionsRequest)
odorCapacityReservationOptions = lens _odorCapacityReservationOptions (\ s a -> s{_odorCapacityReservationOptions = a})

-- | Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type @instant@ .
odorSingleAvailabilityZone :: Lens' OnDemandOptionsRequest (Maybe Bool)
odorSingleAvailabilityZone = lens _odorSingleAvailabilityZone (\ s a -> s{_odorSingleAvailabilityZone = a})

-- | The maximum amount per hour for On-Demand Instances that you're willing to pay.
odorMaxTotalPrice :: Lens' OnDemandOptionsRequest (Maybe Text)
odorMaxTotalPrice = lens _odorMaxTotalPrice (\ s a -> s{_odorMaxTotalPrice = a})

-- | The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
odorMinTargetCapacity :: Lens' OnDemandOptionsRequest (Maybe Int)
odorMinTargetCapacity = lens _odorMinTargetCapacity (\ s a -> s{_odorMinTargetCapacity = a})

-- | Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type @instant@ .
odorSingleInstanceType :: Lens' OnDemandOptionsRequest (Maybe Bool)
odorSingleInstanceType = lens _odorSingleInstanceType (\ s a -> s{_odorSingleInstanceType = a})

-- | The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify @lowest-price@ , EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify @prioritized@ , EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to @lowest-price@ .
odorAllocationStrategy :: Lens' OnDemandOptionsRequest (Maybe FleetOnDemandAllocationStrategy)
odorAllocationStrategy = lens _odorAllocationStrategy (\ s a -> s{_odorAllocationStrategy = a})

instance Hashable OnDemandOptionsRequest where

instance NFData OnDemandOptionsRequest where

instance ToQuery OnDemandOptionsRequest where
        toQuery OnDemandOptionsRequest'{..}
          = mconcat
              ["CapacityReservationOptions" =:
                 _odorCapacityReservationOptions,
               "SingleAvailabilityZone" =:
                 _odorSingleAvailabilityZone,
               "MaxTotalPrice" =: _odorMaxTotalPrice,
               "MinTargetCapacity" =: _odorMinTargetCapacity,
               "SingleInstanceType" =: _odorSingleInstanceType,
               "AllocationStrategy" =: _odorAllocationStrategy]

-- | Describes a path component.
--
--
--
-- /See:/ 'pathComponent' smart constructor.
data PathComponent = PathComponent'
  { _pcSequenceNumber    :: !(Maybe Int)
  , _pcComponent         :: !(Maybe AnalysisComponent)
  , _pcSubnet            :: !(Maybe AnalysisComponent)
  , _pcSecurityGroupRule :: !(Maybe AnalysisSecurityGroupRule)
  , _pcInboundHeader     :: !(Maybe AnalysisPacketHeader)
  , _pcVPC               :: !(Maybe AnalysisComponent)
  , _pcSourceVPC         :: !(Maybe AnalysisComponent)
  , _pcACLRule           :: !(Maybe AnalysisACLRule)
  , _pcOutboundHeader    :: !(Maybe AnalysisPacketHeader)
  , _pcRouteTableRoute   :: !(Maybe AnalysisRouteTableRoute)
  , _pcDestinationVPC    :: !(Maybe AnalysisComponent)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PathComponent' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pcSequenceNumber' - The sequence number.
--
-- * 'pcComponent' - The component.
--
-- * 'pcSubnet' - The subnet.
--
-- * 'pcSecurityGroupRule' - The security group rule.
--
-- * 'pcInboundHeader' - The inbound header.
--
-- * 'pcVPC' - The component VPC.
--
-- * 'pcSourceVPC' - The source VPC.
--
-- * 'pcACLRule' - The network ACL rule.
--
-- * 'pcOutboundHeader' - The outbound header.
--
-- * 'pcRouteTableRoute' - The route table route.
--
-- * 'pcDestinationVPC' - The destination VPC.
pathComponent
    :: PathComponent
pathComponent =
  PathComponent'
    { _pcSequenceNumber = Nothing
    , _pcComponent = Nothing
    , _pcSubnet = Nothing
    , _pcSecurityGroupRule = Nothing
    , _pcInboundHeader = Nothing
    , _pcVPC = Nothing
    , _pcSourceVPC = Nothing
    , _pcACLRule = Nothing
    , _pcOutboundHeader = Nothing
    , _pcRouteTableRoute = Nothing
    , _pcDestinationVPC = Nothing
    }


-- | The sequence number.
pcSequenceNumber :: Lens' PathComponent (Maybe Int)
pcSequenceNumber = lens _pcSequenceNumber (\ s a -> s{_pcSequenceNumber = a})

-- | The component.
pcComponent :: Lens' PathComponent (Maybe AnalysisComponent)
pcComponent = lens _pcComponent (\ s a -> s{_pcComponent = a})

-- | The subnet.
pcSubnet :: Lens' PathComponent (Maybe AnalysisComponent)
pcSubnet = lens _pcSubnet (\ s a -> s{_pcSubnet = a})

-- | The security group rule.
pcSecurityGroupRule :: Lens' PathComponent (Maybe AnalysisSecurityGroupRule)
pcSecurityGroupRule = lens _pcSecurityGroupRule (\ s a -> s{_pcSecurityGroupRule = a})

-- | The inbound header.
pcInboundHeader :: Lens' PathComponent (Maybe AnalysisPacketHeader)
pcInboundHeader = lens _pcInboundHeader (\ s a -> s{_pcInboundHeader = a})

-- | The component VPC.
pcVPC :: Lens' PathComponent (Maybe AnalysisComponent)
pcVPC = lens _pcVPC (\ s a -> s{_pcVPC = a})

-- | The source VPC.
pcSourceVPC :: Lens' PathComponent (Maybe AnalysisComponent)
pcSourceVPC = lens _pcSourceVPC (\ s a -> s{_pcSourceVPC = a})

-- | The network ACL rule.
pcACLRule :: Lens' PathComponent (Maybe AnalysisACLRule)
pcACLRule = lens _pcACLRule (\ s a -> s{_pcACLRule = a})

-- | The outbound header.
pcOutboundHeader :: Lens' PathComponent (Maybe AnalysisPacketHeader)
pcOutboundHeader = lens _pcOutboundHeader (\ s a -> s{_pcOutboundHeader = a})

-- | The route table route.
pcRouteTableRoute :: Lens' PathComponent (Maybe AnalysisRouteTableRoute)
pcRouteTableRoute = lens _pcRouteTableRoute (\ s a -> s{_pcRouteTableRoute = a})

-- | The destination VPC.
pcDestinationVPC :: Lens' PathComponent (Maybe AnalysisComponent)
pcDestinationVPC = lens _pcDestinationVPC (\ s a -> s{_pcDestinationVPC = a})

instance FromXML PathComponent where
        parseXML x
          = PathComponent' <$>
              (x .@? "sequenceNumber") <*> (x .@? "component") <*>
                (x .@? "subnet")
                <*> (x .@? "securityGroupRule")
                <*> (x .@? "inboundHeader")
                <*> (x .@? "vpc")
                <*> (x .@? "sourceVpc")
                <*> (x .@? "aclRule")
                <*> (x .@? "outboundHeader")
                <*> (x .@? "routeTableRoute")
                <*> (x .@? "destinationVpc")

instance Hashable PathComponent where

instance NFData PathComponent where

-- | Describes the data that identifies an Amazon FPGA image (AFI) on the PCI bus.
--
--
--
-- /See:/ 'pciId' smart constructor.
data PciId = PciId'
  { _piSubsystemId       :: !(Maybe Text)
  , _piDeviceId          :: !(Maybe Text)
  , _piSubsystemVendorId :: !(Maybe Text)
  , _piVendorId          :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PciId' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'piSubsystemId' - The ID of the subsystem.
--
-- * 'piDeviceId' - The ID of the device.
--
-- * 'piSubsystemVendorId' - The ID of the vendor for the subsystem.
--
-- * 'piVendorId' - The ID of the vendor.
pciId
    :: PciId
pciId =
  PciId'
    { _piSubsystemId = Nothing
    , _piDeviceId = Nothing
    , _piSubsystemVendorId = Nothing
    , _piVendorId = Nothing
    }


-- | The ID of the subsystem.
piSubsystemId :: Lens' PciId (Maybe Text)
piSubsystemId = lens _piSubsystemId (\ s a -> s{_piSubsystemId = a})

-- | The ID of the device.
piDeviceId :: Lens' PciId (Maybe Text)
piDeviceId = lens _piDeviceId (\ s a -> s{_piDeviceId = a})

-- | The ID of the vendor for the subsystem.
piSubsystemVendorId :: Lens' PciId (Maybe Text)
piSubsystemVendorId = lens _piSubsystemVendorId (\ s a -> s{_piSubsystemVendorId = a})

-- | The ID of the vendor.
piVendorId :: Lens' PciId (Maybe Text)
piVendorId = lens _piVendorId (\ s a -> s{_piVendorId = a})

instance FromXML PciId where
        parseXML x
          = PciId' <$>
              (x .@? "SubsystemId") <*> (x .@? "DeviceId") <*>
                (x .@? "SubsystemVendorId")
                <*> (x .@? "VendorId")

instance Hashable PciId where

instance NFData PciId where

-- | The status of the transit gateway peering attachment.
--
--
--
-- /See:/ 'peeringAttachmentStatus' smart constructor.
data PeeringAttachmentStatus = PeeringAttachmentStatus'
  { _pasCode    :: !(Maybe Text)
  , _pasMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PeeringAttachmentStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pasCode' - The status code.
--
-- * 'pasMessage' - The status message, if applicable.
peeringAttachmentStatus
    :: PeeringAttachmentStatus
peeringAttachmentStatus =
  PeeringAttachmentStatus' {_pasCode = Nothing, _pasMessage = Nothing}


-- | The status code.
pasCode :: Lens' PeeringAttachmentStatus (Maybe Text)
pasCode = lens _pasCode (\ s a -> s{_pasCode = a})

-- | The status message, if applicable.
pasMessage :: Lens' PeeringAttachmentStatus (Maybe Text)
pasMessage = lens _pasMessage (\ s a -> s{_pasMessage = a})

instance FromXML PeeringAttachmentStatus where
        parseXML x
          = PeeringAttachmentStatus' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable PeeringAttachmentStatus where

instance NFData PeeringAttachmentStatus where

-- | Describes the VPC peering connection options.
--
--
--
-- /See:/ 'peeringConnectionOptions' smart constructor.
data PeeringConnectionOptions = PeeringConnectionOptions'
  { _pcoAllowEgressFromLocalVPCToRemoteClassicLink :: !(Maybe Bool)
  , _pcoAllowEgressFromLocalClassicLinkToRemoteVPC :: !(Maybe Bool)
  , _pcoAllowDNSResolutionFromRemoteVPC            :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PeeringConnectionOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pcoAllowEgressFromLocalVPCToRemoteClassicLink' - If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
--
-- * 'pcoAllowEgressFromLocalClassicLinkToRemoteVPC' - If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
--
-- * 'pcoAllowDNSResolutionFromRemoteVPC' - If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.
peeringConnectionOptions
    :: PeeringConnectionOptions
peeringConnectionOptions =
  PeeringConnectionOptions'
    { _pcoAllowEgressFromLocalVPCToRemoteClassicLink = Nothing
    , _pcoAllowEgressFromLocalClassicLinkToRemoteVPC = Nothing
    , _pcoAllowDNSResolutionFromRemoteVPC = Nothing
    }


-- | If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
pcoAllowEgressFromLocalVPCToRemoteClassicLink :: Lens' PeeringConnectionOptions (Maybe Bool)
pcoAllowEgressFromLocalVPCToRemoteClassicLink = lens _pcoAllowEgressFromLocalVPCToRemoteClassicLink (\ s a -> s{_pcoAllowEgressFromLocalVPCToRemoteClassicLink = a})

-- | If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
pcoAllowEgressFromLocalClassicLinkToRemoteVPC :: Lens' PeeringConnectionOptions (Maybe Bool)
pcoAllowEgressFromLocalClassicLinkToRemoteVPC = lens _pcoAllowEgressFromLocalClassicLinkToRemoteVPC (\ s a -> s{_pcoAllowEgressFromLocalClassicLinkToRemoteVPC = a})

-- | If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.
pcoAllowDNSResolutionFromRemoteVPC :: Lens' PeeringConnectionOptions (Maybe Bool)
pcoAllowDNSResolutionFromRemoteVPC = lens _pcoAllowDNSResolutionFromRemoteVPC (\ s a -> s{_pcoAllowDNSResolutionFromRemoteVPC = a})

instance FromXML PeeringConnectionOptions where
        parseXML x
          = PeeringConnectionOptions' <$>
              (x .@? "allowEgressFromLocalVpcToRemoteClassicLink")
                <*>
                (x .@? "allowEgressFromLocalClassicLinkToRemoteVpc")
                <*> (x .@? "allowDnsResolutionFromRemoteVpc")

instance Hashable PeeringConnectionOptions where

instance NFData PeeringConnectionOptions where

-- | The VPC peering connection options.
--
--
--
-- /See:/ 'peeringConnectionOptionsRequest' smart constructor.
data PeeringConnectionOptionsRequest = PeeringConnectionOptionsRequest'
  { _pcorAllowEgressFromLocalVPCToRemoteClassicLink :: !(Maybe Bool)
  , _pcorAllowEgressFromLocalClassicLinkToRemoteVPC :: !(Maybe Bool)
  , _pcorAllowDNSResolutionFromRemoteVPC            :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PeeringConnectionOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pcorAllowEgressFromLocalVPCToRemoteClassicLink' - If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
--
-- * 'pcorAllowEgressFromLocalClassicLinkToRemoteVPC' - If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
--
-- * 'pcorAllowDNSResolutionFromRemoteVPC' - If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
peeringConnectionOptionsRequest
    :: PeeringConnectionOptionsRequest
peeringConnectionOptionsRequest =
  PeeringConnectionOptionsRequest'
    { _pcorAllowEgressFromLocalVPCToRemoteClassicLink = Nothing
    , _pcorAllowEgressFromLocalClassicLinkToRemoteVPC = Nothing
    , _pcorAllowDNSResolutionFromRemoteVPC = Nothing
    }


-- | If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
pcorAllowEgressFromLocalVPCToRemoteClassicLink :: Lens' PeeringConnectionOptionsRequest (Maybe Bool)
pcorAllowEgressFromLocalVPCToRemoteClassicLink = lens _pcorAllowEgressFromLocalVPCToRemoteClassicLink (\ s a -> s{_pcorAllowEgressFromLocalVPCToRemoteClassicLink = a})

-- | If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
pcorAllowEgressFromLocalClassicLinkToRemoteVPC :: Lens' PeeringConnectionOptionsRequest (Maybe Bool)
pcorAllowEgressFromLocalClassicLinkToRemoteVPC = lens _pcorAllowEgressFromLocalClassicLinkToRemoteVPC (\ s a -> s{_pcorAllowEgressFromLocalClassicLinkToRemoteVPC = a})

-- | If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
pcorAllowDNSResolutionFromRemoteVPC :: Lens' PeeringConnectionOptionsRequest (Maybe Bool)
pcorAllowDNSResolutionFromRemoteVPC = lens _pcorAllowDNSResolutionFromRemoteVPC (\ s a -> s{_pcorAllowDNSResolutionFromRemoteVPC = a})

instance Hashable PeeringConnectionOptionsRequest
         where

instance NFData PeeringConnectionOptionsRequest where

instance ToQuery PeeringConnectionOptionsRequest
         where
        toQuery PeeringConnectionOptionsRequest'{..}
          = mconcat
              ["AllowEgressFromLocalVpcToRemoteClassicLink" =:
                 _pcorAllowEgressFromLocalVPCToRemoteClassicLink,
               "AllowEgressFromLocalClassicLinkToRemoteVpc" =:
                 _pcorAllowEgressFromLocalClassicLinkToRemoteVPC,
               "AllowDnsResolutionFromRemoteVpc" =:
                 _pcorAllowDNSResolutionFromRemoteVPC]

-- | Information about the transit gateway in the peering attachment.
--
--
--
-- /See:/ 'peeringTgwInfo' smart constructor.
data PeeringTgwInfo = PeeringTgwInfo'
  { _ptiOwnerId          :: !(Maybe Text)
  , _ptiTransitGatewayId :: !(Maybe Text)
  , _ptiRegion           :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PeeringTgwInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ptiOwnerId' - The AWS account ID of the owner of the transit gateway.
--
-- * 'ptiTransitGatewayId' - The ID of the transit gateway.
--
-- * 'ptiRegion' - The Region of the transit gateway.
peeringTgwInfo
    :: PeeringTgwInfo
peeringTgwInfo =
  PeeringTgwInfo'
    { _ptiOwnerId = Nothing
    , _ptiTransitGatewayId = Nothing
    , _ptiRegion = Nothing
    }


-- | The AWS account ID of the owner of the transit gateway.
ptiOwnerId :: Lens' PeeringTgwInfo (Maybe Text)
ptiOwnerId = lens _ptiOwnerId (\ s a -> s{_ptiOwnerId = a})

-- | The ID of the transit gateway.
ptiTransitGatewayId :: Lens' PeeringTgwInfo (Maybe Text)
ptiTransitGatewayId = lens _ptiTransitGatewayId (\ s a -> s{_ptiTransitGatewayId = a})

-- | The Region of the transit gateway.
ptiRegion :: Lens' PeeringTgwInfo (Maybe Text)
ptiRegion = lens _ptiRegion (\ s a -> s{_ptiRegion = a})

instance FromXML PeeringTgwInfo where
        parseXML x
          = PeeringTgwInfo' <$>
              (x .@? "ownerId") <*> (x .@? "transitGatewayId") <*>
                (x .@? "region")

instance Hashable PeeringTgwInfo where

instance NFData PeeringTgwInfo where

-- | The Diffie-Hellmann group number for phase 1 IKE negotiations.
--
--
--
-- /See:/ 'phase1DHGroupNumbersListValue' smart constructor.
newtype Phase1DHGroupNumbersListValue = Phase1DHGroupNumbersListValue'
  { _pdhgnlvValue :: Maybe Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase1DHGroupNumbersListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pdhgnlvValue' - The Diffie-Hellmann group number.
phase1DHGroupNumbersListValue
    :: Phase1DHGroupNumbersListValue
phase1DHGroupNumbersListValue =
  Phase1DHGroupNumbersListValue' {_pdhgnlvValue = Nothing}


-- | The Diffie-Hellmann group number.
pdhgnlvValue :: Lens' Phase1DHGroupNumbersListValue (Maybe Int)
pdhgnlvValue = lens _pdhgnlvValue (\ s a -> s{_pdhgnlvValue = a})

instance FromXML Phase1DHGroupNumbersListValue where
        parseXML x
          = Phase1DHGroupNumbersListValue' <$> (x .@? "value")

instance Hashable Phase1DHGroupNumbersListValue where

instance NFData Phase1DHGroupNumbersListValue where

-- | Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE negotiations.
--
--
--
-- /See:/ 'phase1DHGroupNumbersRequestListValue' smart constructor.
newtype Phase1DHGroupNumbersRequestListValue = Phase1DHGroupNumbersRequestListValue'
  { _pdhgnrlvValue :: Maybe Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase1DHGroupNumbersRequestListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pdhgnrlvValue' - The Diffie-Hellmann group number.
phase1DHGroupNumbersRequestListValue
    :: Phase1DHGroupNumbersRequestListValue
phase1DHGroupNumbersRequestListValue =
  Phase1DHGroupNumbersRequestListValue' {_pdhgnrlvValue = Nothing}


-- | The Diffie-Hellmann group number.
pdhgnrlvValue :: Lens' Phase1DHGroupNumbersRequestListValue (Maybe Int)
pdhgnrlvValue = lens _pdhgnrlvValue (\ s a -> s{_pdhgnrlvValue = a})

instance Hashable
           Phase1DHGroupNumbersRequestListValue
         where

instance NFData Phase1DHGroupNumbersRequestListValue
         where

instance ToQuery Phase1DHGroupNumbersRequestListValue
         where
        toQuery Phase1DHGroupNumbersRequestListValue'{..}
          = mconcat ["Value" =: _pdhgnrlvValue]

-- | The encryption algorithm for phase 1 IKE negotiations.
--
--
--
-- /See:/ 'phase1EncryptionAlgorithmsListValue' smart constructor.
newtype Phase1EncryptionAlgorithmsListValue = Phase1EncryptionAlgorithmsListValue'
  { _pealveValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase1EncryptionAlgorithmsListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pealveValue' - The value for the encryption algorithm.
phase1EncryptionAlgorithmsListValue
    :: Phase1EncryptionAlgorithmsListValue
phase1EncryptionAlgorithmsListValue =
  Phase1EncryptionAlgorithmsListValue' {_pealveValue = Nothing}


-- | The value for the encryption algorithm.
pealveValue :: Lens' Phase1EncryptionAlgorithmsListValue (Maybe Text)
pealveValue = lens _pealveValue (\ s a -> s{_pealveValue = a})

instance FromXML Phase1EncryptionAlgorithmsListValue
         where
        parseXML x
          = Phase1EncryptionAlgorithmsListValue' <$>
              (x .@? "value")

instance Hashable Phase1EncryptionAlgorithmsListValue
         where

instance NFData Phase1EncryptionAlgorithmsListValue
         where

-- | Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE negotiations.
--
--
--
-- /See:/ 'phase1EncryptionAlgorithmsRequestListValue' smart constructor.
newtype Phase1EncryptionAlgorithmsRequestListValue = Phase1EncryptionAlgorithmsRequestListValue'
  { _pearlvValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase1EncryptionAlgorithmsRequestListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pearlvValue' - The value for the encryption algorithm.
phase1EncryptionAlgorithmsRequestListValue
    :: Phase1EncryptionAlgorithmsRequestListValue
phase1EncryptionAlgorithmsRequestListValue =
  Phase1EncryptionAlgorithmsRequestListValue' {_pearlvValue = Nothing}


-- | The value for the encryption algorithm.
pearlvValue :: Lens' Phase1EncryptionAlgorithmsRequestListValue (Maybe Text)
pearlvValue = lens _pearlvValue (\ s a -> s{_pearlvValue = a})

instance Hashable
           Phase1EncryptionAlgorithmsRequestListValue
         where

instance NFData
           Phase1EncryptionAlgorithmsRequestListValue
         where

instance ToQuery
           Phase1EncryptionAlgorithmsRequestListValue
         where
        toQuery
          Phase1EncryptionAlgorithmsRequestListValue'{..}
          = mconcat ["Value" =: _pearlvValue]

-- | The integrity algorithm for phase 1 IKE negotiations.
--
--
--
-- /See:/ 'phase1IntegrityAlgorithmsListValue' smart constructor.
newtype Phase1IntegrityAlgorithmsListValue = Phase1IntegrityAlgorithmsListValue'
  { _pialvValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase1IntegrityAlgorithmsListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pialvValue' - The value for the integrity algorithm.
phase1IntegrityAlgorithmsListValue
    :: Phase1IntegrityAlgorithmsListValue
phase1IntegrityAlgorithmsListValue =
  Phase1IntegrityAlgorithmsListValue' {_pialvValue = Nothing}


-- | The value for the integrity algorithm.
pialvValue :: Lens' Phase1IntegrityAlgorithmsListValue (Maybe Text)
pialvValue = lens _pialvValue (\ s a -> s{_pialvValue = a})

instance FromXML Phase1IntegrityAlgorithmsListValue
         where
        parseXML x
          = Phase1IntegrityAlgorithmsListValue' <$>
              (x .@? "value")

instance Hashable Phase1IntegrityAlgorithmsListValue
         where

instance NFData Phase1IntegrityAlgorithmsListValue
         where

-- | Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE negotiations.
--
--
--
-- /See:/ 'phase1IntegrityAlgorithmsRequestListValue' smart constructor.
newtype Phase1IntegrityAlgorithmsRequestListValue = Phase1IntegrityAlgorithmsRequestListValue'
  { _piarlviValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase1IntegrityAlgorithmsRequestListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'piarlviValue' - The value for the integrity algorithm.
phase1IntegrityAlgorithmsRequestListValue
    :: Phase1IntegrityAlgorithmsRequestListValue
phase1IntegrityAlgorithmsRequestListValue =
  Phase1IntegrityAlgorithmsRequestListValue' {_piarlviValue = Nothing}


-- | The value for the integrity algorithm.
piarlviValue :: Lens' Phase1IntegrityAlgorithmsRequestListValue (Maybe Text)
piarlviValue = lens _piarlviValue (\ s a -> s{_piarlviValue = a})

instance Hashable
           Phase1IntegrityAlgorithmsRequestListValue
         where

instance NFData
           Phase1IntegrityAlgorithmsRequestListValue
         where

instance ToQuery
           Phase1IntegrityAlgorithmsRequestListValue
         where
        toQuery
          Phase1IntegrityAlgorithmsRequestListValue'{..}
          = mconcat ["Value" =: _piarlviValue]

-- | The Diffie-Hellmann group number for phase 2 IKE negotiations.
--
--
--
-- /See:/ 'phase2DHGroupNumbersListValue' smart constructor.
newtype Phase2DHGroupNumbersListValue = Phase2DHGroupNumbersListValue'
  { _pValue :: Maybe Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase2DHGroupNumbersListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pValue' - The Diffie-Hellmann group number.
phase2DHGroupNumbersListValue
    :: Phase2DHGroupNumbersListValue
phase2DHGroupNumbersListValue =
  Phase2DHGroupNumbersListValue' {_pValue = Nothing}


-- | The Diffie-Hellmann group number.
pValue :: Lens' Phase2DHGroupNumbersListValue (Maybe Int)
pValue = lens _pValue (\ s a -> s{_pValue = a})

instance FromXML Phase2DHGroupNumbersListValue where
        parseXML x
          = Phase2DHGroupNumbersListValue' <$> (x .@? "value")

instance Hashable Phase2DHGroupNumbersListValue where

instance NFData Phase2DHGroupNumbersListValue where

-- | Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE negotiations.
--
--
--
-- /See:/ 'phase2DHGroupNumbersRequestListValue' smart constructor.
newtype Phase2DHGroupNumbersRequestListValue = Phase2DHGroupNumbersRequestListValue'
  { _pdhgnrlvdValue :: Maybe Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase2DHGroupNumbersRequestListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pdhgnrlvdValue' - The Diffie-Hellmann group number.
phase2DHGroupNumbersRequestListValue
    :: Phase2DHGroupNumbersRequestListValue
phase2DHGroupNumbersRequestListValue =
  Phase2DHGroupNumbersRequestListValue' {_pdhgnrlvdValue = Nothing}


-- | The Diffie-Hellmann group number.
pdhgnrlvdValue :: Lens' Phase2DHGroupNumbersRequestListValue (Maybe Int)
pdhgnrlvdValue = lens _pdhgnrlvdValue (\ s a -> s{_pdhgnrlvdValue = a})

instance Hashable
           Phase2DHGroupNumbersRequestListValue
         where

instance NFData Phase2DHGroupNumbersRequestListValue
         where

instance ToQuery Phase2DHGroupNumbersRequestListValue
         where
        toQuery Phase2DHGroupNumbersRequestListValue'{..}
          = mconcat ["Value" =: _pdhgnrlvdValue]

-- | The encryption algorithm for phase 2 IKE negotiations.
--
--
--
-- /See:/ 'phase2EncryptionAlgorithmsListValue' smart constructor.
newtype Phase2EncryptionAlgorithmsListValue = Phase2EncryptionAlgorithmsListValue'
  { _pealvValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase2EncryptionAlgorithmsListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pealvValue' - The encryption algorithm.
phase2EncryptionAlgorithmsListValue
    :: Phase2EncryptionAlgorithmsListValue
phase2EncryptionAlgorithmsListValue =
  Phase2EncryptionAlgorithmsListValue' {_pealvValue = Nothing}


-- | The encryption algorithm.
pealvValue :: Lens' Phase2EncryptionAlgorithmsListValue (Maybe Text)
pealvValue = lens _pealvValue (\ s a -> s{_pealvValue = a})

instance FromXML Phase2EncryptionAlgorithmsListValue
         where
        parseXML x
          = Phase2EncryptionAlgorithmsListValue' <$>
              (x .@? "value")

instance Hashable Phase2EncryptionAlgorithmsListValue
         where

instance NFData Phase2EncryptionAlgorithmsListValue
         where

-- | Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE negotiations.
--
--
--
-- /See:/ 'phase2EncryptionAlgorithmsRequestListValue' smart constructor.
newtype Phase2EncryptionAlgorithmsRequestListValue = Phase2EncryptionAlgorithmsRequestListValue'
  { _pearlveValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase2EncryptionAlgorithmsRequestListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pearlveValue' - The encryption algorithm.
phase2EncryptionAlgorithmsRequestListValue
    :: Phase2EncryptionAlgorithmsRequestListValue
phase2EncryptionAlgorithmsRequestListValue =
  Phase2EncryptionAlgorithmsRequestListValue' {_pearlveValue = Nothing}


-- | The encryption algorithm.
pearlveValue :: Lens' Phase2EncryptionAlgorithmsRequestListValue (Maybe Text)
pearlveValue = lens _pearlveValue (\ s a -> s{_pearlveValue = a})

instance Hashable
           Phase2EncryptionAlgorithmsRequestListValue
         where

instance NFData
           Phase2EncryptionAlgorithmsRequestListValue
         where

instance ToQuery
           Phase2EncryptionAlgorithmsRequestListValue
         where
        toQuery
          Phase2EncryptionAlgorithmsRequestListValue'{..}
          = mconcat ["Value" =: _pearlveValue]

-- | The integrity algorithm for phase 2 IKE negotiations.
--
--
--
-- /See:/ 'phase2IntegrityAlgorithmsListValue' smart constructor.
newtype Phase2IntegrityAlgorithmsListValue = Phase2IntegrityAlgorithmsListValue'
  { _phaValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase2IntegrityAlgorithmsListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'phaValue' - The integrity algorithm.
phase2IntegrityAlgorithmsListValue
    :: Phase2IntegrityAlgorithmsListValue
phase2IntegrityAlgorithmsListValue =
  Phase2IntegrityAlgorithmsListValue' {_phaValue = Nothing}


-- | The integrity algorithm.
phaValue :: Lens' Phase2IntegrityAlgorithmsListValue (Maybe Text)
phaValue = lens _phaValue (\ s a -> s{_phaValue = a})

instance FromXML Phase2IntegrityAlgorithmsListValue
         where
        parseXML x
          = Phase2IntegrityAlgorithmsListValue' <$>
              (x .@? "value")

instance Hashable Phase2IntegrityAlgorithmsListValue
         where

instance NFData Phase2IntegrityAlgorithmsListValue
         where

-- | Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE negotiations.
--
--
--
-- /See:/ 'phase2IntegrityAlgorithmsRequestListValue' smart constructor.
newtype Phase2IntegrityAlgorithmsRequestListValue = Phase2IntegrityAlgorithmsRequestListValue'
  { _piarlvValue :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Phase2IntegrityAlgorithmsRequestListValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'piarlvValue' - The integrity algorithm.
phase2IntegrityAlgorithmsRequestListValue
    :: Phase2IntegrityAlgorithmsRequestListValue
phase2IntegrityAlgorithmsRequestListValue =
  Phase2IntegrityAlgorithmsRequestListValue' {_piarlvValue = Nothing}


-- | The integrity algorithm.
piarlvValue :: Lens' Phase2IntegrityAlgorithmsRequestListValue (Maybe Text)
piarlvValue = lens _piarlvValue (\ s a -> s{_piarlvValue = a})

instance Hashable
           Phase2IntegrityAlgorithmsRequestListValue
         where

instance NFData
           Phase2IntegrityAlgorithmsRequestListValue
         where

instance ToQuery
           Phase2IntegrityAlgorithmsRequestListValue
         where
        toQuery
          Phase2IntegrityAlgorithmsRequestListValue'{..}
          = mconcat ["Value" =: _piarlvValue]

-- | Describes the placement of an instance.
--
--
--
-- /See:/ 'placement' smart constructor.
data Placement = Placement'
  { _plaAffinity             :: !(Maybe Text)
  , _plaHostId               :: !(Maybe Text)
  , _plaPartitionNumber      :: !(Maybe Int)
  , _plaSpreadDomain         :: !(Maybe Text)
  , _plaAvailabilityZone     :: !(Maybe Text)
  , _plaTenancy              :: !(Maybe Tenancy)
  , _plaGroupName            :: !(Maybe Text)
  , _plaHostResourceGroupARN :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Placement' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'plaAffinity' - The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html ImportInstance> command. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
--
-- * 'plaHostId' - The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html ImportInstance> command. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
--
-- * 'plaPartitionNumber' - The number of the partition the instance is in. Valid only if the placement group strategy is set to @partition@ . This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
--
-- * 'plaSpreadDomain' - Reserved for future use. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
--
-- * 'plaAvailabilityZone' - The Availability Zone of the instance. If not specified, an Availability Zone will be automatically chosen for you based on the load balancing criteria for the Region. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
--
-- * 'plaTenancy' - The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of @dedicated@ runs on single-tenant hardware. The @host@ tenancy is not supported for the <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html ImportInstance> command. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
--
-- * 'plaGroupName' - The name of the placement group the instance is in.
--
-- * 'plaHostResourceGroupARN' - The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the __Tenancy__ parameter or set it to @host@ . This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
placement
    :: Placement
placement =
  Placement'
    { _plaAffinity = Nothing
    , _plaHostId = Nothing
    , _plaPartitionNumber = Nothing
    , _plaSpreadDomain = Nothing
    , _plaAvailabilityZone = Nothing
    , _plaTenancy = Nothing
    , _plaGroupName = Nothing
    , _plaHostResourceGroupARN = Nothing
    }


-- | The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html ImportInstance> command. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
plaAffinity :: Lens' Placement (Maybe Text)
plaAffinity = lens _plaAffinity (\ s a -> s{_plaAffinity = a})

-- | The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html ImportInstance> command. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
plaHostId :: Lens' Placement (Maybe Text)
plaHostId = lens _plaHostId (\ s a -> s{_plaHostId = a})

-- | The number of the partition the instance is in. Valid only if the placement group strategy is set to @partition@ . This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
plaPartitionNumber :: Lens' Placement (Maybe Int)
plaPartitionNumber = lens _plaPartitionNumber (\ s a -> s{_plaPartitionNumber = a})

-- | Reserved for future use. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
plaSpreadDomain :: Lens' Placement (Maybe Text)
plaSpreadDomain = lens _plaSpreadDomain (\ s a -> s{_plaSpreadDomain = a})

-- | The Availability Zone of the instance. If not specified, an Availability Zone will be automatically chosen for you based on the load balancing criteria for the Region. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
plaAvailabilityZone :: Lens' Placement (Maybe Text)
plaAvailabilityZone = lens _plaAvailabilityZone (\ s a -> s{_plaAvailabilityZone = a})

-- | The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of @dedicated@ runs on single-tenant hardware. The @host@ tenancy is not supported for the <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportInstance.html ImportInstance> command. This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
plaTenancy :: Lens' Placement (Maybe Tenancy)
plaTenancy = lens _plaTenancy (\ s a -> s{_plaTenancy = a})

-- | The name of the placement group the instance is in.
plaGroupName :: Lens' Placement (Maybe Text)
plaGroupName = lens _plaGroupName (\ s a -> s{_plaGroupName = a})

-- | The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the __Tenancy__ parameter or set it to @host@ . This parameter is not supported by <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateFleet CreateFleet> .
plaHostResourceGroupARN :: Lens' Placement (Maybe Text)
plaHostResourceGroupARN = lens _plaHostResourceGroupARN (\ s a -> s{_plaHostResourceGroupARN = a})

instance FromXML Placement where
        parseXML x
          = Placement' <$>
              (x .@? "affinity") <*> (x .@? "hostId") <*>
                (x .@? "partitionNumber")
                <*> (x .@? "spreadDomain")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "tenancy")
                <*> (x .@? "groupName")
                <*> (x .@? "hostResourceGroupArn")

instance Hashable Placement where

instance NFData Placement where

instance ToQuery Placement where
        toQuery Placement'{..}
          = mconcat
              ["Affinity" =: _plaAffinity, "HostId" =: _plaHostId,
               "PartitionNumber" =: _plaPartitionNumber,
               "SpreadDomain" =: _plaSpreadDomain,
               "AvailabilityZone" =: _plaAvailabilityZone,
               "Tenancy" =: _plaTenancy,
               "GroupName" =: _plaGroupName,
               "HostResourceGroupArn" =: _plaHostResourceGroupARN]

-- | Describes a placement group.
--
--
--
-- /See:/ 'placementGroup' smart constructor.
data PlacementGroup = PlacementGroup'
  { _pgState          :: !(Maybe PlacementGroupState)
  , _pgStrategy       :: !(Maybe PlacementStrategy)
  , _pgGroupId        :: !(Maybe Text)
  , _pgGroupName      :: !(Maybe Text)
  , _pgPartitionCount :: !(Maybe Int)
  , _pgTags           :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PlacementGroup' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pgState' - The state of the placement group.
--
-- * 'pgStrategy' - The placement strategy.
--
-- * 'pgGroupId' - The ID of the placement group.
--
-- * 'pgGroupName' - The name of the placement group.
--
-- * 'pgPartitionCount' - The number of partitions. Valid only if __strategy__ is set to @partition@ .
--
-- * 'pgTags' - Any tags applied to the placement group.
placementGroup
    :: PlacementGroup
placementGroup =
  PlacementGroup'
    { _pgState = Nothing
    , _pgStrategy = Nothing
    , _pgGroupId = Nothing
    , _pgGroupName = Nothing
    , _pgPartitionCount = Nothing
    , _pgTags = Nothing
    }


-- | The state of the placement group.
pgState :: Lens' PlacementGroup (Maybe PlacementGroupState)
pgState = lens _pgState (\ s a -> s{_pgState = a})

-- | The placement strategy.
pgStrategy :: Lens' PlacementGroup (Maybe PlacementStrategy)
pgStrategy = lens _pgStrategy (\ s a -> s{_pgStrategy = a})

-- | The ID of the placement group.
pgGroupId :: Lens' PlacementGroup (Maybe Text)
pgGroupId = lens _pgGroupId (\ s a -> s{_pgGroupId = a})

-- | The name of the placement group.
pgGroupName :: Lens' PlacementGroup (Maybe Text)
pgGroupName = lens _pgGroupName (\ s a -> s{_pgGroupName = a})

-- | The number of partitions. Valid only if __strategy__ is set to @partition@ .
pgPartitionCount :: Lens' PlacementGroup (Maybe Int)
pgPartitionCount = lens _pgPartitionCount (\ s a -> s{_pgPartitionCount = a})

-- | Any tags applied to the placement group.
pgTags :: Lens' PlacementGroup [Tag]
pgTags = lens _pgTags (\ s a -> s{_pgTags = a}) . _Default . _Coerce

instance FromXML PlacementGroup where
        parseXML x
          = PlacementGroup' <$>
              (x .@? "state") <*> (x .@? "strategy") <*>
                (x .@? "groupId")
                <*> (x .@? "groupName")
                <*> (x .@? "partitionCount")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable PlacementGroup where

instance NFData PlacementGroup where

-- | Describes the placement group support of the instance type.
--
--
--
-- /See:/ 'placementGroupInfo' smart constructor.
newtype PlacementGroupInfo = PlacementGroupInfo'
  { _pgiSupportedStrategies :: Maybe [PlacementGroupStrategy]
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PlacementGroupInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pgiSupportedStrategies' - The supported placement group types.
placementGroupInfo
    :: PlacementGroupInfo
placementGroupInfo = PlacementGroupInfo' {_pgiSupportedStrategies = Nothing}


-- | The supported placement group types.
pgiSupportedStrategies :: Lens' PlacementGroupInfo [PlacementGroupStrategy]
pgiSupportedStrategies = lens _pgiSupportedStrategies (\ s a -> s{_pgiSupportedStrategies = a}) . _Default . _Coerce

instance FromXML PlacementGroupInfo where
        parseXML x
          = PlacementGroupInfo' <$>
              (x .@? "supportedStrategies" .!@ mempty >>=
                 may (parseXMLList "item"))

instance Hashable PlacementGroupInfo where

instance NFData PlacementGroupInfo where

-- | Describes the placement of an instance.
--
--
--
-- /See:/ 'placementResponse' smart constructor.
newtype PlacementResponse = PlacementResponse'
  { _pGroupName :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PlacementResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pGroupName' - The name of the placement group that the instance is in.
placementResponse
    :: PlacementResponse
placementResponse = PlacementResponse' {_pGroupName = Nothing}


-- | The name of the placement group that the instance is in.
pGroupName :: Lens' PlacementResponse (Maybe Text)
pGroupName = lens _pGroupName (\ s a -> s{_pGroupName = a})

instance FromXML PlacementResponse where
        parseXML x
          = PlacementResponse' <$> (x .@? "groupName")

instance Hashable PlacementResponse where

instance NFData PlacementResponse where

-- | Describes a CIDR block for an address pool.
--
--
--
-- /See:/ 'poolCidrBlock' smart constructor.
newtype PoolCidrBlock = PoolCidrBlock'
  { _pcbCidr :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PoolCidrBlock' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pcbCidr' - The CIDR block.
poolCidrBlock
    :: PoolCidrBlock
poolCidrBlock = PoolCidrBlock' {_pcbCidr = Nothing}


-- | The CIDR block.
pcbCidr :: Lens' PoolCidrBlock (Maybe Text)
pcbCidr = lens _pcbCidr (\ s a -> s{_pcbCidr = a})

instance FromXML PoolCidrBlock where
        parseXML x
          = PoolCidrBlock' <$> (x .@? "poolCidrBlock")

instance Hashable PoolCidrBlock where

instance NFData PoolCidrBlock where

-- | Describes a range of ports.
--
--
--
-- /See:/ 'portRange' smart constructor.
data PortRange = PortRange'
  { _prTo   :: !(Maybe Int)
  , _prFrom :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PortRange' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'prTo' - The last port in the range.
--
-- * 'prFrom' - The first port in the range.
portRange
    :: PortRange
portRange = PortRange' {_prTo = Nothing, _prFrom = Nothing}


-- | The last port in the range.
prTo :: Lens' PortRange (Maybe Int)
prTo = lens _prTo (\ s a -> s{_prTo = a})

-- | The first port in the range.
prFrom :: Lens' PortRange (Maybe Int)
prFrom = lens _prFrom (\ s a -> s{_prFrom = a})

instance FromXML PortRange where
        parseXML x
          = PortRange' <$> (x .@? "to") <*> (x .@? "from")

instance Hashable PortRange where

instance NFData PortRange where

instance ToQuery PortRange where
        toQuery PortRange'{..}
          = mconcat ["To" =: _prTo, "From" =: _prFrom]

-- | Describes prefixes for AWS services.
--
--
--
-- /See:/ 'prefixList' smart constructor.
data PrefixList = PrefixList'
  { _plCidrs          :: !(Maybe [Text])
  , _plPrefixListId   :: !(Maybe Text)
  , _plPrefixListName :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PrefixList' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'plCidrs' - The IP address range of the AWS service.
--
-- * 'plPrefixListId' - The ID of the prefix.
--
-- * 'plPrefixListName' - The name of the prefix.
prefixList
    :: PrefixList
prefixList =
  PrefixList'
    {_plCidrs = Nothing, _plPrefixListId = Nothing, _plPrefixListName = Nothing}


-- | The IP address range of the AWS service.
plCidrs :: Lens' PrefixList [Text]
plCidrs = lens _plCidrs (\ s a -> s{_plCidrs = a}) . _Default . _Coerce

-- | The ID of the prefix.
plPrefixListId :: Lens' PrefixList (Maybe Text)
plPrefixListId = lens _plPrefixListId (\ s a -> s{_plPrefixListId = a})

-- | The name of the prefix.
plPrefixListName :: Lens' PrefixList (Maybe Text)
plPrefixListName = lens _plPrefixListName (\ s a -> s{_plPrefixListName = a})

instance FromXML PrefixList where
        parseXML x
          = PrefixList' <$>
              (x .@? "cidrSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "prefixListId")
                <*> (x .@? "prefixListName")

instance Hashable PrefixList where

instance NFData PrefixList where

-- | Describes the resource with which a prefix list is associated.
--
--
--
-- /See:/ 'prefixListAssociation' smart constructor.
data PrefixListAssociation = PrefixListAssociation'
  { _plaResourceId    :: !(Maybe Text)
  , _plaResourceOwner :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PrefixListAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'plaResourceId' - The ID of the resource.
--
-- * 'plaResourceOwner' - The owner of the resource.
prefixListAssociation
    :: PrefixListAssociation
prefixListAssociation =
  PrefixListAssociation' {_plaResourceId = Nothing, _plaResourceOwner = Nothing}


-- | The ID of the resource.
plaResourceId :: Lens' PrefixListAssociation (Maybe Text)
plaResourceId = lens _plaResourceId (\ s a -> s{_plaResourceId = a})

-- | The owner of the resource.
plaResourceOwner :: Lens' PrefixListAssociation (Maybe Text)
plaResourceOwner = lens _plaResourceOwner (\ s a -> s{_plaResourceOwner = a})

instance FromXML PrefixListAssociation where
        parseXML x
          = PrefixListAssociation' <$>
              (x .@? "resourceId") <*> (x .@? "resourceOwner")

instance Hashable PrefixListAssociation where

instance NFData PrefixListAssociation where

-- | Describes a prefix list entry.
--
--
--
-- /See:/ 'prefixListEntry' smart constructor.
data PrefixListEntry = PrefixListEntry'
  { _pleCidr        :: !(Maybe Text)
  , _pleDescription :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PrefixListEntry' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pleCidr' - The CIDR block.
--
-- * 'pleDescription' - The description.
prefixListEntry
    :: PrefixListEntry
prefixListEntry =
  PrefixListEntry' {_pleCidr = Nothing, _pleDescription = Nothing}


-- | The CIDR block.
pleCidr :: Lens' PrefixListEntry (Maybe Text)
pleCidr = lens _pleCidr (\ s a -> s{_pleCidr = a})

-- | The description.
pleDescription :: Lens' PrefixListEntry (Maybe Text)
pleDescription = lens _pleDescription (\ s a -> s{_pleDescription = a})

instance FromXML PrefixListEntry where
        parseXML x
          = PrefixListEntry' <$>
              (x .@? "cidr") <*> (x .@? "description")

instance Hashable PrefixListEntry where

instance NFData PrefixListEntry where

-- | Describes a prefix list ID.
--
--
--
-- /See:/ 'prefixListId' smart constructor.
data PrefixListId = PrefixListId'
  { _pliPrefixListId :: !(Maybe Text)
  , _pliDescription  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PrefixListId' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pliPrefixListId' - The ID of the prefix.
--
-- * 'pliDescription' - A description for the security group rule that references this prefix list ID. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
prefixListId
    :: PrefixListId
prefixListId =
  PrefixListId' {_pliPrefixListId = Nothing, _pliDescription = Nothing}


-- | The ID of the prefix.
pliPrefixListId :: Lens' PrefixListId (Maybe Text)
pliPrefixListId = lens _pliPrefixListId (\ s a -> s{_pliPrefixListId = a})

-- | A description for the security group rule that references this prefix list ID. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
pliDescription :: Lens' PrefixListId (Maybe Text)
pliDescription = lens _pliDescription (\ s a -> s{_pliDescription = a})

instance FromXML PrefixListId where
        parseXML x
          = PrefixListId' <$>
              (x .@? "prefixListId") <*> (x .@? "description")

instance Hashable PrefixListId where

instance NFData PrefixListId where

instance ToQuery PrefixListId where
        toQuery PrefixListId'{..}
          = mconcat
              ["PrefixListId" =: _pliPrefixListId,
               "Description" =: _pliDescription]

-- | Describes the price for a Reserved Instance.
--
--
--
-- /See:/ 'priceSchedule' smart constructor.
data PriceSchedule = PriceSchedule'
  { _psCurrencyCode :: !(Maybe CurrencyCodeValues)
  , _psTerm         :: !(Maybe Integer)
  , _psActive       :: !(Maybe Bool)
  , _psPrice        :: !(Maybe Double)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PriceSchedule' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'psCurrencyCode' - The currency for transacting the Reserved Instance resale. At this time, the only supported currency is @USD@ .
--
-- * 'psTerm' - The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
--
-- * 'psActive' - The current price schedule, as determined by the term remaining for the Reserved Instance in the listing. A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.
--
-- * 'psPrice' - The fixed price for the term.
priceSchedule
    :: PriceSchedule
priceSchedule =
  PriceSchedule'
    { _psCurrencyCode = Nothing
    , _psTerm = Nothing
    , _psActive = Nothing
    , _psPrice = Nothing
    }


-- | The currency for transacting the Reserved Instance resale. At this time, the only supported currency is @USD@ .
psCurrencyCode :: Lens' PriceSchedule (Maybe CurrencyCodeValues)
psCurrencyCode = lens _psCurrencyCode (\ s a -> s{_psCurrencyCode = a})

-- | The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
psTerm :: Lens' PriceSchedule (Maybe Integer)
psTerm = lens _psTerm (\ s a -> s{_psTerm = a})

-- | The current price schedule, as determined by the term remaining for the Reserved Instance in the listing. A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.
psActive :: Lens' PriceSchedule (Maybe Bool)
psActive = lens _psActive (\ s a -> s{_psActive = a})

-- | The fixed price for the term.
psPrice :: Lens' PriceSchedule (Maybe Double)
psPrice = lens _psPrice (\ s a -> s{_psPrice = a})

instance FromXML PriceSchedule where
        parseXML x
          = PriceSchedule' <$>
              (x .@? "currencyCode") <*> (x .@? "term") <*>
                (x .@? "active")
                <*> (x .@? "price")

instance Hashable PriceSchedule where

instance NFData PriceSchedule where

-- | Describes the price for a Reserved Instance.
--
--
--
-- /See:/ 'priceScheduleSpecification' smart constructor.
data PriceScheduleSpecification = PriceScheduleSpecification'
  { _pssCurrencyCode :: !(Maybe CurrencyCodeValues)
  , _pssTerm         :: !(Maybe Integer)
  , _pssPrice        :: !(Maybe Double)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PriceScheduleSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pssCurrencyCode' - The currency for transacting the Reserved Instance resale. At this time, the only supported currency is @USD@ .
--
-- * 'pssTerm' - The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
--
-- * 'pssPrice' - The fixed price for the term.
priceScheduleSpecification
    :: PriceScheduleSpecification
priceScheduleSpecification =
  PriceScheduleSpecification'
    {_pssCurrencyCode = Nothing, _pssTerm = Nothing, _pssPrice = Nothing}


-- | The currency for transacting the Reserved Instance resale. At this time, the only supported currency is @USD@ .
pssCurrencyCode :: Lens' PriceScheduleSpecification (Maybe CurrencyCodeValues)
pssCurrencyCode = lens _pssCurrencyCode (\ s a -> s{_pssCurrencyCode = a})

-- | The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
pssTerm :: Lens' PriceScheduleSpecification (Maybe Integer)
pssTerm = lens _pssTerm (\ s a -> s{_pssTerm = a})

-- | The fixed price for the term.
pssPrice :: Lens' PriceScheduleSpecification (Maybe Double)
pssPrice = lens _pssPrice (\ s a -> s{_pssPrice = a})

instance Hashable PriceScheduleSpecification where

instance NFData PriceScheduleSpecification where

instance ToQuery PriceScheduleSpecification where
        toQuery PriceScheduleSpecification'{..}
          = mconcat
              ["CurrencyCode" =: _pssCurrencyCode,
               "Term" =: _pssTerm, "Price" =: _pssPrice]

-- | Describes a Reserved Instance offering.
--
--
--
-- /See:/ 'pricingDetail' smart constructor.
data PricingDetail = PricingDetail'
  { _pdCount :: !(Maybe Int)
  , _pdPrice :: !(Maybe Double)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PricingDetail' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pdCount' - The number of reservations available for the price.
--
-- * 'pdPrice' - The price per instance.
pricingDetail
    :: PricingDetail
pricingDetail = PricingDetail' {_pdCount = Nothing, _pdPrice = Nothing}


-- | The number of reservations available for the price.
pdCount :: Lens' PricingDetail (Maybe Int)
pdCount = lens _pdCount (\ s a -> s{_pdCount = a})

-- | The price per instance.
pdPrice :: Lens' PricingDetail (Maybe Double)
pdPrice = lens _pdPrice (\ s a -> s{_pdPrice = a})

instance FromXML PricingDetail where
        parseXML x
          = PricingDetail' <$>
              (x .@? "count") <*> (x .@? "price")

instance Hashable PricingDetail where

instance NFData PricingDetail where

-- | PrincipalIdFormat description
--
--
--
-- /See:/ 'principalIdFormat' smart constructor.
data PrincipalIdFormat = PrincipalIdFormat'
  { _pifARN      :: !(Maybe Text)
  , _pifStatuses :: !(Maybe [IdFormat])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PrincipalIdFormat' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pifARN' - PrincipalIdFormatARN description
--
-- * 'pifStatuses' - PrincipalIdFormatStatuses description
principalIdFormat
    :: PrincipalIdFormat
principalIdFormat =
  PrincipalIdFormat' {_pifARN = Nothing, _pifStatuses = Nothing}


-- | PrincipalIdFormatARN description
pifARN :: Lens' PrincipalIdFormat (Maybe Text)
pifARN = lens _pifARN (\ s a -> s{_pifARN = a})

-- | PrincipalIdFormatStatuses description
pifStatuses :: Lens' PrincipalIdFormat [IdFormat]
pifStatuses = lens _pifStatuses (\ s a -> s{_pifStatuses = a}) . _Default . _Coerce

instance FromXML PrincipalIdFormat where
        parseXML x
          = PrincipalIdFormat' <$>
              (x .@? "arn") <*>
                (x .@? "statusSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable PrincipalIdFormat where

instance NFData PrincipalIdFormat where

-- | Information about the Private DNS name for interface endpoints.
--
--
--
-- /See:/ 'privateDNSDetails' smart constructor.
newtype PrivateDNSDetails = PrivateDNSDetails'
  { _pddPrivateDNSName :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PrivateDNSDetails' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pddPrivateDNSName' - The private DNS name assigned to the VPC endpoint service.
privateDNSDetails
    :: PrivateDNSDetails
privateDNSDetails = PrivateDNSDetails' {_pddPrivateDNSName = Nothing}


-- | The private DNS name assigned to the VPC endpoint service.
pddPrivateDNSName :: Lens' PrivateDNSDetails (Maybe Text)
pddPrivateDNSName = lens _pddPrivateDNSName (\ s a -> s{_pddPrivateDNSName = a})

instance FromXML PrivateDNSDetails where
        parseXML x
          = PrivateDNSDetails' <$> (x .@? "privateDnsName")

instance Hashable PrivateDNSDetails where

instance NFData PrivateDNSDetails where

-- | Information about the private DNS name for the service endpoint. For more information about these parameters, see <https://docs.aws.amazon.com/vpc/latest/userguide/ndpoint-services-dns-validation.html VPC Endpoint Service Private DNS Name Verification> in the /Amazon Virtual Private Cloud User Guide/ .
--
--
--
-- /See:/ 'privateDNSNameConfiguration' smart constructor.
data PrivateDNSNameConfiguration = PrivateDNSNameConfiguration'
  { _pdncState :: !(Maybe DNSNameState)
  , _pdncValue :: !(Maybe Text)
  , _pdncName  :: !(Maybe Text)
  , _pdncType  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PrivateDNSNameConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pdncState' - The verification state of the VPC endpoint service. >Consumers of the endpoint service can use the private name only when the state is @verified@ .
--
-- * 'pdncValue' - The value the service provider adds to the private DNS name domain record before verification.
--
-- * 'pdncName' - The name of the record subdomain the service provider needs to create. The service provider adds the @value@ text to the @name@ .
--
-- * 'pdncType' - The endpoint service verification type, for example TXT.
privateDNSNameConfiguration
    :: PrivateDNSNameConfiguration
privateDNSNameConfiguration =
  PrivateDNSNameConfiguration'
    { _pdncState = Nothing
    , _pdncValue = Nothing
    , _pdncName = Nothing
    , _pdncType = Nothing
    }


-- | The verification state of the VPC endpoint service. >Consumers of the endpoint service can use the private name only when the state is @verified@ .
pdncState :: Lens' PrivateDNSNameConfiguration (Maybe DNSNameState)
pdncState = lens _pdncState (\ s a -> s{_pdncState = a})

-- | The value the service provider adds to the private DNS name domain record before verification.
pdncValue :: Lens' PrivateDNSNameConfiguration (Maybe Text)
pdncValue = lens _pdncValue (\ s a -> s{_pdncValue = a})

-- | The name of the record subdomain the service provider needs to create. The service provider adds the @value@ text to the @name@ .
pdncName :: Lens' PrivateDNSNameConfiguration (Maybe Text)
pdncName = lens _pdncName (\ s a -> s{_pdncName = a})

-- | The endpoint service verification type, for example TXT.
pdncType :: Lens' PrivateDNSNameConfiguration (Maybe Text)
pdncType = lens _pdncType (\ s a -> s{_pdncType = a})

instance FromXML PrivateDNSNameConfiguration where
        parseXML x
          = PrivateDNSNameConfiguration' <$>
              (x .@? "state") <*> (x .@? "value") <*>
                (x .@? "name")
                <*> (x .@? "type")

instance Hashable PrivateDNSNameConfiguration where

instance NFData PrivateDNSNameConfiguration where

-- | Describes a secondary private IPv4 address for a network interface.
--
--
--
-- /See:/ 'privateIPAddressSpecification' smart constructor.
data PrivateIPAddressSpecification = PrivateIPAddressSpecification'
  { _piasPrimary          :: !(Maybe Bool)
  , _piasPrivateIPAddress :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PrivateIPAddressSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'piasPrimary' - Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
--
-- * 'piasPrivateIPAddress' - The private IPv4 addresses.
privateIPAddressSpecification
    :: PrivateIPAddressSpecification
privateIPAddressSpecification =
  PrivateIPAddressSpecification'
    {_piasPrimary = Nothing, _piasPrivateIPAddress = Nothing}


-- | Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
piasPrimary :: Lens' PrivateIPAddressSpecification (Maybe Bool)
piasPrimary = lens _piasPrimary (\ s a -> s{_piasPrimary = a})

-- | The private IPv4 addresses.
piasPrivateIPAddress :: Lens' PrivateIPAddressSpecification (Maybe Text)
piasPrivateIPAddress = lens _piasPrivateIPAddress (\ s a -> s{_piasPrivateIPAddress = a})

instance FromXML PrivateIPAddressSpecification where
        parseXML x
          = PrivateIPAddressSpecification' <$>
              (x .@? "primary") <*> (x .@? "privateIpAddress")

instance Hashable PrivateIPAddressSpecification where

instance NFData PrivateIPAddressSpecification where

instance ToQuery PrivateIPAddressSpecification where
        toQuery PrivateIPAddressSpecification'{..}
          = mconcat
              ["Primary" =: _piasPrimary,
               "PrivateIpAddress" =: _piasPrivateIPAddress]

-- | Describes the processor used by the instance type.
--
--
--
-- /See:/ 'processorInfo' smart constructor.
data ProcessorInfo = ProcessorInfo'
  { _piSupportedArchitectures   :: !(Maybe [ArchitectureType])
  , _piSustainedClockSpeedInGhz :: !(Maybe Double)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ProcessorInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'piSupportedArchitectures' - The architectures supported by the instance type.
--
-- * 'piSustainedClockSpeedInGhz' - The speed of the processor, in GHz.
processorInfo
    :: ProcessorInfo
processorInfo =
  ProcessorInfo'
    {_piSupportedArchitectures = Nothing, _piSustainedClockSpeedInGhz = Nothing}


-- | The architectures supported by the instance type.
piSupportedArchitectures :: Lens' ProcessorInfo [ArchitectureType]
piSupportedArchitectures = lens _piSupportedArchitectures (\ s a -> s{_piSupportedArchitectures = a}) . _Default . _Coerce

-- | The speed of the processor, in GHz.
piSustainedClockSpeedInGhz :: Lens' ProcessorInfo (Maybe Double)
piSustainedClockSpeedInGhz = lens _piSustainedClockSpeedInGhz (\ s a -> s{_piSustainedClockSpeedInGhz = a})

instance FromXML ProcessorInfo where
        parseXML x
          = ProcessorInfo' <$>
              (x .@? "supportedArchitectures" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "sustainedClockSpeedInGhz")

instance Hashable ProcessorInfo where

instance NFData ProcessorInfo where

-- | Describes a product code.
--
--
--
-- /See:/ 'productCode' smart constructor.
data ProductCode = ProductCode'
  { _pcProductCodeType :: !(Maybe ProductCodeValues)
  , _pcProductCodeId   :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ProductCode' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pcProductCodeType' - The type of product code.
--
-- * 'pcProductCodeId' - The product code.
productCode
    :: ProductCode
productCode =
  ProductCode' {_pcProductCodeType = Nothing, _pcProductCodeId = Nothing}


-- | The type of product code.
pcProductCodeType :: Lens' ProductCode (Maybe ProductCodeValues)
pcProductCodeType = lens _pcProductCodeType (\ s a -> s{_pcProductCodeType = a})

-- | The product code.
pcProductCodeId :: Lens' ProductCode (Maybe Text)
pcProductCodeId = lens _pcProductCodeId (\ s a -> s{_pcProductCodeId = a})

instance FromXML ProductCode where
        parseXML x
          = ProductCode' <$>
              (x .@? "type") <*> (x .@? "productCode")

instance Hashable ProductCode where

instance NFData ProductCode where

-- | Describes a virtual private gateway propagating route.
--
--
--
-- /See:/ 'propagatingVGW' smart constructor.
newtype PropagatingVGW = PropagatingVGW'
  { _pvGatewayId :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PropagatingVGW' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pvGatewayId' - The ID of the virtual private gateway.
propagatingVGW
    :: PropagatingVGW
propagatingVGW = PropagatingVGW' {_pvGatewayId = Nothing}


-- | The ID of the virtual private gateway.
pvGatewayId :: Lens' PropagatingVGW (Maybe Text)
pvGatewayId = lens _pvGatewayId (\ s a -> s{_pvGatewayId = a})

instance FromXML PropagatingVGW where
        parseXML x = PropagatingVGW' <$> (x .@? "gatewayId")

instance Hashable PropagatingVGW where

instance NFData PropagatingVGW where

-- | Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
--
--
--
-- /See:/ 'provisionedBandwidth' smart constructor.
data ProvisionedBandwidth = ProvisionedBandwidth'
  { _pbStatus        :: !(Maybe Text)
  , _pbRequested     :: !(Maybe Text)
  , _pbProvisioned   :: !(Maybe Text)
  , _pbRequestTime   :: !(Maybe ISO8601)
  , _pbProvisionTime :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ProvisionedBandwidth' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pbStatus' - Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
--
-- * 'pbRequested' - Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
--
-- * 'pbProvisioned' - Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
--
-- * 'pbRequestTime' - Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
--
-- * 'pbProvisionTime' - Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
provisionedBandwidth
    :: ProvisionedBandwidth
provisionedBandwidth =
  ProvisionedBandwidth'
    { _pbStatus = Nothing
    , _pbRequested = Nothing
    , _pbProvisioned = Nothing
    , _pbRequestTime = Nothing
    , _pbProvisionTime = Nothing
    }


-- | Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
pbStatus :: Lens' ProvisionedBandwidth (Maybe Text)
pbStatus = lens _pbStatus (\ s a -> s{_pbStatus = a})

-- | Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
pbRequested :: Lens' ProvisionedBandwidth (Maybe Text)
pbRequested = lens _pbRequested (\ s a -> s{_pbRequested = a})

-- | Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
pbProvisioned :: Lens' ProvisionedBandwidth (Maybe Text)
pbProvisioned = lens _pbProvisioned (\ s a -> s{_pbProvisioned = a})

-- | Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
pbRequestTime :: Lens' ProvisionedBandwidth (Maybe UTCTime)
pbRequestTime = lens _pbRequestTime (\ s a -> s{_pbRequestTime = a}) . mapping _Time

-- | Reserved. If you need to sustain traffic greater than the <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html documented limits> , contact us through the <https://console.aws.amazon.com/support/home? Support Center> .
pbProvisionTime :: Lens' ProvisionedBandwidth (Maybe UTCTime)
pbProvisionTime = lens _pbProvisionTime (\ s a -> s{_pbProvisionTime = a}) . mapping _Time

instance FromXML ProvisionedBandwidth where
        parseXML x
          = ProvisionedBandwidth' <$>
              (x .@? "status") <*> (x .@? "requested") <*>
                (x .@? "provisioned")
                <*> (x .@? "requestTime")
                <*> (x .@? "provisionTime")

instance Hashable ProvisionedBandwidth where

instance NFData ProvisionedBandwidth where

-- | The status of an updated pointer (PTR) record for an Elastic IP address.
--
--
--
-- /See:/ 'ptrUpdateStatus' smart constructor.
data PtrUpdateStatus = PtrUpdateStatus'
  { _pusStatus :: !(Maybe Text)
  , _pusValue  :: !(Maybe Text)
  , _pusReason :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PtrUpdateStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pusStatus' - The status of the PTR record update.
--
-- * 'pusValue' - The value for the PTR record update.
--
-- * 'pusReason' - The reason for the PTR record update.
ptrUpdateStatus
    :: PtrUpdateStatus
ptrUpdateStatus =
  PtrUpdateStatus'
    {_pusStatus = Nothing, _pusValue = Nothing, _pusReason = Nothing}


-- | The status of the PTR record update.
pusStatus :: Lens' PtrUpdateStatus (Maybe Text)
pusStatus = lens _pusStatus (\ s a -> s{_pusStatus = a})

-- | The value for the PTR record update.
pusValue :: Lens' PtrUpdateStatus (Maybe Text)
pusValue = lens _pusValue (\ s a -> s{_pusValue = a})

-- | The reason for the PTR record update.
pusReason :: Lens' PtrUpdateStatus (Maybe Text)
pusReason = lens _pusReason (\ s a -> s{_pusReason = a})

instance FromXML PtrUpdateStatus where
        parseXML x
          = PtrUpdateStatus' <$>
              (x .@? "status") <*> (x .@? "value") <*>
                (x .@? "reason")

instance Hashable PtrUpdateStatus where

instance NFData PtrUpdateStatus where

-- | Describes an IPv4 address pool.
--
--
--
-- /See:/ 'publicIPv4Pool' smart constructor.
data PublicIPv4Pool = PublicIPv4Pool'
  { _pipTotalAddressCount          :: !(Maybe Int)
  , _pipNetworkBorderGroup         :: !(Maybe Text)
  , _pipTotalAvailableAddressCount :: !(Maybe Int)
  , _pipPoolAddressRanges          :: !(Maybe [PublicIPv4PoolRange])
  , _pipPoolId                     :: !(Maybe Text)
  , _pipDescription                :: !(Maybe Text)
  , _pipTags                       :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PublicIPv4Pool' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pipTotalAddressCount' - The total number of addresses.
--
-- * 'pipNetworkBorderGroup' - The name of the location from which the address pool is advertised. A network border group is a unique set of Availability Zones or Local Zones from where AWS advertises public IP addresses.
--
-- * 'pipTotalAvailableAddressCount' - The total number of available addresses.
--
-- * 'pipPoolAddressRanges' - The address ranges.
--
-- * 'pipPoolId' - The ID of the address pool.
--
-- * 'pipDescription' - A description of the address pool.
--
-- * 'pipTags' - Any tags for the address pool.
publicIPv4Pool
    :: PublicIPv4Pool
publicIPv4Pool =
  PublicIPv4Pool'
    { _pipTotalAddressCount = Nothing
    , _pipNetworkBorderGroup = Nothing
    , _pipTotalAvailableAddressCount = Nothing
    , _pipPoolAddressRanges = Nothing
    , _pipPoolId = Nothing
    , _pipDescription = Nothing
    , _pipTags = Nothing
    }


-- | The total number of addresses.
pipTotalAddressCount :: Lens' PublicIPv4Pool (Maybe Int)
pipTotalAddressCount = lens _pipTotalAddressCount (\ s a -> s{_pipTotalAddressCount = a})

-- | The name of the location from which the address pool is advertised. A network border group is a unique set of Availability Zones or Local Zones from where AWS advertises public IP addresses.
pipNetworkBorderGroup :: Lens' PublicIPv4Pool (Maybe Text)
pipNetworkBorderGroup = lens _pipNetworkBorderGroup (\ s a -> s{_pipNetworkBorderGroup = a})

-- | The total number of available addresses.
pipTotalAvailableAddressCount :: Lens' PublicIPv4Pool (Maybe Int)
pipTotalAvailableAddressCount = lens _pipTotalAvailableAddressCount (\ s a -> s{_pipTotalAvailableAddressCount = a})

-- | The address ranges.
pipPoolAddressRanges :: Lens' PublicIPv4Pool [PublicIPv4PoolRange]
pipPoolAddressRanges = lens _pipPoolAddressRanges (\ s a -> s{_pipPoolAddressRanges = a}) . _Default . _Coerce

-- | The ID of the address pool.
pipPoolId :: Lens' PublicIPv4Pool (Maybe Text)
pipPoolId = lens _pipPoolId (\ s a -> s{_pipPoolId = a})

-- | A description of the address pool.
pipDescription :: Lens' PublicIPv4Pool (Maybe Text)
pipDescription = lens _pipDescription (\ s a -> s{_pipDescription = a})

-- | Any tags for the address pool.
pipTags :: Lens' PublicIPv4Pool [Tag]
pipTags = lens _pipTags (\ s a -> s{_pipTags = a}) . _Default . _Coerce

instance FromXML PublicIPv4Pool where
        parseXML x
          = PublicIPv4Pool' <$>
              (x .@? "totalAddressCount") <*>
                (x .@? "networkBorderGroup")
                <*> (x .@? "totalAvailableAddressCount")
                <*>
                (x .@? "poolAddressRangeSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "poolId")
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable PublicIPv4Pool where

instance NFData PublicIPv4Pool where

-- | Describes an address range of an IPv4 address pool.
--
--
--
-- /See:/ 'publicIPv4PoolRange' smart constructor.
data PublicIPv4PoolRange = PublicIPv4PoolRange'
  { _piprAvailableAddressCount :: !(Maybe Int)
  , _piprLastAddress           :: !(Maybe Text)
  , _piprFirstAddress          :: !(Maybe Text)
  , _piprAddressCount          :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PublicIPv4PoolRange' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'piprAvailableAddressCount' - The number of available addresses in the range.
--
-- * 'piprLastAddress' - The last IP address in the range.
--
-- * 'piprFirstAddress' - The first IP address in the range.
--
-- * 'piprAddressCount' - The number of addresses in the range.
publicIPv4PoolRange
    :: PublicIPv4PoolRange
publicIPv4PoolRange =
  PublicIPv4PoolRange'
    { _piprAvailableAddressCount = Nothing
    , _piprLastAddress = Nothing
    , _piprFirstAddress = Nothing
    , _piprAddressCount = Nothing
    }


-- | The number of available addresses in the range.
piprAvailableAddressCount :: Lens' PublicIPv4PoolRange (Maybe Int)
piprAvailableAddressCount = lens _piprAvailableAddressCount (\ s a -> s{_piprAvailableAddressCount = a})

-- | The last IP address in the range.
piprLastAddress :: Lens' PublicIPv4PoolRange (Maybe Text)
piprLastAddress = lens _piprLastAddress (\ s a -> s{_piprLastAddress = a})

-- | The first IP address in the range.
piprFirstAddress :: Lens' PublicIPv4PoolRange (Maybe Text)
piprFirstAddress = lens _piprFirstAddress (\ s a -> s{_piprFirstAddress = a})

-- | The number of addresses in the range.
piprAddressCount :: Lens' PublicIPv4PoolRange (Maybe Int)
piprAddressCount = lens _piprAddressCount (\ s a -> s{_piprAddressCount = a})

instance FromXML PublicIPv4PoolRange where
        parseXML x
          = PublicIPv4PoolRange' <$>
              (x .@? "availableAddressCount") <*>
                (x .@? "lastAddress")
                <*> (x .@? "firstAddress")
                <*> (x .@? "addressCount")

instance Hashable PublicIPv4PoolRange where

instance NFData PublicIPv4PoolRange where

-- | Describes the result of the purchase.
--
--
--
-- /See:/ 'purchase' smart constructor.
data Purchase = Purchase'
  { _pInstanceFamily    :: !(Maybe Text)
  , _pCurrencyCode      :: !(Maybe CurrencyCodeValues)
  , _pHostReservationId :: !(Maybe Text)
  , _pHourlyPrice       :: !(Maybe Text)
  , _pUpfrontPrice      :: !(Maybe Text)
  , _pHostIdSet         :: !(Maybe [Text])
  , _pDuration          :: !(Maybe Int)
  , _pPaymentOption     :: !(Maybe PaymentOption)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Purchase' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'pInstanceFamily' - The instance family on the Dedicated Host that the reservation can be associated with.
--
-- * 'pCurrencyCode' - The currency in which the @UpfrontPrice@ and @HourlyPrice@ amounts are specified. At this time, the only supported currency is @USD@ .
--
-- * 'pHostReservationId' - The ID of the reservation.
--
-- * 'pHourlyPrice' - The hourly price of the reservation per hour.
--
-- * 'pUpfrontPrice' - The upfront price of the reservation.
--
-- * 'pHostIdSet' - The IDs of the Dedicated Hosts associated with the reservation.
--
-- * 'pDuration' - The duration of the reservation's term in seconds.
--
-- * 'pPaymentOption' - The payment option for the reservation.
purchase
    :: Purchase
purchase =
  Purchase'
    { _pInstanceFamily = Nothing
    , _pCurrencyCode = Nothing
    , _pHostReservationId = Nothing
    , _pHourlyPrice = Nothing
    , _pUpfrontPrice = Nothing
    , _pHostIdSet = Nothing
    , _pDuration = Nothing
    , _pPaymentOption = Nothing
    }


-- | The instance family on the Dedicated Host that the reservation can be associated with.
pInstanceFamily :: Lens' Purchase (Maybe Text)
pInstanceFamily = lens _pInstanceFamily (\ s a -> s{_pInstanceFamily = a})

-- | The currency in which the @UpfrontPrice@ and @HourlyPrice@ amounts are specified. At this time, the only supported currency is @USD@ .
pCurrencyCode :: Lens' Purchase (Maybe CurrencyCodeValues)
pCurrencyCode = lens _pCurrencyCode (\ s a -> s{_pCurrencyCode = a})

-- | The ID of the reservation.
pHostReservationId :: Lens' Purchase (Maybe Text)
pHostReservationId = lens _pHostReservationId (\ s a -> s{_pHostReservationId = a})

-- | The hourly price of the reservation per hour.
pHourlyPrice :: Lens' Purchase (Maybe Text)
pHourlyPrice = lens _pHourlyPrice (\ s a -> s{_pHourlyPrice = a})

-- | The upfront price of the reservation.
pUpfrontPrice :: Lens' Purchase (Maybe Text)
pUpfrontPrice = lens _pUpfrontPrice (\ s a -> s{_pUpfrontPrice = a})

-- | The IDs of the Dedicated Hosts associated with the reservation.
pHostIdSet :: Lens' Purchase [Text]
pHostIdSet = lens _pHostIdSet (\ s a -> s{_pHostIdSet = a}) . _Default . _Coerce

-- | The duration of the reservation's term in seconds.
pDuration :: Lens' Purchase (Maybe Int)
pDuration = lens _pDuration (\ s a -> s{_pDuration = a})

-- | The payment option for the reservation.
pPaymentOption :: Lens' Purchase (Maybe PaymentOption)
pPaymentOption = lens _pPaymentOption (\ s a -> s{_pPaymentOption = a})

instance FromXML Purchase where
        parseXML x
          = Purchase' <$>
              (x .@? "instanceFamily") <*> (x .@? "currencyCode")
                <*> (x .@? "hostReservationId")
                <*> (x .@? "hourlyPrice")
                <*> (x .@? "upfrontPrice")
                <*>
                (x .@? "hostIdSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "duration")
                <*> (x .@? "paymentOption")

instance Hashable Purchase where

instance NFData Purchase where

-- | Describes a request to purchase Scheduled Instances.
--
--
--
-- /See:/ 'purchaseRequest' smart constructor.
data PurchaseRequest = PurchaseRequest'
  { _prInstanceCount :: !Int
  , _prPurchaseToken :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'PurchaseRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'prInstanceCount' - The number of instances.
--
-- * 'prPurchaseToken' - The purchase token.
purchaseRequest
    :: Int -- ^ 'prInstanceCount'
    -> Text -- ^ 'prPurchaseToken'
    -> PurchaseRequest
purchaseRequest pInstanceCount_ pPurchaseToken_ =
  PurchaseRequest'
    {_prInstanceCount = pInstanceCount_, _prPurchaseToken = pPurchaseToken_}


-- | The number of instances.
prInstanceCount :: Lens' PurchaseRequest Int
prInstanceCount = lens _prInstanceCount (\ s a -> s{_prInstanceCount = a})

-- | The purchase token.
prPurchaseToken :: Lens' PurchaseRequest Text
prPurchaseToken = lens _prPurchaseToken (\ s a -> s{_prPurchaseToken = a})

instance Hashable PurchaseRequest where

instance NFData PurchaseRequest where

instance ToQuery PurchaseRequest where
        toQuery PurchaseRequest'{..}
          = mconcat
              ["InstanceCount" =: _prInstanceCount,
               "PurchaseToken" =: _prPurchaseToken]

-- | Describes a recurring charge.
--
--
--
-- /See:/ 'recurringCharge' smart constructor.
data RecurringCharge = RecurringCharge'
  { _rcAmount    :: !(Maybe Double)
  , _rcFrequency :: !(Maybe RecurringChargeFrequency)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RecurringCharge' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rcAmount' - The amount of the recurring charge.
--
-- * 'rcFrequency' - The frequency of the recurring charge.
recurringCharge
    :: RecurringCharge
recurringCharge = RecurringCharge' {_rcAmount = Nothing, _rcFrequency = Nothing}


-- | The amount of the recurring charge.
rcAmount :: Lens' RecurringCharge (Maybe Double)
rcAmount = lens _rcAmount (\ s a -> s{_rcAmount = a})

-- | The frequency of the recurring charge.
rcFrequency :: Lens' RecurringCharge (Maybe RecurringChargeFrequency)
rcFrequency = lens _rcFrequency (\ s a -> s{_rcFrequency = a})

instance FromXML RecurringCharge where
        parseXML x
          = RecurringCharge' <$>
              (x .@? "amount") <*> (x .@? "frequency")

instance Hashable RecurringCharge where

instance NFData RecurringCharge where

-- | Describes a Region.
--
--
--
-- /See:/ 'regionInfo' smart constructor.
data RegionInfo = RegionInfo'
  { _riRegionName  :: !(Maybe Text)
  , _riOptInStatus :: !(Maybe Text)
  , _riEndpoint    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RegionInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'riRegionName' - The name of the Region.
--
-- * 'riOptInStatus' - The Region opt-in status. The possible values are @opt-in-not-required@ , @opted-in@ , and @not-opted-in@ .
--
-- * 'riEndpoint' - The Region service endpoint.
regionInfo
    :: RegionInfo
regionInfo =
  RegionInfo'
    {_riRegionName = Nothing, _riOptInStatus = Nothing, _riEndpoint = Nothing}


-- | The name of the Region.
riRegionName :: Lens' RegionInfo (Maybe Text)
riRegionName = lens _riRegionName (\ s a -> s{_riRegionName = a})

-- | The Region opt-in status. The possible values are @opt-in-not-required@ , @opted-in@ , and @not-opted-in@ .
riOptInStatus :: Lens' RegionInfo (Maybe Text)
riOptInStatus = lens _riOptInStatus (\ s a -> s{_riOptInStatus = a})

-- | The Region service endpoint.
riEndpoint :: Lens' RegionInfo (Maybe Text)
riEndpoint = lens _riEndpoint (\ s a -> s{_riEndpoint = a})

instance FromXML RegionInfo where
        parseXML x
          = RegionInfo' <$>
              (x .@? "regionName") <*> (x .@? "optInStatus") <*>
                (x .@? "regionEndpoint")

instance Hashable RegionInfo where

instance NFData RegionInfo where

-- | Information about the tag keys to register for the current Region. You can either specify individual tag keys or register all tag keys in the current Region. You must specify either @IncludeAllTagsOfInstance@ or @InstanceTagKeys@ in the request
--
--
--
-- /See:/ 'registerInstanceTagAttributeRequest' smart constructor.
data RegisterInstanceTagAttributeRequest = RegisterInstanceTagAttributeRequest'
  { _ritarIncludeAllTagsOfInstance :: !(Maybe Bool)
  , _ritarInstanceTagKeys          :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RegisterInstanceTagAttributeRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ritarIncludeAllTagsOfInstance' - Indicates whether to register all tag keys in the current Region. Specify @true@ to register all tag keys.
--
-- * 'ritarInstanceTagKeys' - The tag keys to register.
registerInstanceTagAttributeRequest
    :: RegisterInstanceTagAttributeRequest
registerInstanceTagAttributeRequest =
  RegisterInstanceTagAttributeRequest'
    {_ritarIncludeAllTagsOfInstance = Nothing, _ritarInstanceTagKeys = Nothing}


-- | Indicates whether to register all tag keys in the current Region. Specify @true@ to register all tag keys.
ritarIncludeAllTagsOfInstance :: Lens' RegisterInstanceTagAttributeRequest (Maybe Bool)
ritarIncludeAllTagsOfInstance = lens _ritarIncludeAllTagsOfInstance (\ s a -> s{_ritarIncludeAllTagsOfInstance = a})

-- | The tag keys to register.
ritarInstanceTagKeys :: Lens' RegisterInstanceTagAttributeRequest [Text]
ritarInstanceTagKeys = lens _ritarInstanceTagKeys (\ s a -> s{_ritarInstanceTagKeys = a}) . _Default . _Coerce

instance Hashable RegisterInstanceTagAttributeRequest
         where

instance NFData RegisterInstanceTagAttributeRequest
         where

instance ToQuery RegisterInstanceTagAttributeRequest
         where
        toQuery RegisterInstanceTagAttributeRequest'{..}
          = mconcat
              ["IncludeAllTagsOfInstance" =:
                 _ritarIncludeAllTagsOfInstance,
               toQuery
                 (toQueryList "InstanceTagKey" <$>
                    _ritarInstanceTagKeys)]

-- | An entry for a prefix list.
--
--
--
-- /See:/ 'removePrefixListEntry' smart constructor.
newtype RemovePrefixListEntry = RemovePrefixListEntry'
  { _rpleCidr :: Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RemovePrefixListEntry' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rpleCidr' - The CIDR block.
removePrefixListEntry
    :: Text -- ^ 'rpleCidr'
    -> RemovePrefixListEntry
removePrefixListEntry pCidr_ = RemovePrefixListEntry' {_rpleCidr = pCidr_}


-- | The CIDR block.
rpleCidr :: Lens' RemovePrefixListEntry Text
rpleCidr = lens _rpleCidr (\ s a -> s{_rpleCidr = a})

instance Hashable RemovePrefixListEntry where

instance NFData RemovePrefixListEntry where

instance ToQuery RemovePrefixListEntry where
        toQuery RemovePrefixListEntry'{..}
          = mconcat ["Cidr" =: _rpleCidr]

-- | The information to include in the launch template.
--
--
--
-- /See:/ 'requestLaunchTemplateData' smart constructor.
data RequestLaunchTemplateData = RequestLaunchTemplateData'
  { _rltdSecurityGroupIds :: !(Maybe [Text])
  , _rltdSecurityGroups :: !(Maybe [Text])
  , _rltdElasticInferenceAccelerators :: !(Maybe [LaunchTemplateElasticInferenceAccelerator])
  , _rltdInstanceMarketOptions :: !(Maybe LaunchTemplateInstanceMarketOptionsRequest)
  , _rltdLicenseSpecifications :: !(Maybe [LaunchTemplateLicenseConfigurationRequest])
  , _rltdDisableAPITermination :: !(Maybe Bool)
  , _rltdKeyName :: !(Maybe Text)
  , _rltdNetworkInterfaces :: !(Maybe [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest])
  , _rltdEnclaveOptions :: !(Maybe LaunchTemplateEnclaveOptionsRequest)
  , _rltdCPUOptions :: !(Maybe LaunchTemplateCPUOptionsRequest)
  , _rltdRamDiskId :: !(Maybe Text)
  , _rltdKernelId :: !(Maybe Text)
  , _rltdElasticGpuSpecifications :: !(Maybe [ElasticGpuSpecification])
  , _rltdInstanceType :: !(Maybe InstanceType)
  , _rltdCapacityReservationSpecification :: !(Maybe LaunchTemplateCapacityReservationSpecificationRequest)
  , _rltdEBSOptimized :: !(Maybe Bool)
  , _rltdUserData :: !(Maybe Text)
  , _rltdMonitoring :: !(Maybe LaunchTemplatesMonitoringRequest)
  , _rltdTagSpecifications :: !(Maybe [LaunchTemplateTagSpecificationRequest])
  , _rltdHibernationOptions :: !(Maybe LaunchTemplateHibernationOptionsRequest)
  , _rltdIAMInstanceProfile :: !(Maybe LaunchTemplateIAMInstanceProfileSpecificationRequest)
  , _rltdImageId :: !(Maybe Text)
  , _rltdInstanceInitiatedShutdownBehavior :: !(Maybe ShutdownBehavior)
  , _rltdMetadataOptions :: !(Maybe LaunchTemplateInstanceMetadataOptionsRequest)
  , _rltdCreditSpecification :: !(Maybe CreditSpecificationRequest)
  , _rltdBlockDeviceMappings :: !(Maybe [LaunchTemplateBlockDeviceMappingRequest])
  , _rltdPlacement :: !(Maybe LaunchTemplatePlacementRequest)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RequestLaunchTemplateData' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rltdSecurityGroupIds' - One or more security group IDs. You can create a security group using <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html CreateSecurityGroup> . You cannot specify both a security group ID and security name in the same request.
--
-- * 'rltdSecurityGroups' - [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
--
-- * 'rltdElasticInferenceAccelerators' - The elastic inference accelerator for the instance.
--
-- * 'rltdInstanceMarketOptions' - The market (purchasing) option for the instances.
--
-- * 'rltdLicenseSpecifications' - The license configurations.
--
-- * 'rltdDisableAPITermination' - If you set this parameter to @true@ , you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html ModifyInstanceAttribute> . Alternatively, if you set @InstanceInitiatedShutdownBehavior@ to @terminate@ , you can terminate the instance by running the shutdown command from the instance.
--
-- * 'rltdKeyName' - The name of the key pair. You can create a key pair using <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html CreateKeyPair> or <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html ImportKeyPair> . /Important:/ If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
--
-- * 'rltdNetworkInterfaces' - One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
--
-- * 'rltdEnclaveOptions' - Indicates whether the instance is enabled for AWS Nitro Enclaves. For more information, see <https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html What is AWS Nitro Enclaves?> in the /AWS Nitro Enclaves User Guide/ . You can't enable AWS Nitro Enclaves and hibernation on the same instance.
--
-- * 'rltdCPUOptions' - The CPU options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html Optimizing CPU Options> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'rltdRamDiskId' - The ID of the RAM disk. /Important:/ We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html User Provided Kernels> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'rltdKernelId' - The ID of the kernel. /Important:/ We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html User Provided Kernels> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'rltdElasticGpuSpecifications' - An elastic GPU to associate with the instance.
--
-- * 'rltdInstanceType' - The instance type. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html Instance Types> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'rltdCapacityReservationSpecification' - The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to @open@ , which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
--
-- * 'rltdEBSOptimized' - Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
--
-- * 'rltdUserData' - The Base64-encoded user data to make available to the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html Running Commands on Your Linux Instance at Launch> (Linux) and <https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data Adding User Data> (Windows).
--
-- * 'rltdMonitoring' - The monitoring for the instance.
--
-- * 'rltdTagSpecifications' - The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html CreateTags> .
--
-- * 'rltdHibernationOptions' - Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites hibernation prerequisites> . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html Hibernate Your Instance> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'rltdIAMInstanceProfile' - The IAM instance profile.
--
-- * 'rltdImageId' - The ID of the AMI.
--
-- * 'rltdInstanceInitiatedShutdownBehavior' - Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: @stop@
--
-- * 'rltdMetadataOptions' - The metadata options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html Instance Metadata and User Data> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'rltdCreditSpecification' - The credit option for CPU usage of the instance. Valid for T2, T3, or T3a instances only.
--
-- * 'rltdBlockDeviceMappings' - The block device mapping.
--
-- * 'rltdPlacement' - The placement for the instance.
requestLaunchTemplateData
    :: RequestLaunchTemplateData
requestLaunchTemplateData =
  RequestLaunchTemplateData'
    { _rltdSecurityGroupIds = Nothing
    , _rltdSecurityGroups = Nothing
    , _rltdElasticInferenceAccelerators = Nothing
    , _rltdInstanceMarketOptions = Nothing
    , _rltdLicenseSpecifications = Nothing
    , _rltdDisableAPITermination = Nothing
    , _rltdKeyName = Nothing
    , _rltdNetworkInterfaces = Nothing
    , _rltdEnclaveOptions = Nothing
    , _rltdCPUOptions = Nothing
    , _rltdRamDiskId = Nothing
    , _rltdKernelId = Nothing
    , _rltdElasticGpuSpecifications = Nothing
    , _rltdInstanceType = Nothing
    , _rltdCapacityReservationSpecification = Nothing
    , _rltdEBSOptimized = Nothing
    , _rltdUserData = Nothing
    , _rltdMonitoring = Nothing
    , _rltdTagSpecifications = Nothing
    , _rltdHibernationOptions = Nothing
    , _rltdIAMInstanceProfile = Nothing
    , _rltdImageId = Nothing
    , _rltdInstanceInitiatedShutdownBehavior = Nothing
    , _rltdMetadataOptions = Nothing
    , _rltdCreditSpecification = Nothing
    , _rltdBlockDeviceMappings = Nothing
    , _rltdPlacement = Nothing
    }


-- | One or more security group IDs. You can create a security group using <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html CreateSecurityGroup> . You cannot specify both a security group ID and security name in the same request.
rltdSecurityGroupIds :: Lens' RequestLaunchTemplateData [Text]
rltdSecurityGroupIds = lens _rltdSecurityGroupIds (\ s a -> s{_rltdSecurityGroupIds = a}) . _Default . _Coerce

-- | [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
rltdSecurityGroups :: Lens' RequestLaunchTemplateData [Text]
rltdSecurityGroups = lens _rltdSecurityGroups (\ s a -> s{_rltdSecurityGroups = a}) . _Default . _Coerce

-- | The elastic inference accelerator for the instance.
rltdElasticInferenceAccelerators :: Lens' RequestLaunchTemplateData [LaunchTemplateElasticInferenceAccelerator]
rltdElasticInferenceAccelerators = lens _rltdElasticInferenceAccelerators (\ s a -> s{_rltdElasticInferenceAccelerators = a}) . _Default . _Coerce

-- | The market (purchasing) option for the instances.
rltdInstanceMarketOptions :: Lens' RequestLaunchTemplateData (Maybe LaunchTemplateInstanceMarketOptionsRequest)
rltdInstanceMarketOptions = lens _rltdInstanceMarketOptions (\ s a -> s{_rltdInstanceMarketOptions = a})

-- | The license configurations.
rltdLicenseSpecifications :: Lens' RequestLaunchTemplateData [LaunchTemplateLicenseConfigurationRequest]
rltdLicenseSpecifications = lens _rltdLicenseSpecifications (\ s a -> s{_rltdLicenseSpecifications = a}) . _Default . _Coerce

-- | If you set this parameter to @true@ , you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html ModifyInstanceAttribute> . Alternatively, if you set @InstanceInitiatedShutdownBehavior@ to @terminate@ , you can terminate the instance by running the shutdown command from the instance.
rltdDisableAPITermination :: Lens' RequestLaunchTemplateData (Maybe Bool)
rltdDisableAPITermination = lens _rltdDisableAPITermination (\ s a -> s{_rltdDisableAPITermination = a})

-- | The name of the key pair. You can create a key pair using <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html CreateKeyPair> or <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html ImportKeyPair> . /Important:/ If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
rltdKeyName :: Lens' RequestLaunchTemplateData (Maybe Text)
rltdKeyName = lens _rltdKeyName (\ s a -> s{_rltdKeyName = a})

-- | One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
rltdNetworkInterfaces :: Lens' RequestLaunchTemplateData [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]
rltdNetworkInterfaces = lens _rltdNetworkInterfaces (\ s a -> s{_rltdNetworkInterfaces = a}) . _Default . _Coerce

-- | Indicates whether the instance is enabled for AWS Nitro Enclaves. For more information, see <https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html What is AWS Nitro Enclaves?> in the /AWS Nitro Enclaves User Guide/ . You can't enable AWS Nitro Enclaves and hibernation on the same instance.
rltdEnclaveOptions :: Lens' RequestLaunchTemplateData (Maybe LaunchTemplateEnclaveOptionsRequest)
rltdEnclaveOptions = lens _rltdEnclaveOptions (\ s a -> s{_rltdEnclaveOptions = a})

-- | The CPU options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html Optimizing CPU Options> in the /Amazon Elastic Compute Cloud User Guide/ .
rltdCPUOptions :: Lens' RequestLaunchTemplateData (Maybe LaunchTemplateCPUOptionsRequest)
rltdCPUOptions = lens _rltdCPUOptions (\ s a -> s{_rltdCPUOptions = a})

-- | The ID of the RAM disk. /Important:/ We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html User Provided Kernels> in the /Amazon Elastic Compute Cloud User Guide/ .
rltdRamDiskId :: Lens' RequestLaunchTemplateData (Maybe Text)
rltdRamDiskId = lens _rltdRamDiskId (\ s a -> s{_rltdRamDiskId = a})

-- | The ID of the kernel. /Important:/ We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html User Provided Kernels> in the /Amazon Elastic Compute Cloud User Guide/ .
rltdKernelId :: Lens' RequestLaunchTemplateData (Maybe Text)
rltdKernelId = lens _rltdKernelId (\ s a -> s{_rltdKernelId = a})

-- | An elastic GPU to associate with the instance.
rltdElasticGpuSpecifications :: Lens' RequestLaunchTemplateData [ElasticGpuSpecification]
rltdElasticGpuSpecifications = lens _rltdElasticGpuSpecifications (\ s a -> s{_rltdElasticGpuSpecifications = a}) . _Default . _Coerce

-- | The instance type. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html Instance Types> in the /Amazon Elastic Compute Cloud User Guide/ .
rltdInstanceType :: Lens' RequestLaunchTemplateData (Maybe InstanceType)
rltdInstanceType = lens _rltdInstanceType (\ s a -> s{_rltdInstanceType = a})

-- | The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to @open@ , which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
rltdCapacityReservationSpecification :: Lens' RequestLaunchTemplateData (Maybe LaunchTemplateCapacityReservationSpecificationRequest)
rltdCapacityReservationSpecification = lens _rltdCapacityReservationSpecification (\ s a -> s{_rltdCapacityReservationSpecification = a})

-- | Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
rltdEBSOptimized :: Lens' RequestLaunchTemplateData (Maybe Bool)
rltdEBSOptimized = lens _rltdEBSOptimized (\ s a -> s{_rltdEBSOptimized = a})

-- | The Base64-encoded user data to make available to the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html Running Commands on Your Linux Instance at Launch> (Linux) and <https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data Adding User Data> (Windows).
rltdUserData :: Lens' RequestLaunchTemplateData (Maybe Text)
rltdUserData = lens _rltdUserData (\ s a -> s{_rltdUserData = a})

-- | The monitoring for the instance.
rltdMonitoring :: Lens' RequestLaunchTemplateData (Maybe LaunchTemplatesMonitoringRequest)
rltdMonitoring = lens _rltdMonitoring (\ s a -> s{_rltdMonitoring = a})

-- | The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html CreateTags> .
rltdTagSpecifications :: Lens' RequestLaunchTemplateData [LaunchTemplateTagSpecificationRequest]
rltdTagSpecifications = lens _rltdTagSpecifications (\ s a -> s{_rltdTagSpecifications = a}) . _Default . _Coerce

-- | Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites hibernation prerequisites> . For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html Hibernate Your Instance> in the /Amazon Elastic Compute Cloud User Guide/ .
rltdHibernationOptions :: Lens' RequestLaunchTemplateData (Maybe LaunchTemplateHibernationOptionsRequest)
rltdHibernationOptions = lens _rltdHibernationOptions (\ s a -> s{_rltdHibernationOptions = a})

-- | The IAM instance profile.
rltdIAMInstanceProfile :: Lens' RequestLaunchTemplateData (Maybe LaunchTemplateIAMInstanceProfileSpecificationRequest)
rltdIAMInstanceProfile = lens _rltdIAMInstanceProfile (\ s a -> s{_rltdIAMInstanceProfile = a})

-- | The ID of the AMI.
rltdImageId :: Lens' RequestLaunchTemplateData (Maybe Text)
rltdImageId = lens _rltdImageId (\ s a -> s{_rltdImageId = a})

-- | Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: @stop@
rltdInstanceInitiatedShutdownBehavior :: Lens' RequestLaunchTemplateData (Maybe ShutdownBehavior)
rltdInstanceInitiatedShutdownBehavior = lens _rltdInstanceInitiatedShutdownBehavior (\ s a -> s{_rltdInstanceInitiatedShutdownBehavior = a})

-- | The metadata options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html Instance Metadata and User Data> in the /Amazon Elastic Compute Cloud User Guide/ .
rltdMetadataOptions :: Lens' RequestLaunchTemplateData (Maybe LaunchTemplateInstanceMetadataOptionsRequest)
rltdMetadataOptions = lens _rltdMetadataOptions (\ s a -> s{_rltdMetadataOptions = a})

-- | The credit option for CPU usage of the instance. Valid for T2, T3, or T3a instances only.
rltdCreditSpecification :: Lens' RequestLaunchTemplateData (Maybe CreditSpecificationRequest)
rltdCreditSpecification = lens _rltdCreditSpecification (\ s a -> s{_rltdCreditSpecification = a})

-- | The block device mapping.
rltdBlockDeviceMappings :: Lens' RequestLaunchTemplateData [LaunchTemplateBlockDeviceMappingRequest]
rltdBlockDeviceMappings = lens _rltdBlockDeviceMappings (\ s a -> s{_rltdBlockDeviceMappings = a}) . _Default . _Coerce

-- | The placement for the instance.
rltdPlacement :: Lens' RequestLaunchTemplateData (Maybe LaunchTemplatePlacementRequest)
rltdPlacement = lens _rltdPlacement (\ s a -> s{_rltdPlacement = a})

instance Hashable RequestLaunchTemplateData where

instance NFData RequestLaunchTemplateData where

instance ToQuery RequestLaunchTemplateData where
        toQuery RequestLaunchTemplateData'{..}
          = mconcat
              [toQuery
                 (toQueryList "SecurityGroupId" <$>
                    _rltdSecurityGroupIds),
               toQuery
                 (toQueryList "SecurityGroup" <$>
                    _rltdSecurityGroups),
               toQuery
                 (toQueryList "ElasticInferenceAccelerator" <$>
                    _rltdElasticInferenceAccelerators),
               "InstanceMarketOptions" =:
                 _rltdInstanceMarketOptions,
               toQuery
                 (toQueryList "LicenseSpecification" <$>
                    _rltdLicenseSpecifications),
               "DisableApiTermination" =:
                 _rltdDisableAPITermination,
               "KeyName" =: _rltdKeyName,
               toQuery
                 (toQueryList "NetworkInterface" <$>
                    _rltdNetworkInterfaces),
               "EnclaveOptions" =: _rltdEnclaveOptions,
               "CpuOptions" =: _rltdCPUOptions,
               "RamDiskId" =: _rltdRamDiskId,
               "KernelId" =: _rltdKernelId,
               toQuery
                 (toQueryList "ElasticGpuSpecification" <$>
                    _rltdElasticGpuSpecifications),
               "InstanceType" =: _rltdInstanceType,
               "CapacityReservationSpecification" =:
                 _rltdCapacityReservationSpecification,
               "EbsOptimized" =: _rltdEBSOptimized,
               "UserData" =: _rltdUserData,
               "Monitoring" =: _rltdMonitoring,
               toQuery
                 (toQueryList "TagSpecification" <$>
                    _rltdTagSpecifications),
               "HibernationOptions" =: _rltdHibernationOptions,
               "IamInstanceProfile" =: _rltdIAMInstanceProfile,
               "ImageId" =: _rltdImageId,
               "InstanceInitiatedShutdownBehavior" =:
                 _rltdInstanceInitiatedShutdownBehavior,
               "MetadataOptions" =: _rltdMetadataOptions,
               "CreditSpecification" =: _rltdCreditSpecification,
               toQuery
                 (toQueryList "BlockDeviceMapping" <$>
                    _rltdBlockDeviceMappings),
               "Placement" =: _rltdPlacement]

-- | Describes the launch specification for an instance.
--
--
--
-- /See:/ 'requestSpotLaunchSpecification' smart constructor.
data RequestSpotLaunchSpecification = RequestSpotLaunchSpecification'
  { _rslsSecurityGroupIds    :: !(Maybe [Text])
  , _rslsSecurityGroups      :: !(Maybe [Text])
  , _rslsKeyName             :: !(Maybe Text)
  , _rslsNetworkInterfaces   :: !(Maybe [InstanceNetworkInterfaceSpecification])
  , _rslsRAMDiskId           :: !(Maybe Text)
  , _rslsSubnetId            :: !(Maybe Text)
  , _rslsKernelId            :: !(Maybe Text)
  , _rslsInstanceType        :: !(Maybe InstanceType)
  , _rslsEBSOptimized        :: !(Maybe Bool)
  , _rslsUserData            :: !(Maybe Text)
  , _rslsMonitoring          :: !(Maybe RunInstancesMonitoringEnabled)
  , _rslsIAMInstanceProfile  :: !(Maybe IAMInstanceProfileSpecification)
  , _rslsImageId             :: !(Maybe Text)
  , _rslsAddressingType      :: !(Maybe Text)
  , _rslsBlockDeviceMappings :: !(Maybe [BlockDeviceMapping])
  , _rslsPlacement           :: !(Maybe SpotPlacement)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RequestSpotLaunchSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rslsSecurityGroupIds' - One or more security group IDs.
--
-- * 'rslsSecurityGroups' - One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
--
-- * 'rslsKeyName' - The name of the key pair.
--
-- * 'rslsNetworkInterfaces' - One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
--
-- * 'rslsRAMDiskId' - The ID of the RAM disk.
--
-- * 'rslsSubnetId' - The IDs of the subnets in which to launch the instance. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
--
-- * 'rslsKernelId' - The ID of the kernel.
--
-- * 'rslsInstanceType' - The instance type.
--
-- * 'rslsEBSOptimized' - Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: @false@
--
-- * 'rslsUserData' - The Base64-encoded user data for the instance. User data is limited to 16 KB.
--
-- * 'rslsMonitoring' - Indicates whether basic or detailed monitoring is enabled for the instance. Default: Disabled
--
-- * 'rslsIAMInstanceProfile' - The IAM instance profile.
--
-- * 'rslsImageId' - The ID of the AMI.
--
-- * 'rslsAddressingType' - Deprecated.
--
-- * 'rslsBlockDeviceMappings' - One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
--
-- * 'rslsPlacement' - The placement information for the instance.
requestSpotLaunchSpecification
    :: RequestSpotLaunchSpecification
requestSpotLaunchSpecification =
  RequestSpotLaunchSpecification'
    { _rslsSecurityGroupIds = Nothing
    , _rslsSecurityGroups = Nothing
    , _rslsKeyName = Nothing
    , _rslsNetworkInterfaces = Nothing
    , _rslsRAMDiskId = Nothing
    , _rslsSubnetId = Nothing
    , _rslsKernelId = Nothing
    , _rslsInstanceType = Nothing
    , _rslsEBSOptimized = Nothing
    , _rslsUserData = Nothing
    , _rslsMonitoring = Nothing
    , _rslsIAMInstanceProfile = Nothing
    , _rslsImageId = Nothing
    , _rslsAddressingType = Nothing
    , _rslsBlockDeviceMappings = Nothing
    , _rslsPlacement = Nothing
    }


-- | One or more security group IDs.
rslsSecurityGroupIds :: Lens' RequestSpotLaunchSpecification [Text]
rslsSecurityGroupIds = lens _rslsSecurityGroupIds (\ s a -> s{_rslsSecurityGroupIds = a}) . _Default . _Coerce

-- | One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
rslsSecurityGroups :: Lens' RequestSpotLaunchSpecification [Text]
rslsSecurityGroups = lens _rslsSecurityGroups (\ s a -> s{_rslsSecurityGroups = a}) . _Default . _Coerce

-- | The name of the key pair.
rslsKeyName :: Lens' RequestSpotLaunchSpecification (Maybe Text)
rslsKeyName = lens _rslsKeyName (\ s a -> s{_rslsKeyName = a})

-- | One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
rslsNetworkInterfaces :: Lens' RequestSpotLaunchSpecification [InstanceNetworkInterfaceSpecification]
rslsNetworkInterfaces = lens _rslsNetworkInterfaces (\ s a -> s{_rslsNetworkInterfaces = a}) . _Default . _Coerce

-- | The ID of the RAM disk.
rslsRAMDiskId :: Lens' RequestSpotLaunchSpecification (Maybe Text)
rslsRAMDiskId = lens _rslsRAMDiskId (\ s a -> s{_rslsRAMDiskId = a})

-- | The IDs of the subnets in which to launch the instance. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
rslsSubnetId :: Lens' RequestSpotLaunchSpecification (Maybe Text)
rslsSubnetId = lens _rslsSubnetId (\ s a -> s{_rslsSubnetId = a})

-- | The ID of the kernel.
rslsKernelId :: Lens' RequestSpotLaunchSpecification (Maybe Text)
rslsKernelId = lens _rslsKernelId (\ s a -> s{_rslsKernelId = a})

-- | The instance type.
rslsInstanceType :: Lens' RequestSpotLaunchSpecification (Maybe InstanceType)
rslsInstanceType = lens _rslsInstanceType (\ s a -> s{_rslsInstanceType = a})

-- | Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: @false@
rslsEBSOptimized :: Lens' RequestSpotLaunchSpecification (Maybe Bool)
rslsEBSOptimized = lens _rslsEBSOptimized (\ s a -> s{_rslsEBSOptimized = a})

-- | The Base64-encoded user data for the instance. User data is limited to 16 KB.
rslsUserData :: Lens' RequestSpotLaunchSpecification (Maybe Text)
rslsUserData = lens _rslsUserData (\ s a -> s{_rslsUserData = a})

-- | Indicates whether basic or detailed monitoring is enabled for the instance. Default: Disabled
rslsMonitoring :: Lens' RequestSpotLaunchSpecification (Maybe RunInstancesMonitoringEnabled)
rslsMonitoring = lens _rslsMonitoring (\ s a -> s{_rslsMonitoring = a})

-- | The IAM instance profile.
rslsIAMInstanceProfile :: Lens' RequestSpotLaunchSpecification (Maybe IAMInstanceProfileSpecification)
rslsIAMInstanceProfile = lens _rslsIAMInstanceProfile (\ s a -> s{_rslsIAMInstanceProfile = a})

-- | The ID of the AMI.
rslsImageId :: Lens' RequestSpotLaunchSpecification (Maybe Text)
rslsImageId = lens _rslsImageId (\ s a -> s{_rslsImageId = a})

-- | Deprecated.
rslsAddressingType :: Lens' RequestSpotLaunchSpecification (Maybe Text)
rslsAddressingType = lens _rslsAddressingType (\ s a -> s{_rslsAddressingType = a})

-- | One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
rslsBlockDeviceMappings :: Lens' RequestSpotLaunchSpecification [BlockDeviceMapping]
rslsBlockDeviceMappings = lens _rslsBlockDeviceMappings (\ s a -> s{_rslsBlockDeviceMappings = a}) . _Default . _Coerce

-- | The placement information for the instance.
rslsPlacement :: Lens' RequestSpotLaunchSpecification (Maybe SpotPlacement)
rslsPlacement = lens _rslsPlacement (\ s a -> s{_rslsPlacement = a})

instance Hashable RequestSpotLaunchSpecification
         where

instance NFData RequestSpotLaunchSpecification where

instance ToQuery RequestSpotLaunchSpecification where
        toQuery RequestSpotLaunchSpecification'{..}
          = mconcat
              [toQuery
                 (toQueryList "SecurityGroupId" <$>
                    _rslsSecurityGroupIds),
               toQuery
                 (toQueryList "SecurityGroup" <$>
                    _rslsSecurityGroups),
               "KeyName" =: _rslsKeyName,
               toQuery
                 (toQueryList "NetworkInterface" <$>
                    _rslsNetworkInterfaces),
               "RamdiskId" =: _rslsRAMDiskId,
               "SubnetId" =: _rslsSubnetId,
               "KernelId" =: _rslsKernelId,
               "InstanceType" =: _rslsInstanceType,
               "EbsOptimized" =: _rslsEBSOptimized,
               "UserData" =: _rslsUserData,
               "Monitoring" =: _rslsMonitoring,
               "IamInstanceProfile" =: _rslsIAMInstanceProfile,
               "ImageId" =: _rslsImageId,
               "AddressingType" =: _rslsAddressingType,
               toQuery
                 (toQueryList "BlockDeviceMapping" <$>
                    _rslsBlockDeviceMappings),
               "Placement" =: _rslsPlacement]

-- | Describes a launch request for one or more instances, and includes owner, requester, and security group information that applies to all instances in the launch request.
--
--
--
-- /See:/ 'reservation' smart constructor.
data Reservation = Reservation'
  { _rGroups        :: !(Maybe [GroupIdentifier])
  , _rInstances     :: !(Maybe [Instance])
  , _rRequesterId   :: !(Maybe Text)
  , _rReservationId :: !Text
  , _rOwnerId       :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Reservation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rGroups' - [EC2-Classic only] The security groups.
--
-- * 'rInstances' - The instances.
--
-- * 'rRequesterId' - The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).
--
-- * 'rReservationId' - The ID of the reservation.
--
-- * 'rOwnerId' - The ID of the AWS account that owns the reservation.
reservation
    :: Text -- ^ 'rReservationId'
    -> Text -- ^ 'rOwnerId'
    -> Reservation
reservation pReservationId_ pOwnerId_ =
  Reservation'
    { _rGroups = Nothing
    , _rInstances = Nothing
    , _rRequesterId = Nothing
    , _rReservationId = pReservationId_
    , _rOwnerId = pOwnerId_
    }


-- | [EC2-Classic only] The security groups.
rGroups :: Lens' Reservation [GroupIdentifier]
rGroups = lens _rGroups (\ s a -> s{_rGroups = a}) . _Default . _Coerce

-- | The instances.
rInstances :: Lens' Reservation [Instance]
rInstances = lens _rInstances (\ s a -> s{_rInstances = a}) . _Default . _Coerce

-- | The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).
rRequesterId :: Lens' Reservation (Maybe Text)
rRequesterId = lens _rRequesterId (\ s a -> s{_rRequesterId = a})

-- | The ID of the reservation.
rReservationId :: Lens' Reservation Text
rReservationId = lens _rReservationId (\ s a -> s{_rReservationId = a})

-- | The ID of the AWS account that owns the reservation.
rOwnerId :: Lens' Reservation Text
rOwnerId = lens _rOwnerId (\ s a -> s{_rOwnerId = a})

instance FromXML Reservation where
        parseXML x
          = Reservation' <$>
              (x .@? "groupSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*>
                (x .@? "instancesSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "requesterId")
                <*> (x .@ "reservationId")
                <*> (x .@ "ownerId")

instance Hashable Reservation where

instance NFData Reservation where

-- | The cost associated with the Reserved Instance.
--
--
--
-- /See:/ 'reservationValue' smart constructor.
data ReservationValue = ReservationValue'
  { _rvHourlyPrice           :: !(Maybe Text)
  , _rvRemainingTotalValue   :: !(Maybe Text)
  , _rvRemainingUpfrontValue :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservationValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rvHourlyPrice' - The hourly rate of the reservation.
--
-- * 'rvRemainingTotalValue' - The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
--
-- * 'rvRemainingUpfrontValue' - The remaining upfront cost of the reservation.
reservationValue
    :: ReservationValue
reservationValue =
  ReservationValue'
    { _rvHourlyPrice = Nothing
    , _rvRemainingTotalValue = Nothing
    , _rvRemainingUpfrontValue = Nothing
    }


-- | The hourly rate of the reservation.
rvHourlyPrice :: Lens' ReservationValue (Maybe Text)
rvHourlyPrice = lens _rvHourlyPrice (\ s a -> s{_rvHourlyPrice = a})

-- | The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
rvRemainingTotalValue :: Lens' ReservationValue (Maybe Text)
rvRemainingTotalValue = lens _rvRemainingTotalValue (\ s a -> s{_rvRemainingTotalValue = a})

-- | The remaining upfront cost of the reservation.
rvRemainingUpfrontValue :: Lens' ReservationValue (Maybe Text)
rvRemainingUpfrontValue = lens _rvRemainingUpfrontValue (\ s a -> s{_rvRemainingUpfrontValue = a})

instance FromXML ReservationValue where
        parseXML x
          = ReservationValue' <$>
              (x .@? "hourlyPrice") <*>
                (x .@? "remainingTotalValue")
                <*> (x .@? "remainingUpfrontValue")

instance Hashable ReservationValue where

instance NFData ReservationValue where

-- | Describes the limit price of a Reserved Instance offering.
--
--
--
-- /See:/ 'reservedInstanceLimitPrice' smart constructor.
data ReservedInstanceLimitPrice = ReservedInstanceLimitPrice'
  { _rilpAmount       :: !(Maybe Double)
  , _rilpCurrencyCode :: !(Maybe CurrencyCodeValues)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservedInstanceLimitPrice' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rilpAmount' - Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
--
-- * 'rilpCurrencyCode' - The currency in which the @limitPrice@ amount is specified. At this time, the only supported currency is @USD@ .
reservedInstanceLimitPrice
    :: ReservedInstanceLimitPrice
reservedInstanceLimitPrice =
  ReservedInstanceLimitPrice'
    {_rilpAmount = Nothing, _rilpCurrencyCode = Nothing}


-- | Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
rilpAmount :: Lens' ReservedInstanceLimitPrice (Maybe Double)
rilpAmount = lens _rilpAmount (\ s a -> s{_rilpAmount = a})

-- | The currency in which the @limitPrice@ amount is specified. At this time, the only supported currency is @USD@ .
rilpCurrencyCode :: Lens' ReservedInstanceLimitPrice (Maybe CurrencyCodeValues)
rilpCurrencyCode = lens _rilpCurrencyCode (\ s a -> s{_rilpCurrencyCode = a})

instance Hashable ReservedInstanceLimitPrice where

instance NFData ReservedInstanceLimitPrice where

instance ToQuery ReservedInstanceLimitPrice where
        toQuery ReservedInstanceLimitPrice'{..}
          = mconcat
              ["Amount" =: _rilpAmount,
               "CurrencyCode" =: _rilpCurrencyCode]

-- | The total value of the Convertible Reserved Instance.
--
--
--
-- /See:/ 'reservedInstanceReservationValue' smart constructor.
data ReservedInstanceReservationValue = ReservedInstanceReservationValue'
  { _rirvReservationValue   :: !(Maybe ReservationValue)
  , _rirvReservedInstanceId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservedInstanceReservationValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rirvReservationValue' - The total value of the Convertible Reserved Instance that you are exchanging.
--
-- * 'rirvReservedInstanceId' - The ID of the Convertible Reserved Instance that you are exchanging.
reservedInstanceReservationValue
    :: ReservedInstanceReservationValue
reservedInstanceReservationValue =
  ReservedInstanceReservationValue'
    {_rirvReservationValue = Nothing, _rirvReservedInstanceId = Nothing}


-- | The total value of the Convertible Reserved Instance that you are exchanging.
rirvReservationValue :: Lens' ReservedInstanceReservationValue (Maybe ReservationValue)
rirvReservationValue = lens _rirvReservationValue (\ s a -> s{_rirvReservationValue = a})

-- | The ID of the Convertible Reserved Instance that you are exchanging.
rirvReservedInstanceId :: Lens' ReservedInstanceReservationValue (Maybe Text)
rirvReservedInstanceId = lens _rirvReservedInstanceId (\ s a -> s{_rirvReservedInstanceId = a})

instance FromXML ReservedInstanceReservationValue
         where
        parseXML x
          = ReservedInstanceReservationValue' <$>
              (x .@? "reservationValue") <*>
                (x .@? "reservedInstanceId")

instance Hashable ReservedInstanceReservationValue
         where

instance NFData ReservedInstanceReservationValue
         where

-- | Describes a Reserved Instance.
--
--
--
-- /See:/ 'reservedInstances' smart constructor.
data ReservedInstances = ReservedInstances'
  { _riState               :: !(Maybe ReservedInstanceState)
  , _riCurrencyCode        :: !(Maybe CurrencyCodeValues)
  , _riInstanceCount       :: !(Maybe Int)
  , _riProductDescription  :: !(Maybe RIProductDescription)
  , _riStart               :: !(Maybe ISO8601)
  , _riInstanceType        :: !(Maybe InstanceType)
  , _riEnd                 :: !(Maybe ISO8601)
  , _riAvailabilityZone    :: !(Maybe Text)
  , _riScope               :: !(Maybe Scope)
  , _riRecurringCharges    :: !(Maybe [RecurringCharge])
  , _riOfferingType        :: !(Maybe OfferingTypeValues)
  , _riUsagePrice          :: !(Maybe Double)
  , _riFixedPrice          :: !(Maybe Double)
  , _riReservedInstancesId :: !(Maybe Text)
  , _riInstanceTenancy     :: !(Maybe Tenancy)
  , _riOfferingClass       :: !(Maybe OfferingClassType)
  , _riDuration            :: !(Maybe Integer)
  , _riTags                :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservedInstances' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'riState' - The state of the Reserved Instance purchase.
--
-- * 'riCurrencyCode' - The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is @USD@ .
--
-- * 'riInstanceCount' - The number of reservations purchased.
--
-- * 'riProductDescription' - The Reserved Instance product platform description.
--
-- * 'riStart' - The date and time the Reserved Instance started.
--
-- * 'riInstanceType' - The instance type on which the Reserved Instance can be used.
--
-- * 'riEnd' - The time when the Reserved Instance expires.
--
-- * 'riAvailabilityZone' - The Availability Zone in which the Reserved Instance can be used.
--
-- * 'riScope' - The scope of the Reserved Instance.
--
-- * 'riRecurringCharges' - The recurring charge tag assigned to the resource.
--
-- * 'riOfferingType' - The Reserved Instance offering type.
--
-- * 'riUsagePrice' - The usage price of the Reserved Instance, per hour.
--
-- * 'riFixedPrice' - The purchase price of the Reserved Instance.
--
-- * 'riReservedInstancesId' - The ID of the Reserved Instance.
--
-- * 'riInstanceTenancy' - The tenancy of the instance.
--
-- * 'riOfferingClass' - The offering class of the Reserved Instance.
--
-- * 'riDuration' - The duration of the Reserved Instance, in seconds.
--
-- * 'riTags' - Any tags assigned to the resource.
reservedInstances
    :: ReservedInstances
reservedInstances =
  ReservedInstances'
    { _riState = Nothing
    , _riCurrencyCode = Nothing
    , _riInstanceCount = Nothing
    , _riProductDescription = Nothing
    , _riStart = Nothing
    , _riInstanceType = Nothing
    , _riEnd = Nothing
    , _riAvailabilityZone = Nothing
    , _riScope = Nothing
    , _riRecurringCharges = Nothing
    , _riOfferingType = Nothing
    , _riUsagePrice = Nothing
    , _riFixedPrice = Nothing
    , _riReservedInstancesId = Nothing
    , _riInstanceTenancy = Nothing
    , _riOfferingClass = Nothing
    , _riDuration = Nothing
    , _riTags = Nothing
    }


-- | The state of the Reserved Instance purchase.
riState :: Lens' ReservedInstances (Maybe ReservedInstanceState)
riState = lens _riState (\ s a -> s{_riState = a})

-- | The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is @USD@ .
riCurrencyCode :: Lens' ReservedInstances (Maybe CurrencyCodeValues)
riCurrencyCode = lens _riCurrencyCode (\ s a -> s{_riCurrencyCode = a})

-- | The number of reservations purchased.
riInstanceCount :: Lens' ReservedInstances (Maybe Int)
riInstanceCount = lens _riInstanceCount (\ s a -> s{_riInstanceCount = a})

-- | The Reserved Instance product platform description.
riProductDescription :: Lens' ReservedInstances (Maybe RIProductDescription)
riProductDescription = lens _riProductDescription (\ s a -> s{_riProductDescription = a})

-- | The date and time the Reserved Instance started.
riStart :: Lens' ReservedInstances (Maybe UTCTime)
riStart = lens _riStart (\ s a -> s{_riStart = a}) . mapping _Time

-- | The instance type on which the Reserved Instance can be used.
riInstanceType :: Lens' ReservedInstances (Maybe InstanceType)
riInstanceType = lens _riInstanceType (\ s a -> s{_riInstanceType = a})

-- | The time when the Reserved Instance expires.
riEnd :: Lens' ReservedInstances (Maybe UTCTime)
riEnd = lens _riEnd (\ s a -> s{_riEnd = a}) . mapping _Time

-- | The Availability Zone in which the Reserved Instance can be used.
riAvailabilityZone :: Lens' ReservedInstances (Maybe Text)
riAvailabilityZone = lens _riAvailabilityZone (\ s a -> s{_riAvailabilityZone = a})

-- | The scope of the Reserved Instance.
riScope :: Lens' ReservedInstances (Maybe Scope)
riScope = lens _riScope (\ s a -> s{_riScope = a})

-- | The recurring charge tag assigned to the resource.
riRecurringCharges :: Lens' ReservedInstances [RecurringCharge]
riRecurringCharges = lens _riRecurringCharges (\ s a -> s{_riRecurringCharges = a}) . _Default . _Coerce

-- | The Reserved Instance offering type.
riOfferingType :: Lens' ReservedInstances (Maybe OfferingTypeValues)
riOfferingType = lens _riOfferingType (\ s a -> s{_riOfferingType = a})

-- | The usage price of the Reserved Instance, per hour.
riUsagePrice :: Lens' ReservedInstances (Maybe Double)
riUsagePrice = lens _riUsagePrice (\ s a -> s{_riUsagePrice = a})

-- | The purchase price of the Reserved Instance.
riFixedPrice :: Lens' ReservedInstances (Maybe Double)
riFixedPrice = lens _riFixedPrice (\ s a -> s{_riFixedPrice = a})

-- | The ID of the Reserved Instance.
riReservedInstancesId :: Lens' ReservedInstances (Maybe Text)
riReservedInstancesId = lens _riReservedInstancesId (\ s a -> s{_riReservedInstancesId = a})

-- | The tenancy of the instance.
riInstanceTenancy :: Lens' ReservedInstances (Maybe Tenancy)
riInstanceTenancy = lens _riInstanceTenancy (\ s a -> s{_riInstanceTenancy = a})

-- | The offering class of the Reserved Instance.
riOfferingClass :: Lens' ReservedInstances (Maybe OfferingClassType)
riOfferingClass = lens _riOfferingClass (\ s a -> s{_riOfferingClass = a})

-- | The duration of the Reserved Instance, in seconds.
riDuration :: Lens' ReservedInstances (Maybe Integer)
riDuration = lens _riDuration (\ s a -> s{_riDuration = a})

-- | Any tags assigned to the resource.
riTags :: Lens' ReservedInstances [Tag]
riTags = lens _riTags (\ s a -> s{_riTags = a}) . _Default . _Coerce

instance FromXML ReservedInstances where
        parseXML x
          = ReservedInstances' <$>
              (x .@? "state") <*> (x .@? "currencyCode") <*>
                (x .@? "instanceCount")
                <*> (x .@? "productDescription")
                <*> (x .@? "start")
                <*> (x .@? "instanceType")
                <*> (x .@? "end")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "scope")
                <*>
                (x .@? "recurringCharges" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "offeringType")
                <*> (x .@? "usagePrice")
                <*> (x .@? "fixedPrice")
                <*> (x .@? "reservedInstancesId")
                <*> (x .@? "instanceTenancy")
                <*> (x .@? "offeringClass")
                <*> (x .@? "duration")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ReservedInstances where

instance NFData ReservedInstances where

-- | Describes the configuration settings for the modified Reserved Instances.
--
--
--
-- /See:/ 'reservedInstancesConfiguration' smart constructor.
data ReservedInstancesConfiguration = ReservedInstancesConfiguration'
  { _ricPlatform         :: !(Maybe Text)
  , _ricInstanceCount    :: !(Maybe Int)
  , _ricInstanceType     :: !(Maybe InstanceType)
  , _ricAvailabilityZone :: !(Maybe Text)
  , _ricScope            :: !(Maybe Scope)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservedInstancesConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ricPlatform' - The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.
--
-- * 'ricInstanceCount' - The number of modified Reserved Instances.
--
-- * 'ricInstanceType' - The instance type for the modified Reserved Instances.
--
-- * 'ricAvailabilityZone' - The Availability Zone for the modified Reserved Instances.
--
-- * 'ricScope' - Whether the Reserved Instance is applied to instances in a Region or instances in a specific Availability Zone.
reservedInstancesConfiguration
    :: ReservedInstancesConfiguration
reservedInstancesConfiguration =
  ReservedInstancesConfiguration'
    { _ricPlatform = Nothing
    , _ricInstanceCount = Nothing
    , _ricInstanceType = Nothing
    , _ricAvailabilityZone = Nothing
    , _ricScope = Nothing
    }


-- | The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.
ricPlatform :: Lens' ReservedInstancesConfiguration (Maybe Text)
ricPlatform = lens _ricPlatform (\ s a -> s{_ricPlatform = a})

-- | The number of modified Reserved Instances.
ricInstanceCount :: Lens' ReservedInstancesConfiguration (Maybe Int)
ricInstanceCount = lens _ricInstanceCount (\ s a -> s{_ricInstanceCount = a})

-- | The instance type for the modified Reserved Instances.
ricInstanceType :: Lens' ReservedInstancesConfiguration (Maybe InstanceType)
ricInstanceType = lens _ricInstanceType (\ s a -> s{_ricInstanceType = a})

-- | The Availability Zone for the modified Reserved Instances.
ricAvailabilityZone :: Lens' ReservedInstancesConfiguration (Maybe Text)
ricAvailabilityZone = lens _ricAvailabilityZone (\ s a -> s{_ricAvailabilityZone = a})

-- | Whether the Reserved Instance is applied to instances in a Region or instances in a specific Availability Zone.
ricScope :: Lens' ReservedInstancesConfiguration (Maybe Scope)
ricScope = lens _ricScope (\ s a -> s{_ricScope = a})

instance FromXML ReservedInstancesConfiguration where
        parseXML x
          = ReservedInstancesConfiguration' <$>
              (x .@? "platform") <*> (x .@? "instanceCount") <*>
                (x .@? "instanceType")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "scope")

instance Hashable ReservedInstancesConfiguration
         where

instance NFData ReservedInstancesConfiguration where

instance ToQuery ReservedInstancesConfiguration where
        toQuery ReservedInstancesConfiguration'{..}
          = mconcat
              ["Platform" =: _ricPlatform,
               "InstanceCount" =: _ricInstanceCount,
               "InstanceType" =: _ricInstanceType,
               "AvailabilityZone" =: _ricAvailabilityZone,
               "Scope" =: _ricScope]

-- | Describes the ID of a Reserved Instance.
--
--
--
-- /See:/ 'reservedInstancesId' smart constructor.
newtype ReservedInstancesId = ReservedInstancesId'
  { _riiReservedInstancesId :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservedInstancesId' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'riiReservedInstancesId' - The ID of the Reserved Instance.
reservedInstancesId
    :: ReservedInstancesId
reservedInstancesId = ReservedInstancesId' {_riiReservedInstancesId = Nothing}


-- | The ID of the Reserved Instance.
riiReservedInstancesId :: Lens' ReservedInstancesId (Maybe Text)
riiReservedInstancesId = lens _riiReservedInstancesId (\ s a -> s{_riiReservedInstancesId = a})

instance FromXML ReservedInstancesId where
        parseXML x
          = ReservedInstancesId' <$>
              (x .@? "reservedInstancesId")

instance Hashable ReservedInstancesId where

instance NFData ReservedInstancesId where

-- | Describes a Reserved Instance listing.
--
--
--
-- /See:/ 'reservedInstancesListing' smart constructor.
data ReservedInstancesListing = ReservedInstancesListing'
  { _rilStatus                     :: !(Maybe ListingStatus)
  , _rilClientToken                :: !(Maybe Text)
  , _rilUpdateDate                 :: !(Maybe ISO8601)
  , _rilCreateDate                 :: !(Maybe ISO8601)
  , _rilPriceSchedules             :: !(Maybe [PriceSchedule])
  , _rilStatusMessage              :: !(Maybe Text)
  , _rilReservedInstancesId        :: !(Maybe Text)
  , _rilTags                       :: !(Maybe [Tag])
  , _rilInstanceCounts             :: !(Maybe [InstanceCount])
  , _rilReservedInstancesListingId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservedInstancesListing' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rilStatus' - The status of the Reserved Instance listing.
--
-- * 'rilClientToken' - A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> .
--
-- * 'rilUpdateDate' - The last modified timestamp of the listing.
--
-- * 'rilCreateDate' - The time the listing was created.
--
-- * 'rilPriceSchedules' - The price of the Reserved Instance listing.
--
-- * 'rilStatusMessage' - The reason for the current status of the Reserved Instance listing. The response can be blank.
--
-- * 'rilReservedInstancesId' - The ID of the Reserved Instance.
--
-- * 'rilTags' - Any tags assigned to the resource.
--
-- * 'rilInstanceCounts' - The number of instances in this state.
--
-- * 'rilReservedInstancesListingId' - The ID of the Reserved Instance listing.
reservedInstancesListing
    :: ReservedInstancesListing
reservedInstancesListing =
  ReservedInstancesListing'
    { _rilStatus = Nothing
    , _rilClientToken = Nothing
    , _rilUpdateDate = Nothing
    , _rilCreateDate = Nothing
    , _rilPriceSchedules = Nothing
    , _rilStatusMessage = Nothing
    , _rilReservedInstancesId = Nothing
    , _rilTags = Nothing
    , _rilInstanceCounts = Nothing
    , _rilReservedInstancesListingId = Nothing
    }


-- | The status of the Reserved Instance listing.
rilStatus :: Lens' ReservedInstancesListing (Maybe ListingStatus)
rilStatus = lens _rilStatus (\ s a -> s{_rilStatus = a})

-- | A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> .
rilClientToken :: Lens' ReservedInstancesListing (Maybe Text)
rilClientToken = lens _rilClientToken (\ s a -> s{_rilClientToken = a})

-- | The last modified timestamp of the listing.
rilUpdateDate :: Lens' ReservedInstancesListing (Maybe UTCTime)
rilUpdateDate = lens _rilUpdateDate (\ s a -> s{_rilUpdateDate = a}) . mapping _Time

-- | The time the listing was created.
rilCreateDate :: Lens' ReservedInstancesListing (Maybe UTCTime)
rilCreateDate = lens _rilCreateDate (\ s a -> s{_rilCreateDate = a}) . mapping _Time

-- | The price of the Reserved Instance listing.
rilPriceSchedules :: Lens' ReservedInstancesListing [PriceSchedule]
rilPriceSchedules = lens _rilPriceSchedules (\ s a -> s{_rilPriceSchedules = a}) . _Default . _Coerce

-- | The reason for the current status of the Reserved Instance listing. The response can be blank.
rilStatusMessage :: Lens' ReservedInstancesListing (Maybe Text)
rilStatusMessage = lens _rilStatusMessage (\ s a -> s{_rilStatusMessage = a})

-- | The ID of the Reserved Instance.
rilReservedInstancesId :: Lens' ReservedInstancesListing (Maybe Text)
rilReservedInstancesId = lens _rilReservedInstancesId (\ s a -> s{_rilReservedInstancesId = a})

-- | Any tags assigned to the resource.
rilTags :: Lens' ReservedInstancesListing [Tag]
rilTags = lens _rilTags (\ s a -> s{_rilTags = a}) . _Default . _Coerce

-- | The number of instances in this state.
rilInstanceCounts :: Lens' ReservedInstancesListing [InstanceCount]
rilInstanceCounts = lens _rilInstanceCounts (\ s a -> s{_rilInstanceCounts = a}) . _Default . _Coerce

-- | The ID of the Reserved Instance listing.
rilReservedInstancesListingId :: Lens' ReservedInstancesListing (Maybe Text)
rilReservedInstancesListingId = lens _rilReservedInstancesListingId (\ s a -> s{_rilReservedInstancesListingId = a})

instance FromXML ReservedInstancesListing where
        parseXML x
          = ReservedInstancesListing' <$>
              (x .@? "status") <*> (x .@? "clientToken") <*>
                (x .@? "updateDate")
                <*> (x .@? "createDate")
                <*>
                (x .@? "priceSchedules" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "statusMessage")
                <*> (x .@? "reservedInstancesId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "instanceCounts" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "reservedInstancesListingId")

instance Hashable ReservedInstancesListing where

instance NFData ReservedInstancesListing where

-- | Describes a Reserved Instance modification.
--
--
--
-- /See:/ 'reservedInstancesModification' smart constructor.
data ReservedInstancesModification = ReservedInstancesModification'
  { _rimModificationResults :: !(Maybe [ReservedInstancesModificationResult])
  , _rimStatus :: !(Maybe Text)
  , _rimClientToken :: !(Maybe Text)
  , _rimUpdateDate :: !(Maybe ISO8601)
  , _rimCreateDate :: !(Maybe ISO8601)
  , _rimEffectiveDate :: !(Maybe ISO8601)
  , _rimStatusMessage :: !(Maybe Text)
  , _rimReservedInstancesModificationId :: !(Maybe Text)
  , _rimReservedInstancesIds :: !(Maybe [ReservedInstancesId])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservedInstancesModification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rimModificationResults' - Contains target configurations along with their corresponding new Reserved Instance IDs.
--
-- * 'rimStatus' - The status of the Reserved Instances modification request.
--
-- * 'rimClientToken' - A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> .
--
-- * 'rimUpdateDate' - The time when the modification request was last updated.
--
-- * 'rimCreateDate' - The time when the modification request was created.
--
-- * 'rimEffectiveDate' - The time for the modification to become effective.
--
-- * 'rimStatusMessage' - The reason for the status.
--
-- * 'rimReservedInstancesModificationId' - A unique ID for the Reserved Instance modification.
--
-- * 'rimReservedInstancesIds' - The IDs of one or more Reserved Instances.
reservedInstancesModification
    :: ReservedInstancesModification
reservedInstancesModification =
  ReservedInstancesModification'
    { _rimModificationResults = Nothing
    , _rimStatus = Nothing
    , _rimClientToken = Nothing
    , _rimUpdateDate = Nothing
    , _rimCreateDate = Nothing
    , _rimEffectiveDate = Nothing
    , _rimStatusMessage = Nothing
    , _rimReservedInstancesModificationId = Nothing
    , _rimReservedInstancesIds = Nothing
    }


-- | Contains target configurations along with their corresponding new Reserved Instance IDs.
rimModificationResults :: Lens' ReservedInstancesModification [ReservedInstancesModificationResult]
rimModificationResults = lens _rimModificationResults (\ s a -> s{_rimModificationResults = a}) . _Default . _Coerce

-- | The status of the Reserved Instances modification request.
rimStatus :: Lens' ReservedInstancesModification (Maybe Text)
rimStatus = lens _rimStatus (\ s a -> s{_rimStatus = a})

-- | A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> .
rimClientToken :: Lens' ReservedInstancesModification (Maybe Text)
rimClientToken = lens _rimClientToken (\ s a -> s{_rimClientToken = a})

-- | The time when the modification request was last updated.
rimUpdateDate :: Lens' ReservedInstancesModification (Maybe UTCTime)
rimUpdateDate = lens _rimUpdateDate (\ s a -> s{_rimUpdateDate = a}) . mapping _Time

-- | The time when the modification request was created.
rimCreateDate :: Lens' ReservedInstancesModification (Maybe UTCTime)
rimCreateDate = lens _rimCreateDate (\ s a -> s{_rimCreateDate = a}) . mapping _Time

-- | The time for the modification to become effective.
rimEffectiveDate :: Lens' ReservedInstancesModification (Maybe UTCTime)
rimEffectiveDate = lens _rimEffectiveDate (\ s a -> s{_rimEffectiveDate = a}) . mapping _Time

-- | The reason for the status.
rimStatusMessage :: Lens' ReservedInstancesModification (Maybe Text)
rimStatusMessage = lens _rimStatusMessage (\ s a -> s{_rimStatusMessage = a})

-- | A unique ID for the Reserved Instance modification.
rimReservedInstancesModificationId :: Lens' ReservedInstancesModification (Maybe Text)
rimReservedInstancesModificationId = lens _rimReservedInstancesModificationId (\ s a -> s{_rimReservedInstancesModificationId = a})

-- | The IDs of one or more Reserved Instances.
rimReservedInstancesIds :: Lens' ReservedInstancesModification [ReservedInstancesId]
rimReservedInstancesIds = lens _rimReservedInstancesIds (\ s a -> s{_rimReservedInstancesIds = a}) . _Default . _Coerce

instance FromXML ReservedInstancesModification where
        parseXML x
          = ReservedInstancesModification' <$>
              (x .@? "modificationResultSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "status")
                <*> (x .@? "clientToken")
                <*> (x .@? "updateDate")
                <*> (x .@? "createDate")
                <*> (x .@? "effectiveDate")
                <*> (x .@? "statusMessage")
                <*> (x .@? "reservedInstancesModificationId")
                <*>
                (x .@? "reservedInstancesSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ReservedInstancesModification where

instance NFData ReservedInstancesModification where

-- | Describes the modification request/s.
--
--
--
-- /See:/ 'reservedInstancesModificationResult' smart constructor.
data ReservedInstancesModificationResult = ReservedInstancesModificationResult'
  { _rimrReservedInstancesId :: !(Maybe Text)
  , _rimrTargetConfiguration :: !(Maybe ReservedInstancesConfiguration)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservedInstancesModificationResult' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rimrReservedInstancesId' - The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.
--
-- * 'rimrTargetConfiguration' - The target Reserved Instances configurations supplied as part of the modification request.
reservedInstancesModificationResult
    :: ReservedInstancesModificationResult
reservedInstancesModificationResult =
  ReservedInstancesModificationResult'
    {_rimrReservedInstancesId = Nothing, _rimrTargetConfiguration = Nothing}


-- | The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.
rimrReservedInstancesId :: Lens' ReservedInstancesModificationResult (Maybe Text)
rimrReservedInstancesId = lens _rimrReservedInstancesId (\ s a -> s{_rimrReservedInstancesId = a})

-- | The target Reserved Instances configurations supplied as part of the modification request.
rimrTargetConfiguration :: Lens' ReservedInstancesModificationResult (Maybe ReservedInstancesConfiguration)
rimrTargetConfiguration = lens _rimrTargetConfiguration (\ s a -> s{_rimrTargetConfiguration = a})

instance FromXML ReservedInstancesModificationResult
         where
        parseXML x
          = ReservedInstancesModificationResult' <$>
              (x .@? "reservedInstancesId") <*>
                (x .@? "targetConfiguration")

instance Hashable ReservedInstancesModificationResult
         where

instance NFData ReservedInstancesModificationResult
         where

-- | Describes a Reserved Instance offering.
--
--
--
-- /See:/ 'reservedInstancesOffering' smart constructor.
data ReservedInstancesOffering = ReservedInstancesOffering'
  { _rioMarketplace                 :: !(Maybe Bool)
  , _rioCurrencyCode                :: !(Maybe CurrencyCodeValues)
  , _rioProductDescription          :: !(Maybe RIProductDescription)
  , _rioInstanceType                :: !(Maybe InstanceType)
  , _rioAvailabilityZone            :: !(Maybe Text)
  , _rioPricingDetails              :: !(Maybe [PricingDetail])
  , _rioScope                       :: !(Maybe Scope)
  , _rioRecurringCharges            :: !(Maybe [RecurringCharge])
  , _rioOfferingType                :: !(Maybe OfferingTypeValues)
  , _rioUsagePrice                  :: !(Maybe Double)
  , _rioFixedPrice                  :: !(Maybe Double)
  , _rioInstanceTenancy             :: !(Maybe Tenancy)
  , _rioReservedInstancesOfferingId :: !(Maybe Text)
  , _rioOfferingClass               :: !(Maybe OfferingClassType)
  , _rioDuration                    :: !(Maybe Integer)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ReservedInstancesOffering' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rioMarketplace' - Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering, this is @true@ .
--
-- * 'rioCurrencyCode' - The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is @USD@ .
--
-- * 'rioProductDescription' - The Reserved Instance product platform description.
--
-- * 'rioInstanceType' - The instance type on which the Reserved Instance can be used.
--
-- * 'rioAvailabilityZone' - The Availability Zone in which the Reserved Instance can be used.
--
-- * 'rioPricingDetails' - The pricing details of the Reserved Instance offering.
--
-- * 'rioScope' - Whether the Reserved Instance is applied to instances in a Region or an Availability Zone.
--
-- * 'rioRecurringCharges' - The recurring charge tag assigned to the resource.
--
-- * 'rioOfferingType' - The Reserved Instance offering type.
--
-- * 'rioUsagePrice' - The usage price of the Reserved Instance, per hour.
--
-- * 'rioFixedPrice' - The purchase price of the Reserved Instance.
--
-- * 'rioInstanceTenancy' - The tenancy of the instance.
--
-- * 'rioReservedInstancesOfferingId' - The ID of the Reserved Instance offering. This is the offering ID used in 'GetReservedInstancesExchangeQuote' to confirm that an exchange can be made.
--
-- * 'rioOfferingClass' - If @convertible@ it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If @standard@ , it is not possible to perform an exchange.
--
-- * 'rioDuration' - The duration of the Reserved Instance, in seconds.
reservedInstancesOffering
    :: ReservedInstancesOffering
reservedInstancesOffering =
  ReservedInstancesOffering'
    { _rioMarketplace = Nothing
    , _rioCurrencyCode = Nothing
    , _rioProductDescription = Nothing
    , _rioInstanceType = Nothing
    , _rioAvailabilityZone = Nothing
    , _rioPricingDetails = Nothing
    , _rioScope = Nothing
    , _rioRecurringCharges = Nothing
    , _rioOfferingType = Nothing
    , _rioUsagePrice = Nothing
    , _rioFixedPrice = Nothing
    , _rioInstanceTenancy = Nothing
    , _rioReservedInstancesOfferingId = Nothing
    , _rioOfferingClass = Nothing
    , _rioDuration = Nothing
    }


-- | Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering, this is @true@ .
rioMarketplace :: Lens' ReservedInstancesOffering (Maybe Bool)
rioMarketplace = lens _rioMarketplace (\ s a -> s{_rioMarketplace = a})

-- | The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is @USD@ .
rioCurrencyCode :: Lens' ReservedInstancesOffering (Maybe CurrencyCodeValues)
rioCurrencyCode = lens _rioCurrencyCode (\ s a -> s{_rioCurrencyCode = a})

-- | The Reserved Instance product platform description.
rioProductDescription :: Lens' ReservedInstancesOffering (Maybe RIProductDescription)
rioProductDescription = lens _rioProductDescription (\ s a -> s{_rioProductDescription = a})

-- | The instance type on which the Reserved Instance can be used.
rioInstanceType :: Lens' ReservedInstancesOffering (Maybe InstanceType)
rioInstanceType = lens _rioInstanceType (\ s a -> s{_rioInstanceType = a})

-- | The Availability Zone in which the Reserved Instance can be used.
rioAvailabilityZone :: Lens' ReservedInstancesOffering (Maybe Text)
rioAvailabilityZone = lens _rioAvailabilityZone (\ s a -> s{_rioAvailabilityZone = a})

-- | The pricing details of the Reserved Instance offering.
rioPricingDetails :: Lens' ReservedInstancesOffering [PricingDetail]
rioPricingDetails = lens _rioPricingDetails (\ s a -> s{_rioPricingDetails = a}) . _Default . _Coerce

-- | Whether the Reserved Instance is applied to instances in a Region or an Availability Zone.
rioScope :: Lens' ReservedInstancesOffering (Maybe Scope)
rioScope = lens _rioScope (\ s a -> s{_rioScope = a})

-- | The recurring charge tag assigned to the resource.
rioRecurringCharges :: Lens' ReservedInstancesOffering [RecurringCharge]
rioRecurringCharges = lens _rioRecurringCharges (\ s a -> s{_rioRecurringCharges = a}) . _Default . _Coerce

-- | The Reserved Instance offering type.
rioOfferingType :: Lens' ReservedInstancesOffering (Maybe OfferingTypeValues)
rioOfferingType = lens _rioOfferingType (\ s a -> s{_rioOfferingType = a})

-- | The usage price of the Reserved Instance, per hour.
rioUsagePrice :: Lens' ReservedInstancesOffering (Maybe Double)
rioUsagePrice = lens _rioUsagePrice (\ s a -> s{_rioUsagePrice = a})

-- | The purchase price of the Reserved Instance.
rioFixedPrice :: Lens' ReservedInstancesOffering (Maybe Double)
rioFixedPrice = lens _rioFixedPrice (\ s a -> s{_rioFixedPrice = a})

-- | The tenancy of the instance.
rioInstanceTenancy :: Lens' ReservedInstancesOffering (Maybe Tenancy)
rioInstanceTenancy = lens _rioInstanceTenancy (\ s a -> s{_rioInstanceTenancy = a})

-- | The ID of the Reserved Instance offering. This is the offering ID used in 'GetReservedInstancesExchangeQuote' to confirm that an exchange can be made.
rioReservedInstancesOfferingId :: Lens' ReservedInstancesOffering (Maybe Text)
rioReservedInstancesOfferingId = lens _rioReservedInstancesOfferingId (\ s a -> s{_rioReservedInstancesOfferingId = a})

-- | If @convertible@ it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If @standard@ , it is not possible to perform an exchange.
rioOfferingClass :: Lens' ReservedInstancesOffering (Maybe OfferingClassType)
rioOfferingClass = lens _rioOfferingClass (\ s a -> s{_rioOfferingClass = a})

-- | The duration of the Reserved Instance, in seconds.
rioDuration :: Lens' ReservedInstancesOffering (Maybe Integer)
rioDuration = lens _rioDuration (\ s a -> s{_rioDuration = a})

instance FromXML ReservedInstancesOffering where
        parseXML x
          = ReservedInstancesOffering' <$>
              (x .@? "marketplace") <*> (x .@? "currencyCode") <*>
                (x .@? "productDescription")
                <*> (x .@? "instanceType")
                <*> (x .@? "availabilityZone")
                <*>
                (x .@? "pricingDetailsSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "scope")
                <*>
                (x .@? "recurringCharges" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "offeringType")
                <*> (x .@? "usagePrice")
                <*> (x .@? "fixedPrice")
                <*> (x .@? "instanceTenancy")
                <*> (x .@? "reservedInstancesOfferingId")
                <*> (x .@? "offeringClass")
                <*> (x .@? "duration")

instance Hashable ReservedInstancesOffering where

instance NFData ReservedInstancesOffering where

-- | Describes the error that's returned when you cannot delete a launch template version.
--
--
--
-- /See:/ 'responseError' smart constructor.
data ResponseError = ResponseError'
  { _reCode    :: !(Maybe LaunchTemplateErrorCode)
  , _reMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ResponseError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'reCode' - The error code.
--
-- * 'reMessage' - The error message, if applicable.
responseError
    :: ResponseError
responseError = ResponseError' {_reCode = Nothing, _reMessage = Nothing}


-- | The error code.
reCode :: Lens' ResponseError (Maybe LaunchTemplateErrorCode)
reCode = lens _reCode (\ s a -> s{_reCode = a})

-- | The error message, if applicable.
reMessage :: Lens' ResponseError (Maybe Text)
reMessage = lens _reMessage (\ s a -> s{_reMessage = a})

instance FromXML ResponseError where
        parseXML x
          = ResponseError' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable ResponseError where

instance NFData ResponseError where

-- | The information for a launch template.
--
--
--
-- /See:/ 'responseLaunchTemplateData' smart constructor.
data ResponseLaunchTemplateData = ResponseLaunchTemplateData'
  { _rSecurityGroupIds :: !(Maybe [Text])
  , _rSecurityGroups :: !(Maybe [Text])
  , _rElasticInferenceAccelerators :: !(Maybe [LaunchTemplateElasticInferenceAcceleratorResponse])
  , _rInstanceMarketOptions :: !(Maybe LaunchTemplateInstanceMarketOptions)
  , _rLicenseSpecifications :: !(Maybe [LaunchTemplateLicenseConfiguration])
  , _rDisableAPITermination :: !(Maybe Bool)
  , _rKeyName :: !(Maybe Text)
  , _rNetworkInterfaces :: !(Maybe [LaunchTemplateInstanceNetworkInterfaceSpecification])
  , _rEnclaveOptions :: !(Maybe LaunchTemplateEnclaveOptions)
  , _rCPUOptions :: !(Maybe LaunchTemplateCPUOptions)
  , _rRamDiskId :: !(Maybe Text)
  , _rKernelId :: !(Maybe Text)
  , _rElasticGpuSpecifications :: !(Maybe [ElasticGpuSpecificationResponse])
  , _rInstanceType :: !(Maybe InstanceType)
  , _rCapacityReservationSpecification :: !(Maybe LaunchTemplateCapacityReservationSpecificationResponse)
  , _rEBSOptimized :: !(Maybe Bool)
  , _rUserData :: !(Maybe Text)
  , _rMonitoring :: !(Maybe LaunchTemplatesMonitoring)
  , _rTagSpecifications :: !(Maybe [LaunchTemplateTagSpecification])
  , _rHibernationOptions :: !(Maybe LaunchTemplateHibernationOptions)
  , _rIAMInstanceProfile :: !(Maybe LaunchTemplateIAMInstanceProfileSpecification)
  , _rImageId :: !(Maybe Text)
  , _rInstanceInitiatedShutdownBehavior :: !(Maybe ShutdownBehavior)
  , _rMetadataOptions :: !(Maybe LaunchTemplateInstanceMetadataOptions)
  , _rCreditSpecification :: !(Maybe CreditSpecification)
  , _rBlockDeviceMappings :: !(Maybe [LaunchTemplateBlockDeviceMapping])
  , _rPlacement :: !(Maybe LaunchTemplatePlacement)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ResponseLaunchTemplateData' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rSecurityGroupIds' - The security group IDs.
--
-- * 'rSecurityGroups' - The security group names.
--
-- * 'rElasticInferenceAccelerators' - The elastic inference accelerator for the instance.
--
-- * 'rInstanceMarketOptions' - The market (purchasing) option for the instances.
--
-- * 'rLicenseSpecifications' - The license configurations.
--
-- * 'rDisableAPITermination' - If set to @true@ , indicates that the instance cannot be terminated using the Amazon EC2 console, command line tool, or API.
--
-- * 'rKeyName' - The name of the key pair.
--
-- * 'rNetworkInterfaces' - The network interfaces.
--
-- * 'rEnclaveOptions' - Indicates whether the instance is enabled for AWS Nitro Enclaves.
--
-- * 'rCPUOptions' - The CPU options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html Optimizing CPU Options> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'rRamDiskId' - The ID of the RAM disk, if applicable.
--
-- * 'rKernelId' - The ID of the kernel, if applicable.
--
-- * 'rElasticGpuSpecifications' - The elastic GPU specification.
--
-- * 'rInstanceType' - The instance type.
--
-- * 'rCapacityReservationSpecification' - Information about the Capacity Reservation targeting option.
--
-- * 'rEBSOptimized' - Indicates whether the instance is optimized for Amazon EBS I/O.
--
-- * 'rUserData' - The user data for the instance.
--
-- * 'rMonitoring' - The monitoring for the instance.
--
-- * 'rTagSpecifications' - The tags.
--
-- * 'rHibernationOptions' - Indicates whether an instance is configured for hibernation. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html Hibernate Your Instance> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'rIAMInstanceProfile' - The IAM instance profile.
--
-- * 'rImageId' - The ID of the AMI that was used to launch the instance.
--
-- * 'rInstanceInitiatedShutdownBehavior' - Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
--
-- * 'rMetadataOptions' - The metadata options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html Instance Metadata and User Data> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'rCreditSpecification' - The credit option for CPU usage of the instance.
--
-- * 'rBlockDeviceMappings' - The block device mappings.
--
-- * 'rPlacement' - The placement of the instance.
responseLaunchTemplateData
    :: ResponseLaunchTemplateData
responseLaunchTemplateData =
  ResponseLaunchTemplateData'
    { _rSecurityGroupIds = Nothing
    , _rSecurityGroups = Nothing
    , _rElasticInferenceAccelerators = Nothing
    , _rInstanceMarketOptions = Nothing
    , _rLicenseSpecifications = Nothing
    , _rDisableAPITermination = Nothing
    , _rKeyName = Nothing
    , _rNetworkInterfaces = Nothing
    , _rEnclaveOptions = Nothing
    , _rCPUOptions = Nothing
    , _rRamDiskId = Nothing
    , _rKernelId = Nothing
    , _rElasticGpuSpecifications = Nothing
    , _rInstanceType = Nothing
    , _rCapacityReservationSpecification = Nothing
    , _rEBSOptimized = Nothing
    , _rUserData = Nothing
    , _rMonitoring = Nothing
    , _rTagSpecifications = Nothing
    , _rHibernationOptions = Nothing
    , _rIAMInstanceProfile = Nothing
    , _rImageId = Nothing
    , _rInstanceInitiatedShutdownBehavior = Nothing
    , _rMetadataOptions = Nothing
    , _rCreditSpecification = Nothing
    , _rBlockDeviceMappings = Nothing
    , _rPlacement = Nothing
    }


-- | The security group IDs.
rSecurityGroupIds :: Lens' ResponseLaunchTemplateData [Text]
rSecurityGroupIds = lens _rSecurityGroupIds (\ s a -> s{_rSecurityGroupIds = a}) . _Default . _Coerce

-- | The security group names.
rSecurityGroups :: Lens' ResponseLaunchTemplateData [Text]
rSecurityGroups = lens _rSecurityGroups (\ s a -> s{_rSecurityGroups = a}) . _Default . _Coerce

-- | The elastic inference accelerator for the instance.
rElasticInferenceAccelerators :: Lens' ResponseLaunchTemplateData [LaunchTemplateElasticInferenceAcceleratorResponse]
rElasticInferenceAccelerators = lens _rElasticInferenceAccelerators (\ s a -> s{_rElasticInferenceAccelerators = a}) . _Default . _Coerce

-- | The market (purchasing) option for the instances.
rInstanceMarketOptions :: Lens' ResponseLaunchTemplateData (Maybe LaunchTemplateInstanceMarketOptions)
rInstanceMarketOptions = lens _rInstanceMarketOptions (\ s a -> s{_rInstanceMarketOptions = a})

-- | The license configurations.
rLicenseSpecifications :: Lens' ResponseLaunchTemplateData [LaunchTemplateLicenseConfiguration]
rLicenseSpecifications = lens _rLicenseSpecifications (\ s a -> s{_rLicenseSpecifications = a}) . _Default . _Coerce

-- | If set to @true@ , indicates that the instance cannot be terminated using the Amazon EC2 console, command line tool, or API.
rDisableAPITermination :: Lens' ResponseLaunchTemplateData (Maybe Bool)
rDisableAPITermination = lens _rDisableAPITermination (\ s a -> s{_rDisableAPITermination = a})

-- | The name of the key pair.
rKeyName :: Lens' ResponseLaunchTemplateData (Maybe Text)
rKeyName = lens _rKeyName (\ s a -> s{_rKeyName = a})

-- | The network interfaces.
rNetworkInterfaces :: Lens' ResponseLaunchTemplateData [LaunchTemplateInstanceNetworkInterfaceSpecification]
rNetworkInterfaces = lens _rNetworkInterfaces (\ s a -> s{_rNetworkInterfaces = a}) . _Default . _Coerce

-- | Indicates whether the instance is enabled for AWS Nitro Enclaves.
rEnclaveOptions :: Lens' ResponseLaunchTemplateData (Maybe LaunchTemplateEnclaveOptions)
rEnclaveOptions = lens _rEnclaveOptions (\ s a -> s{_rEnclaveOptions = a})

-- | The CPU options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html Optimizing CPU Options> in the /Amazon Elastic Compute Cloud User Guide/ .
rCPUOptions :: Lens' ResponseLaunchTemplateData (Maybe LaunchTemplateCPUOptions)
rCPUOptions = lens _rCPUOptions (\ s a -> s{_rCPUOptions = a})

-- | The ID of the RAM disk, if applicable.
rRamDiskId :: Lens' ResponseLaunchTemplateData (Maybe Text)
rRamDiskId = lens _rRamDiskId (\ s a -> s{_rRamDiskId = a})

-- | The ID of the kernel, if applicable.
rKernelId :: Lens' ResponseLaunchTemplateData (Maybe Text)
rKernelId = lens _rKernelId (\ s a -> s{_rKernelId = a})

-- | The elastic GPU specification.
rElasticGpuSpecifications :: Lens' ResponseLaunchTemplateData [ElasticGpuSpecificationResponse]
rElasticGpuSpecifications = lens _rElasticGpuSpecifications (\ s a -> s{_rElasticGpuSpecifications = a}) . _Default . _Coerce

-- | The instance type.
rInstanceType :: Lens' ResponseLaunchTemplateData (Maybe InstanceType)
rInstanceType = lens _rInstanceType (\ s a -> s{_rInstanceType = a})

-- | Information about the Capacity Reservation targeting option.
rCapacityReservationSpecification :: Lens' ResponseLaunchTemplateData (Maybe LaunchTemplateCapacityReservationSpecificationResponse)
rCapacityReservationSpecification = lens _rCapacityReservationSpecification (\ s a -> s{_rCapacityReservationSpecification = a})

-- | Indicates whether the instance is optimized for Amazon EBS I/O.
rEBSOptimized :: Lens' ResponseLaunchTemplateData (Maybe Bool)
rEBSOptimized = lens _rEBSOptimized (\ s a -> s{_rEBSOptimized = a})

-- | The user data for the instance.
rUserData :: Lens' ResponseLaunchTemplateData (Maybe Text)
rUserData = lens _rUserData (\ s a -> s{_rUserData = a})

-- | The monitoring for the instance.
rMonitoring :: Lens' ResponseLaunchTemplateData (Maybe LaunchTemplatesMonitoring)
rMonitoring = lens _rMonitoring (\ s a -> s{_rMonitoring = a})

-- | The tags.
rTagSpecifications :: Lens' ResponseLaunchTemplateData [LaunchTemplateTagSpecification]
rTagSpecifications = lens _rTagSpecifications (\ s a -> s{_rTagSpecifications = a}) . _Default . _Coerce

-- | Indicates whether an instance is configured for hibernation. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html Hibernate Your Instance> in the /Amazon Elastic Compute Cloud User Guide/ .
rHibernationOptions :: Lens' ResponseLaunchTemplateData (Maybe LaunchTemplateHibernationOptions)
rHibernationOptions = lens _rHibernationOptions (\ s a -> s{_rHibernationOptions = a})

-- | The IAM instance profile.
rIAMInstanceProfile :: Lens' ResponseLaunchTemplateData (Maybe LaunchTemplateIAMInstanceProfileSpecification)
rIAMInstanceProfile = lens _rIAMInstanceProfile (\ s a -> s{_rIAMInstanceProfile = a})

-- | The ID of the AMI that was used to launch the instance.
rImageId :: Lens' ResponseLaunchTemplateData (Maybe Text)
rImageId = lens _rImageId (\ s a -> s{_rImageId = a})

-- | Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
rInstanceInitiatedShutdownBehavior :: Lens' ResponseLaunchTemplateData (Maybe ShutdownBehavior)
rInstanceInitiatedShutdownBehavior = lens _rInstanceInitiatedShutdownBehavior (\ s a -> s{_rInstanceInitiatedShutdownBehavior = a})

-- | The metadata options for the instance. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html Instance Metadata and User Data> in the /Amazon Elastic Compute Cloud User Guide/ .
rMetadataOptions :: Lens' ResponseLaunchTemplateData (Maybe LaunchTemplateInstanceMetadataOptions)
rMetadataOptions = lens _rMetadataOptions (\ s a -> s{_rMetadataOptions = a})

-- | The credit option for CPU usage of the instance.
rCreditSpecification :: Lens' ResponseLaunchTemplateData (Maybe CreditSpecification)
rCreditSpecification = lens _rCreditSpecification (\ s a -> s{_rCreditSpecification = a})

-- | The block device mappings.
rBlockDeviceMappings :: Lens' ResponseLaunchTemplateData [LaunchTemplateBlockDeviceMapping]
rBlockDeviceMappings = lens _rBlockDeviceMappings (\ s a -> s{_rBlockDeviceMappings = a}) . _Default . _Coerce

-- | The placement of the instance.
rPlacement :: Lens' ResponseLaunchTemplateData (Maybe LaunchTemplatePlacement)
rPlacement = lens _rPlacement (\ s a -> s{_rPlacement = a})

instance FromXML ResponseLaunchTemplateData where
        parseXML x
          = ResponseLaunchTemplateData' <$>
              (x .@? "securityGroupIdSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*>
                (x .@? "securityGroupSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "elasticInferenceAcceleratorSet" .!@ mempty
                   >>= may (parseXMLList "item"))
                <*> (x .@? "instanceMarketOptions")
                <*>
                (x .@? "licenseSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "disableApiTermination")
                <*> (x .@? "keyName")
                <*>
                (x .@? "networkInterfaceSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "enclaveOptions")
                <*> (x .@? "cpuOptions")
                <*> (x .@? "ramDiskId")
                <*> (x .@? "kernelId")
                <*>
                (x .@? "elasticGpuSpecificationSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "instanceType")
                <*> (x .@? "capacityReservationSpecification")
                <*> (x .@? "ebsOptimized")
                <*> (x .@? "userData")
                <*> (x .@? "monitoring")
                <*>
                (x .@? "tagSpecificationSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "hibernationOptions")
                <*> (x .@? "iamInstanceProfile")
                <*> (x .@? "imageId")
                <*> (x .@? "instanceInitiatedShutdownBehavior")
                <*> (x .@? "metadataOptions")
                <*> (x .@? "creditSpecification")
                <*>
                (x .@? "blockDeviceMappingSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "placement")

instance Hashable ResponseLaunchTemplateData where

instance NFData ResponseLaunchTemplateData where

-- | Describes a route in a route table.
--
--
--
-- /See:/ 'route' smart constructor.
data Route = Route'
  { _rVPCPeeringConnectionId      :: !(Maybe Text)
  , _rInstanceId                  :: !(Maybe Text)
  , _rOrigin                      :: !(Maybe RouteOrigin)
  , _rState                       :: !(Maybe RouteState)
  , _rEgressOnlyInternetGatewayId :: !(Maybe Text)
  , _rDestinationIPv6CidrBlock    :: !(Maybe Text)
  , _rLocalGatewayId              :: !(Maybe Text)
  , _rNatGatewayId                :: !(Maybe Text)
  , _rNetworkInterfaceId          :: !(Maybe Text)
  , _rTransitGatewayId            :: !(Maybe Text)
  , _rGatewayId                   :: !(Maybe Text)
  , _rInstanceOwnerId             :: !(Maybe Text)
  , _rDestinationPrefixListId     :: !(Maybe Text)
  , _rCarrierGatewayId            :: !(Maybe Text)
  , _rDestinationCidrBlock        :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Route' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rVPCPeeringConnectionId' - The ID of a VPC peering connection.
--
-- * 'rInstanceId' - The ID of a NAT instance in your VPC.
--
-- * 'rOrigin' - Describes how the route was created.     * @CreateRouteTable@ - The route was automatically created when the route table was created.     * @CreateRoute@ - The route was manually added to the route table.     * @EnableVgwRoutePropagation@ - The route was propagated by route propagation.
--
-- * 'rState' - The state of the route. The @blackhole@ state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
--
-- * 'rEgressOnlyInternetGatewayId' - The ID of the egress-only internet gateway.
--
-- * 'rDestinationIPv6CidrBlock' - The IPv6 CIDR block used for the destination match.
--
-- * 'rLocalGatewayId' - The ID of the local gateway.
--
-- * 'rNatGatewayId' - The ID of a NAT gateway.
--
-- * 'rNetworkInterfaceId' - The ID of the network interface.
--
-- * 'rTransitGatewayId' - The ID of a transit gateway.
--
-- * 'rGatewayId' - The ID of a gateway attached to your VPC.
--
-- * 'rInstanceOwnerId' - The AWS account ID of the owner of the instance.
--
-- * 'rDestinationPrefixListId' - The prefix of the AWS service.
--
-- * 'rCarrierGatewayId' - The ID of the carrier gateway.
--
-- * 'rDestinationCidrBlock' - The IPv4 CIDR block used for the destination match.
route
    :: Route
route =
  Route'
    { _rVPCPeeringConnectionId = Nothing
    , _rInstanceId = Nothing
    , _rOrigin = Nothing
    , _rState = Nothing
    , _rEgressOnlyInternetGatewayId = Nothing
    , _rDestinationIPv6CidrBlock = Nothing
    , _rLocalGatewayId = Nothing
    , _rNatGatewayId = Nothing
    , _rNetworkInterfaceId = Nothing
    , _rTransitGatewayId = Nothing
    , _rGatewayId = Nothing
    , _rInstanceOwnerId = Nothing
    , _rDestinationPrefixListId = Nothing
    , _rCarrierGatewayId = Nothing
    , _rDestinationCidrBlock = Nothing
    }


-- | The ID of a VPC peering connection.
rVPCPeeringConnectionId :: Lens' Route (Maybe Text)
rVPCPeeringConnectionId = lens _rVPCPeeringConnectionId (\ s a -> s{_rVPCPeeringConnectionId = a})

-- | The ID of a NAT instance in your VPC.
rInstanceId :: Lens' Route (Maybe Text)
rInstanceId = lens _rInstanceId (\ s a -> s{_rInstanceId = a})

-- | Describes how the route was created.     * @CreateRouteTable@ - The route was automatically created when the route table was created.     * @CreateRoute@ - The route was manually added to the route table.     * @EnableVgwRoutePropagation@ - The route was propagated by route propagation.
rOrigin :: Lens' Route (Maybe RouteOrigin)
rOrigin = lens _rOrigin (\ s a -> s{_rOrigin = a})

-- | The state of the route. The @blackhole@ state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
rState :: Lens' Route (Maybe RouteState)
rState = lens _rState (\ s a -> s{_rState = a})

-- | The ID of the egress-only internet gateway.
rEgressOnlyInternetGatewayId :: Lens' Route (Maybe Text)
rEgressOnlyInternetGatewayId = lens _rEgressOnlyInternetGatewayId (\ s a -> s{_rEgressOnlyInternetGatewayId = a})

-- | The IPv6 CIDR block used for the destination match.
rDestinationIPv6CidrBlock :: Lens' Route (Maybe Text)
rDestinationIPv6CidrBlock = lens _rDestinationIPv6CidrBlock (\ s a -> s{_rDestinationIPv6CidrBlock = a})

-- | The ID of the local gateway.
rLocalGatewayId :: Lens' Route (Maybe Text)
rLocalGatewayId = lens _rLocalGatewayId (\ s a -> s{_rLocalGatewayId = a})

-- | The ID of a NAT gateway.
rNatGatewayId :: Lens' Route (Maybe Text)
rNatGatewayId = lens _rNatGatewayId (\ s a -> s{_rNatGatewayId = a})

-- | The ID of the network interface.
rNetworkInterfaceId :: Lens' Route (Maybe Text)
rNetworkInterfaceId = lens _rNetworkInterfaceId (\ s a -> s{_rNetworkInterfaceId = a})

-- | The ID of a transit gateway.
rTransitGatewayId :: Lens' Route (Maybe Text)
rTransitGatewayId = lens _rTransitGatewayId (\ s a -> s{_rTransitGatewayId = a})

-- | The ID of a gateway attached to your VPC.
rGatewayId :: Lens' Route (Maybe Text)
rGatewayId = lens _rGatewayId (\ s a -> s{_rGatewayId = a})

-- | The AWS account ID of the owner of the instance.
rInstanceOwnerId :: Lens' Route (Maybe Text)
rInstanceOwnerId = lens _rInstanceOwnerId (\ s a -> s{_rInstanceOwnerId = a})

-- | The prefix of the AWS service.
rDestinationPrefixListId :: Lens' Route (Maybe Text)
rDestinationPrefixListId = lens _rDestinationPrefixListId (\ s a -> s{_rDestinationPrefixListId = a})

-- | The ID of the carrier gateway.
rCarrierGatewayId :: Lens' Route (Maybe Text)
rCarrierGatewayId = lens _rCarrierGatewayId (\ s a -> s{_rCarrierGatewayId = a})

-- | The IPv4 CIDR block used for the destination match.
rDestinationCidrBlock :: Lens' Route (Maybe Text)
rDestinationCidrBlock = lens _rDestinationCidrBlock (\ s a -> s{_rDestinationCidrBlock = a})

instance FromXML Route where
        parseXML x
          = Route' <$>
              (x .@? "vpcPeeringConnectionId") <*>
                (x .@? "instanceId")
                <*> (x .@? "origin")
                <*> (x .@? "state")
                <*> (x .@? "egressOnlyInternetGatewayId")
                <*> (x .@? "destinationIpv6CidrBlock")
                <*> (x .@? "localGatewayId")
                <*> (x .@? "natGatewayId")
                <*> (x .@? "networkInterfaceId")
                <*> (x .@? "transitGatewayId")
                <*> (x .@? "gatewayId")
                <*> (x .@? "instanceOwnerId")
                <*> (x .@? "destinationPrefixListId")
                <*> (x .@? "carrierGatewayId")
                <*> (x .@? "destinationCidrBlock")

instance Hashable Route where

instance NFData Route where

-- | Describes a route table.
--
--
--
-- /See:/ 'routeTable' smart constructor.
data RouteTable = RouteTable'
  { _rtRouteTableId    :: !(Maybe Text)
  , _rtRoutes          :: !(Maybe [Route])
  , _rtVPCId           :: !(Maybe Text)
  , _rtPropagatingVGWs :: !(Maybe [PropagatingVGW])
  , _rtOwnerId         :: !(Maybe Text)
  , _rtAssociations    :: !(Maybe [RouteTableAssociation])
  , _rtTags            :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RouteTable' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rtRouteTableId' - The ID of the route table.
--
-- * 'rtRoutes' - The routes in the route table.
--
-- * 'rtVPCId' - The ID of the VPC.
--
-- * 'rtPropagatingVGWs' - Any virtual private gateway (VGW) propagating routes.
--
-- * 'rtOwnerId' - The ID of the AWS account that owns the route table.
--
-- * 'rtAssociations' - The associations between the route table and one or more subnets or a gateway.
--
-- * 'rtTags' - Any tags assigned to the route table.
routeTable
    :: RouteTable
routeTable =
  RouteTable'
    { _rtRouteTableId = Nothing
    , _rtRoutes = Nothing
    , _rtVPCId = Nothing
    , _rtPropagatingVGWs = Nothing
    , _rtOwnerId = Nothing
    , _rtAssociations = Nothing
    , _rtTags = Nothing
    }


-- | The ID of the route table.
rtRouteTableId :: Lens' RouteTable (Maybe Text)
rtRouteTableId = lens _rtRouteTableId (\ s a -> s{_rtRouteTableId = a})

-- | The routes in the route table.
rtRoutes :: Lens' RouteTable [Route]
rtRoutes = lens _rtRoutes (\ s a -> s{_rtRoutes = a}) . _Default . _Coerce

-- | The ID of the VPC.
rtVPCId :: Lens' RouteTable (Maybe Text)
rtVPCId = lens _rtVPCId (\ s a -> s{_rtVPCId = a})

-- | Any virtual private gateway (VGW) propagating routes.
rtPropagatingVGWs :: Lens' RouteTable [PropagatingVGW]
rtPropagatingVGWs = lens _rtPropagatingVGWs (\ s a -> s{_rtPropagatingVGWs = a}) . _Default . _Coerce

-- | The ID of the AWS account that owns the route table.
rtOwnerId :: Lens' RouteTable (Maybe Text)
rtOwnerId = lens _rtOwnerId (\ s a -> s{_rtOwnerId = a})

-- | The associations between the route table and one or more subnets or a gateway.
rtAssociations :: Lens' RouteTable [RouteTableAssociation]
rtAssociations = lens _rtAssociations (\ s a -> s{_rtAssociations = a}) . _Default . _Coerce

-- | Any tags assigned to the route table.
rtTags :: Lens' RouteTable [Tag]
rtTags = lens _rtTags (\ s a -> s{_rtTags = a}) . _Default . _Coerce

instance FromXML RouteTable where
        parseXML x
          = RouteTable' <$>
              (x .@? "routeTableId") <*>
                (x .@? "routeSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpcId")
                <*>
                (x .@? "propagatingVgwSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "ownerId")
                <*>
                (x .@? "associationSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable RouteTable where

instance NFData RouteTable where

-- | Describes an association between a route table and a subnet or gateway.
--
--
--
-- /See:/ 'routeTableAssociation' smart constructor.
data RouteTableAssociation = RouteTableAssociation'
  { _rtaRouteTableId            :: !(Maybe Text)
  , _rtaRouteTableAssociationId :: !(Maybe Text)
  , _rtaMain                    :: !(Maybe Bool)
  , _rtaSubnetId                :: !(Maybe Text)
  , _rtaGatewayId               :: !(Maybe Text)
  , _rtaAssociationState        :: !(Maybe RouteTableAssociationState)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RouteTableAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rtaRouteTableId' - The ID of the route table.
--
-- * 'rtaRouteTableAssociationId' - The ID of the association.
--
-- * 'rtaMain' - Indicates whether this is the main route table.
--
-- * 'rtaSubnetId' - The ID of the subnet. A subnet ID is not returned for an implicit association.
--
-- * 'rtaGatewayId' - The ID of the internet gateway or virtual private gateway.
--
-- * 'rtaAssociationState' - The state of the association.
routeTableAssociation
    :: RouteTableAssociation
routeTableAssociation =
  RouteTableAssociation'
    { _rtaRouteTableId = Nothing
    , _rtaRouteTableAssociationId = Nothing
    , _rtaMain = Nothing
    , _rtaSubnetId = Nothing
    , _rtaGatewayId = Nothing
    , _rtaAssociationState = Nothing
    }


-- | The ID of the route table.
rtaRouteTableId :: Lens' RouteTableAssociation (Maybe Text)
rtaRouteTableId = lens _rtaRouteTableId (\ s a -> s{_rtaRouteTableId = a})

-- | The ID of the association.
rtaRouteTableAssociationId :: Lens' RouteTableAssociation (Maybe Text)
rtaRouteTableAssociationId = lens _rtaRouteTableAssociationId (\ s a -> s{_rtaRouteTableAssociationId = a})

-- | Indicates whether this is the main route table.
rtaMain :: Lens' RouteTableAssociation (Maybe Bool)
rtaMain = lens _rtaMain (\ s a -> s{_rtaMain = a})

-- | The ID of the subnet. A subnet ID is not returned for an implicit association.
rtaSubnetId :: Lens' RouteTableAssociation (Maybe Text)
rtaSubnetId = lens _rtaSubnetId (\ s a -> s{_rtaSubnetId = a})

-- | The ID of the internet gateway or virtual private gateway.
rtaGatewayId :: Lens' RouteTableAssociation (Maybe Text)
rtaGatewayId = lens _rtaGatewayId (\ s a -> s{_rtaGatewayId = a})

-- | The state of the association.
rtaAssociationState :: Lens' RouteTableAssociation (Maybe RouteTableAssociationState)
rtaAssociationState = lens _rtaAssociationState (\ s a -> s{_rtaAssociationState = a})

instance FromXML RouteTableAssociation where
        parseXML x
          = RouteTableAssociation' <$>
              (x .@? "routeTableId") <*>
                (x .@? "routeTableAssociationId")
                <*> (x .@? "main")
                <*> (x .@? "subnetId")
                <*> (x .@? "gatewayId")
                <*> (x .@? "associationState")

instance Hashable RouteTableAssociation where

instance NFData RouteTableAssociation where

-- | Describes the state of an association between a route table and a subnet or gateway.
--
--
--
-- /See:/ 'routeTableAssociationState' smart constructor.
data RouteTableAssociationState = RouteTableAssociationState'
  { _rtasState         :: !(Maybe RouteTableAssociationStateCode)
  , _rtasStatusMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RouteTableAssociationState' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rtasState' - The state of the association.
--
-- * 'rtasStatusMessage' - The status message, if applicable.
routeTableAssociationState
    :: RouteTableAssociationState
routeTableAssociationState =
  RouteTableAssociationState'
    {_rtasState = Nothing, _rtasStatusMessage = Nothing}


-- | The state of the association.
rtasState :: Lens' RouteTableAssociationState (Maybe RouteTableAssociationStateCode)
rtasState = lens _rtasState (\ s a -> s{_rtasState = a})

-- | The status message, if applicable.
rtasStatusMessage :: Lens' RouteTableAssociationState (Maybe Text)
rtasStatusMessage = lens _rtasStatusMessage (\ s a -> s{_rtasStatusMessage = a})

instance FromXML RouteTableAssociationState where
        parseXML x
          = RouteTableAssociationState' <$>
              (x .@? "state") <*> (x .@? "statusMessage")

instance Hashable RouteTableAssociationState where

instance NFData RouteTableAssociationState where

-- | Describes the monitoring of an instance.
--
--
--
-- /See:/ 'runInstancesMonitoringEnabled' smart constructor.
newtype RunInstancesMonitoringEnabled = RunInstancesMonitoringEnabled'
  { _rimeEnabled :: Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RunInstancesMonitoringEnabled' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'rimeEnabled' - Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
runInstancesMonitoringEnabled
    :: Bool -- ^ 'rimeEnabled'
    -> RunInstancesMonitoringEnabled
runInstancesMonitoringEnabled pEnabled_ =
  RunInstancesMonitoringEnabled' {_rimeEnabled = pEnabled_}


-- | Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
rimeEnabled :: Lens' RunInstancesMonitoringEnabled Bool
rimeEnabled = lens _rimeEnabled (\ s a -> s{_rimeEnabled = a})

instance FromXML RunInstancesMonitoringEnabled where
        parseXML x
          = RunInstancesMonitoringEnabled' <$> (x .@ "enabled")

instance Hashable RunInstancesMonitoringEnabled where

instance NFData RunInstancesMonitoringEnabled where

instance ToQuery RunInstancesMonitoringEnabled where
        toQuery RunInstancesMonitoringEnabled'{..}
          = mconcat ["Enabled" =: _rimeEnabled]

-- | Describes the storage parameters for S3 and S3 buckets for an instance store-backed AMI.
--
--
--
-- /See:/ 's3Storage' smart constructor.
data S3Storage = S3Storage'
  { _ssPrefix                :: !(Maybe Text)
  , _ssUploadPolicy          :: !(Maybe Base64)
  , _ssBucket                :: !(Maybe Text)
  , _ssUploadPolicySignature :: !(Maybe Text)
  , _ssAWSAccessKeyId        :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'S3Storage' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ssPrefix' - The beginning of the file name of the AMI.
--
-- * 'ssUploadPolicy' - An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.-- /Note:/ This 'Lens' automatically encodes and decodes Base64 data. The underlying isomorphism will encode to Base64 representation during serialisation, and decode from Base64 representation during deserialisation. This 'Lens' accepts and returns only raw unencoded data.
--
-- * 'ssBucket' - The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
--
-- * 'ssUploadPolicySignature' - The signature of the JSON document.
--
-- * 'ssAWSAccessKeyId' - The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in <https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html Best Practices for Managing AWS Access Keys> .
s3Storage
    :: S3Storage
s3Storage =
  S3Storage'
    { _ssPrefix = Nothing
    , _ssUploadPolicy = Nothing
    , _ssBucket = Nothing
    , _ssUploadPolicySignature = Nothing
    , _ssAWSAccessKeyId = Nothing
    }


-- | The beginning of the file name of the AMI.
ssPrefix :: Lens' S3Storage (Maybe Text)
ssPrefix = lens _ssPrefix (\ s a -> s{_ssPrefix = a})

-- | An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.-- /Note:/ This 'Lens' automatically encodes and decodes Base64 data. The underlying isomorphism will encode to Base64 representation during serialisation, and decode from Base64 representation during deserialisation. This 'Lens' accepts and returns only raw unencoded data.
ssUploadPolicy :: Lens' S3Storage (Maybe ByteString)
ssUploadPolicy = lens _ssUploadPolicy (\ s a -> s{_ssUploadPolicy = a}) . mapping _Base64

-- | The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
ssBucket :: Lens' S3Storage (Maybe Text)
ssBucket = lens _ssBucket (\ s a -> s{_ssBucket = a})

-- | The signature of the JSON document.
ssUploadPolicySignature :: Lens' S3Storage (Maybe Text)
ssUploadPolicySignature = lens _ssUploadPolicySignature (\ s a -> s{_ssUploadPolicySignature = a})

-- | The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in <https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html Best Practices for Managing AWS Access Keys> .
ssAWSAccessKeyId :: Lens' S3Storage (Maybe Text)
ssAWSAccessKeyId = lens _ssAWSAccessKeyId (\ s a -> s{_ssAWSAccessKeyId = a})

instance FromXML S3Storage where
        parseXML x
          = S3Storage' <$>
              (x .@? "prefix") <*> (x .@? "uploadPolicy") <*>
                (x .@? "bucket")
                <*> (x .@? "uploadPolicySignature")
                <*> (x .@? "AWSAccessKeyId")

instance Hashable S3Storage where

instance NFData S3Storage where

instance ToQuery S3Storage where
        toQuery S3Storage'{..}
          = mconcat
              ["Prefix" =: _ssPrefix,
               "UploadPolicy" =: _ssUploadPolicy,
               "Bucket" =: _ssBucket,
               "UploadPolicySignature" =: _ssUploadPolicySignature,
               "AWSAccessKeyId" =: _ssAWSAccessKeyId]

-- | Describes a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstance' smart constructor.
data ScheduledInstance = ScheduledInstance'
  { _siPreviousSlotEndTime         :: !(Maybe ISO8601)
  , _siPlatform                    :: !(Maybe Text)
  , _siTermStartDate               :: !(Maybe ISO8601)
  , _siInstanceCount               :: !(Maybe Int)
  , _siScheduledInstanceId         :: !(Maybe Text)
  , _siHourlyPrice                 :: !(Maybe Text)
  , _siCreateDate                  :: !(Maybe ISO8601)
  , _siSlotDurationInHours         :: !(Maybe Int)
  , _siTotalScheduledInstanceHours :: !(Maybe Int)
  , _siInstanceType                :: !(Maybe Text)
  , _siRecurrence                  :: !(Maybe ScheduledInstanceRecurrence)
  , _siAvailabilityZone            :: !(Maybe Text)
  , _siTermEndDate                 :: !(Maybe ISO8601)
  , _siNextSlotStartTime           :: !(Maybe ISO8601)
  , _siNetworkPlatform             :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstance' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'siPreviousSlotEndTime' - The time that the previous schedule ended or will end.
--
-- * 'siPlatform' - The platform (@Linux/UNIX@ or @Windows@ ).
--
-- * 'siTermStartDate' - The start date for the Scheduled Instance.
--
-- * 'siInstanceCount' - The number of instances.
--
-- * 'siScheduledInstanceId' - The Scheduled Instance ID.
--
-- * 'siHourlyPrice' - The hourly price for a single instance.
--
-- * 'siCreateDate' - The date when the Scheduled Instance was purchased.
--
-- * 'siSlotDurationInHours' - The number of hours in the schedule.
--
-- * 'siTotalScheduledInstanceHours' - The total number of hours for a single instance for the entire term.
--
-- * 'siInstanceType' - The instance type.
--
-- * 'siRecurrence' - The schedule recurrence.
--
-- * 'siAvailabilityZone' - The Availability Zone.
--
-- * 'siTermEndDate' - The end date for the Scheduled Instance.
--
-- * 'siNextSlotStartTime' - The time for the next schedule to start.
--
-- * 'siNetworkPlatform' - The network platform (@EC2-Classic@ or @EC2-VPC@ ).
scheduledInstance
    :: ScheduledInstance
scheduledInstance =
  ScheduledInstance'
    { _siPreviousSlotEndTime = Nothing
    , _siPlatform = Nothing
    , _siTermStartDate = Nothing
    , _siInstanceCount = Nothing
    , _siScheduledInstanceId = Nothing
    , _siHourlyPrice = Nothing
    , _siCreateDate = Nothing
    , _siSlotDurationInHours = Nothing
    , _siTotalScheduledInstanceHours = Nothing
    , _siInstanceType = Nothing
    , _siRecurrence = Nothing
    , _siAvailabilityZone = Nothing
    , _siTermEndDate = Nothing
    , _siNextSlotStartTime = Nothing
    , _siNetworkPlatform = Nothing
    }


-- | The time that the previous schedule ended or will end.
siPreviousSlotEndTime :: Lens' ScheduledInstance (Maybe UTCTime)
siPreviousSlotEndTime = lens _siPreviousSlotEndTime (\ s a -> s{_siPreviousSlotEndTime = a}) . mapping _Time

-- | The platform (@Linux/UNIX@ or @Windows@ ).
siPlatform :: Lens' ScheduledInstance (Maybe Text)
siPlatform = lens _siPlatform (\ s a -> s{_siPlatform = a})

-- | The start date for the Scheduled Instance.
siTermStartDate :: Lens' ScheduledInstance (Maybe UTCTime)
siTermStartDate = lens _siTermStartDate (\ s a -> s{_siTermStartDate = a}) . mapping _Time

-- | The number of instances.
siInstanceCount :: Lens' ScheduledInstance (Maybe Int)
siInstanceCount = lens _siInstanceCount (\ s a -> s{_siInstanceCount = a})

-- | The Scheduled Instance ID.
siScheduledInstanceId :: Lens' ScheduledInstance (Maybe Text)
siScheduledInstanceId = lens _siScheduledInstanceId (\ s a -> s{_siScheduledInstanceId = a})

-- | The hourly price for a single instance.
siHourlyPrice :: Lens' ScheduledInstance (Maybe Text)
siHourlyPrice = lens _siHourlyPrice (\ s a -> s{_siHourlyPrice = a})

-- | The date when the Scheduled Instance was purchased.
siCreateDate :: Lens' ScheduledInstance (Maybe UTCTime)
siCreateDate = lens _siCreateDate (\ s a -> s{_siCreateDate = a}) . mapping _Time

-- | The number of hours in the schedule.
siSlotDurationInHours :: Lens' ScheduledInstance (Maybe Int)
siSlotDurationInHours = lens _siSlotDurationInHours (\ s a -> s{_siSlotDurationInHours = a})

-- | The total number of hours for a single instance for the entire term.
siTotalScheduledInstanceHours :: Lens' ScheduledInstance (Maybe Int)
siTotalScheduledInstanceHours = lens _siTotalScheduledInstanceHours (\ s a -> s{_siTotalScheduledInstanceHours = a})

-- | The instance type.
siInstanceType :: Lens' ScheduledInstance (Maybe Text)
siInstanceType = lens _siInstanceType (\ s a -> s{_siInstanceType = a})

-- | The schedule recurrence.
siRecurrence :: Lens' ScheduledInstance (Maybe ScheduledInstanceRecurrence)
siRecurrence = lens _siRecurrence (\ s a -> s{_siRecurrence = a})

-- | The Availability Zone.
siAvailabilityZone :: Lens' ScheduledInstance (Maybe Text)
siAvailabilityZone = lens _siAvailabilityZone (\ s a -> s{_siAvailabilityZone = a})

-- | The end date for the Scheduled Instance.
siTermEndDate :: Lens' ScheduledInstance (Maybe UTCTime)
siTermEndDate = lens _siTermEndDate (\ s a -> s{_siTermEndDate = a}) . mapping _Time

-- | The time for the next schedule to start.
siNextSlotStartTime :: Lens' ScheduledInstance (Maybe UTCTime)
siNextSlotStartTime = lens _siNextSlotStartTime (\ s a -> s{_siNextSlotStartTime = a}) . mapping _Time

-- | The network platform (@EC2-Classic@ or @EC2-VPC@ ).
siNetworkPlatform :: Lens' ScheduledInstance (Maybe Text)
siNetworkPlatform = lens _siNetworkPlatform (\ s a -> s{_siNetworkPlatform = a})

instance FromXML ScheduledInstance where
        parseXML x
          = ScheduledInstance' <$>
              (x .@? "previousSlotEndTime") <*> (x .@? "platform")
                <*> (x .@? "termStartDate")
                <*> (x .@? "instanceCount")
                <*> (x .@? "scheduledInstanceId")
                <*> (x .@? "hourlyPrice")
                <*> (x .@? "createDate")
                <*> (x .@? "slotDurationInHours")
                <*> (x .@? "totalScheduledInstanceHours")
                <*> (x .@? "instanceType")
                <*> (x .@? "recurrence")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "termEndDate")
                <*> (x .@? "nextSlotStartTime")
                <*> (x .@? "networkPlatform")

instance Hashable ScheduledInstance where

instance NFData ScheduledInstance where

-- | Describes a schedule that is available for your Scheduled Instances.
--
--
--
-- /See:/ 'scheduledInstanceAvailability' smart constructor.
data ScheduledInstanceAvailability = ScheduledInstanceAvailability'
  { _siaMaxTermDurationInDays       :: !(Maybe Int)
  , _siaPlatform                    :: !(Maybe Text)
  , _siaPurchaseToken               :: !(Maybe Text)
  , _siaHourlyPrice                 :: !(Maybe Text)
  , _siaAvailableInstanceCount      :: !(Maybe Int)
  , _siaSlotDurationInHours         :: !(Maybe Int)
  , _siaTotalScheduledInstanceHours :: !(Maybe Int)
  , _siaInstanceType                :: !(Maybe Text)
  , _siaRecurrence                  :: !(Maybe ScheduledInstanceRecurrence)
  , _siaAvailabilityZone            :: !(Maybe Text)
  , _siaMinTermDurationInDays       :: !(Maybe Int)
  , _siaFirstSlotStartTime          :: !(Maybe ISO8601)
  , _siaNetworkPlatform             :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstanceAvailability' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'siaMaxTermDurationInDays' - The maximum term. The only possible value is 365 days.
--
-- * 'siaPlatform' - The platform (@Linux/UNIX@ or @Windows@ ).
--
-- * 'siaPurchaseToken' - The purchase token. This token expires in two hours.
--
-- * 'siaHourlyPrice' - The hourly price for a single instance.
--
-- * 'siaAvailableInstanceCount' - The number of available instances.
--
-- * 'siaSlotDurationInHours' - The number of hours in the schedule.
--
-- * 'siaTotalScheduledInstanceHours' - The total number of hours for a single instance for the entire term.
--
-- * 'siaInstanceType' - The instance type. You can specify one of the C3, C4, M4, or R3 instance types.
--
-- * 'siaRecurrence' - The schedule recurrence.
--
-- * 'siaAvailabilityZone' - The Availability Zone.
--
-- * 'siaMinTermDurationInDays' - The minimum term. The only possible value is 365 days.
--
-- * 'siaFirstSlotStartTime' - The time period for the first schedule to start.
--
-- * 'siaNetworkPlatform' - The network platform (@EC2-Classic@ or @EC2-VPC@ ).
scheduledInstanceAvailability
    :: ScheduledInstanceAvailability
scheduledInstanceAvailability =
  ScheduledInstanceAvailability'
    { _siaMaxTermDurationInDays = Nothing
    , _siaPlatform = Nothing
    , _siaPurchaseToken = Nothing
    , _siaHourlyPrice = Nothing
    , _siaAvailableInstanceCount = Nothing
    , _siaSlotDurationInHours = Nothing
    , _siaTotalScheduledInstanceHours = Nothing
    , _siaInstanceType = Nothing
    , _siaRecurrence = Nothing
    , _siaAvailabilityZone = Nothing
    , _siaMinTermDurationInDays = Nothing
    , _siaFirstSlotStartTime = Nothing
    , _siaNetworkPlatform = Nothing
    }


-- | The maximum term. The only possible value is 365 days.
siaMaxTermDurationInDays :: Lens' ScheduledInstanceAvailability (Maybe Int)
siaMaxTermDurationInDays = lens _siaMaxTermDurationInDays (\ s a -> s{_siaMaxTermDurationInDays = a})

-- | The platform (@Linux/UNIX@ or @Windows@ ).
siaPlatform :: Lens' ScheduledInstanceAvailability (Maybe Text)
siaPlatform = lens _siaPlatform (\ s a -> s{_siaPlatform = a})

-- | The purchase token. This token expires in two hours.
siaPurchaseToken :: Lens' ScheduledInstanceAvailability (Maybe Text)
siaPurchaseToken = lens _siaPurchaseToken (\ s a -> s{_siaPurchaseToken = a})

-- | The hourly price for a single instance.
siaHourlyPrice :: Lens' ScheduledInstanceAvailability (Maybe Text)
siaHourlyPrice = lens _siaHourlyPrice (\ s a -> s{_siaHourlyPrice = a})

-- | The number of available instances.
siaAvailableInstanceCount :: Lens' ScheduledInstanceAvailability (Maybe Int)
siaAvailableInstanceCount = lens _siaAvailableInstanceCount (\ s a -> s{_siaAvailableInstanceCount = a})

-- | The number of hours in the schedule.
siaSlotDurationInHours :: Lens' ScheduledInstanceAvailability (Maybe Int)
siaSlotDurationInHours = lens _siaSlotDurationInHours (\ s a -> s{_siaSlotDurationInHours = a})

-- | The total number of hours for a single instance for the entire term.
siaTotalScheduledInstanceHours :: Lens' ScheduledInstanceAvailability (Maybe Int)
siaTotalScheduledInstanceHours = lens _siaTotalScheduledInstanceHours (\ s a -> s{_siaTotalScheduledInstanceHours = a})

-- | The instance type. You can specify one of the C3, C4, M4, or R3 instance types.
siaInstanceType :: Lens' ScheduledInstanceAvailability (Maybe Text)
siaInstanceType = lens _siaInstanceType (\ s a -> s{_siaInstanceType = a})

-- | The schedule recurrence.
siaRecurrence :: Lens' ScheduledInstanceAvailability (Maybe ScheduledInstanceRecurrence)
siaRecurrence = lens _siaRecurrence (\ s a -> s{_siaRecurrence = a})

-- | The Availability Zone.
siaAvailabilityZone :: Lens' ScheduledInstanceAvailability (Maybe Text)
siaAvailabilityZone = lens _siaAvailabilityZone (\ s a -> s{_siaAvailabilityZone = a})

-- | The minimum term. The only possible value is 365 days.
siaMinTermDurationInDays :: Lens' ScheduledInstanceAvailability (Maybe Int)
siaMinTermDurationInDays = lens _siaMinTermDurationInDays (\ s a -> s{_siaMinTermDurationInDays = a})

-- | The time period for the first schedule to start.
siaFirstSlotStartTime :: Lens' ScheduledInstanceAvailability (Maybe UTCTime)
siaFirstSlotStartTime = lens _siaFirstSlotStartTime (\ s a -> s{_siaFirstSlotStartTime = a}) . mapping _Time

-- | The network platform (@EC2-Classic@ or @EC2-VPC@ ).
siaNetworkPlatform :: Lens' ScheduledInstanceAvailability (Maybe Text)
siaNetworkPlatform = lens _siaNetworkPlatform (\ s a -> s{_siaNetworkPlatform = a})

instance FromXML ScheduledInstanceAvailability where
        parseXML x
          = ScheduledInstanceAvailability' <$>
              (x .@? "maxTermDurationInDays") <*>
                (x .@? "platform")
                <*> (x .@? "purchaseToken")
                <*> (x .@? "hourlyPrice")
                <*> (x .@? "availableInstanceCount")
                <*> (x .@? "slotDurationInHours")
                <*> (x .@? "totalScheduledInstanceHours")
                <*> (x .@? "instanceType")
                <*> (x .@? "recurrence")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "minTermDurationInDays")
                <*> (x .@? "firstSlotStartTime")
                <*> (x .@? "networkPlatform")

instance Hashable ScheduledInstanceAvailability where

instance NFData ScheduledInstanceAvailability where

-- | Describes the recurring schedule for a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstanceRecurrence' smart constructor.
data ScheduledInstanceRecurrence = ScheduledInstanceRecurrence'
  { _sirFrequency               :: !(Maybe Text)
  , _sirOccurrenceRelativeToEnd :: !(Maybe Bool)
  , _sirOccurrenceUnit          :: !(Maybe Text)
  , _sirInterval                :: !(Maybe Int)
  , _sirOccurrenceDaySet        :: !(Maybe [Int])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstanceRecurrence' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sirFrequency' - The frequency (@Daily@ , @Weekly@ , or @Monthly@ ).
--
-- * 'sirOccurrenceRelativeToEnd' - Indicates whether the occurrence is relative to the end of the specified week or month.
--
-- * 'sirOccurrenceUnit' - The unit for @occurrenceDaySet@ (@DayOfWeek@ or @DayOfMonth@ ).
--
-- * 'sirInterval' - The interval quantity. The interval unit depends on the value of @frequency@ . For example, every 2 weeks or every 2 months.
--
-- * 'sirOccurrenceDaySet' - The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).
scheduledInstanceRecurrence
    :: ScheduledInstanceRecurrence
scheduledInstanceRecurrence =
  ScheduledInstanceRecurrence'
    { _sirFrequency = Nothing
    , _sirOccurrenceRelativeToEnd = Nothing
    , _sirOccurrenceUnit = Nothing
    , _sirInterval = Nothing
    , _sirOccurrenceDaySet = Nothing
    }


-- | The frequency (@Daily@ , @Weekly@ , or @Monthly@ ).
sirFrequency :: Lens' ScheduledInstanceRecurrence (Maybe Text)
sirFrequency = lens _sirFrequency (\ s a -> s{_sirFrequency = a})

-- | Indicates whether the occurrence is relative to the end of the specified week or month.
sirOccurrenceRelativeToEnd :: Lens' ScheduledInstanceRecurrence (Maybe Bool)
sirOccurrenceRelativeToEnd = lens _sirOccurrenceRelativeToEnd (\ s a -> s{_sirOccurrenceRelativeToEnd = a})

-- | The unit for @occurrenceDaySet@ (@DayOfWeek@ or @DayOfMonth@ ).
sirOccurrenceUnit :: Lens' ScheduledInstanceRecurrence (Maybe Text)
sirOccurrenceUnit = lens _sirOccurrenceUnit (\ s a -> s{_sirOccurrenceUnit = a})

-- | The interval quantity. The interval unit depends on the value of @frequency@ . For example, every 2 weeks or every 2 months.
sirInterval :: Lens' ScheduledInstanceRecurrence (Maybe Int)
sirInterval = lens _sirInterval (\ s a -> s{_sirInterval = a})

-- | The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).
sirOccurrenceDaySet :: Lens' ScheduledInstanceRecurrence [Int]
sirOccurrenceDaySet = lens _sirOccurrenceDaySet (\ s a -> s{_sirOccurrenceDaySet = a}) . _Default . _Coerce

instance FromXML ScheduledInstanceRecurrence where
        parseXML x
          = ScheduledInstanceRecurrence' <$>
              (x .@? "frequency") <*>
                (x .@? "occurrenceRelativeToEnd")
                <*> (x .@? "occurrenceUnit")
                <*> (x .@? "interval")
                <*>
                (x .@? "occurrenceDaySet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ScheduledInstanceRecurrence where

instance NFData ScheduledInstanceRecurrence where

-- | Describes the recurring schedule for a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstanceRecurrenceRequest' smart constructor.
data ScheduledInstanceRecurrenceRequest = ScheduledInstanceRecurrenceRequest'
  { _sirrFrequency               :: !(Maybe Text)
  , _sirrOccurrenceRelativeToEnd :: !(Maybe Bool)
  , _sirrOccurrenceDays          :: !(Maybe [Int])
  , _sirrOccurrenceUnit          :: !(Maybe Text)
  , _sirrInterval                :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstanceRecurrenceRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sirrFrequency' - The frequency (@Daily@ , @Weekly@ , or @Monthly@ ).
--
-- * 'sirrOccurrenceRelativeToEnd' - Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
--
-- * 'sirrOccurrenceDays' - The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
--
-- * 'sirrOccurrenceUnit' - The unit for @OccurrenceDays@ (@DayOfWeek@ or @DayOfMonth@ ). This value is required for a monthly schedule. You can't specify @DayOfWeek@ with a weekly schedule. You can't specify this value with a daily schedule.
--
-- * 'sirrInterval' - The interval quantity. The interval unit depends on the value of @Frequency@ . For example, every 2 weeks or every 2 months.
scheduledInstanceRecurrenceRequest
    :: ScheduledInstanceRecurrenceRequest
scheduledInstanceRecurrenceRequest =
  ScheduledInstanceRecurrenceRequest'
    { _sirrFrequency = Nothing
    , _sirrOccurrenceRelativeToEnd = Nothing
    , _sirrOccurrenceDays = Nothing
    , _sirrOccurrenceUnit = Nothing
    , _sirrInterval = Nothing
    }


-- | The frequency (@Daily@ , @Weekly@ , or @Monthly@ ).
sirrFrequency :: Lens' ScheduledInstanceRecurrenceRequest (Maybe Text)
sirrFrequency = lens _sirrFrequency (\ s a -> s{_sirrFrequency = a})

-- | Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
sirrOccurrenceRelativeToEnd :: Lens' ScheduledInstanceRecurrenceRequest (Maybe Bool)
sirrOccurrenceRelativeToEnd = lens _sirrOccurrenceRelativeToEnd (\ s a -> s{_sirrOccurrenceRelativeToEnd = a})

-- | The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
sirrOccurrenceDays :: Lens' ScheduledInstanceRecurrenceRequest [Int]
sirrOccurrenceDays = lens _sirrOccurrenceDays (\ s a -> s{_sirrOccurrenceDays = a}) . _Default . _Coerce

-- | The unit for @OccurrenceDays@ (@DayOfWeek@ or @DayOfMonth@ ). This value is required for a monthly schedule. You can't specify @DayOfWeek@ with a weekly schedule. You can't specify this value with a daily schedule.
sirrOccurrenceUnit :: Lens' ScheduledInstanceRecurrenceRequest (Maybe Text)
sirrOccurrenceUnit = lens _sirrOccurrenceUnit (\ s a -> s{_sirrOccurrenceUnit = a})

-- | The interval quantity. The interval unit depends on the value of @Frequency@ . For example, every 2 weeks or every 2 months.
sirrInterval :: Lens' ScheduledInstanceRecurrenceRequest (Maybe Int)
sirrInterval = lens _sirrInterval (\ s a -> s{_sirrInterval = a})

instance Hashable ScheduledInstanceRecurrenceRequest
         where

instance NFData ScheduledInstanceRecurrenceRequest
         where

instance ToQuery ScheduledInstanceRecurrenceRequest
         where
        toQuery ScheduledInstanceRecurrenceRequest'{..}
          = mconcat
              ["Frequency" =: _sirrFrequency,
               "OccurrenceRelativeToEnd" =:
                 _sirrOccurrenceRelativeToEnd,
               toQuery
                 (toQueryList "OccurrenceDay" <$>
                    _sirrOccurrenceDays),
               "OccurrenceUnit" =: _sirrOccurrenceUnit,
               "Interval" =: _sirrInterval]

-- | Describes a block device mapping for a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstancesBlockDeviceMapping' smart constructor.
data ScheduledInstancesBlockDeviceMapping = ScheduledInstancesBlockDeviceMapping'
  { _sibdmVirtualName :: !(Maybe Text)
  , _sibdmNoDevice    :: !(Maybe Text)
  , _sibdmEBS         :: !(Maybe ScheduledInstancesEBS)
  , _sibdmDeviceName  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstancesBlockDeviceMapping' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sibdmVirtualName' - The virtual device name (@ephemeral@ N). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for @ephemeral0@ and @ephemeral1@ . The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
--
-- * 'sibdmNoDevice' - To omit the device from the block device mapping, specify an empty string.
--
-- * 'sibdmEBS' - Parameters used to set up EBS volumes automatically when the instance is launched.
--
-- * 'sibdmDeviceName' - The device name (for example, @/dev/sdh@ or @xvdh@ ).
scheduledInstancesBlockDeviceMapping
    :: ScheduledInstancesBlockDeviceMapping
scheduledInstancesBlockDeviceMapping =
  ScheduledInstancesBlockDeviceMapping'
    { _sibdmVirtualName = Nothing
    , _sibdmNoDevice = Nothing
    , _sibdmEBS = Nothing
    , _sibdmDeviceName = Nothing
    }


-- | The virtual device name (@ephemeral@ N). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for @ephemeral0@ and @ephemeral1@ . The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
sibdmVirtualName :: Lens' ScheduledInstancesBlockDeviceMapping (Maybe Text)
sibdmVirtualName = lens _sibdmVirtualName (\ s a -> s{_sibdmVirtualName = a})

-- | To omit the device from the block device mapping, specify an empty string.
sibdmNoDevice :: Lens' ScheduledInstancesBlockDeviceMapping (Maybe Text)
sibdmNoDevice = lens _sibdmNoDevice (\ s a -> s{_sibdmNoDevice = a})

-- | Parameters used to set up EBS volumes automatically when the instance is launched.
sibdmEBS :: Lens' ScheduledInstancesBlockDeviceMapping (Maybe ScheduledInstancesEBS)
sibdmEBS = lens _sibdmEBS (\ s a -> s{_sibdmEBS = a})

-- | The device name (for example, @/dev/sdh@ or @xvdh@ ).
sibdmDeviceName :: Lens' ScheduledInstancesBlockDeviceMapping (Maybe Text)
sibdmDeviceName = lens _sibdmDeviceName (\ s a -> s{_sibdmDeviceName = a})

instance Hashable
           ScheduledInstancesBlockDeviceMapping
         where

instance NFData ScheduledInstancesBlockDeviceMapping
         where

instance ToQuery ScheduledInstancesBlockDeviceMapping
         where
        toQuery ScheduledInstancesBlockDeviceMapping'{..}
          = mconcat
              ["VirtualName" =: _sibdmVirtualName,
               "NoDevice" =: _sibdmNoDevice, "Ebs" =: _sibdmEBS,
               "DeviceName" =: _sibdmDeviceName]

-- | Describes an EBS volume for a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstancesEBS' smart constructor.
data ScheduledInstancesEBS = ScheduledInstancesEBS'
  { _sieDeleteOnTermination :: !(Maybe Bool)
  , _sieVolumeSize          :: !(Maybe Int)
  , _sieIOPS                :: !(Maybe Int)
  , _sieEncrypted           :: !(Maybe Bool)
  , _sieVolumeType          :: !(Maybe Text)
  , _sieSnapshotId          :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstancesEBS' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sieDeleteOnTermination' - Indicates whether the volume is deleted on instance termination.
--
-- * 'sieVolumeSize' - The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
--
-- * 'sieIOPS' - The number of I/O operations per second (IOPS) to provision for an @io1@ or @io2@ volume, with a maximum ratio of 50 IOPS/GiB for @io1@ , and 500 IOPS/GiB for @io2@ . Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances instances built on the Nitro System> . Other instance families guarantee performance up to 32,000 IOPS. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html Amazon EBS volume types> in the /Amazon EC2 User Guide/ . This parameter is valid only for Provisioned IOPS SSD (@io1@ and @io2@ ) volumes.
--
-- * 'sieEncrypted' - Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.
--
-- * 'sieVolumeType' - The volume type. @gp2@ for General Purpose SSD, @io1@ or @io2@ for Provisioned IOPS SSD, Throughput Optimized HDD for @st1@ , Cold HDD for @sc1@ , or @standard@ for Magnetic. Default: @gp2@
--
-- * 'sieSnapshotId' - The ID of the snapshot.
scheduledInstancesEBS
    :: ScheduledInstancesEBS
scheduledInstancesEBS =
  ScheduledInstancesEBS'
    { _sieDeleteOnTermination = Nothing
    , _sieVolumeSize = Nothing
    , _sieIOPS = Nothing
    , _sieEncrypted = Nothing
    , _sieVolumeType = Nothing
    , _sieSnapshotId = Nothing
    }


-- | Indicates whether the volume is deleted on instance termination.
sieDeleteOnTermination :: Lens' ScheduledInstancesEBS (Maybe Bool)
sieDeleteOnTermination = lens _sieDeleteOnTermination (\ s a -> s{_sieDeleteOnTermination = a})

-- | The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
sieVolumeSize :: Lens' ScheduledInstancesEBS (Maybe Int)
sieVolumeSize = lens _sieVolumeSize (\ s a -> s{_sieVolumeSize = a})

-- | The number of I/O operations per second (IOPS) to provision for an @io1@ or @io2@ volume, with a maximum ratio of 50 IOPS/GiB for @io1@ , and 500 IOPS/GiB for @io2@ . Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances instances built on the Nitro System> . Other instance families guarantee performance up to 32,000 IOPS. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html Amazon EBS volume types> in the /Amazon EC2 User Guide/ . This parameter is valid only for Provisioned IOPS SSD (@io1@ and @io2@ ) volumes.
sieIOPS :: Lens' ScheduledInstancesEBS (Maybe Int)
sieIOPS = lens _sieIOPS (\ s a -> s{_sieIOPS = a})

-- | Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.
sieEncrypted :: Lens' ScheduledInstancesEBS (Maybe Bool)
sieEncrypted = lens _sieEncrypted (\ s a -> s{_sieEncrypted = a})

-- | The volume type. @gp2@ for General Purpose SSD, @io1@ or @io2@ for Provisioned IOPS SSD, Throughput Optimized HDD for @st1@ , Cold HDD for @sc1@ , or @standard@ for Magnetic. Default: @gp2@
sieVolumeType :: Lens' ScheduledInstancesEBS (Maybe Text)
sieVolumeType = lens _sieVolumeType (\ s a -> s{_sieVolumeType = a})

-- | The ID of the snapshot.
sieSnapshotId :: Lens' ScheduledInstancesEBS (Maybe Text)
sieSnapshotId = lens _sieSnapshotId (\ s a -> s{_sieSnapshotId = a})

instance Hashable ScheduledInstancesEBS where

instance NFData ScheduledInstancesEBS where

instance ToQuery ScheduledInstancesEBS where
        toQuery ScheduledInstancesEBS'{..}
          = mconcat
              ["DeleteOnTermination" =: _sieDeleteOnTermination,
               "VolumeSize" =: _sieVolumeSize, "Iops" =: _sieIOPS,
               "Encrypted" =: _sieEncrypted,
               "VolumeType" =: _sieVolumeType,
               "SnapshotId" =: _sieSnapshotId]

-- | Describes an IAM instance profile for a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstancesIAMInstanceProfile' smart constructor.
data ScheduledInstancesIAMInstanceProfile = ScheduledInstancesIAMInstanceProfile'
  { _siiapARN  :: !(Maybe Text)
  , _siiapName :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstancesIAMInstanceProfile' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'siiapARN' - The Amazon Resource Name (ARN).
--
-- * 'siiapName' - The name.
scheduledInstancesIAMInstanceProfile
    :: ScheduledInstancesIAMInstanceProfile
scheduledInstancesIAMInstanceProfile =
  ScheduledInstancesIAMInstanceProfile'
    {_siiapARN = Nothing, _siiapName = Nothing}


-- | The Amazon Resource Name (ARN).
siiapARN :: Lens' ScheduledInstancesIAMInstanceProfile (Maybe Text)
siiapARN = lens _siiapARN (\ s a -> s{_siiapARN = a})

-- | The name.
siiapName :: Lens' ScheduledInstancesIAMInstanceProfile (Maybe Text)
siiapName = lens _siiapName (\ s a -> s{_siiapName = a})

instance Hashable
           ScheduledInstancesIAMInstanceProfile
         where

instance NFData ScheduledInstancesIAMInstanceProfile
         where

instance ToQuery ScheduledInstancesIAMInstanceProfile
         where
        toQuery ScheduledInstancesIAMInstanceProfile'{..}
          = mconcat ["Arn" =: _siiapARN, "Name" =: _siiapName]

-- | Describes an IPv6 address.
--
--
--
-- /See:/ 'scheduledInstancesIPv6Address' smart constructor.
newtype ScheduledInstancesIPv6Address = ScheduledInstancesIPv6Address'
  { _siiaIPv6Address :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstancesIPv6Address' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'siiaIPv6Address' - The IPv6 address.
scheduledInstancesIPv6Address
    :: ScheduledInstancesIPv6Address
scheduledInstancesIPv6Address =
  ScheduledInstancesIPv6Address' {_siiaIPv6Address = Nothing}


-- | The IPv6 address.
siiaIPv6Address :: Lens' ScheduledInstancesIPv6Address (Maybe Text)
siiaIPv6Address = lens _siiaIPv6Address (\ s a -> s{_siiaIPv6Address = a})

instance Hashable ScheduledInstancesIPv6Address where

instance NFData ScheduledInstancesIPv6Address where

instance ToQuery ScheduledInstancesIPv6Address where
        toQuery ScheduledInstancesIPv6Address'{..}
          = mconcat ["Ipv6Address" =: _siiaIPv6Address]

-- | Describes the launch specification for a Scheduled Instance.
--
--
-- If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either @SubnetId@ or @NetworkInterface@ .
--
--
-- /See:/ 'scheduledInstancesLaunchSpecification' smart constructor.
data ScheduledInstancesLaunchSpecification = ScheduledInstancesLaunchSpecification'
  { _silsSecurityGroupIds    :: !(Maybe [Text])
  , _silsKeyName             :: !(Maybe Text)
  , _silsNetworkInterfaces   :: !(Maybe [ScheduledInstancesNetworkInterface])
  , _silsRAMDiskId           :: !(Maybe Text)
  , _silsSubnetId            :: !(Maybe Text)
  , _silsKernelId            :: !(Maybe Text)
  , _silsInstanceType        :: !(Maybe Text)
  , _silsEBSOptimized        :: !(Maybe Bool)
  , _silsUserData            :: !(Maybe Text)
  , _silsMonitoring          :: !(Maybe ScheduledInstancesMonitoring)
  , _silsIAMInstanceProfile  :: !(Maybe ScheduledInstancesIAMInstanceProfile)
  , _silsBlockDeviceMappings :: !(Maybe [ScheduledInstancesBlockDeviceMapping])
  , _silsPlacement           :: !(Maybe ScheduledInstancesPlacement)
  , _silsImageId             :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstancesLaunchSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'silsSecurityGroupIds' - The IDs of the security groups.
--
-- * 'silsKeyName' - The name of the key pair.
--
-- * 'silsNetworkInterfaces' - The network interfaces.
--
-- * 'silsRAMDiskId' - The ID of the RAM disk.
--
-- * 'silsSubnetId' - The ID of the subnet in which to launch the instances.
--
-- * 'silsKernelId' - The ID of the kernel.
--
-- * 'silsInstanceType' - The instance type.
--
-- * 'silsEBSOptimized' - Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: @false@
--
-- * 'silsUserData' - The base64-encoded MIME user data.
--
-- * 'silsMonitoring' - Enable or disable monitoring for the instances.
--
-- * 'silsIAMInstanceProfile' - The IAM instance profile.
--
-- * 'silsBlockDeviceMappings' - The block device mapping entries.
--
-- * 'silsPlacement' - The placement information.
--
-- * 'silsImageId' - The ID of the Amazon Machine Image (AMI).
scheduledInstancesLaunchSpecification
    :: Text -- ^ 'silsImageId'
    -> ScheduledInstancesLaunchSpecification
scheduledInstancesLaunchSpecification pImageId_ =
  ScheduledInstancesLaunchSpecification'
    { _silsSecurityGroupIds = Nothing
    , _silsKeyName = Nothing
    , _silsNetworkInterfaces = Nothing
    , _silsRAMDiskId = Nothing
    , _silsSubnetId = Nothing
    , _silsKernelId = Nothing
    , _silsInstanceType = Nothing
    , _silsEBSOptimized = Nothing
    , _silsUserData = Nothing
    , _silsMonitoring = Nothing
    , _silsIAMInstanceProfile = Nothing
    , _silsBlockDeviceMappings = Nothing
    , _silsPlacement = Nothing
    , _silsImageId = pImageId_
    }


-- | The IDs of the security groups.
silsSecurityGroupIds :: Lens' ScheduledInstancesLaunchSpecification [Text]
silsSecurityGroupIds = lens _silsSecurityGroupIds (\ s a -> s{_silsSecurityGroupIds = a}) . _Default . _Coerce

-- | The name of the key pair.
silsKeyName :: Lens' ScheduledInstancesLaunchSpecification (Maybe Text)
silsKeyName = lens _silsKeyName (\ s a -> s{_silsKeyName = a})

-- | The network interfaces.
silsNetworkInterfaces :: Lens' ScheduledInstancesLaunchSpecification [ScheduledInstancesNetworkInterface]
silsNetworkInterfaces = lens _silsNetworkInterfaces (\ s a -> s{_silsNetworkInterfaces = a}) . _Default . _Coerce

-- | The ID of the RAM disk.
silsRAMDiskId :: Lens' ScheduledInstancesLaunchSpecification (Maybe Text)
silsRAMDiskId = lens _silsRAMDiskId (\ s a -> s{_silsRAMDiskId = a})

-- | The ID of the subnet in which to launch the instances.
silsSubnetId :: Lens' ScheduledInstancesLaunchSpecification (Maybe Text)
silsSubnetId = lens _silsSubnetId (\ s a -> s{_silsSubnetId = a})

-- | The ID of the kernel.
silsKernelId :: Lens' ScheduledInstancesLaunchSpecification (Maybe Text)
silsKernelId = lens _silsKernelId (\ s a -> s{_silsKernelId = a})

-- | The instance type.
silsInstanceType :: Lens' ScheduledInstancesLaunchSpecification (Maybe Text)
silsInstanceType = lens _silsInstanceType (\ s a -> s{_silsInstanceType = a})

-- | Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: @false@
silsEBSOptimized :: Lens' ScheduledInstancesLaunchSpecification (Maybe Bool)
silsEBSOptimized = lens _silsEBSOptimized (\ s a -> s{_silsEBSOptimized = a})

-- | The base64-encoded MIME user data.
silsUserData :: Lens' ScheduledInstancesLaunchSpecification (Maybe Text)
silsUserData = lens _silsUserData (\ s a -> s{_silsUserData = a})

-- | Enable or disable monitoring for the instances.
silsMonitoring :: Lens' ScheduledInstancesLaunchSpecification (Maybe ScheduledInstancesMonitoring)
silsMonitoring = lens _silsMonitoring (\ s a -> s{_silsMonitoring = a})

-- | The IAM instance profile.
silsIAMInstanceProfile :: Lens' ScheduledInstancesLaunchSpecification (Maybe ScheduledInstancesIAMInstanceProfile)
silsIAMInstanceProfile = lens _silsIAMInstanceProfile (\ s a -> s{_silsIAMInstanceProfile = a})

-- | The block device mapping entries.
silsBlockDeviceMappings :: Lens' ScheduledInstancesLaunchSpecification [ScheduledInstancesBlockDeviceMapping]
silsBlockDeviceMappings = lens _silsBlockDeviceMappings (\ s a -> s{_silsBlockDeviceMappings = a}) . _Default . _Coerce

-- | The placement information.
silsPlacement :: Lens' ScheduledInstancesLaunchSpecification (Maybe ScheduledInstancesPlacement)
silsPlacement = lens _silsPlacement (\ s a -> s{_silsPlacement = a})

-- | The ID of the Amazon Machine Image (AMI).
silsImageId :: Lens' ScheduledInstancesLaunchSpecification Text
silsImageId = lens _silsImageId (\ s a -> s{_silsImageId = a})

instance Hashable
           ScheduledInstancesLaunchSpecification
         where

instance NFData ScheduledInstancesLaunchSpecification
         where

instance ToQuery
           ScheduledInstancesLaunchSpecification
         where
        toQuery ScheduledInstancesLaunchSpecification'{..}
          = mconcat
              [toQuery
                 (toQueryList "SecurityGroupId" <$>
                    _silsSecurityGroupIds),
               "KeyName" =: _silsKeyName,
               toQuery
                 (toQueryList "NetworkInterface" <$>
                    _silsNetworkInterfaces),
               "RamdiskId" =: _silsRAMDiskId,
               "SubnetId" =: _silsSubnetId,
               "KernelId" =: _silsKernelId,
               "InstanceType" =: _silsInstanceType,
               "EbsOptimized" =: _silsEBSOptimized,
               "UserData" =: _silsUserData,
               "Monitoring" =: _silsMonitoring,
               "IamInstanceProfile" =: _silsIAMInstanceProfile,
               toQuery
                 (toQueryList "BlockDeviceMapping" <$>
                    _silsBlockDeviceMappings),
               "Placement" =: _silsPlacement,
               "ImageId" =: _silsImageId]

-- | Describes whether monitoring is enabled for a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstancesMonitoring' smart constructor.
newtype ScheduledInstancesMonitoring = ScheduledInstancesMonitoring'
  { _simEnabled :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstancesMonitoring' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'simEnabled' - Indicates whether monitoring is enabled.
scheduledInstancesMonitoring
    :: ScheduledInstancesMonitoring
scheduledInstancesMonitoring =
  ScheduledInstancesMonitoring' {_simEnabled = Nothing}


-- | Indicates whether monitoring is enabled.
simEnabled :: Lens' ScheduledInstancesMonitoring (Maybe Bool)
simEnabled = lens _simEnabled (\ s a -> s{_simEnabled = a})

instance Hashable ScheduledInstancesMonitoring where

instance NFData ScheduledInstancesMonitoring where

instance ToQuery ScheduledInstancesMonitoring where
        toQuery ScheduledInstancesMonitoring'{..}
          = mconcat ["Enabled" =: _simEnabled]

-- | Describes a network interface for a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstancesNetworkInterface' smart constructor.
data ScheduledInstancesNetworkInterface = ScheduledInstancesNetworkInterface'
  { _siniGroups :: !(Maybe [Text])
  , _siniDeleteOnTermination :: !(Maybe Bool)
  , _siniAssociatePublicIPAddress :: !(Maybe Bool)
  , _siniPrivateIPAddressConfigs :: !(Maybe [ScheduledInstancesPrivateIPAddressConfig])
  , _siniNetworkInterfaceId :: !(Maybe Text)
  , _siniSubnetId :: !(Maybe Text)
  , _siniIPv6AddressCount :: !(Maybe Int)
  , _siniPrivateIPAddress :: !(Maybe Text)
  , _siniSecondaryPrivateIPAddressCount :: !(Maybe Int)
  , _siniDescription :: !(Maybe Text)
  , _siniDeviceIndex :: !(Maybe Int)
  , _siniIPv6Addresses :: !(Maybe [ScheduledInstancesIPv6Address])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstancesNetworkInterface' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'siniGroups' - The IDs of the security groups.
--
-- * 'siniDeleteOnTermination' - Indicates whether to delete the interface when the instance is terminated.
--
-- * 'siniAssociatePublicIPAddress' - Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is @true@ .
--
-- * 'siniPrivateIPAddressConfigs' - The private IPv4 addresses.
--
-- * 'siniNetworkInterfaceId' - The ID of the network interface.
--
-- * 'siniSubnetId' - The ID of the subnet.
--
-- * 'siniIPv6AddressCount' - The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.
--
-- * 'siniPrivateIPAddress' - The IPv4 address of the network interface within the subnet.
--
-- * 'siniSecondaryPrivateIPAddressCount' - The number of secondary private IPv4 addresses.
--
-- * 'siniDescription' - The description.
--
-- * 'siniDeviceIndex' - The index of the device for the network interface attachment.
--
-- * 'siniIPv6Addresses' - The specific IPv6 addresses from the subnet range.
scheduledInstancesNetworkInterface
    :: ScheduledInstancesNetworkInterface
scheduledInstancesNetworkInterface =
  ScheduledInstancesNetworkInterface'
    { _siniGroups = Nothing
    , _siniDeleteOnTermination = Nothing
    , _siniAssociatePublicIPAddress = Nothing
    , _siniPrivateIPAddressConfigs = Nothing
    , _siniNetworkInterfaceId = Nothing
    , _siniSubnetId = Nothing
    , _siniIPv6AddressCount = Nothing
    , _siniPrivateIPAddress = Nothing
    , _siniSecondaryPrivateIPAddressCount = Nothing
    , _siniDescription = Nothing
    , _siniDeviceIndex = Nothing
    , _siniIPv6Addresses = Nothing
    }


-- | The IDs of the security groups.
siniGroups :: Lens' ScheduledInstancesNetworkInterface [Text]
siniGroups = lens _siniGroups (\ s a -> s{_siniGroups = a}) . _Default . _Coerce

-- | Indicates whether to delete the interface when the instance is terminated.
siniDeleteOnTermination :: Lens' ScheduledInstancesNetworkInterface (Maybe Bool)
siniDeleteOnTermination = lens _siniDeleteOnTermination (\ s a -> s{_siniDeleteOnTermination = a})

-- | Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is @true@ .
siniAssociatePublicIPAddress :: Lens' ScheduledInstancesNetworkInterface (Maybe Bool)
siniAssociatePublicIPAddress = lens _siniAssociatePublicIPAddress (\ s a -> s{_siniAssociatePublicIPAddress = a})

-- | The private IPv4 addresses.
siniPrivateIPAddressConfigs :: Lens' ScheduledInstancesNetworkInterface [ScheduledInstancesPrivateIPAddressConfig]
siniPrivateIPAddressConfigs = lens _siniPrivateIPAddressConfigs (\ s a -> s{_siniPrivateIPAddressConfigs = a}) . _Default . _Coerce

-- | The ID of the network interface.
siniNetworkInterfaceId :: Lens' ScheduledInstancesNetworkInterface (Maybe Text)
siniNetworkInterfaceId = lens _siniNetworkInterfaceId (\ s a -> s{_siniNetworkInterfaceId = a})

-- | The ID of the subnet.
siniSubnetId :: Lens' ScheduledInstancesNetworkInterface (Maybe Text)
siniSubnetId = lens _siniSubnetId (\ s a -> s{_siniSubnetId = a})

-- | The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.
siniIPv6AddressCount :: Lens' ScheduledInstancesNetworkInterface (Maybe Int)
siniIPv6AddressCount = lens _siniIPv6AddressCount (\ s a -> s{_siniIPv6AddressCount = a})

-- | The IPv4 address of the network interface within the subnet.
siniPrivateIPAddress :: Lens' ScheduledInstancesNetworkInterface (Maybe Text)
siniPrivateIPAddress = lens _siniPrivateIPAddress (\ s a -> s{_siniPrivateIPAddress = a})

-- | The number of secondary private IPv4 addresses.
siniSecondaryPrivateIPAddressCount :: Lens' ScheduledInstancesNetworkInterface (Maybe Int)
siniSecondaryPrivateIPAddressCount = lens _siniSecondaryPrivateIPAddressCount (\ s a -> s{_siniSecondaryPrivateIPAddressCount = a})

-- | The description.
siniDescription :: Lens' ScheduledInstancesNetworkInterface (Maybe Text)
siniDescription = lens _siniDescription (\ s a -> s{_siniDescription = a})

-- | The index of the device for the network interface attachment.
siniDeviceIndex :: Lens' ScheduledInstancesNetworkInterface (Maybe Int)
siniDeviceIndex = lens _siniDeviceIndex (\ s a -> s{_siniDeviceIndex = a})

-- | The specific IPv6 addresses from the subnet range.
siniIPv6Addresses :: Lens' ScheduledInstancesNetworkInterface [ScheduledInstancesIPv6Address]
siniIPv6Addresses = lens _siniIPv6Addresses (\ s a -> s{_siniIPv6Addresses = a}) . _Default . _Coerce

instance Hashable ScheduledInstancesNetworkInterface
         where

instance NFData ScheduledInstancesNetworkInterface
         where

instance ToQuery ScheduledInstancesNetworkInterface
         where
        toQuery ScheduledInstancesNetworkInterface'{..}
          = mconcat
              [toQuery (toQueryList "Group" <$> _siniGroups),
               "DeleteOnTermination" =: _siniDeleteOnTermination,
               "AssociatePublicIpAddress" =:
                 _siniAssociatePublicIPAddress,
               toQuery
                 (toQueryList "PrivateIpAddressConfig" <$>
                    _siniPrivateIPAddressConfigs),
               "NetworkInterfaceId" =: _siniNetworkInterfaceId,
               "SubnetId" =: _siniSubnetId,
               "Ipv6AddressCount" =: _siniIPv6AddressCount,
               "PrivateIpAddress" =: _siniPrivateIPAddress,
               "SecondaryPrivateIpAddressCount" =:
                 _siniSecondaryPrivateIPAddressCount,
               "Description" =: _siniDescription,
               "DeviceIndex" =: _siniDeviceIndex,
               toQuery
                 (toQueryList "Ipv6Address" <$> _siniIPv6Addresses)]

-- | Describes the placement for a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstancesPlacement' smart constructor.
data ScheduledInstancesPlacement = ScheduledInstancesPlacement'
  { _sipAvailabilityZone :: !(Maybe Text)
  , _sipGroupName        :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstancesPlacement' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sipAvailabilityZone' - The Availability Zone.
--
-- * 'sipGroupName' - The name of the placement group.
scheduledInstancesPlacement
    :: ScheduledInstancesPlacement
scheduledInstancesPlacement =
  ScheduledInstancesPlacement'
    {_sipAvailabilityZone = Nothing, _sipGroupName = Nothing}


-- | The Availability Zone.
sipAvailabilityZone :: Lens' ScheduledInstancesPlacement (Maybe Text)
sipAvailabilityZone = lens _sipAvailabilityZone (\ s a -> s{_sipAvailabilityZone = a})

-- | The name of the placement group.
sipGroupName :: Lens' ScheduledInstancesPlacement (Maybe Text)
sipGroupName = lens _sipGroupName (\ s a -> s{_sipGroupName = a})

instance Hashable ScheduledInstancesPlacement where

instance NFData ScheduledInstancesPlacement where

instance ToQuery ScheduledInstancesPlacement where
        toQuery ScheduledInstancesPlacement'{..}
          = mconcat
              ["AvailabilityZone" =: _sipAvailabilityZone,
               "GroupName" =: _sipGroupName]

-- | Describes a private IPv4 address for a Scheduled Instance.
--
--
--
-- /See:/ 'scheduledInstancesPrivateIPAddressConfig' smart constructor.
data ScheduledInstancesPrivateIPAddressConfig = ScheduledInstancesPrivateIPAddressConfig'
  { _sipiacPrimary          :: !(Maybe Bool)
  , _sipiacPrivateIPAddress :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ScheduledInstancesPrivateIPAddressConfig' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sipiacPrimary' - Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.
--
-- * 'sipiacPrivateIPAddress' - The IPv4 address.
scheduledInstancesPrivateIPAddressConfig
    :: ScheduledInstancesPrivateIPAddressConfig
scheduledInstancesPrivateIPAddressConfig =
  ScheduledInstancesPrivateIPAddressConfig'
    {_sipiacPrimary = Nothing, _sipiacPrivateIPAddress = Nothing}


-- | Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.
sipiacPrimary :: Lens' ScheduledInstancesPrivateIPAddressConfig (Maybe Bool)
sipiacPrimary = lens _sipiacPrimary (\ s a -> s{_sipiacPrimary = a})

-- | The IPv4 address.
sipiacPrivateIPAddress :: Lens' ScheduledInstancesPrivateIPAddressConfig (Maybe Text)
sipiacPrivateIPAddress = lens _sipiacPrivateIPAddress (\ s a -> s{_sipiacPrivateIPAddress = a})

instance Hashable
           ScheduledInstancesPrivateIPAddressConfig
         where

instance NFData
           ScheduledInstancesPrivateIPAddressConfig
         where

instance ToQuery
           ScheduledInstancesPrivateIPAddressConfig
         where
        toQuery ScheduledInstancesPrivateIPAddressConfig'{..}
          = mconcat
              ["Primary" =: _sipiacPrimary,
               "PrivateIpAddress" =: _sipiacPrivateIPAddress]

-- | Describes a security group.
--
--
--
-- /See:/ 'securityGroupIdentifier' smart constructor.
data SecurityGroupIdentifier = SecurityGroupIdentifier'
  { _sgiGroupId   :: !(Maybe Text)
  , _sgiGroupName :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SecurityGroupIdentifier' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sgiGroupId' - The ID of the security group.
--
-- * 'sgiGroupName' - The name of the security group.
securityGroupIdentifier
    :: SecurityGroupIdentifier
securityGroupIdentifier =
  SecurityGroupIdentifier' {_sgiGroupId = Nothing, _sgiGroupName = Nothing}


-- | The ID of the security group.
sgiGroupId :: Lens' SecurityGroupIdentifier (Maybe Text)
sgiGroupId = lens _sgiGroupId (\ s a -> s{_sgiGroupId = a})

-- | The name of the security group.
sgiGroupName :: Lens' SecurityGroupIdentifier (Maybe Text)
sgiGroupName = lens _sgiGroupName (\ s a -> s{_sgiGroupName = a})

instance FromXML SecurityGroupIdentifier where
        parseXML x
          = SecurityGroupIdentifier' <$>
              (x .@? "groupId") <*> (x .@? "groupName")

instance Hashable SecurityGroupIdentifier where

instance NFData SecurityGroupIdentifier where

-- | Describes a VPC with a security group that references your security group.
--
--
--
-- /See:/ 'securityGroupReference' smart constructor.
data SecurityGroupReference = SecurityGroupReference'
  { _sgrVPCPeeringConnectionId :: !(Maybe Text)
  , _sgrReferencingVPCId       :: !(Maybe Text)
  , _sgrGroupId                :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SecurityGroupReference' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sgrVPCPeeringConnectionId' - The ID of the VPC peering connection.
--
-- * 'sgrReferencingVPCId' - The ID of the VPC with the referencing security group.
--
-- * 'sgrGroupId' - The ID of your security group.
securityGroupReference
    :: SecurityGroupReference
securityGroupReference =
  SecurityGroupReference'
    { _sgrVPCPeeringConnectionId = Nothing
    , _sgrReferencingVPCId = Nothing
    , _sgrGroupId = Nothing
    }


-- | The ID of the VPC peering connection.
sgrVPCPeeringConnectionId :: Lens' SecurityGroupReference (Maybe Text)
sgrVPCPeeringConnectionId = lens _sgrVPCPeeringConnectionId (\ s a -> s{_sgrVPCPeeringConnectionId = a})

-- | The ID of the VPC with the referencing security group.
sgrReferencingVPCId :: Lens' SecurityGroupReference (Maybe Text)
sgrReferencingVPCId = lens _sgrReferencingVPCId (\ s a -> s{_sgrReferencingVPCId = a})

-- | The ID of your security group.
sgrGroupId :: Lens' SecurityGroupReference (Maybe Text)
sgrGroupId = lens _sgrGroupId (\ s a -> s{_sgrGroupId = a})

instance FromXML SecurityGroupReference where
        parseXML x
          = SecurityGroupReference' <$>
              (x .@? "vpcPeeringConnectionId") <*>
                (x .@? "referencingVpcId")
                <*> (x .@? "groupId")

instance Hashable SecurityGroupReference where

instance NFData SecurityGroupReference where

-- | Describes a service configuration for a VPC endpoint service.
--
--
--
-- /See:/ 'serviceConfiguration' smart constructor.
data ServiceConfiguration = ServiceConfiguration'
  { _scNetworkLoadBalancerARNs     :: !(Maybe [Text])
  , _scBaseEndpointDNSNames        :: !(Maybe [Text])
  , _scAvailabilityZones           :: !(Maybe [Text])
  , _scGatewayLoadBalancerARNs     :: !(Maybe [Text])
  , _scManagesVPCEndpoints         :: !(Maybe Bool)
  , _scServiceName                 :: !(Maybe Text)
  , _scServiceState                :: !(Maybe ServiceState)
  , _scServiceType                 :: !(Maybe [ServiceTypeDetail])
  , _scAcceptanceRequired          :: !(Maybe Bool)
  , _scServiceId                   :: !(Maybe Text)
  , _scPrivateDNSName              :: !(Maybe Text)
  , _scPrivateDNSNameConfiguration :: !(Maybe PrivateDNSNameConfiguration)
  , _scTags                        :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ServiceConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'scNetworkLoadBalancerARNs' - The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.
--
-- * 'scBaseEndpointDNSNames' - The DNS names for the service.
--
-- * 'scAvailabilityZones' - The Availability Zones in which the service is available.
--
-- * 'scGatewayLoadBalancerARNs' - The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
--
-- * 'scManagesVPCEndpoints' - Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
--
-- * 'scServiceName' - The name of the service.
--
-- * 'scServiceState' - The service state.
--
-- * 'scServiceType' - The type of service.
--
-- * 'scAcceptanceRequired' - Indicates whether requests from other AWS accounts to create an endpoint to the service must first be accepted.
--
-- * 'scServiceId' - The ID of the service.
--
-- * 'scPrivateDNSName' - The private DNS name for the service.
--
-- * 'scPrivateDNSNameConfiguration' - Information about the endpoint service private DNS name configuration.
--
-- * 'scTags' - Any tags assigned to the service.
serviceConfiguration
    :: ServiceConfiguration
serviceConfiguration =
  ServiceConfiguration'
    { _scNetworkLoadBalancerARNs = Nothing
    , _scBaseEndpointDNSNames = Nothing
    , _scAvailabilityZones = Nothing
    , _scGatewayLoadBalancerARNs = Nothing
    , _scManagesVPCEndpoints = Nothing
    , _scServiceName = Nothing
    , _scServiceState = Nothing
    , _scServiceType = Nothing
    , _scAcceptanceRequired = Nothing
    , _scServiceId = Nothing
    , _scPrivateDNSName = Nothing
    , _scPrivateDNSNameConfiguration = Nothing
    , _scTags = Nothing
    }


-- | The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.
scNetworkLoadBalancerARNs :: Lens' ServiceConfiguration [Text]
scNetworkLoadBalancerARNs = lens _scNetworkLoadBalancerARNs (\ s a -> s{_scNetworkLoadBalancerARNs = a}) . _Default . _Coerce

-- | The DNS names for the service.
scBaseEndpointDNSNames :: Lens' ServiceConfiguration [Text]
scBaseEndpointDNSNames = lens _scBaseEndpointDNSNames (\ s a -> s{_scBaseEndpointDNSNames = a}) . _Default . _Coerce

-- | The Availability Zones in which the service is available.
scAvailabilityZones :: Lens' ServiceConfiguration [Text]
scAvailabilityZones = lens _scAvailabilityZones (\ s a -> s{_scAvailabilityZones = a}) . _Default . _Coerce

-- | The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
scGatewayLoadBalancerARNs :: Lens' ServiceConfiguration [Text]
scGatewayLoadBalancerARNs = lens _scGatewayLoadBalancerARNs (\ s a -> s{_scGatewayLoadBalancerARNs = a}) . _Default . _Coerce

-- | Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
scManagesVPCEndpoints :: Lens' ServiceConfiguration (Maybe Bool)
scManagesVPCEndpoints = lens _scManagesVPCEndpoints (\ s a -> s{_scManagesVPCEndpoints = a})

-- | The name of the service.
scServiceName :: Lens' ServiceConfiguration (Maybe Text)
scServiceName = lens _scServiceName (\ s a -> s{_scServiceName = a})

-- | The service state.
scServiceState :: Lens' ServiceConfiguration (Maybe ServiceState)
scServiceState = lens _scServiceState (\ s a -> s{_scServiceState = a})

-- | The type of service.
scServiceType :: Lens' ServiceConfiguration [ServiceTypeDetail]
scServiceType = lens _scServiceType (\ s a -> s{_scServiceType = a}) . _Default . _Coerce

-- | Indicates whether requests from other AWS accounts to create an endpoint to the service must first be accepted.
scAcceptanceRequired :: Lens' ServiceConfiguration (Maybe Bool)
scAcceptanceRequired = lens _scAcceptanceRequired (\ s a -> s{_scAcceptanceRequired = a})

-- | The ID of the service.
scServiceId :: Lens' ServiceConfiguration (Maybe Text)
scServiceId = lens _scServiceId (\ s a -> s{_scServiceId = a})

-- | The private DNS name for the service.
scPrivateDNSName :: Lens' ServiceConfiguration (Maybe Text)
scPrivateDNSName = lens _scPrivateDNSName (\ s a -> s{_scPrivateDNSName = a})

-- | Information about the endpoint service private DNS name configuration.
scPrivateDNSNameConfiguration :: Lens' ServiceConfiguration (Maybe PrivateDNSNameConfiguration)
scPrivateDNSNameConfiguration = lens _scPrivateDNSNameConfiguration (\ s a -> s{_scPrivateDNSNameConfiguration = a})

-- | Any tags assigned to the service.
scTags :: Lens' ServiceConfiguration [Tag]
scTags = lens _scTags (\ s a -> s{_scTags = a}) . _Default . _Coerce

instance FromXML ServiceConfiguration where
        parseXML x
          = ServiceConfiguration' <$>
              (x .@? "networkLoadBalancerArnSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*>
                (x .@? "baseEndpointDnsNameSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "availabilityZoneSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "gatewayLoadBalancerArnSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "managesVpcEndpoints")
                <*> (x .@? "serviceName")
                <*> (x .@? "serviceState")
                <*>
                (x .@? "serviceType" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "acceptanceRequired")
                <*> (x .@? "serviceId")
                <*> (x .@? "privateDnsName")
                <*> (x .@? "privateDnsNameConfiguration")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ServiceConfiguration where

instance NFData ServiceConfiguration where

-- | Describes a VPC endpoint service.
--
--
--
-- /See:/ 'serviceDetail' smart constructor.
data ServiceDetail = ServiceDetail'
  { _sdPrivateDNSNameVerificationState :: !(Maybe DNSNameState)
  , _sdVPCEndpointPolicySupported      :: !(Maybe Bool)
  , _sdBaseEndpointDNSNames            :: !(Maybe [Text])
  , _sdOwner                           :: !(Maybe Text)
  , _sdAvailabilityZones               :: !(Maybe [Text])
  , _sdManagesVPCEndpoints             :: !(Maybe Bool)
  , _sdServiceName                     :: !(Maybe Text)
  , _sdServiceType                     :: !(Maybe [ServiceTypeDetail])
  , _sdAcceptanceRequired              :: !(Maybe Bool)
  , _sdPrivateDNSNames                 :: !(Maybe [PrivateDNSDetails])
  , _sdServiceId                       :: !(Maybe Text)
  , _sdPrivateDNSName                  :: !(Maybe Text)
  , _sdTags                            :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ServiceDetail' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sdPrivateDNSNameVerificationState' - The verification state of the VPC endpoint service. Consumers of the endpoint service cannot use the private name when the state is not @verified@ .
--
-- * 'sdVPCEndpointPolicySupported' - Indicates whether the service supports endpoint policies.
--
-- * 'sdBaseEndpointDNSNames' - The DNS names for the service.
--
-- * 'sdOwner' - The AWS account ID of the service owner.
--
-- * 'sdAvailabilityZones' - The Availability Zones in which the service is available.
--
-- * 'sdManagesVPCEndpoints' - Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
--
-- * 'sdServiceName' - The Amazon Resource Name (ARN) of the service.
--
-- * 'sdServiceType' - The type of service.
--
-- * 'sdAcceptanceRequired' - Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.
--
-- * 'sdPrivateDNSNames' - The private DNS names assigned to the VPC endpoint service.
--
-- * 'sdServiceId' - The ID of the endpoint service.
--
-- * 'sdPrivateDNSName' - The private DNS name for the service.
--
-- * 'sdTags' - Any tags assigned to the service.
serviceDetail
    :: ServiceDetail
serviceDetail =
  ServiceDetail'
    { _sdPrivateDNSNameVerificationState = Nothing
    , _sdVPCEndpointPolicySupported = Nothing
    , _sdBaseEndpointDNSNames = Nothing
    , _sdOwner = Nothing
    , _sdAvailabilityZones = Nothing
    , _sdManagesVPCEndpoints = Nothing
    , _sdServiceName = Nothing
    , _sdServiceType = Nothing
    , _sdAcceptanceRequired = Nothing
    , _sdPrivateDNSNames = Nothing
    , _sdServiceId = Nothing
    , _sdPrivateDNSName = Nothing
    , _sdTags = Nothing
    }


-- | The verification state of the VPC endpoint service. Consumers of the endpoint service cannot use the private name when the state is not @verified@ .
sdPrivateDNSNameVerificationState :: Lens' ServiceDetail (Maybe DNSNameState)
sdPrivateDNSNameVerificationState = lens _sdPrivateDNSNameVerificationState (\ s a -> s{_sdPrivateDNSNameVerificationState = a})

-- | Indicates whether the service supports endpoint policies.
sdVPCEndpointPolicySupported :: Lens' ServiceDetail (Maybe Bool)
sdVPCEndpointPolicySupported = lens _sdVPCEndpointPolicySupported (\ s a -> s{_sdVPCEndpointPolicySupported = a})

-- | The DNS names for the service.
sdBaseEndpointDNSNames :: Lens' ServiceDetail [Text]
sdBaseEndpointDNSNames = lens _sdBaseEndpointDNSNames (\ s a -> s{_sdBaseEndpointDNSNames = a}) . _Default . _Coerce

-- | The AWS account ID of the service owner.
sdOwner :: Lens' ServiceDetail (Maybe Text)
sdOwner = lens _sdOwner (\ s a -> s{_sdOwner = a})

-- | The Availability Zones in which the service is available.
sdAvailabilityZones :: Lens' ServiceDetail [Text]
sdAvailabilityZones = lens _sdAvailabilityZones (\ s a -> s{_sdAvailabilityZones = a}) . _Default . _Coerce

-- | Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
sdManagesVPCEndpoints :: Lens' ServiceDetail (Maybe Bool)
sdManagesVPCEndpoints = lens _sdManagesVPCEndpoints (\ s a -> s{_sdManagesVPCEndpoints = a})

-- | The Amazon Resource Name (ARN) of the service.
sdServiceName :: Lens' ServiceDetail (Maybe Text)
sdServiceName = lens _sdServiceName (\ s a -> s{_sdServiceName = a})

-- | The type of service.
sdServiceType :: Lens' ServiceDetail [ServiceTypeDetail]
sdServiceType = lens _sdServiceType (\ s a -> s{_sdServiceType = a}) . _Default . _Coerce

-- | Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.
sdAcceptanceRequired :: Lens' ServiceDetail (Maybe Bool)
sdAcceptanceRequired = lens _sdAcceptanceRequired (\ s a -> s{_sdAcceptanceRequired = a})

-- | The private DNS names assigned to the VPC endpoint service.
sdPrivateDNSNames :: Lens' ServiceDetail [PrivateDNSDetails]
sdPrivateDNSNames = lens _sdPrivateDNSNames (\ s a -> s{_sdPrivateDNSNames = a}) . _Default . _Coerce

-- | The ID of the endpoint service.
sdServiceId :: Lens' ServiceDetail (Maybe Text)
sdServiceId = lens _sdServiceId (\ s a -> s{_sdServiceId = a})

-- | The private DNS name for the service.
sdPrivateDNSName :: Lens' ServiceDetail (Maybe Text)
sdPrivateDNSName = lens _sdPrivateDNSName (\ s a -> s{_sdPrivateDNSName = a})

-- | Any tags assigned to the service.
sdTags :: Lens' ServiceDetail [Tag]
sdTags = lens _sdTags (\ s a -> s{_sdTags = a}) . _Default . _Coerce

instance FromXML ServiceDetail where
        parseXML x
          = ServiceDetail' <$>
              (x .@? "privateDnsNameVerificationState") <*>
                (x .@? "vpcEndpointPolicySupported")
                <*>
                (x .@? "baseEndpointDnsNameSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "owner")
                <*>
                (x .@? "availabilityZoneSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "managesVpcEndpoints")
                <*> (x .@? "serviceName")
                <*>
                (x .@? "serviceType" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "acceptanceRequired")
                <*>
                (x .@? "privateDnsNameSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "serviceId")
                <*> (x .@? "privateDnsName")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable ServiceDetail where

instance NFData ServiceDetail where

-- | Describes the type of service for a VPC endpoint.
--
--
--
-- /See:/ 'serviceTypeDetail' smart constructor.
newtype ServiceTypeDetail = ServiceTypeDetail'
  { _stdServiceType :: Maybe ServiceType
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ServiceTypeDetail' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'stdServiceType' - The type of service.
serviceTypeDetail
    :: ServiceTypeDetail
serviceTypeDetail = ServiceTypeDetail' {_stdServiceType = Nothing}


-- | The type of service.
stdServiceType :: Lens' ServiceTypeDetail (Maybe ServiceType)
stdServiceType = lens _stdServiceType (\ s a -> s{_stdServiceType = a})

instance FromXML ServiceTypeDetail where
        parseXML x
          = ServiceTypeDetail' <$> (x .@? "serviceType")

instance Hashable ServiceTypeDetail where

instance NFData ServiceTypeDetail where

-- | Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day.
--
--
--
-- /See:/ 'slotDateTimeRangeRequest' smart constructor.
data SlotDateTimeRangeRequest = SlotDateTimeRangeRequest'
  { _sdtrrEarliestTime :: !ISO8601
  , _sdtrrLatestTime   :: !ISO8601
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SlotDateTimeRangeRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sdtrrEarliestTime' - The earliest date and time, in UTC, for the Scheduled Instance to start.
--
-- * 'sdtrrLatestTime' - The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
slotDateTimeRangeRequest
    :: UTCTime -- ^ 'sdtrrEarliestTime'
    -> UTCTime -- ^ 'sdtrrLatestTime'
    -> SlotDateTimeRangeRequest
slotDateTimeRangeRequest pEarliestTime_ pLatestTime_ =
  SlotDateTimeRangeRequest'
    { _sdtrrEarliestTime = _Time # pEarliestTime_
    , _sdtrrLatestTime = _Time # pLatestTime_
    }


-- | The earliest date and time, in UTC, for the Scheduled Instance to start.
sdtrrEarliestTime :: Lens' SlotDateTimeRangeRequest UTCTime
sdtrrEarliestTime = lens _sdtrrEarliestTime (\ s a -> s{_sdtrrEarliestTime = a}) . _Time

-- | The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
sdtrrLatestTime :: Lens' SlotDateTimeRangeRequest UTCTime
sdtrrLatestTime = lens _sdtrrLatestTime (\ s a -> s{_sdtrrLatestTime = a}) . _Time

instance Hashable SlotDateTimeRangeRequest where

instance NFData SlotDateTimeRangeRequest where

instance ToQuery SlotDateTimeRangeRequest where
        toQuery SlotDateTimeRangeRequest'{..}
          = mconcat
              ["EarliestTime" =: _sdtrrEarliestTime,
               "LatestTime" =: _sdtrrLatestTime]

-- | Describes the time period for a Scheduled Instance to start its first schedule.
--
--
--
-- /See:/ 'slotStartTimeRangeRequest' smart constructor.
data SlotStartTimeRangeRequest = SlotStartTimeRangeRequest'
  { _sstrrLatestTime   :: !(Maybe ISO8601)
  , _sstrrEarliestTime :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SlotStartTimeRangeRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sstrrLatestTime' - The latest date and time, in UTC, for the Scheduled Instance to start.
--
-- * 'sstrrEarliestTime' - The earliest date and time, in UTC, for the Scheduled Instance to start.
slotStartTimeRangeRequest
    :: SlotStartTimeRangeRequest
slotStartTimeRangeRequest =
  SlotStartTimeRangeRequest'
    {_sstrrLatestTime = Nothing, _sstrrEarliestTime = Nothing}


-- | The latest date and time, in UTC, for the Scheduled Instance to start.
sstrrLatestTime :: Lens' SlotStartTimeRangeRequest (Maybe UTCTime)
sstrrLatestTime = lens _sstrrLatestTime (\ s a -> s{_sstrrLatestTime = a}) . mapping _Time

-- | The earliest date and time, in UTC, for the Scheduled Instance to start.
sstrrEarliestTime :: Lens' SlotStartTimeRangeRequest (Maybe UTCTime)
sstrrEarliestTime = lens _sstrrEarliestTime (\ s a -> s{_sstrrEarliestTime = a}) . mapping _Time

instance Hashable SlotStartTimeRangeRequest where

instance NFData SlotStartTimeRangeRequest where

instance ToQuery SlotStartTimeRangeRequest where
        toQuery SlotStartTimeRangeRequest'{..}
          = mconcat
              ["LatestTime" =: _sstrrLatestTime,
               "EarliestTime" =: _sstrrEarliestTime]

-- | Describes a snapshot.
--
--
--
-- /See:/ 'snapshot' smart constructor.
data Snapshot = Snapshot'
  { _sStateMessage        :: !(Maybe Text)
  , _sOwnerAlias          :: !(Maybe Text)
  , _sDataEncryptionKeyId :: !(Maybe Text)
  , _sOutpostARN          :: !(Maybe Text)
  , _sKMSKeyId            :: !(Maybe Text)
  , _sTags                :: !(Maybe [Tag])
  , _sSnapshotId          :: !Text
  , _sOwnerId             :: !Text
  , _sVolumeId            :: !Text
  , _sVolumeSize          :: !Int
  , _sDescription         :: !Text
  , _sStartTime           :: !ISO8601
  , _sProgress            :: !Text
  , _sState               :: !SnapshotState
  , _sEncrypted           :: !Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Snapshot' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sStateMessage' - Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by 'DescribeSnapshots' .
--
-- * 'sOwnerAlias' - The AWS owner alias, from an Amazon-maintained list (@amazon@ ). This is not the user-configured AWS account alias set using the IAM console.
--
-- * 'sDataEncryptionKeyId' - The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by 'DescribeSnapshots' .
--
-- * 'sOutpostARN' - The ARN of the AWS Outpost on which the snapshot is stored. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html EBS Local Snapshot on Outposts> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'sKMSKeyId' - The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.
--
-- * 'sTags' - Any tags assigned to the snapshot.
--
-- * 'sSnapshotId' - The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
--
-- * 'sOwnerId' - The AWS account ID of the EBS snapshot owner.
--
-- * 'sVolumeId' - The ID of the volume that was used to create the snapshot. Snapshots created by the 'CopySnapshot' action have an arbitrary volume ID that should not be used for any purpose.
--
-- * 'sVolumeSize' - The size of the volume, in GiB.
--
-- * 'sDescription' - The description for the snapshot.
--
-- * 'sStartTime' - The time stamp when the snapshot was initiated.
--
-- * 'sProgress' - The progress of the snapshot, as a percentage.
--
-- * 'sState' - The snapshot state.
--
-- * 'sEncrypted' - Indicates whether the snapshot is encrypted.
snapshot
    :: Text -- ^ 'sSnapshotId'
    -> Text -- ^ 'sOwnerId'
    -> Text -- ^ 'sVolumeId'
    -> Int -- ^ 'sVolumeSize'
    -> Text -- ^ 'sDescription'
    -> UTCTime -- ^ 'sStartTime'
    -> Text -- ^ 'sProgress'
    -> SnapshotState -- ^ 'sState'
    -> Bool -- ^ 'sEncrypted'
    -> Snapshot
snapshot pSnapshotId_ pOwnerId_ pVolumeId_ pVolumeSize_ pDescription_ pStartTime_ pProgress_ pState_ pEncrypted_ =
  Snapshot'
    { _sStateMessage = Nothing
    , _sOwnerAlias = Nothing
    , _sDataEncryptionKeyId = Nothing
    , _sOutpostARN = Nothing
    , _sKMSKeyId = Nothing
    , _sTags = Nothing
    , _sSnapshotId = pSnapshotId_
    , _sOwnerId = pOwnerId_
    , _sVolumeId = pVolumeId_
    , _sVolumeSize = pVolumeSize_
    , _sDescription = pDescription_
    , _sStartTime = _Time # pStartTime_
    , _sProgress = pProgress_
    , _sState = pState_
    , _sEncrypted = pEncrypted_
    }


-- | Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by 'DescribeSnapshots' .
sStateMessage :: Lens' Snapshot (Maybe Text)
sStateMessage = lens _sStateMessage (\ s a -> s{_sStateMessage = a})

-- | The AWS owner alias, from an Amazon-maintained list (@amazon@ ). This is not the user-configured AWS account alias set using the IAM console.
sOwnerAlias :: Lens' Snapshot (Maybe Text)
sOwnerAlias = lens _sOwnerAlias (\ s a -> s{_sOwnerAlias = a})

-- | The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by 'DescribeSnapshots' .
sDataEncryptionKeyId :: Lens' Snapshot (Maybe Text)
sDataEncryptionKeyId = lens _sDataEncryptionKeyId (\ s a -> s{_sDataEncryptionKeyId = a})

-- | The ARN of the AWS Outpost on which the snapshot is stored. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html EBS Local Snapshot on Outposts> in the /Amazon Elastic Compute Cloud User Guide/ .
sOutpostARN :: Lens' Snapshot (Maybe Text)
sOutpostARN = lens _sOutpostARN (\ s a -> s{_sOutpostARN = a})

-- | The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.
sKMSKeyId :: Lens' Snapshot (Maybe Text)
sKMSKeyId = lens _sKMSKeyId (\ s a -> s{_sKMSKeyId = a})

-- | Any tags assigned to the snapshot.
sTags :: Lens' Snapshot [Tag]
sTags = lens _sTags (\ s a -> s{_sTags = a}) . _Default . _Coerce

-- | The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
sSnapshotId :: Lens' Snapshot Text
sSnapshotId = lens _sSnapshotId (\ s a -> s{_sSnapshotId = a})

-- | The AWS account ID of the EBS snapshot owner.
sOwnerId :: Lens' Snapshot Text
sOwnerId = lens _sOwnerId (\ s a -> s{_sOwnerId = a})

-- | The ID of the volume that was used to create the snapshot. Snapshots created by the 'CopySnapshot' action have an arbitrary volume ID that should not be used for any purpose.
sVolumeId :: Lens' Snapshot Text
sVolumeId = lens _sVolumeId (\ s a -> s{_sVolumeId = a})

-- | The size of the volume, in GiB.
sVolumeSize :: Lens' Snapshot Int
sVolumeSize = lens _sVolumeSize (\ s a -> s{_sVolumeSize = a})

-- | The description for the snapshot.
sDescription :: Lens' Snapshot Text
sDescription = lens _sDescription (\ s a -> s{_sDescription = a})

-- | The time stamp when the snapshot was initiated.
sStartTime :: Lens' Snapshot UTCTime
sStartTime = lens _sStartTime (\ s a -> s{_sStartTime = a}) . _Time

-- | The progress of the snapshot, as a percentage.
sProgress :: Lens' Snapshot Text
sProgress = lens _sProgress (\ s a -> s{_sProgress = a})

-- | The snapshot state.
sState :: Lens' Snapshot SnapshotState
sState = lens _sState (\ s a -> s{_sState = a})

-- | Indicates whether the snapshot is encrypted.
sEncrypted :: Lens' Snapshot Bool
sEncrypted = lens _sEncrypted (\ s a -> s{_sEncrypted = a})

instance FromXML Snapshot where
        parseXML x
          = Snapshot' <$>
              (x .@? "statusMessage") <*> (x .@? "ownerAlias") <*>
                (x .@? "dataEncryptionKeyId")
                <*> (x .@? "outpostArn")
                <*> (x .@? "kmsKeyId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@ "snapshotId")
                <*> (x .@ "ownerId")
                <*> (x .@ "volumeId")
                <*> (x .@ "volumeSize")
                <*> (x .@ "description")
                <*> (x .@ "startTime")
                <*> (x .@ "progress")
                <*> (x .@ "status")
                <*> (x .@ "encrypted")

instance Hashable Snapshot where

instance NFData Snapshot where

-- | Describes the snapshot created from the imported disk.
--
--
--
-- /See:/ 'snapshotDetail' smart constructor.
data SnapshotDetail = SnapshotDetail'
  { _sdStatus        :: !(Maybe Text)
  , _sdProgress      :: !(Maybe Text)
  , _sdFormat        :: !(Maybe Text)
  , _sdURL           :: !(Maybe Text)
  , _sdDeviceName    :: !(Maybe Text)
  , _sdStatusMessage :: !(Maybe Text)
  , _sdUserBucket    :: !(Maybe UserBucketDetails)
  , _sdDiskImageSize :: !(Maybe Double)
  , _sdDescription   :: !(Maybe Text)
  , _sdSnapshotId    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SnapshotDetail' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sdStatus' - A brief status of the snapshot creation.
--
-- * 'sdProgress' - The percentage of progress for the task.
--
-- * 'sdFormat' - The format of the disk image from which the snapshot is created.
--
-- * 'sdURL' - The URL used to access the disk image.
--
-- * 'sdDeviceName' - The block device mapping for the snapshot.
--
-- * 'sdStatusMessage' - A detailed status message for the snapshot creation.
--
-- * 'sdUserBucket' - The Amazon S3 bucket for the disk image.
--
-- * 'sdDiskImageSize' - The size of the disk in the snapshot, in GiB.
--
-- * 'sdDescription' - A description for the snapshot.
--
-- * 'sdSnapshotId' - The snapshot ID of the disk being imported.
snapshotDetail
    :: SnapshotDetail
snapshotDetail =
  SnapshotDetail'
    { _sdStatus = Nothing
    , _sdProgress = Nothing
    , _sdFormat = Nothing
    , _sdURL = Nothing
    , _sdDeviceName = Nothing
    , _sdStatusMessage = Nothing
    , _sdUserBucket = Nothing
    , _sdDiskImageSize = Nothing
    , _sdDescription = Nothing
    , _sdSnapshotId = Nothing
    }


-- | A brief status of the snapshot creation.
sdStatus :: Lens' SnapshotDetail (Maybe Text)
sdStatus = lens _sdStatus (\ s a -> s{_sdStatus = a})

-- | The percentage of progress for the task.
sdProgress :: Lens' SnapshotDetail (Maybe Text)
sdProgress = lens _sdProgress (\ s a -> s{_sdProgress = a})

-- | The format of the disk image from which the snapshot is created.
sdFormat :: Lens' SnapshotDetail (Maybe Text)
sdFormat = lens _sdFormat (\ s a -> s{_sdFormat = a})

-- | The URL used to access the disk image.
sdURL :: Lens' SnapshotDetail (Maybe Text)
sdURL = lens _sdURL (\ s a -> s{_sdURL = a})

-- | The block device mapping for the snapshot.
sdDeviceName :: Lens' SnapshotDetail (Maybe Text)
sdDeviceName = lens _sdDeviceName (\ s a -> s{_sdDeviceName = a})

-- | A detailed status message for the snapshot creation.
sdStatusMessage :: Lens' SnapshotDetail (Maybe Text)
sdStatusMessage = lens _sdStatusMessage (\ s a -> s{_sdStatusMessage = a})

-- | The Amazon S3 bucket for the disk image.
sdUserBucket :: Lens' SnapshotDetail (Maybe UserBucketDetails)
sdUserBucket = lens _sdUserBucket (\ s a -> s{_sdUserBucket = a})

-- | The size of the disk in the snapshot, in GiB.
sdDiskImageSize :: Lens' SnapshotDetail (Maybe Double)
sdDiskImageSize = lens _sdDiskImageSize (\ s a -> s{_sdDiskImageSize = a})

-- | A description for the snapshot.
sdDescription :: Lens' SnapshotDetail (Maybe Text)
sdDescription = lens _sdDescription (\ s a -> s{_sdDescription = a})

-- | The snapshot ID of the disk being imported.
sdSnapshotId :: Lens' SnapshotDetail (Maybe Text)
sdSnapshotId = lens _sdSnapshotId (\ s a -> s{_sdSnapshotId = a})

instance FromXML SnapshotDetail where
        parseXML x
          = SnapshotDetail' <$>
              (x .@? "status") <*> (x .@? "progress") <*>
                (x .@? "format")
                <*> (x .@? "url")
                <*> (x .@? "deviceName")
                <*> (x .@? "statusMessage")
                <*> (x .@? "userBucket")
                <*> (x .@? "diskImageSize")
                <*> (x .@? "description")
                <*> (x .@? "snapshotId")

instance Hashable SnapshotDetail where

instance NFData SnapshotDetail where

-- | The disk container object for the import snapshot request.
--
--
--
-- /See:/ 'snapshotDiskContainer' smart constructor.
data SnapshotDiskContainer = SnapshotDiskContainer'
  { _sdcFormat      :: !(Maybe Text)
  , _sdcURL         :: !(Maybe Text)
  , _sdcUserBucket  :: !(Maybe UserBucket)
  , _sdcDescription :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SnapshotDiskContainer' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sdcFormat' - The format of the disk image being imported. Valid values: @VHD@ | @VMDK@
--
-- * 'sdcURL' - The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
--
-- * 'sdcUserBucket' - The Amazon S3 bucket for the disk image.
--
-- * 'sdcDescription' - The description of the disk image being imported.
snapshotDiskContainer
    :: SnapshotDiskContainer
snapshotDiskContainer =
  SnapshotDiskContainer'
    { _sdcFormat = Nothing
    , _sdcURL = Nothing
    , _sdcUserBucket = Nothing
    , _sdcDescription = Nothing
    }


-- | The format of the disk image being imported. Valid values: @VHD@ | @VMDK@
sdcFormat :: Lens' SnapshotDiskContainer (Maybe Text)
sdcFormat = lens _sdcFormat (\ s a -> s{_sdcFormat = a})

-- | The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
sdcURL :: Lens' SnapshotDiskContainer (Maybe Text)
sdcURL = lens _sdcURL (\ s a -> s{_sdcURL = a})

-- | The Amazon S3 bucket for the disk image.
sdcUserBucket :: Lens' SnapshotDiskContainer (Maybe UserBucket)
sdcUserBucket = lens _sdcUserBucket (\ s a -> s{_sdcUserBucket = a})

-- | The description of the disk image being imported.
sdcDescription :: Lens' SnapshotDiskContainer (Maybe Text)
sdcDescription = lens _sdcDescription (\ s a -> s{_sdcDescription = a})

instance Hashable SnapshotDiskContainer where

instance NFData SnapshotDiskContainer where

instance ToQuery SnapshotDiskContainer where
        toQuery SnapshotDiskContainer'{..}
          = mconcat
              ["Format" =: _sdcFormat, "Url" =: _sdcURL,
               "UserBucket" =: _sdcUserBucket,
               "Description" =: _sdcDescription]

-- | Information about a snapshot.
--
--
--
-- /See:/ 'snapshotInfo' smart constructor.
data SnapshotInfo = SnapshotInfo'
  { _siState       :: !(Maybe SnapshotState)
  , _siProgress    :: !(Maybe Text)
  , _siStartTime   :: !(Maybe ISO8601)
  , _siVolumeSize  :: !(Maybe Int)
  , _siOutpostARN  :: !(Maybe Text)
  , _siEncrypted   :: !(Maybe Bool)
  , _siOwnerId     :: !(Maybe Text)
  , _siVolumeId    :: !(Maybe Text)
  , _siDescription :: !(Maybe Text)
  , _siTags        :: !(Maybe [Tag])
  , _siSnapshotId  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SnapshotInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'siState' - Current state of the snapshot.
--
-- * 'siProgress' - Progress this snapshot has made towards completing.
--
-- * 'siStartTime' - Time this snapshot was started. This is the same for all snapshots initiated by the same request.
--
-- * 'siVolumeSize' - Size of the volume from which this snapshot was created.
--
-- * 'siOutpostARN' - The ARN of the AWS Outpost on which the snapshot is stored. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html EBS Local Snapshot on Outposts> in the /Amazon Elastic Compute Cloud User Guide/ .
--
-- * 'siEncrypted' - Indicates whether the snapshot is encrypted.
--
-- * 'siOwnerId' - Account id used when creating this snapshot.
--
-- * 'siVolumeId' - Source volume from which this snapshot was created.
--
-- * 'siDescription' - Description specified by the CreateSnapshotRequest that has been applied to all snapshots.
--
-- * 'siTags' - Tags associated with this snapshot.
--
-- * 'siSnapshotId' - Snapshot id that can be used to describe this snapshot.
snapshotInfo
    :: SnapshotInfo
snapshotInfo =
  SnapshotInfo'
    { _siState = Nothing
    , _siProgress = Nothing
    , _siStartTime = Nothing
    , _siVolumeSize = Nothing
    , _siOutpostARN = Nothing
    , _siEncrypted = Nothing
    , _siOwnerId = Nothing
    , _siVolumeId = Nothing
    , _siDescription = Nothing
    , _siTags = Nothing
    , _siSnapshotId = Nothing
    }


-- | Current state of the snapshot.
siState :: Lens' SnapshotInfo (Maybe SnapshotState)
siState = lens _siState (\ s a -> s{_siState = a})

-- | Progress this snapshot has made towards completing.
siProgress :: Lens' SnapshotInfo (Maybe Text)
siProgress = lens _siProgress (\ s a -> s{_siProgress = a})

-- | Time this snapshot was started. This is the same for all snapshots initiated by the same request.
siStartTime :: Lens' SnapshotInfo (Maybe UTCTime)
siStartTime = lens _siStartTime (\ s a -> s{_siStartTime = a}) . mapping _Time

-- | Size of the volume from which this snapshot was created.
siVolumeSize :: Lens' SnapshotInfo (Maybe Int)
siVolumeSize = lens _siVolumeSize (\ s a -> s{_siVolumeSize = a})

-- | The ARN of the AWS Outpost on which the snapshot is stored. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshots-outposts.html EBS Local Snapshot on Outposts> in the /Amazon Elastic Compute Cloud User Guide/ .
siOutpostARN :: Lens' SnapshotInfo (Maybe Text)
siOutpostARN = lens _siOutpostARN (\ s a -> s{_siOutpostARN = a})

-- | Indicates whether the snapshot is encrypted.
siEncrypted :: Lens' SnapshotInfo (Maybe Bool)
siEncrypted = lens _siEncrypted (\ s a -> s{_siEncrypted = a})

-- | Account id used when creating this snapshot.
siOwnerId :: Lens' SnapshotInfo (Maybe Text)
siOwnerId = lens _siOwnerId (\ s a -> s{_siOwnerId = a})

-- | Source volume from which this snapshot was created.
siVolumeId :: Lens' SnapshotInfo (Maybe Text)
siVolumeId = lens _siVolumeId (\ s a -> s{_siVolumeId = a})

-- | Description specified by the CreateSnapshotRequest that has been applied to all snapshots.
siDescription :: Lens' SnapshotInfo (Maybe Text)
siDescription = lens _siDescription (\ s a -> s{_siDescription = a})

-- | Tags associated with this snapshot.
siTags :: Lens' SnapshotInfo [Tag]
siTags = lens _siTags (\ s a -> s{_siTags = a}) . _Default . _Coerce

-- | Snapshot id that can be used to describe this snapshot.
siSnapshotId :: Lens' SnapshotInfo (Maybe Text)
siSnapshotId = lens _siSnapshotId (\ s a -> s{_siSnapshotId = a})

instance FromXML SnapshotInfo where
        parseXML x
          = SnapshotInfo' <$>
              (x .@? "state") <*> (x .@? "progress") <*>
                (x .@? "startTime")
                <*> (x .@? "volumeSize")
                <*> (x .@? "outpostArn")
                <*> (x .@? "encrypted")
                <*> (x .@? "ownerId")
                <*> (x .@? "volumeId")
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "snapshotId")

instance Hashable SnapshotInfo where

instance NFData SnapshotInfo where

-- | Details about the import snapshot task.
--
--
--
-- /See:/ 'snapshotTaskDetail' smart constructor.
data SnapshotTaskDetail = SnapshotTaskDetail'
  { _stdStatus        :: !(Maybe Text)
  , _stdProgress      :: !(Maybe Text)
  , _stdFormat        :: !(Maybe Text)
  , _stdURL           :: !(Maybe Text)
  , _stdEncrypted     :: !(Maybe Bool)
  , _stdKMSKeyId      :: !(Maybe Text)
  , _stdStatusMessage :: !(Maybe Text)
  , _stdUserBucket    :: !(Maybe UserBucketDetails)
  , _stdDiskImageSize :: !(Maybe Double)
  , _stdDescription   :: !(Maybe Text)
  , _stdSnapshotId    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SnapshotTaskDetail' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'stdStatus' - A brief status for the import snapshot task.
--
-- * 'stdProgress' - The percentage of completion for the import snapshot task.
--
-- * 'stdFormat' - The format of the disk image from which the snapshot is created.
--
-- * 'stdURL' - The URL of the disk image from which the snapshot is created.
--
-- * 'stdEncrypted' - Indicates whether the snapshot is encrypted.
--
-- * 'stdKMSKeyId' - The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted snapshot.
--
-- * 'stdStatusMessage' - A detailed status message for the import snapshot task.
--
-- * 'stdUserBucket' - The Amazon S3 bucket for the disk image.
--
-- * 'stdDiskImageSize' - The size of the disk in the snapshot, in GiB.
--
-- * 'stdDescription' - The description of the snapshot.
--
-- * 'stdSnapshotId' - The snapshot ID of the disk being imported.
snapshotTaskDetail
    :: SnapshotTaskDetail
snapshotTaskDetail =
  SnapshotTaskDetail'
    { _stdStatus = Nothing
    , _stdProgress = Nothing
    , _stdFormat = Nothing
    , _stdURL = Nothing
    , _stdEncrypted = Nothing
    , _stdKMSKeyId = Nothing
    , _stdStatusMessage = Nothing
    , _stdUserBucket = Nothing
    , _stdDiskImageSize = Nothing
    , _stdDescription = Nothing
    , _stdSnapshotId = Nothing
    }


-- | A brief status for the import snapshot task.
stdStatus :: Lens' SnapshotTaskDetail (Maybe Text)
stdStatus = lens _stdStatus (\ s a -> s{_stdStatus = a})

-- | The percentage of completion for the import snapshot task.
stdProgress :: Lens' SnapshotTaskDetail (Maybe Text)
stdProgress = lens _stdProgress (\ s a -> s{_stdProgress = a})

-- | The format of the disk image from which the snapshot is created.
stdFormat :: Lens' SnapshotTaskDetail (Maybe Text)
stdFormat = lens _stdFormat (\ s a -> s{_stdFormat = a})

-- | The URL of the disk image from which the snapshot is created.
stdURL :: Lens' SnapshotTaskDetail (Maybe Text)
stdURL = lens _stdURL (\ s a -> s{_stdURL = a})

-- | Indicates whether the snapshot is encrypted.
stdEncrypted :: Lens' SnapshotTaskDetail (Maybe Bool)
stdEncrypted = lens _stdEncrypted (\ s a -> s{_stdEncrypted = a})

-- | The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted snapshot.
stdKMSKeyId :: Lens' SnapshotTaskDetail (Maybe Text)
stdKMSKeyId = lens _stdKMSKeyId (\ s a -> s{_stdKMSKeyId = a})

-- | A detailed status message for the import snapshot task.
stdStatusMessage :: Lens' SnapshotTaskDetail (Maybe Text)
stdStatusMessage = lens _stdStatusMessage (\ s a -> s{_stdStatusMessage = a})

-- | The Amazon S3 bucket for the disk image.
stdUserBucket :: Lens' SnapshotTaskDetail (Maybe UserBucketDetails)
stdUserBucket = lens _stdUserBucket (\ s a -> s{_stdUserBucket = a})

-- | The size of the disk in the snapshot, in GiB.
stdDiskImageSize :: Lens' SnapshotTaskDetail (Maybe Double)
stdDiskImageSize = lens _stdDiskImageSize (\ s a -> s{_stdDiskImageSize = a})

-- | The description of the snapshot.
stdDescription :: Lens' SnapshotTaskDetail (Maybe Text)
stdDescription = lens _stdDescription (\ s a -> s{_stdDescription = a})

-- | The snapshot ID of the disk being imported.
stdSnapshotId :: Lens' SnapshotTaskDetail (Maybe Text)
stdSnapshotId = lens _stdSnapshotId (\ s a -> s{_stdSnapshotId = a})

instance FromXML SnapshotTaskDetail where
        parseXML x
          = SnapshotTaskDetail' <$>
              (x .@? "status") <*> (x .@? "progress") <*>
                (x .@? "format")
                <*> (x .@? "url")
                <*> (x .@? "encrypted")
                <*> (x .@? "kmsKeyId")
                <*> (x .@? "statusMessage")
                <*> (x .@? "userBucket")
                <*> (x .@? "diskImageSize")
                <*> (x .@? "description")
                <*> (x .@? "snapshotId")

instance Hashable SnapshotTaskDetail where

instance NFData SnapshotTaskDetail where

-- | The Spot Instance replacement strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#spot-fleet-capacity-rebalance Capacity rebalancing> in the /Amazon EC2 User Guide for Linux Instances/ .
--
--
--
-- /See:/ 'spotCapacityRebalance' smart constructor.
newtype SpotCapacityRebalance = SpotCapacityRebalance'
  { _scrReplacementStrategy :: Maybe ReplacementStrategy
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotCapacityRebalance' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'scrReplacementStrategy' - The replacement strategy to use. Only available for fleets of type @maintain@ . You must specify a value, otherwise you get an error. To allow Spot Fleet to launch a replacement Spot Instance when an instance rebalance notification is emitted for a Spot Instance in the fleet, specify @launch@ .
spotCapacityRebalance
    :: SpotCapacityRebalance
spotCapacityRebalance =
  SpotCapacityRebalance' {_scrReplacementStrategy = Nothing}


-- | The replacement strategy to use. Only available for fleets of type @maintain@ . You must specify a value, otherwise you get an error. To allow Spot Fleet to launch a replacement Spot Instance when an instance rebalance notification is emitted for a Spot Instance in the fleet, specify @launch@ .
scrReplacementStrategy :: Lens' SpotCapacityRebalance (Maybe ReplacementStrategy)
scrReplacementStrategy = lens _scrReplacementStrategy (\ s a -> s{_scrReplacementStrategy = a})

instance FromXML SpotCapacityRebalance where
        parseXML x
          = SpotCapacityRebalance' <$>
              (x .@? "replacementStrategy")

instance Hashable SpotCapacityRebalance where

instance NFData SpotCapacityRebalance where

instance ToQuery SpotCapacityRebalance where
        toQuery SpotCapacityRebalance'{..}
          = mconcat
              ["ReplacementStrategy" =: _scrReplacementStrategy]

-- | Describes the data feed for a Spot Instance.
--
--
--
-- /See:/ 'spotDatafeedSubscription' smart constructor.
data SpotDatafeedSubscription = SpotDatafeedSubscription'
  { _sdsState   :: !(Maybe DatafeedSubscriptionState)
  , _sdsPrefix  :: !(Maybe Text)
  , _sdsBucket  :: !(Maybe Text)
  , _sdsOwnerId :: !(Maybe Text)
  , _sdsFault   :: !(Maybe SpotInstanceStateFault)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotDatafeedSubscription' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sdsState' - The state of the Spot Instance data feed subscription.
--
-- * 'sdsPrefix' - The prefix for the data feed files.
--
-- * 'sdsBucket' - The name of the Amazon S3 bucket where the Spot Instance data feed is located.
--
-- * 'sdsOwnerId' - The AWS account ID of the account.
--
-- * 'sdsFault' - The fault codes for the Spot Instance request, if any.
spotDatafeedSubscription
    :: SpotDatafeedSubscription
spotDatafeedSubscription =
  SpotDatafeedSubscription'
    { _sdsState = Nothing
    , _sdsPrefix = Nothing
    , _sdsBucket = Nothing
    , _sdsOwnerId = Nothing
    , _sdsFault = Nothing
    }


-- | The state of the Spot Instance data feed subscription.
sdsState :: Lens' SpotDatafeedSubscription (Maybe DatafeedSubscriptionState)
sdsState = lens _sdsState (\ s a -> s{_sdsState = a})

-- | The prefix for the data feed files.
sdsPrefix :: Lens' SpotDatafeedSubscription (Maybe Text)
sdsPrefix = lens _sdsPrefix (\ s a -> s{_sdsPrefix = a})

-- | The name of the Amazon S3 bucket where the Spot Instance data feed is located.
sdsBucket :: Lens' SpotDatafeedSubscription (Maybe Text)
sdsBucket = lens _sdsBucket (\ s a -> s{_sdsBucket = a})

-- | The AWS account ID of the account.
sdsOwnerId :: Lens' SpotDatafeedSubscription (Maybe Text)
sdsOwnerId = lens _sdsOwnerId (\ s a -> s{_sdsOwnerId = a})

-- | The fault codes for the Spot Instance request, if any.
sdsFault :: Lens' SpotDatafeedSubscription (Maybe SpotInstanceStateFault)
sdsFault = lens _sdsFault (\ s a -> s{_sdsFault = a})

instance FromXML SpotDatafeedSubscription where
        parseXML x
          = SpotDatafeedSubscription' <$>
              (x .@? "state") <*> (x .@? "prefix") <*>
                (x .@? "bucket")
                <*> (x .@? "ownerId")
                <*> (x .@? "fault")

instance Hashable SpotDatafeedSubscription where

instance NFData SpotDatafeedSubscription where

-- | Describes the launch specification for one or more Spot Instances. If you include On-Demand capacity in your fleet request or want to specify an EFA network device, you can't use @SpotFleetLaunchSpecification@ ; you must use <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html LaunchTemplateConfig> .
--
--
--
-- /See:/ 'spotFleetLaunchSpecification' smart constructor.
data SpotFleetLaunchSpecification = SpotFleetLaunchSpecification'
  { _sflsSecurityGroups      :: !(Maybe [GroupIdentifier])
  , _sflsSpotPrice           :: !(Maybe Text)
  , _sflsWeightedCapacity    :: !(Maybe Double)
  , _sflsKeyName             :: !(Maybe Text)
  , _sflsNetworkInterfaces   :: !(Maybe [InstanceNetworkInterfaceSpecification])
  , _sflsRAMDiskId           :: !(Maybe Text)
  , _sflsSubnetId            :: !(Maybe Text)
  , _sflsKernelId            :: !(Maybe Text)
  , _sflsInstanceType        :: !(Maybe InstanceType)
  , _sflsEBSOptimized        :: !(Maybe Bool)
  , _sflsUserData            :: !(Maybe Text)
  , _sflsMonitoring          :: !(Maybe SpotFleetMonitoring)
  , _sflsTagSpecifications   :: !(Maybe [SpotFleetTagSpecification])
  , _sflsIAMInstanceProfile  :: !(Maybe IAMInstanceProfileSpecification)
  , _sflsImageId             :: !(Maybe Text)
  , _sflsAddressingType      :: !(Maybe Text)
  , _sflsBlockDeviceMappings :: !(Maybe [BlockDeviceMapping])
  , _sflsPlacement           :: !(Maybe SpotPlacement)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotFleetLaunchSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sflsSecurityGroups' - One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
--
-- * 'sflsSpotPrice' - The maximum price per unit hour that you are willing to pay for a Spot Instance. If this value is not specified, the default is the Spot price specified for the fleet. To determine the Spot price per unit hour, divide the Spot price by the value of @WeightedCapacity@ .
--
-- * 'sflsWeightedCapacity' - The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O. If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.
--
-- * 'sflsKeyName' - The name of the key pair.
--
-- * 'sflsNetworkInterfaces' - One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
--
-- * 'sflsRAMDiskId' - The ID of the RAM disk. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID.
--
-- * 'sflsSubnetId' - The IDs of the subnets in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
--
-- * 'sflsKernelId' - The ID of the kernel.
--
-- * 'sflsInstanceType' - The instance type.
--
-- * 'sflsEBSOptimized' - Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: @false@
--
-- * 'sflsUserData' - The Base64-encoded user data that instances use when starting up.
--
-- * 'sflsMonitoring' - Enable or disable monitoring for the instances.
--
-- * 'sflsTagSpecifications' - The tags to apply during creation.
--
-- * 'sflsIAMInstanceProfile' - The IAM instance profile.
--
-- * 'sflsImageId' - The ID of the AMI.
--
-- * 'sflsAddressingType' - Deprecated.
--
-- * 'sflsBlockDeviceMappings' - One or more block devices that are mapped to the Spot Instances. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
--
-- * 'sflsPlacement' - The placement information.
spotFleetLaunchSpecification
    :: SpotFleetLaunchSpecification
spotFleetLaunchSpecification =
  SpotFleetLaunchSpecification'
    { _sflsSecurityGroups = Nothing
    , _sflsSpotPrice = Nothing
    , _sflsWeightedCapacity = Nothing
    , _sflsKeyName = Nothing
    , _sflsNetworkInterfaces = Nothing
    , _sflsRAMDiskId = Nothing
    , _sflsSubnetId = Nothing
    , _sflsKernelId = Nothing
    , _sflsInstanceType = Nothing
    , _sflsEBSOptimized = Nothing
    , _sflsUserData = Nothing
    , _sflsMonitoring = Nothing
    , _sflsTagSpecifications = Nothing
    , _sflsIAMInstanceProfile = Nothing
    , _sflsImageId = Nothing
    , _sflsAddressingType = Nothing
    , _sflsBlockDeviceMappings = Nothing
    , _sflsPlacement = Nothing
    }


-- | One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
sflsSecurityGroups :: Lens' SpotFleetLaunchSpecification [GroupIdentifier]
sflsSecurityGroups = lens _sflsSecurityGroups (\ s a -> s{_sflsSecurityGroups = a}) . _Default . _Coerce

-- | The maximum price per unit hour that you are willing to pay for a Spot Instance. If this value is not specified, the default is the Spot price specified for the fleet. To determine the Spot price per unit hour, divide the Spot price by the value of @WeightedCapacity@ .
sflsSpotPrice :: Lens' SpotFleetLaunchSpecification (Maybe Text)
sflsSpotPrice = lens _sflsSpotPrice (\ s a -> s{_sflsSpotPrice = a})

-- | The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O. If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.
sflsWeightedCapacity :: Lens' SpotFleetLaunchSpecification (Maybe Double)
sflsWeightedCapacity = lens _sflsWeightedCapacity (\ s a -> s{_sflsWeightedCapacity = a})

-- | The name of the key pair.
sflsKeyName :: Lens' SpotFleetLaunchSpecification (Maybe Text)
sflsKeyName = lens _sflsKeyName (\ s a -> s{_sflsKeyName = a})

-- | One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
sflsNetworkInterfaces :: Lens' SpotFleetLaunchSpecification [InstanceNetworkInterfaceSpecification]
sflsNetworkInterfaces = lens _sflsNetworkInterfaces (\ s a -> s{_sflsNetworkInterfaces = a}) . _Default . _Coerce

-- | The ID of the RAM disk. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID.
sflsRAMDiskId :: Lens' SpotFleetLaunchSpecification (Maybe Text)
sflsRAMDiskId = lens _sflsRAMDiskId (\ s a -> s{_sflsRAMDiskId = a})

-- | The IDs of the subnets in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
sflsSubnetId :: Lens' SpotFleetLaunchSpecification (Maybe Text)
sflsSubnetId = lens _sflsSubnetId (\ s a -> s{_sflsSubnetId = a})

-- | The ID of the kernel.
sflsKernelId :: Lens' SpotFleetLaunchSpecification (Maybe Text)
sflsKernelId = lens _sflsKernelId (\ s a -> s{_sflsKernelId = a})

-- | The instance type.
sflsInstanceType :: Lens' SpotFleetLaunchSpecification (Maybe InstanceType)
sflsInstanceType = lens _sflsInstanceType (\ s a -> s{_sflsInstanceType = a})

-- | Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: @false@
sflsEBSOptimized :: Lens' SpotFleetLaunchSpecification (Maybe Bool)
sflsEBSOptimized = lens _sflsEBSOptimized (\ s a -> s{_sflsEBSOptimized = a})

-- | The Base64-encoded user data that instances use when starting up.
sflsUserData :: Lens' SpotFleetLaunchSpecification (Maybe Text)
sflsUserData = lens _sflsUserData (\ s a -> s{_sflsUserData = a})

-- | Enable or disable monitoring for the instances.
sflsMonitoring :: Lens' SpotFleetLaunchSpecification (Maybe SpotFleetMonitoring)
sflsMonitoring = lens _sflsMonitoring (\ s a -> s{_sflsMonitoring = a})

-- | The tags to apply during creation.
sflsTagSpecifications :: Lens' SpotFleetLaunchSpecification [SpotFleetTagSpecification]
sflsTagSpecifications = lens _sflsTagSpecifications (\ s a -> s{_sflsTagSpecifications = a}) . _Default . _Coerce

-- | The IAM instance profile.
sflsIAMInstanceProfile :: Lens' SpotFleetLaunchSpecification (Maybe IAMInstanceProfileSpecification)
sflsIAMInstanceProfile = lens _sflsIAMInstanceProfile (\ s a -> s{_sflsIAMInstanceProfile = a})

-- | The ID of the AMI.
sflsImageId :: Lens' SpotFleetLaunchSpecification (Maybe Text)
sflsImageId = lens _sflsImageId (\ s a -> s{_sflsImageId = a})

-- | Deprecated.
sflsAddressingType :: Lens' SpotFleetLaunchSpecification (Maybe Text)
sflsAddressingType = lens _sflsAddressingType (\ s a -> s{_sflsAddressingType = a})

-- | One or more block devices that are mapped to the Spot Instances. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
sflsBlockDeviceMappings :: Lens' SpotFleetLaunchSpecification [BlockDeviceMapping]
sflsBlockDeviceMappings = lens _sflsBlockDeviceMappings (\ s a -> s{_sflsBlockDeviceMappings = a}) . _Default . _Coerce

-- | The placement information.
sflsPlacement :: Lens' SpotFleetLaunchSpecification (Maybe SpotPlacement)
sflsPlacement = lens _sflsPlacement (\ s a -> s{_sflsPlacement = a})

instance FromXML SpotFleetLaunchSpecification where
        parseXML x
          = SpotFleetLaunchSpecification' <$>
              (x .@? "groupSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "spotPrice")
                <*> (x .@? "weightedCapacity")
                <*> (x .@? "keyName")
                <*>
                (x .@? "networkInterfaceSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "ramdiskId")
                <*> (x .@? "subnetId")
                <*> (x .@? "kernelId")
                <*> (x .@? "instanceType")
                <*> (x .@? "ebsOptimized")
                <*> (x .@? "userData")
                <*> (x .@? "monitoring")
                <*>
                (x .@? "tagSpecificationSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "iamInstanceProfile")
                <*> (x .@? "imageId")
                <*> (x .@? "addressingType")
                <*>
                (x .@? "blockDeviceMapping" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "placement")

instance Hashable SpotFleetLaunchSpecification where

instance NFData SpotFleetLaunchSpecification where

instance ToQuery SpotFleetLaunchSpecification where
        toQuery SpotFleetLaunchSpecification'{..}
          = mconcat
              [toQuery
                 (toQueryList "GroupSet" <$> _sflsSecurityGroups),
               "SpotPrice" =: _sflsSpotPrice,
               "WeightedCapacity" =: _sflsWeightedCapacity,
               "KeyName" =: _sflsKeyName,
               toQuery
                 (toQueryList "NetworkInterfaceSet" <$>
                    _sflsNetworkInterfaces),
               "RamdiskId" =: _sflsRAMDiskId,
               "SubnetId" =: _sflsSubnetId,
               "KernelId" =: _sflsKernelId,
               "InstanceType" =: _sflsInstanceType,
               "EbsOptimized" =: _sflsEBSOptimized,
               "UserData" =: _sflsUserData,
               "Monitoring" =: _sflsMonitoring,
               toQuery
                 (toQueryList "TagSpecificationSet" <$>
                    _sflsTagSpecifications),
               "IamInstanceProfile" =: _sflsIAMInstanceProfile,
               "ImageId" =: _sflsImageId,
               "AddressingType" =: _sflsAddressingType,
               toQuery
                 (toQueryList "BlockDeviceMapping" <$>
                    _sflsBlockDeviceMappings),
               "Placement" =: _sflsPlacement]

-- | Describes whether monitoring is enabled.
--
--
--
-- /See:/ 'spotFleetMonitoring' smart constructor.
newtype SpotFleetMonitoring = SpotFleetMonitoring'
  { _sfmEnabled :: Maybe Bool
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotFleetMonitoring' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sfmEnabled' - Enables monitoring for the instance. Default: @false@
spotFleetMonitoring
    :: SpotFleetMonitoring
spotFleetMonitoring = SpotFleetMonitoring' {_sfmEnabled = Nothing}


-- | Enables monitoring for the instance. Default: @false@
sfmEnabled :: Lens' SpotFleetMonitoring (Maybe Bool)
sfmEnabled = lens _sfmEnabled (\ s a -> s{_sfmEnabled = a})

instance FromXML SpotFleetMonitoring where
        parseXML x
          = SpotFleetMonitoring' <$> (x .@? "enabled")

instance Hashable SpotFleetMonitoring where

instance NFData SpotFleetMonitoring where

instance ToQuery SpotFleetMonitoring where
        toQuery SpotFleetMonitoring'{..}
          = mconcat ["Enabled" =: _sfmEnabled]

-- | Describes a Spot Fleet request.
--
--
--
-- /See:/ 'spotFleetRequestConfig' smart constructor.
data SpotFleetRequestConfig = SpotFleetRequestConfig'
  { _sfrcSpotFleetRequestConfig :: !(Maybe SpotFleetRequestConfigData)
  , _sfrcSpotFleetRequestId     :: !(Maybe Text)
  , _sfrcSpotFleetRequestState  :: !(Maybe BatchState)
  , _sfrcCreateTime             :: !(Maybe ISO8601)
  , _sfrcTags                   :: !(Maybe [Tag])
  , _sfrcActivityStatus         :: !(Maybe ActivityStatus)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotFleetRequestConfig' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sfrcSpotFleetRequestConfig' - The configuration of the Spot Fleet request.
--
-- * 'sfrcSpotFleetRequestId' - The ID of the Spot Fleet request.
--
-- * 'sfrcSpotFleetRequestState' - The state of the Spot Fleet request.
--
-- * 'sfrcCreateTime' - The creation date and time of the request.
--
-- * 'sfrcTags' - The tags for a Spot Fleet resource.
--
-- * 'sfrcActivityStatus' - The progress of the Spot Fleet request. If there is an error, the status is @error@ . After all requests are placed, the status is @pending_fulfillment@ . If the size of the fleet is equal to or greater than its target capacity, the status is @fulfilled@ . If the size of the fleet is decreased, the status is @pending_termination@ while Spot Instances are terminating.
spotFleetRequestConfig
    :: SpotFleetRequestConfig
spotFleetRequestConfig =
  SpotFleetRequestConfig'
    { _sfrcSpotFleetRequestConfig = Nothing
    , _sfrcSpotFleetRequestId = Nothing
    , _sfrcSpotFleetRequestState = Nothing
    , _sfrcCreateTime = Nothing
    , _sfrcTags = Nothing
    , _sfrcActivityStatus = Nothing
    }


-- | The configuration of the Spot Fleet request.
sfrcSpotFleetRequestConfig :: Lens' SpotFleetRequestConfig (Maybe SpotFleetRequestConfigData)
sfrcSpotFleetRequestConfig = lens _sfrcSpotFleetRequestConfig (\ s a -> s{_sfrcSpotFleetRequestConfig = a})

-- | The ID of the Spot Fleet request.
sfrcSpotFleetRequestId :: Lens' SpotFleetRequestConfig (Maybe Text)
sfrcSpotFleetRequestId = lens _sfrcSpotFleetRequestId (\ s a -> s{_sfrcSpotFleetRequestId = a})

-- | The state of the Spot Fleet request.
sfrcSpotFleetRequestState :: Lens' SpotFleetRequestConfig (Maybe BatchState)
sfrcSpotFleetRequestState = lens _sfrcSpotFleetRequestState (\ s a -> s{_sfrcSpotFleetRequestState = a})

-- | The creation date and time of the request.
sfrcCreateTime :: Lens' SpotFleetRequestConfig (Maybe UTCTime)
sfrcCreateTime = lens _sfrcCreateTime (\ s a -> s{_sfrcCreateTime = a}) . mapping _Time

-- | The tags for a Spot Fleet resource.
sfrcTags :: Lens' SpotFleetRequestConfig [Tag]
sfrcTags = lens _sfrcTags (\ s a -> s{_sfrcTags = a}) . _Default . _Coerce

-- | The progress of the Spot Fleet request. If there is an error, the status is @error@ . After all requests are placed, the status is @pending_fulfillment@ . If the size of the fleet is equal to or greater than its target capacity, the status is @fulfilled@ . If the size of the fleet is decreased, the status is @pending_termination@ while Spot Instances are terminating.
sfrcActivityStatus :: Lens' SpotFleetRequestConfig (Maybe ActivityStatus)
sfrcActivityStatus = lens _sfrcActivityStatus (\ s a -> s{_sfrcActivityStatus = a})

instance FromXML SpotFleetRequestConfig where
        parseXML x
          = SpotFleetRequestConfig' <$>
              (x .@? "spotFleetRequestConfig") <*>
                (x .@? "spotFleetRequestId")
                <*> (x .@? "spotFleetRequestState")
                <*> (x .@? "createTime")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "activityStatus")

instance Hashable SpotFleetRequestConfig where

instance NFData SpotFleetRequestConfig where

-- | Describes the configuration of a Spot Fleet request.
--
--
--
-- /See:/ 'spotFleetRequestConfigData' smart constructor.
data SpotFleetRequestConfigData = SpotFleetRequestConfigData'
  { _sfrcdClientToken :: !(Maybe Text)
  , _sfrcdInstanceInterruptionBehavior :: !(Maybe InstanceInterruptionBehavior)
  , _sfrcdOnDemandMaxTotalPrice :: !(Maybe Text)
  , _sfrcdSpotPrice :: !(Maybe Text)
  , _sfrcdSpotMaintenanceStrategies :: !(Maybe SpotMaintenanceStrategies)
  , _sfrcdLoadBalancersConfig :: !(Maybe LoadBalancersConfig)
  , _sfrcdExcessCapacityTerminationPolicy :: !(Maybe ExcessCapacityTerminationPolicy)
  , _sfrcdOnDemandTargetCapacity :: !(Maybe Int)
  , _sfrcdLaunchTemplateConfigs :: !(Maybe [LaunchTemplateConfig])
  , _sfrcdTagSpecifications :: !(Maybe [TagSpecification])
  , _sfrcdValidUntil :: !(Maybe ISO8601)
  , _sfrcdTerminateInstancesWithExpiration :: !(Maybe Bool)
  , _sfrcdOnDemandAllocationStrategy :: !(Maybe OnDemandAllocationStrategy)
  , _sfrcdInstancePoolsToUseCount :: !(Maybe Int)
  , _sfrcdFulfilledCapacity :: !(Maybe Double)
  , _sfrcdType :: !(Maybe FleetType)
  , _sfrcdValidFrom :: !(Maybe ISO8601)
  , _sfrcdReplaceUnhealthyInstances :: !(Maybe Bool)
  , _sfrcdLaunchSpecifications :: !(Maybe [SpotFleetLaunchSpecification])
  , _sfrcdOnDemandFulfilledCapacity :: !(Maybe Double)
  , _sfrcdSpotMaxTotalPrice :: !(Maybe Text)
  , _sfrcdAllocationStrategy :: !(Maybe AllocationStrategy)
  , _sfrcdIAMFleetRole :: !Text
  , _sfrcdTargetCapacity :: !Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotFleetRequestConfigData' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sfrcdClientToken' - A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> .
--
-- * 'sfrcdInstanceInterruptionBehavior' - The behavior when a Spot Instance is interrupted. The default is @terminate@ .
--
-- * 'sfrcdOnDemandMaxTotalPrice' - The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the @onDemandMaxTotalPrice@ parameter, the @spotMaxTotalPrice@ parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
--
-- * 'sfrcdSpotPrice' - The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
--
-- * 'sfrcdSpotMaintenanceStrategies' - The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
--
-- * 'sfrcdLoadBalancersConfig' - One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups. With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.
--
-- * 'sfrcdExcessCapacityTerminationPolicy' - Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.
--
-- * 'sfrcdOnDemandTargetCapacity' - The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is @maintain@ , you can specify a target capacity of 0 and add capacity later.
--
-- * 'sfrcdLaunchTemplateConfigs' - The launch template and overrides. If you specify @LaunchTemplateConfigs@ , you can't specify @LaunchSpecifications@ . If you include On-Demand capacity in your request, you must use @LaunchTemplateConfigs@ .
--
-- * 'sfrcdTagSpecifications' - The key-value pair for tagging the Spot Fleet request on creation. The value for @ResourceType@ must be @spot-fleet-request@ , otherwise the Spot Fleet request fails. To tag instances at launch, specify the tags in the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template launch template> (valid only if you use @LaunchTemplateConfigs@ ) or in the <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html @SpotFleetTagSpecification@ > (valid only if you use @LaunchSpecifications@ ). For information about tagging after launch, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources Tagging Your Resources> .
--
-- * 'sfrcdValidUntil' - The end date and time of the request, in UTC format (/YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.
--
-- * 'sfrcdTerminateInstancesWithExpiration' - Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.
--
-- * 'sfrcdOnDemandAllocationStrategy' - The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify @lowestPrice@ , Spot Fleet uses price to determine the order, launching the lowest price first. If you specify @prioritized@ , Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to @lowestPrice@ .
--
-- * 'sfrcdInstancePoolsToUseCount' - The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot __AllocationStrategy__ is set to @lowest-price@ . Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
--
-- * 'sfrcdFulfilledCapacity' - The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
--
-- * 'sfrcdType' - The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is @request@ , the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is @maintain@ , the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: @maintain@ . @instant@ is listed but is not used by Spot Fleet.
--
-- * 'sfrcdValidFrom' - The start date and time of the request, in UTC format (/YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). By default, Amazon EC2 starts fulfilling the request immediately.
--
-- * 'sfrcdReplaceUnhealthyInstances' - Indicates whether Spot Fleet should replace unhealthy instances.
--
-- * 'sfrcdLaunchSpecifications' - The launch specifications for the Spot Fleet request. If you specify @LaunchSpecifications@ , you can't specify @LaunchTemplateConfigs@ . If you include On-Demand capacity in your request, you must use @LaunchTemplateConfigs@ .
--
-- * 'sfrcdOnDemandFulfilledCapacity' - The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
--
-- * 'sfrcdSpotMaxTotalPrice' - The maximum amount per hour for Spot Instances that you're willing to pay. You can use the @spotdMaxTotalPrice@ parameter, the @onDemandMaxTotalPrice@ parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
--
-- * 'sfrcdAllocationStrategy' - Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet request. If the allocation strategy is @lowestPrice@ , Spot Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is @diversified@ , Spot Fleet launches instances from all the Spot Instance pools that you specify. If the allocation strategy is @capacityOptimized@ , Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
--
-- * 'sfrcdIAMFleetRole' - The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites Spot Fleet prerequisites> in the /Amazon EC2 User Guide for Linux Instances/ . Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CancelSpotFleetRequests CancelSpotFleetRequests> or when the Spot Fleet request expires, if you set @TerminateInstancesWithExpiration@ .
--
-- * 'sfrcdTargetCapacity' - The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is @maintain@ , you can specify a target capacity of 0 and add capacity later.
spotFleetRequestConfigData
    :: Text -- ^ 'sfrcdIAMFleetRole'
    -> Int -- ^ 'sfrcdTargetCapacity'
    -> SpotFleetRequestConfigData
spotFleetRequestConfigData pIAMFleetRole_ pTargetCapacity_ =
  SpotFleetRequestConfigData'
    { _sfrcdClientToken = Nothing
    , _sfrcdInstanceInterruptionBehavior = Nothing
    , _sfrcdOnDemandMaxTotalPrice = Nothing
    , _sfrcdSpotPrice = Nothing
    , _sfrcdSpotMaintenanceStrategies = Nothing
    , _sfrcdLoadBalancersConfig = Nothing
    , _sfrcdExcessCapacityTerminationPolicy = Nothing
    , _sfrcdOnDemandTargetCapacity = Nothing
    , _sfrcdLaunchTemplateConfigs = Nothing
    , _sfrcdTagSpecifications = Nothing
    , _sfrcdValidUntil = Nothing
    , _sfrcdTerminateInstancesWithExpiration = Nothing
    , _sfrcdOnDemandAllocationStrategy = Nothing
    , _sfrcdInstancePoolsToUseCount = Nothing
    , _sfrcdFulfilledCapacity = Nothing
    , _sfrcdType = Nothing
    , _sfrcdValidFrom = Nothing
    , _sfrcdReplaceUnhealthyInstances = Nothing
    , _sfrcdLaunchSpecifications = Nothing
    , _sfrcdOnDemandFulfilledCapacity = Nothing
    , _sfrcdSpotMaxTotalPrice = Nothing
    , _sfrcdAllocationStrategy = Nothing
    , _sfrcdIAMFleetRole = pIAMFleetRole_
    , _sfrcdTargetCapacity = pTargetCapacity_
    }


-- | A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html Ensuring Idempotency> .
sfrcdClientToken :: Lens' SpotFleetRequestConfigData (Maybe Text)
sfrcdClientToken = lens _sfrcdClientToken (\ s a -> s{_sfrcdClientToken = a})

-- | The behavior when a Spot Instance is interrupted. The default is @terminate@ .
sfrcdInstanceInterruptionBehavior :: Lens' SpotFleetRequestConfigData (Maybe InstanceInterruptionBehavior)
sfrcdInstanceInterruptionBehavior = lens _sfrcdInstanceInterruptionBehavior (\ s a -> s{_sfrcdInstanceInterruptionBehavior = a})

-- | The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the @onDemandMaxTotalPrice@ parameter, the @spotMaxTotalPrice@ parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
sfrcdOnDemandMaxTotalPrice :: Lens' SpotFleetRequestConfigData (Maybe Text)
sfrcdOnDemandMaxTotalPrice = lens _sfrcdOnDemandMaxTotalPrice (\ s a -> s{_sfrcdOnDemandMaxTotalPrice = a})

-- | The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
sfrcdSpotPrice :: Lens' SpotFleetRequestConfigData (Maybe Text)
sfrcdSpotPrice = lens _sfrcdSpotPrice (\ s a -> s{_sfrcdSpotPrice = a})

-- | The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
sfrcdSpotMaintenanceStrategies :: Lens' SpotFleetRequestConfigData (Maybe SpotMaintenanceStrategies)
sfrcdSpotMaintenanceStrategies = lens _sfrcdSpotMaintenanceStrategies (\ s a -> s{_sfrcdSpotMaintenanceStrategies = a})

-- | One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups. With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.
sfrcdLoadBalancersConfig :: Lens' SpotFleetRequestConfigData (Maybe LoadBalancersConfig)
sfrcdLoadBalancersConfig = lens _sfrcdLoadBalancersConfig (\ s a -> s{_sfrcdLoadBalancersConfig = a})

-- | Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.
sfrcdExcessCapacityTerminationPolicy :: Lens' SpotFleetRequestConfigData (Maybe ExcessCapacityTerminationPolicy)
sfrcdExcessCapacityTerminationPolicy = lens _sfrcdExcessCapacityTerminationPolicy (\ s a -> s{_sfrcdExcessCapacityTerminationPolicy = a})

-- | The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is @maintain@ , you can specify a target capacity of 0 and add capacity later.
sfrcdOnDemandTargetCapacity :: Lens' SpotFleetRequestConfigData (Maybe Int)
sfrcdOnDemandTargetCapacity = lens _sfrcdOnDemandTargetCapacity (\ s a -> s{_sfrcdOnDemandTargetCapacity = a})

-- | The launch template and overrides. If you specify @LaunchTemplateConfigs@ , you can't specify @LaunchSpecifications@ . If you include On-Demand capacity in your request, you must use @LaunchTemplateConfigs@ .
sfrcdLaunchTemplateConfigs :: Lens' SpotFleetRequestConfigData [LaunchTemplateConfig]
sfrcdLaunchTemplateConfigs = lens _sfrcdLaunchTemplateConfigs (\ s a -> s{_sfrcdLaunchTemplateConfigs = a}) . _Default . _Coerce

-- | The key-value pair for tagging the Spot Fleet request on creation. The value for @ResourceType@ must be @spot-fleet-request@ , otherwise the Spot Fleet request fails. To tag instances at launch, specify the tags in the <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template launch template> (valid only if you use @LaunchTemplateConfigs@ ) or in the <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetTagSpecification.html @SpotFleetTagSpecification@ > (valid only if you use @LaunchSpecifications@ ). For information about tagging after launch, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources Tagging Your Resources> .
sfrcdTagSpecifications :: Lens' SpotFleetRequestConfigData [TagSpecification]
sfrcdTagSpecifications = lens _sfrcdTagSpecifications (\ s a -> s{_sfrcdTagSpecifications = a}) . _Default . _Coerce

-- | The end date and time of the request, in UTC format (/YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.
sfrcdValidUntil :: Lens' SpotFleetRequestConfigData (Maybe UTCTime)
sfrcdValidUntil = lens _sfrcdValidUntil (\ s a -> s{_sfrcdValidUntil = a}) . mapping _Time

-- | Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.
sfrcdTerminateInstancesWithExpiration :: Lens' SpotFleetRequestConfigData (Maybe Bool)
sfrcdTerminateInstancesWithExpiration = lens _sfrcdTerminateInstancesWithExpiration (\ s a -> s{_sfrcdTerminateInstancesWithExpiration = a})

-- | The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify @lowestPrice@ , Spot Fleet uses price to determine the order, launching the lowest price first. If you specify @prioritized@ , Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to @lowestPrice@ .
sfrcdOnDemandAllocationStrategy :: Lens' SpotFleetRequestConfigData (Maybe OnDemandAllocationStrategy)
sfrcdOnDemandAllocationStrategy = lens _sfrcdOnDemandAllocationStrategy (\ s a -> s{_sfrcdOnDemandAllocationStrategy = a})

-- | The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot __AllocationStrategy__ is set to @lowest-price@ . Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
sfrcdInstancePoolsToUseCount :: Lens' SpotFleetRequestConfigData (Maybe Int)
sfrcdInstancePoolsToUseCount = lens _sfrcdInstancePoolsToUseCount (\ s a -> s{_sfrcdInstancePoolsToUseCount = a})

-- | The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
sfrcdFulfilledCapacity :: Lens' SpotFleetRequestConfigData (Maybe Double)
sfrcdFulfilledCapacity = lens _sfrcdFulfilledCapacity (\ s a -> s{_sfrcdFulfilledCapacity = a})

-- | The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is @request@ , the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is @maintain@ , the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: @maintain@ . @instant@ is listed but is not used by Spot Fleet.
sfrcdType :: Lens' SpotFleetRequestConfigData (Maybe FleetType)
sfrcdType = lens _sfrcdType (\ s a -> s{_sfrcdType = a})

-- | The start date and time of the request, in UTC format (/YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). By default, Amazon EC2 starts fulfilling the request immediately.
sfrcdValidFrom :: Lens' SpotFleetRequestConfigData (Maybe UTCTime)
sfrcdValidFrom = lens _sfrcdValidFrom (\ s a -> s{_sfrcdValidFrom = a}) . mapping _Time

-- | Indicates whether Spot Fleet should replace unhealthy instances.
sfrcdReplaceUnhealthyInstances :: Lens' SpotFleetRequestConfigData (Maybe Bool)
sfrcdReplaceUnhealthyInstances = lens _sfrcdReplaceUnhealthyInstances (\ s a -> s{_sfrcdReplaceUnhealthyInstances = a})

-- | The launch specifications for the Spot Fleet request. If you specify @LaunchSpecifications@ , you can't specify @LaunchTemplateConfigs@ . If you include On-Demand capacity in your request, you must use @LaunchTemplateConfigs@ .
sfrcdLaunchSpecifications :: Lens' SpotFleetRequestConfigData [SpotFleetLaunchSpecification]
sfrcdLaunchSpecifications = lens _sfrcdLaunchSpecifications (\ s a -> s{_sfrcdLaunchSpecifications = a}) . _Default . _Coerce

-- | The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
sfrcdOnDemandFulfilledCapacity :: Lens' SpotFleetRequestConfigData (Maybe Double)
sfrcdOnDemandFulfilledCapacity = lens _sfrcdOnDemandFulfilledCapacity (\ s a -> s{_sfrcdOnDemandFulfilledCapacity = a})

-- | The maximum amount per hour for Spot Instances that you're willing to pay. You can use the @spotdMaxTotalPrice@ parameter, the @onDemandMaxTotalPrice@ parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
sfrcdSpotMaxTotalPrice :: Lens' SpotFleetRequestConfigData (Maybe Text)
sfrcdSpotMaxTotalPrice = lens _sfrcdSpotMaxTotalPrice (\ s a -> s{_sfrcdSpotMaxTotalPrice = a})

-- | Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet request. If the allocation strategy is @lowestPrice@ , Spot Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is @diversified@ , Spot Fleet launches instances from all the Spot Instance pools that you specify. If the allocation strategy is @capacityOptimized@ , Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
sfrcdAllocationStrategy :: Lens' SpotFleetRequestConfigData (Maybe AllocationStrategy)
sfrcdAllocationStrategy = lens _sfrcdAllocationStrategy (\ s a -> s{_sfrcdAllocationStrategy = a})

-- | The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites Spot Fleet prerequisites> in the /Amazon EC2 User Guide for Linux Instances/ . Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CancelSpotFleetRequests CancelSpotFleetRequests> or when the Spot Fleet request expires, if you set @TerminateInstancesWithExpiration@ .
sfrcdIAMFleetRole :: Lens' SpotFleetRequestConfigData Text
sfrcdIAMFleetRole = lens _sfrcdIAMFleetRole (\ s a -> s{_sfrcdIAMFleetRole = a})

-- | The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is @maintain@ , you can specify a target capacity of 0 and add capacity later.
sfrcdTargetCapacity :: Lens' SpotFleetRequestConfigData Int
sfrcdTargetCapacity = lens _sfrcdTargetCapacity (\ s a -> s{_sfrcdTargetCapacity = a})

instance FromXML SpotFleetRequestConfigData where
        parseXML x
          = SpotFleetRequestConfigData' <$>
              (x .@? "clientToken") <*>
                (x .@? "instanceInterruptionBehavior")
                <*> (x .@? "onDemandMaxTotalPrice")
                <*> (x .@? "spotPrice")
                <*> (x .@? "spotMaintenanceStrategies")
                <*> (x .@? "loadBalancersConfig")
                <*> (x .@? "excessCapacityTerminationPolicy")
                <*> (x .@? "onDemandTargetCapacity")
                <*>
                (x .@? "launchTemplateConfigs" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "TagSpecification" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "validUntil")
                <*> (x .@? "terminateInstancesWithExpiration")
                <*> (x .@? "onDemandAllocationStrategy")
                <*> (x .@? "instancePoolsToUseCount")
                <*> (x .@? "fulfilledCapacity")
                <*> (x .@? "type")
                <*> (x .@? "validFrom")
                <*> (x .@? "replaceUnhealthyInstances")
                <*>
                (x .@? "launchSpecifications" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "onDemandFulfilledCapacity")
                <*> (x .@? "spotMaxTotalPrice")
                <*> (x .@? "allocationStrategy")
                <*> (x .@ "iamFleetRole")
                <*> (x .@ "targetCapacity")

instance Hashable SpotFleetRequestConfigData where

instance NFData SpotFleetRequestConfigData where

instance ToQuery SpotFleetRequestConfigData where
        toQuery SpotFleetRequestConfigData'{..}
          = mconcat
              ["ClientToken" =: _sfrcdClientToken,
               "InstanceInterruptionBehavior" =:
                 _sfrcdInstanceInterruptionBehavior,
               "OnDemandMaxTotalPrice" =:
                 _sfrcdOnDemandMaxTotalPrice,
               "SpotPrice" =: _sfrcdSpotPrice,
               "SpotMaintenanceStrategies" =:
                 _sfrcdSpotMaintenanceStrategies,
               "LoadBalancersConfig" =: _sfrcdLoadBalancersConfig,
               "ExcessCapacityTerminationPolicy" =:
                 _sfrcdExcessCapacityTerminationPolicy,
               "OnDemandTargetCapacity" =:
                 _sfrcdOnDemandTargetCapacity,
               toQuery
                 (toQueryList "LaunchTemplateConfigs" <$>
                    _sfrcdLaunchTemplateConfigs),
               toQuery
                 (toQueryList "TagSpecification" <$>
                    _sfrcdTagSpecifications),
               "ValidUntil" =: _sfrcdValidUntil,
               "TerminateInstancesWithExpiration" =:
                 _sfrcdTerminateInstancesWithExpiration,
               "OnDemandAllocationStrategy" =:
                 _sfrcdOnDemandAllocationStrategy,
               "InstancePoolsToUseCount" =:
                 _sfrcdInstancePoolsToUseCount,
               "FulfilledCapacity" =: _sfrcdFulfilledCapacity,
               "Type" =: _sfrcdType, "ValidFrom" =: _sfrcdValidFrom,
               "ReplaceUnhealthyInstances" =:
                 _sfrcdReplaceUnhealthyInstances,
               toQuery
                 (toQueryList "LaunchSpecifications" <$>
                    _sfrcdLaunchSpecifications),
               "OnDemandFulfilledCapacity" =:
                 _sfrcdOnDemandFulfilledCapacity,
               "SpotMaxTotalPrice" =: _sfrcdSpotMaxTotalPrice,
               "AllocationStrategy" =: _sfrcdAllocationStrategy,
               "IamFleetRole" =: _sfrcdIAMFleetRole,
               "TargetCapacity" =: _sfrcdTargetCapacity]

-- | The tags for a Spot Fleet resource.
--
--
--
-- /See:/ 'spotFleetTagSpecification' smart constructor.
data SpotFleetTagSpecification = SpotFleetTagSpecification'
  { _sftsResourceType :: !(Maybe ResourceType)
  , _sftsTags         :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotFleetTagSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sftsResourceType' - The type of resource. Currently, the only resource type that is supported is @instance@ . To tag the Spot Fleet request on creation, use the @TagSpecifications@ parameter in <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetRequestConfigData.html @SpotFleetRequestConfigData@ > .
--
-- * 'sftsTags' - The tags.
spotFleetTagSpecification
    :: SpotFleetTagSpecification
spotFleetTagSpecification =
  SpotFleetTagSpecification' {_sftsResourceType = Nothing, _sftsTags = Nothing}


-- | The type of resource. Currently, the only resource type that is supported is @instance@ . To tag the Spot Fleet request on creation, use the @TagSpecifications@ parameter in <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotFleetRequestConfigData.html @SpotFleetRequestConfigData@ > .
sftsResourceType :: Lens' SpotFleetTagSpecification (Maybe ResourceType)
sftsResourceType = lens _sftsResourceType (\ s a -> s{_sftsResourceType = a})

-- | The tags.
sftsTags :: Lens' SpotFleetTagSpecification [Tag]
sftsTags = lens _sftsTags (\ s a -> s{_sftsTags = a}) . _Default . _Coerce

instance FromXML SpotFleetTagSpecification where
        parseXML x
          = SpotFleetTagSpecification' <$>
              (x .@? "resourceType") <*>
                (x .@? "tag" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable SpotFleetTagSpecification where

instance NFData SpotFleetTagSpecification where

instance ToQuery SpotFleetTagSpecification where
        toQuery SpotFleetTagSpecification'{..}
          = mconcat
              ["ResourceType" =: _sftsResourceType,
               toQuery (toQueryList "Tag" <$> _sftsTags)]

-- | Describes a Spot Instance request.
--
--
--
-- /See:/ 'spotInstanceRequest' smart constructor.
data SpotInstanceRequest = SpotInstanceRequest'
  { _sirInstanceId                   :: !(Maybe Text)
  , _sirStatus                       :: !(Maybe SpotInstanceStatus)
  , _sirState                        :: !(Maybe SpotInstanceState)
  , _sirActualBlockHourlyPrice       :: !(Maybe Text)
  , _sirBlockDurationMinutes         :: !(Maybe Int)
  , _sirInstanceInterruptionBehavior :: !(Maybe InstanceInterruptionBehavior)
  , _sirProductDescription           :: !(Maybe RIProductDescription)
  , _sirSpotPrice                    :: !(Maybe Text)
  , _sirLaunchSpecification          :: !(Maybe LaunchSpecification)
  , _sirAvailabilityZoneGroup        :: !(Maybe Text)
  , _sirLaunchedAvailabilityZone     :: !(Maybe Text)
  , _sirValidUntil                   :: !(Maybe ISO8601)
  , _sirLaunchGroup                  :: !(Maybe Text)
  , _sirFault                        :: !(Maybe SpotInstanceStateFault)
  , _sirSpotInstanceRequestId        :: !(Maybe Text)
  , _sirType                         :: !(Maybe SpotInstanceType)
  , _sirValidFrom                    :: !(Maybe ISO8601)
  , _sirCreateTime                   :: !(Maybe ISO8601)
  , _sirTags                         :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotInstanceRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sirInstanceId' - The instance ID, if an instance has been launched to fulfill the Spot Instance request.
--
-- * 'sirStatus' - The status code and status message describing the Spot Instance request.
--
-- * 'sirState' - The state of the Spot Instance request. Spot status information helps track your Spot Instance requests. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html Spot status> in the /Amazon EC2 User Guide for Linux Instances/ .
--
-- * 'sirActualBlockHourlyPrice' - If you specified a duration and your Spot Instance request was fulfilled, this is the fixed hourly price in effect for the Spot Instance while it runs.
--
-- * 'sirBlockDurationMinutes' - The duration for the Spot Instance, in minutes.
--
-- * 'sirInstanceInterruptionBehavior' - The behavior when a Spot Instance is interrupted.
--
-- * 'sirProductDescription' - The product description associated with the Spot Instance.
--
-- * 'sirSpotPrice' - The maximum price per hour that you are willing to pay for a Spot Instance.
--
-- * 'sirLaunchSpecification' - Additional information for launching instances.
--
-- * 'sirAvailabilityZoneGroup' - The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.
--
-- * 'sirLaunchedAvailabilityZone' - The Availability Zone in which the request is launched.
--
-- * 'sirValidUntil' - The end date of the request, in UTC format (/YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).     * For a persistent request, the request remains active until the @validUntil@ date and time is reached. Otherwise, the request remains active until you cancel it.      * For a one-time request, the request remains active until all instances launch, the request is canceled, or the @validUntil@ date and time is reached. By default, the request is valid for 7 days from the date the request was created.
--
-- * 'sirLaunchGroup' - The instance launch group. Launch groups are Spot Instances that launch together and terminate together.
--
-- * 'sirFault' - The fault codes for the Spot Instance request, if any.
--
-- * 'sirSpotInstanceRequestId' - The ID of the Spot Instance request.
--
-- * 'sirType' - The Spot Instance request type.
--
-- * 'sirValidFrom' - The start date of the request, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). The request becomes active at this date and time.
--
-- * 'sirCreateTime' - The date and time when the Spot Instance request was created, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
--
-- * 'sirTags' - Any tags assigned to the resource.
spotInstanceRequest
    :: SpotInstanceRequest
spotInstanceRequest =
  SpotInstanceRequest'
    { _sirInstanceId = Nothing
    , _sirStatus = Nothing
    , _sirState = Nothing
    , _sirActualBlockHourlyPrice = Nothing
    , _sirBlockDurationMinutes = Nothing
    , _sirInstanceInterruptionBehavior = Nothing
    , _sirProductDescription = Nothing
    , _sirSpotPrice = Nothing
    , _sirLaunchSpecification = Nothing
    , _sirAvailabilityZoneGroup = Nothing
    , _sirLaunchedAvailabilityZone = Nothing
    , _sirValidUntil = Nothing
    , _sirLaunchGroup = Nothing
    , _sirFault = Nothing
    , _sirSpotInstanceRequestId = Nothing
    , _sirType = Nothing
    , _sirValidFrom = Nothing
    , _sirCreateTime = Nothing
    , _sirTags = Nothing
    }


-- | The instance ID, if an instance has been launched to fulfill the Spot Instance request.
sirInstanceId :: Lens' SpotInstanceRequest (Maybe Text)
sirInstanceId = lens _sirInstanceId (\ s a -> s{_sirInstanceId = a})

-- | The status code and status message describing the Spot Instance request.
sirStatus :: Lens' SpotInstanceRequest (Maybe SpotInstanceStatus)
sirStatus = lens _sirStatus (\ s a -> s{_sirStatus = a})

-- | The state of the Spot Instance request. Spot status information helps track your Spot Instance requests. For more information, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html Spot status> in the /Amazon EC2 User Guide for Linux Instances/ .
sirState :: Lens' SpotInstanceRequest (Maybe SpotInstanceState)
sirState = lens _sirState (\ s a -> s{_sirState = a})

-- | If you specified a duration and your Spot Instance request was fulfilled, this is the fixed hourly price in effect for the Spot Instance while it runs.
sirActualBlockHourlyPrice :: Lens' SpotInstanceRequest (Maybe Text)
sirActualBlockHourlyPrice = lens _sirActualBlockHourlyPrice (\ s a -> s{_sirActualBlockHourlyPrice = a})

-- | The duration for the Spot Instance, in minutes.
sirBlockDurationMinutes :: Lens' SpotInstanceRequest (Maybe Int)
sirBlockDurationMinutes = lens _sirBlockDurationMinutes (\ s a -> s{_sirBlockDurationMinutes = a})

-- | The behavior when a Spot Instance is interrupted.
sirInstanceInterruptionBehavior :: Lens' SpotInstanceRequest (Maybe InstanceInterruptionBehavior)
sirInstanceInterruptionBehavior = lens _sirInstanceInterruptionBehavior (\ s a -> s{_sirInstanceInterruptionBehavior = a})

-- | The product description associated with the Spot Instance.
sirProductDescription :: Lens' SpotInstanceRequest (Maybe RIProductDescription)
sirProductDescription = lens _sirProductDescription (\ s a -> s{_sirProductDescription = a})

-- | The maximum price per hour that you are willing to pay for a Spot Instance.
sirSpotPrice :: Lens' SpotInstanceRequest (Maybe Text)
sirSpotPrice = lens _sirSpotPrice (\ s a -> s{_sirSpotPrice = a})

-- | Additional information for launching instances.
sirLaunchSpecification :: Lens' SpotInstanceRequest (Maybe LaunchSpecification)
sirLaunchSpecification = lens _sirLaunchSpecification (\ s a -> s{_sirLaunchSpecification = a})

-- | The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.
sirAvailabilityZoneGroup :: Lens' SpotInstanceRequest (Maybe Text)
sirAvailabilityZoneGroup = lens _sirAvailabilityZoneGroup (\ s a -> s{_sirAvailabilityZoneGroup = a})

-- | The Availability Zone in which the request is launched.
sirLaunchedAvailabilityZone :: Lens' SpotInstanceRequest (Maybe Text)
sirLaunchedAvailabilityZone = lens _sirLaunchedAvailabilityZone (\ s a -> s{_sirLaunchedAvailabilityZone = a})

-- | The end date of the request, in UTC format (/YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).     * For a persistent request, the request remains active until the @validUntil@ date and time is reached. Otherwise, the request remains active until you cancel it.      * For a one-time request, the request remains active until all instances launch, the request is canceled, or the @validUntil@ date and time is reached. By default, the request is valid for 7 days from the date the request was created.
sirValidUntil :: Lens' SpotInstanceRequest (Maybe UTCTime)
sirValidUntil = lens _sirValidUntil (\ s a -> s{_sirValidUntil = a}) . mapping _Time

-- | The instance launch group. Launch groups are Spot Instances that launch together and terminate together.
sirLaunchGroup :: Lens' SpotInstanceRequest (Maybe Text)
sirLaunchGroup = lens _sirLaunchGroup (\ s a -> s{_sirLaunchGroup = a})

-- | The fault codes for the Spot Instance request, if any.
sirFault :: Lens' SpotInstanceRequest (Maybe SpotInstanceStateFault)
sirFault = lens _sirFault (\ s a -> s{_sirFault = a})

-- | The ID of the Spot Instance request.
sirSpotInstanceRequestId :: Lens' SpotInstanceRequest (Maybe Text)
sirSpotInstanceRequestId = lens _sirSpotInstanceRequestId (\ s a -> s{_sirSpotInstanceRequestId = a})

-- | The Spot Instance request type.
sirType :: Lens' SpotInstanceRequest (Maybe SpotInstanceType)
sirType = lens _sirType (\ s a -> s{_sirType = a})

-- | The start date of the request, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). The request becomes active at this date and time.
sirValidFrom :: Lens' SpotInstanceRequest (Maybe UTCTime)
sirValidFrom = lens _sirValidFrom (\ s a -> s{_sirValidFrom = a}) . mapping _Time

-- | The date and time when the Spot Instance request was created, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
sirCreateTime :: Lens' SpotInstanceRequest (Maybe UTCTime)
sirCreateTime = lens _sirCreateTime (\ s a -> s{_sirCreateTime = a}) . mapping _Time

-- | Any tags assigned to the resource.
sirTags :: Lens' SpotInstanceRequest [Tag]
sirTags = lens _sirTags (\ s a -> s{_sirTags = a}) . _Default . _Coerce

instance FromXML SpotInstanceRequest where
        parseXML x
          = SpotInstanceRequest' <$>
              (x .@? "instanceId") <*> (x .@? "status") <*>
                (x .@? "state")
                <*> (x .@? "actualBlockHourlyPrice")
                <*> (x .@? "blockDurationMinutes")
                <*> (x .@? "instanceInterruptionBehavior")
                <*> (x .@? "productDescription")
                <*> (x .@? "spotPrice")
                <*> (x .@? "launchSpecification")
                <*> (x .@? "availabilityZoneGroup")
                <*> (x .@? "launchedAvailabilityZone")
                <*> (x .@? "validUntil")
                <*> (x .@? "launchGroup")
                <*> (x .@? "fault")
                <*> (x .@? "spotInstanceRequestId")
                <*> (x .@? "type")
                <*> (x .@? "validFrom")
                <*> (x .@? "createTime")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable SpotInstanceRequest where

instance NFData SpotInstanceRequest where

-- | Describes a Spot Instance state change.
--
--
--
-- /See:/ 'spotInstanceStateFault' smart constructor.
data SpotInstanceStateFault = SpotInstanceStateFault'
  { _sisfCode    :: !(Maybe Text)
  , _sisfMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotInstanceStateFault' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sisfCode' - The reason code for the Spot Instance state change.
--
-- * 'sisfMessage' - The message for the Spot Instance state change.
spotInstanceStateFault
    :: SpotInstanceStateFault
spotInstanceStateFault =
  SpotInstanceStateFault' {_sisfCode = Nothing, _sisfMessage = Nothing}


-- | The reason code for the Spot Instance state change.
sisfCode :: Lens' SpotInstanceStateFault (Maybe Text)
sisfCode = lens _sisfCode (\ s a -> s{_sisfCode = a})

-- | The message for the Spot Instance state change.
sisfMessage :: Lens' SpotInstanceStateFault (Maybe Text)
sisfMessage = lens _sisfMessage (\ s a -> s{_sisfMessage = a})

instance FromXML SpotInstanceStateFault where
        parseXML x
          = SpotInstanceStateFault' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable SpotInstanceStateFault where

instance NFData SpotInstanceStateFault where

-- | Describes the status of a Spot Instance request.
--
--
--
-- /See:/ 'spotInstanceStatus' smart constructor.
data SpotInstanceStatus = SpotInstanceStatus'
  { _sisUpdateTime :: !(Maybe ISO8601)
  , _sisCode       :: !(Maybe Text)
  , _sisMessage    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotInstanceStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sisUpdateTime' - The date and time of the most recent status update, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
--
-- * 'sisCode' - The status code. For a list of status codes, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand Spot status codes> in the /Amazon EC2 User Guide for Linux Instances/ .
--
-- * 'sisMessage' - The description for the status code.
spotInstanceStatus
    :: SpotInstanceStatus
spotInstanceStatus =
  SpotInstanceStatus'
    {_sisUpdateTime = Nothing, _sisCode = Nothing, _sisMessage = Nothing}


-- | The date and time of the most recent status update, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
sisUpdateTime :: Lens' SpotInstanceStatus (Maybe UTCTime)
sisUpdateTime = lens _sisUpdateTime (\ s a -> s{_sisUpdateTime = a}) . mapping _Time

-- | The status code. For a list of status codes, see <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand Spot status codes> in the /Amazon EC2 User Guide for Linux Instances/ .
sisCode :: Lens' SpotInstanceStatus (Maybe Text)
sisCode = lens _sisCode (\ s a -> s{_sisCode = a})

-- | The description for the status code.
sisMessage :: Lens' SpotInstanceStatus (Maybe Text)
sisMessage = lens _sisMessage (\ s a -> s{_sisMessage = a})

instance FromXML SpotInstanceStatus where
        parseXML x
          = SpotInstanceStatus' <$>
              (x .@? "updateTime") <*> (x .@? "code") <*>
                (x .@? "message")

instance Hashable SpotInstanceStatus where

instance NFData SpotInstanceStatus where

-- | The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
--
--
--
-- /See:/ 'spotMaintenanceStrategies' smart constructor.
newtype SpotMaintenanceStrategies = SpotMaintenanceStrategies'
  { _smsCapacityRebalance :: Maybe SpotCapacityRebalance
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotMaintenanceStrategies' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'smsCapacityRebalance' - The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
spotMaintenanceStrategies
    :: SpotMaintenanceStrategies
spotMaintenanceStrategies =
  SpotMaintenanceStrategies' {_smsCapacityRebalance = Nothing}


-- | The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
smsCapacityRebalance :: Lens' SpotMaintenanceStrategies (Maybe SpotCapacityRebalance)
smsCapacityRebalance = lens _smsCapacityRebalance (\ s a -> s{_smsCapacityRebalance = a})

instance FromXML SpotMaintenanceStrategies where
        parseXML x
          = SpotMaintenanceStrategies' <$>
              (x .@? "capacityRebalance")

instance Hashable SpotMaintenanceStrategies where

instance NFData SpotMaintenanceStrategies where

instance ToQuery SpotMaintenanceStrategies where
        toQuery SpotMaintenanceStrategies'{..}
          = mconcat
              ["CapacityRebalance" =: _smsCapacityRebalance]

-- | The options for Spot Instances.
--
--
--
-- /See:/ 'spotMarketOptions' smart constructor.
data SpotMarketOptions = SpotMarketOptions'
  { _smoBlockDurationMinutes         :: !(Maybe Int)
  , _smoInstanceInterruptionBehavior :: !(Maybe InstanceInterruptionBehavior)
  , _smoValidUntil                   :: !(Maybe ISO8601)
  , _smoSpotInstanceType             :: !(Maybe SpotInstanceType)
  , _smoMaxPrice                     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotMarketOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'smoBlockDurationMinutes' - The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. You can't specify an Availability Zone group or a launch group if you specify a duration. New accounts or accounts with no previous billing history with AWS are not eligible for Spot Instances with a defined duration (also known as Spot blocks).
--
-- * 'smoInstanceInterruptionBehavior' - The behavior when a Spot Instance is interrupted. The default is @terminate@ .
--
-- * 'smoValidUntil' - The end date of the request, in UTC format (/YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). Supported only for persistent requests.     * For a persistent request, the request remains active until the @ValidUntil@ date and time is reached. Otherwise, the request remains active until you cancel it.     * For a one-time request, @ValidUntil@ is not supported. The request remains active until all instances launch or you cancel the request.
--
-- * 'smoSpotInstanceType' - The Spot Instance request type. For <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances RunInstances> , persistent Spot Instance requests are only supported when the instance interruption behavior is either @hibernate@ or @stop@ .
--
-- * 'smoMaxPrice' - The maximum hourly price you're willing to pay for the Spot Instances. The default is the On-Demand price.
spotMarketOptions
    :: SpotMarketOptions
spotMarketOptions =
  SpotMarketOptions'
    { _smoBlockDurationMinutes = Nothing
    , _smoInstanceInterruptionBehavior = Nothing
    , _smoValidUntil = Nothing
    , _smoSpotInstanceType = Nothing
    , _smoMaxPrice = Nothing
    }


-- | The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. You can't specify an Availability Zone group or a launch group if you specify a duration. New accounts or accounts with no previous billing history with AWS are not eligible for Spot Instances with a defined duration (also known as Spot blocks).
smoBlockDurationMinutes :: Lens' SpotMarketOptions (Maybe Int)
smoBlockDurationMinutes = lens _smoBlockDurationMinutes (\ s a -> s{_smoBlockDurationMinutes = a})

-- | The behavior when a Spot Instance is interrupted. The default is @terminate@ .
smoInstanceInterruptionBehavior :: Lens' SpotMarketOptions (Maybe InstanceInterruptionBehavior)
smoInstanceInterruptionBehavior = lens _smoInstanceInterruptionBehavior (\ s a -> s{_smoInstanceInterruptionBehavior = a})

-- | The end date of the request, in UTC format (/YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z). Supported only for persistent requests.     * For a persistent request, the request remains active until the @ValidUntil@ date and time is reached. Otherwise, the request remains active until you cancel it.     * For a one-time request, @ValidUntil@ is not supported. The request remains active until all instances launch or you cancel the request.
smoValidUntil :: Lens' SpotMarketOptions (Maybe UTCTime)
smoValidUntil = lens _smoValidUntil (\ s a -> s{_smoValidUntil = a}) . mapping _Time

-- | The Spot Instance request type. For <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances RunInstances> , persistent Spot Instance requests are only supported when the instance interruption behavior is either @hibernate@ or @stop@ .
smoSpotInstanceType :: Lens' SpotMarketOptions (Maybe SpotInstanceType)
smoSpotInstanceType = lens _smoSpotInstanceType (\ s a -> s{_smoSpotInstanceType = a})

-- | The maximum hourly price you're willing to pay for the Spot Instances. The default is the On-Demand price.
smoMaxPrice :: Lens' SpotMarketOptions (Maybe Text)
smoMaxPrice = lens _smoMaxPrice (\ s a -> s{_smoMaxPrice = a})

instance Hashable SpotMarketOptions where

instance NFData SpotMarketOptions where

instance ToQuery SpotMarketOptions where
        toQuery SpotMarketOptions'{..}
          = mconcat
              ["BlockDurationMinutes" =: _smoBlockDurationMinutes,
               "InstanceInterruptionBehavior" =:
                 _smoInstanceInterruptionBehavior,
               "ValidUntil" =: _smoValidUntil,
               "SpotInstanceType" =: _smoSpotInstanceType,
               "MaxPrice" =: _smoMaxPrice]

-- | Describes the configuration of Spot Instances in an EC2 Fleet.
--
--
--
-- /See:/ 'spotOptions' smart constructor.
data SpotOptions = SpotOptions'
  { _soInstanceInterruptionBehavior :: !(Maybe SpotInstanceInterruptionBehavior)
  , _soSingleAvailabilityZone       :: !(Maybe Bool)
  , _soMaxTotalPrice                :: !(Maybe Text)
  , _soMinTargetCapacity            :: !(Maybe Int)
  , _soInstancePoolsToUseCount      :: !(Maybe Int)
  , _soMaintenanceStrategies        :: !(Maybe FleetSpotMaintenanceStrategies)
  , _soSingleInstanceType           :: !(Maybe Bool)
  , _soAllocationStrategy           :: !(Maybe SpotAllocationStrategy)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'soInstanceInterruptionBehavior' - The behavior when a Spot Instance is interrupted. The default is @terminate@ .
--
-- * 'soSingleAvailabilityZone' - Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type @instant@ .
--
-- * 'soMaxTotalPrice' - The maximum amount per hour for Spot Instances that you're willing to pay.
--
-- * 'soMinTargetCapacity' - The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
--
-- * 'soInstancePoolsToUseCount' - The number of Spot pools across which to allocate your target Spot capacity. Valid only when __AllocationStrategy__ is set to @lowest-price@ . EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
--
-- * 'soMaintenanceStrategies' - The strategies for managing your workloads on your Spot Instances that will be interrupted. Currently only the capacity rebalance strategy is available.
--
-- * 'soSingleInstanceType' - Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type @instant@ .
--
-- * 'soAllocationStrategy' - Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet. If the allocation strategy is @lowest-price@ , EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is @diversified@ , EC2 Fleet launches instances from all of the Spot Instance pools that you specify. If the allocation strategy is @capacity-optimized@ , EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
spotOptions
    :: SpotOptions
spotOptions =
  SpotOptions'
    { _soInstanceInterruptionBehavior = Nothing
    , _soSingleAvailabilityZone = Nothing
    , _soMaxTotalPrice = Nothing
    , _soMinTargetCapacity = Nothing
    , _soInstancePoolsToUseCount = Nothing
    , _soMaintenanceStrategies = Nothing
    , _soSingleInstanceType = Nothing
    , _soAllocationStrategy = Nothing
    }


-- | The behavior when a Spot Instance is interrupted. The default is @terminate@ .
soInstanceInterruptionBehavior :: Lens' SpotOptions (Maybe SpotInstanceInterruptionBehavior)
soInstanceInterruptionBehavior = lens _soInstanceInterruptionBehavior (\ s a -> s{_soInstanceInterruptionBehavior = a})

-- | Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type @instant@ .
soSingleAvailabilityZone :: Lens' SpotOptions (Maybe Bool)
soSingleAvailabilityZone = lens _soSingleAvailabilityZone (\ s a -> s{_soSingleAvailabilityZone = a})

-- | The maximum amount per hour for Spot Instances that you're willing to pay.
soMaxTotalPrice :: Lens' SpotOptions (Maybe Text)
soMaxTotalPrice = lens _soMaxTotalPrice (\ s a -> s{_soMaxTotalPrice = a})

-- | The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
soMinTargetCapacity :: Lens' SpotOptions (Maybe Int)
soMinTargetCapacity = lens _soMinTargetCapacity (\ s a -> s{_soMinTargetCapacity = a})

-- | The number of Spot pools across which to allocate your target Spot capacity. Valid only when __AllocationStrategy__ is set to @lowest-price@ . EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
soInstancePoolsToUseCount :: Lens' SpotOptions (Maybe Int)
soInstancePoolsToUseCount = lens _soInstancePoolsToUseCount (\ s a -> s{_soInstancePoolsToUseCount = a})

-- | The strategies for managing your workloads on your Spot Instances that will be interrupted. Currently only the capacity rebalance strategy is available.
soMaintenanceStrategies :: Lens' SpotOptions (Maybe FleetSpotMaintenanceStrategies)
soMaintenanceStrategies = lens _soMaintenanceStrategies (\ s a -> s{_soMaintenanceStrategies = a})

-- | Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type @instant@ .
soSingleInstanceType :: Lens' SpotOptions (Maybe Bool)
soSingleInstanceType = lens _soSingleInstanceType (\ s a -> s{_soSingleInstanceType = a})

-- | Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet. If the allocation strategy is @lowest-price@ , EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is @diversified@ , EC2 Fleet launches instances from all of the Spot Instance pools that you specify. If the allocation strategy is @capacity-optimized@ , EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
soAllocationStrategy :: Lens' SpotOptions (Maybe SpotAllocationStrategy)
soAllocationStrategy = lens _soAllocationStrategy (\ s a -> s{_soAllocationStrategy = a})

instance FromXML SpotOptions where
        parseXML x
          = SpotOptions' <$>
              (x .@? "instanceInterruptionBehavior") <*>
                (x .@? "singleAvailabilityZone")
                <*> (x .@? "maxTotalPrice")
                <*> (x .@? "minTargetCapacity")
                <*> (x .@? "instancePoolsToUseCount")
                <*> (x .@? "maintenanceStrategies")
                <*> (x .@? "singleInstanceType")
                <*> (x .@? "allocationStrategy")

instance Hashable SpotOptions where

instance NFData SpotOptions where

-- | Describes the configuration of Spot Instances in an EC2 Fleet request.
--
--
--
-- /See:/ 'spotOptionsRequest' smart constructor.
data SpotOptionsRequest = SpotOptionsRequest'
  { _sorInstanceInterruptionBehavior :: !(Maybe SpotInstanceInterruptionBehavior)
  , _sorSingleAvailabilityZone :: !(Maybe Bool)
  , _sorMaxTotalPrice :: !(Maybe Text)
  , _sorMinTargetCapacity :: !(Maybe Int)
  , _sorInstancePoolsToUseCount :: !(Maybe Int)
  , _sorMaintenanceStrategies :: !(Maybe FleetSpotMaintenanceStrategiesRequest)
  , _sorSingleInstanceType :: !(Maybe Bool)
  , _sorAllocationStrategy :: !(Maybe SpotAllocationStrategy)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotOptionsRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sorInstanceInterruptionBehavior' - The behavior when a Spot Instance is interrupted. The default is @terminate@ .
--
-- * 'sorSingleAvailabilityZone' - Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type @instant@ .
--
-- * 'sorMaxTotalPrice' - The maximum amount per hour for Spot Instances that you're willing to pay.
--
-- * 'sorMinTargetCapacity' - The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
--
-- * 'sorInstancePoolsToUseCount' - The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot __AllocationStrategy__ is set to @lowest-price@ . EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
--
-- * 'sorMaintenanceStrategies' - The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
--
-- * 'sorSingleInstanceType' - Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type @instant@ .
--
-- * 'sorAllocationStrategy' - Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet. If the allocation strategy is @lowest-price@ , EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is @diversified@ , EC2 Fleet launches instances from all of the Spot Instance pools that you specify. If the allocation strategy is @capacity-optimized@ , EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
spotOptionsRequest
    :: SpotOptionsRequest
spotOptionsRequest =
  SpotOptionsRequest'
    { _sorInstanceInterruptionBehavior = Nothing
    , _sorSingleAvailabilityZone = Nothing
    , _sorMaxTotalPrice = Nothing
    , _sorMinTargetCapacity = Nothing
    , _sorInstancePoolsToUseCount = Nothing
    , _sorMaintenanceStrategies = Nothing
    , _sorSingleInstanceType = Nothing
    , _sorAllocationStrategy = Nothing
    }


-- | The behavior when a Spot Instance is interrupted. The default is @terminate@ .
sorInstanceInterruptionBehavior :: Lens' SpotOptionsRequest (Maybe SpotInstanceInterruptionBehavior)
sorInstanceInterruptionBehavior = lens _sorInstanceInterruptionBehavior (\ s a -> s{_sorInstanceInterruptionBehavior = a})

-- | Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type @instant@ .
sorSingleAvailabilityZone :: Lens' SpotOptionsRequest (Maybe Bool)
sorSingleAvailabilityZone = lens _sorSingleAvailabilityZone (\ s a -> s{_sorSingleAvailabilityZone = a})

-- | The maximum amount per hour for Spot Instances that you're willing to pay.
sorMaxTotalPrice :: Lens' SpotOptionsRequest (Maybe Text)
sorMaxTotalPrice = lens _sorMaxTotalPrice (\ s a -> s{_sorMaxTotalPrice = a})

-- | The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
sorMinTargetCapacity :: Lens' SpotOptionsRequest (Maybe Int)
sorMinTargetCapacity = lens _sorMinTargetCapacity (\ s a -> s{_sorMinTargetCapacity = a})

-- | The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot __AllocationStrategy__ is set to @lowest-price@ . EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
sorInstancePoolsToUseCount :: Lens' SpotOptionsRequest (Maybe Int)
sorInstancePoolsToUseCount = lens _sorInstancePoolsToUseCount (\ s a -> s{_sorInstancePoolsToUseCount = a})

-- | The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
sorMaintenanceStrategies :: Lens' SpotOptionsRequest (Maybe FleetSpotMaintenanceStrategiesRequest)
sorMaintenanceStrategies = lens _sorMaintenanceStrategies (\ s a -> s{_sorMaintenanceStrategies = a})

-- | Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type @instant@ .
sorSingleInstanceType :: Lens' SpotOptionsRequest (Maybe Bool)
sorSingleInstanceType = lens _sorSingleInstanceType (\ s a -> s{_sorSingleInstanceType = a})

-- | Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet. If the allocation strategy is @lowest-price@ , EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is @diversified@ , EC2 Fleet launches instances from all of the Spot Instance pools that you specify. If the allocation strategy is @capacity-optimized@ , EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.
sorAllocationStrategy :: Lens' SpotOptionsRequest (Maybe SpotAllocationStrategy)
sorAllocationStrategy = lens _sorAllocationStrategy (\ s a -> s{_sorAllocationStrategy = a})

instance Hashable SpotOptionsRequest where

instance NFData SpotOptionsRequest where

instance ToQuery SpotOptionsRequest where
        toQuery SpotOptionsRequest'{..}
          = mconcat
              ["InstanceInterruptionBehavior" =:
                 _sorInstanceInterruptionBehavior,
               "SingleAvailabilityZone" =:
                 _sorSingleAvailabilityZone,
               "MaxTotalPrice" =: _sorMaxTotalPrice,
               "MinTargetCapacity" =: _sorMinTargetCapacity,
               "InstancePoolsToUseCount" =:
                 _sorInstancePoolsToUseCount,
               "MaintenanceStrategies" =: _sorMaintenanceStrategies,
               "SingleInstanceType" =: _sorSingleInstanceType,
               "AllocationStrategy" =: _sorAllocationStrategy]

-- | Describes Spot Instance placement.
--
--
--
-- /See:/ 'spotPlacement' smart constructor.
data SpotPlacement = SpotPlacement'
  { _spAvailabilityZone :: !(Maybe Text)
  , _spTenancy          :: !(Maybe Tenancy)
  , _spGroupName        :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotPlacement' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'spAvailabilityZone' - The Availability Zone. [Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".
--
-- * 'spTenancy' - The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of @dedicated@ runs on single-tenant hardware. The @host@ tenancy is not supported for Spot Instances.
--
-- * 'spGroupName' - The name of the placement group.
spotPlacement
    :: SpotPlacement
spotPlacement =
  SpotPlacement'
    { _spAvailabilityZone = Nothing
    , _spTenancy = Nothing
    , _spGroupName = Nothing
    }


-- | The Availability Zone. [Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".
spAvailabilityZone :: Lens' SpotPlacement (Maybe Text)
spAvailabilityZone = lens _spAvailabilityZone (\ s a -> s{_spAvailabilityZone = a})

-- | The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of @dedicated@ runs on single-tenant hardware. The @host@ tenancy is not supported for Spot Instances.
spTenancy :: Lens' SpotPlacement (Maybe Tenancy)
spTenancy = lens _spTenancy (\ s a -> s{_spTenancy = a})

-- | The name of the placement group.
spGroupName :: Lens' SpotPlacement (Maybe Text)
spGroupName = lens _spGroupName (\ s a -> s{_spGroupName = a})

instance FromXML SpotPlacement where
        parseXML x
          = SpotPlacement' <$>
              (x .@? "availabilityZone") <*> (x .@? "tenancy") <*>
                (x .@? "groupName")

instance Hashable SpotPlacement where

instance NFData SpotPlacement where

instance ToQuery SpotPlacement where
        toQuery SpotPlacement'{..}
          = mconcat
              ["AvailabilityZone" =: _spAvailabilityZone,
               "Tenancy" =: _spTenancy, "GroupName" =: _spGroupName]

-- | Describes the maximum price per hour that you are willing to pay for a Spot Instance.
--
--
--
-- /See:/ 'spotPrice' smart constructor.
data SpotPrice = SpotPrice'
  { _sProductDescription :: !(Maybe RIProductDescription)
  , _sSpotPrice          :: !(Maybe Text)
  , _sInstanceType       :: !(Maybe InstanceType)
  , _sAvailabilityZone   :: !(Maybe Text)
  , _sTimestamp          :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SpotPrice' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sProductDescription' - A general description of the AMI.
--
-- * 'sSpotPrice' - The maximum price per hour that you are willing to pay for a Spot Instance.
--
-- * 'sInstanceType' - The instance type.
--
-- * 'sAvailabilityZone' - The Availability Zone.
--
-- * 'sTimestamp' - The date and time the request was created, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
spotPrice
    :: SpotPrice
spotPrice =
  SpotPrice'
    { _sProductDescription = Nothing
    , _sSpotPrice = Nothing
    , _sInstanceType = Nothing
    , _sAvailabilityZone = Nothing
    , _sTimestamp = Nothing
    }


-- | A general description of the AMI.
sProductDescription :: Lens' SpotPrice (Maybe RIProductDescription)
sProductDescription = lens _sProductDescription (\ s a -> s{_sProductDescription = a})

-- | The maximum price per hour that you are willing to pay for a Spot Instance.
sSpotPrice :: Lens' SpotPrice (Maybe Text)
sSpotPrice = lens _sSpotPrice (\ s a -> s{_sSpotPrice = a})

-- | The instance type.
sInstanceType :: Lens' SpotPrice (Maybe InstanceType)
sInstanceType = lens _sInstanceType (\ s a -> s{_sInstanceType = a})

-- | The Availability Zone.
sAvailabilityZone :: Lens' SpotPrice (Maybe Text)
sAvailabilityZone = lens _sAvailabilityZone (\ s a -> s{_sAvailabilityZone = a})

-- | The date and time the request was created, in UTC format (for example, /YYYY/ -/MM/ -/DD/ T/HH/ :/MM/ :/SS/ Z).
sTimestamp :: Lens' SpotPrice (Maybe UTCTime)
sTimestamp = lens _sTimestamp (\ s a -> s{_sTimestamp = a}) . mapping _Time

instance FromXML SpotPrice where
        parseXML x
          = SpotPrice' <$>
              (x .@? "productDescription") <*> (x .@? "spotPrice")
                <*> (x .@? "instanceType")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "timestamp")

instance Hashable SpotPrice where

instance NFData SpotPrice where

-- | Describes a stale rule in a security group.
--
--
--
-- /See:/ 'staleIPPermission' smart constructor.
data StaleIPPermission = StaleIPPermission'
  { _sipFromPort         :: !(Maybe Int)
  , _sipUserIdGroupPairs :: !(Maybe [UserIdGroupPair])
  , _sipPrefixListIds    :: !(Maybe [Text])
  , _sipIPProtocol       :: !(Maybe Text)
  , _sipToPort           :: !(Maybe Int)
  , _sipIPRanges         :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'StaleIPPermission' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sipFromPort' - The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of @-1@ indicates all ICMP types.
--
-- * 'sipUserIdGroupPairs' - The security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.
--
-- * 'sipPrefixListIds' - The prefix list IDs. Not applicable for stale security group rules.
--
-- * 'sipIPProtocol' - The IP protocol name (for @tcp@ , @udp@ , and @icmp@ ) or number (see <http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml Protocol Numbers)> .
--
-- * 'sipToPort' - The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of @-1@ indicates all ICMP types.
--
-- * 'sipIPRanges' - The IP ranges. Not applicable for stale security group rules.
staleIPPermission
    :: StaleIPPermission
staleIPPermission =
  StaleIPPermission'
    { _sipFromPort = Nothing
    , _sipUserIdGroupPairs = Nothing
    , _sipPrefixListIds = Nothing
    , _sipIPProtocol = Nothing
    , _sipToPort = Nothing
    , _sipIPRanges = Nothing
    }


-- | The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of @-1@ indicates all ICMP types.
sipFromPort :: Lens' StaleIPPermission (Maybe Int)
sipFromPort = lens _sipFromPort (\ s a -> s{_sipFromPort = a})

-- | The security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.
sipUserIdGroupPairs :: Lens' StaleIPPermission [UserIdGroupPair]
sipUserIdGroupPairs = lens _sipUserIdGroupPairs (\ s a -> s{_sipUserIdGroupPairs = a}) . _Default . _Coerce

-- | The prefix list IDs. Not applicable for stale security group rules.
sipPrefixListIds :: Lens' StaleIPPermission [Text]
sipPrefixListIds = lens _sipPrefixListIds (\ s a -> s{_sipPrefixListIds = a}) . _Default . _Coerce

-- | The IP protocol name (for @tcp@ , @udp@ , and @icmp@ ) or number (see <http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml Protocol Numbers)> .
sipIPProtocol :: Lens' StaleIPPermission (Maybe Text)
sipIPProtocol = lens _sipIPProtocol (\ s a -> s{_sipIPProtocol = a})

-- | The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of @-1@ indicates all ICMP types.
sipToPort :: Lens' StaleIPPermission (Maybe Int)
sipToPort = lens _sipToPort (\ s a -> s{_sipToPort = a})

-- | The IP ranges. Not applicable for stale security group rules.
sipIPRanges :: Lens' StaleIPPermission [Text]
sipIPRanges = lens _sipIPRanges (\ s a -> s{_sipIPRanges = a}) . _Default . _Coerce

instance FromXML StaleIPPermission where
        parseXML x
          = StaleIPPermission' <$>
              (x .@? "fromPort") <*>
                (x .@? "groups" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "prefixListIds" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "ipProtocol")
                <*> (x .@? "toPort")
                <*>
                (x .@? "ipRanges" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable StaleIPPermission where

instance NFData StaleIPPermission where

-- | Describes a stale security group (a security group that contains stale rules).
--
--
--
-- /See:/ 'staleSecurityGroup' smart constructor.
data StaleSecurityGroup = StaleSecurityGroup'
  { _ssgVPCId                    :: !(Maybe Text)
  , _ssgGroupId                  :: !(Maybe Text)
  , _ssgGroupName                :: !(Maybe Text)
  , _ssgStaleIPPermissionsEgress :: !(Maybe [StaleIPPermission])
  , _ssgStaleIPPermissions       :: !(Maybe [StaleIPPermission])
  , _ssgDescription              :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'StaleSecurityGroup' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ssgVPCId' - The ID of the VPC for the security group.
--
-- * 'ssgGroupId' - The ID of the security group.
--
-- * 'ssgGroupName' - The name of the security group.
--
-- * 'ssgStaleIPPermissionsEgress' - Information about the stale outbound rules in the security group.
--
-- * 'ssgStaleIPPermissions' - Information about the stale inbound rules in the security group.
--
-- * 'ssgDescription' - The description of the security group.
staleSecurityGroup
    :: StaleSecurityGroup
staleSecurityGroup =
  StaleSecurityGroup'
    { _ssgVPCId = Nothing
    , _ssgGroupId = Nothing
    , _ssgGroupName = Nothing
    , _ssgStaleIPPermissionsEgress = Nothing
    , _ssgStaleIPPermissions = Nothing
    , _ssgDescription = Nothing
    }


-- | The ID of the VPC for the security group.
ssgVPCId :: Lens' StaleSecurityGroup (Maybe Text)
ssgVPCId = lens _ssgVPCId (\ s a -> s{_ssgVPCId = a})

-- | The ID of the security group.
ssgGroupId :: Lens' StaleSecurityGroup (Maybe Text)
ssgGroupId = lens _ssgGroupId (\ s a -> s{_ssgGroupId = a})

-- | The name of the security group.
ssgGroupName :: Lens' StaleSecurityGroup (Maybe Text)
ssgGroupName = lens _ssgGroupName (\ s a -> s{_ssgGroupName = a})

-- | Information about the stale outbound rules in the security group.
ssgStaleIPPermissionsEgress :: Lens' StaleSecurityGroup [StaleIPPermission]
ssgStaleIPPermissionsEgress = lens _ssgStaleIPPermissionsEgress (\ s a -> s{_ssgStaleIPPermissionsEgress = a}) . _Default . _Coerce

-- | Information about the stale inbound rules in the security group.
ssgStaleIPPermissions :: Lens' StaleSecurityGroup [StaleIPPermission]
ssgStaleIPPermissions = lens _ssgStaleIPPermissions (\ s a -> s{_ssgStaleIPPermissions = a}) . _Default . _Coerce

-- | The description of the security group.
ssgDescription :: Lens' StaleSecurityGroup (Maybe Text)
ssgDescription = lens _ssgDescription (\ s a -> s{_ssgDescription = a})

instance FromXML StaleSecurityGroup where
        parseXML x
          = StaleSecurityGroup' <$>
              (x .@? "vpcId") <*> (x .@? "groupId") <*>
                (x .@? "groupName")
                <*>
                (x .@? "staleIpPermissionsEgress" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "staleIpPermissions" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "description")

instance Hashable StaleSecurityGroup where

instance NFData StaleSecurityGroup where

-- | Describes a state change.
--
--
--
-- /See:/ 'stateReason' smart constructor.
data StateReason = StateReason'
  { _srCode    :: !(Maybe Text)
  , _srMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'StateReason' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'srCode' - The reason code for the state change.
--
-- * 'srMessage' - The message for the state change.     * @Server.InsufficientInstanceCapacity@ : There was insufficient capacity available to satisfy the launch request.     * @Server.InternalError@ : An internal error caused the instance to terminate during launch.     * @Server.ScheduledStop@ : The instance was stopped due to a scheduled retirement.     * @Server.SpotInstanceShutdown@ : The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.     * @Server.SpotInstanceTermination@ : The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.     * @Client.InstanceInitiatedShutdown@ : The instance was shut down using the @shutdown -h@ command from the instance.     * @Client.InstanceTerminated@ : The instance was terminated or rebooted during AMI creation.     * @Client.InternalError@ : A client error caused the instance to terminate during launch.     * @Client.InvalidSnapshot.NotFound@ : The specified snapshot was not found.     * @Client.UserInitiatedHibernate@ : Hibernation was initiated on the instance.     * @Client.UserInitiatedShutdown@ : The instance was shut down using the Amazon EC2 API.     * @Client.VolumeLimitExceeded@ : The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.
stateReason
    :: StateReason
stateReason = StateReason' {_srCode = Nothing, _srMessage = Nothing}


-- | The reason code for the state change.
srCode :: Lens' StateReason (Maybe Text)
srCode = lens _srCode (\ s a -> s{_srCode = a})

-- | The message for the state change.     * @Server.InsufficientInstanceCapacity@ : There was insufficient capacity available to satisfy the launch request.     * @Server.InternalError@ : An internal error caused the instance to terminate during launch.     * @Server.ScheduledStop@ : The instance was stopped due to a scheduled retirement.     * @Server.SpotInstanceShutdown@ : The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.     * @Server.SpotInstanceTermination@ : The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.     * @Client.InstanceInitiatedShutdown@ : The instance was shut down using the @shutdown -h@ command from the instance.     * @Client.InstanceTerminated@ : The instance was terminated or rebooted during AMI creation.     * @Client.InternalError@ : A client error caused the instance to terminate during launch.     * @Client.InvalidSnapshot.NotFound@ : The specified snapshot was not found.     * @Client.UserInitiatedHibernate@ : Hibernation was initiated on the instance.     * @Client.UserInitiatedShutdown@ : The instance was shut down using the Amazon EC2 API.     * @Client.VolumeLimitExceeded@ : The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.
srMessage :: Lens' StateReason (Maybe Text)
srMessage = lens _srMessage (\ s a -> s{_srMessage = a})

instance FromXML StateReason where
        parseXML x
          = StateReason' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable StateReason where

instance NFData StateReason where

-- | Describes the storage location for an instance store-backed AMI.
--
--
--
-- /See:/ 'storage' smart constructor.
newtype Storage = Storage'
  { _sS3 :: Maybe S3Storage
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Storage' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sS3' - An Amazon S3 storage location.
storage
    :: Storage
storage = Storage' {_sS3 = Nothing}


-- | An Amazon S3 storage location.
sS3 :: Lens' Storage (Maybe S3Storage)
sS3 = lens _sS3 (\ s a -> s{_sS3 = a})

instance FromXML Storage where
        parseXML x = Storage' <$> (x .@? "S3")

instance Hashable Storage where

instance NFData Storage where

instance ToQuery Storage where
        toQuery Storage'{..} = mconcat ["S3" =: _sS3]

-- | Describes a storage location in Amazon S3.
--
--
--
-- /See:/ 'storageLocation' smart constructor.
data StorageLocation = StorageLocation'
  { _slBucket :: !(Maybe Text)
  , _slKey    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'StorageLocation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'slBucket' - The name of the S3 bucket.
--
-- * 'slKey' - The key.
storageLocation
    :: StorageLocation
storageLocation = StorageLocation' {_slBucket = Nothing, _slKey = Nothing}


-- | The name of the S3 bucket.
slBucket :: Lens' StorageLocation (Maybe Text)
slBucket = lens _slBucket (\ s a -> s{_slBucket = a})

-- | The key.
slKey :: Lens' StorageLocation (Maybe Text)
slKey = lens _slKey (\ s a -> s{_slKey = a})

instance Hashable StorageLocation where

instance NFData StorageLocation where

instance ToQuery StorageLocation where
        toQuery StorageLocation'{..}
          = mconcat ["Bucket" =: _slBucket, "Key" =: _slKey]

-- | Describes a subnet.
--
--
--
-- /See:/ 'subnet' smart constructor.
data Subnet = Subnet'
  { _subIPv6CidrBlockAssociationSet :: !(Maybe [SubnetIPv6CidrBlockAssociation])
  , _subAvailabilityZoneId          :: !(Maybe Text)
  , _subOutpostARN                  :: !(Maybe Text)
  , _subAssignIPv6AddressOnCreation :: !(Maybe Bool)
  , _subSubnetARN                   :: !(Maybe Text)
  , _subOwnerId                     :: !(Maybe Text)
  , _subCustomerOwnedIPv4Pool       :: !(Maybe Text)
  , _subMapCustomerOwnedIPOnLaunch  :: !(Maybe Bool)
  , _subMapPublicIPOnLaunch         :: !(Maybe Bool)
  , _subDefaultForAz                :: !(Maybe Bool)
  , _subTags                        :: !(Maybe [Tag])
  , _subAvailabilityZone            :: !Text
  , _subAvailableIPAddressCount     :: !Int
  , _subCidrBlock                   :: !Text
  , _subState                       :: !SubnetState
  , _subSubnetId                    :: !Text
  , _subVPCId                       :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Subnet' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'subIPv6CidrBlockAssociationSet' - Information about the IPv6 CIDR blocks associated with the subnet.
--
-- * 'subAvailabilityZoneId' - The AZ ID of the subnet.
--
-- * 'subOutpostARN' - The Amazon Resource Name (ARN) of the Outpost.
--
-- * 'subAssignIPv6AddressOnCreation' - Indicates whether a network interface created in this subnet (including a network interface created by 'RunInstances' ) receives an IPv6 address.
--
-- * 'subSubnetARN' - The Amazon Resource Name (ARN) of the subnet.
--
-- * 'subOwnerId' - The ID of the AWS account that owns the subnet.
--
-- * 'subCustomerOwnedIPv4Pool' - The customer-owned IPv4 address pool associated with the subnet.
--
-- * 'subMapCustomerOwnedIPOnLaunch' - Indicates whether a network interface created in this subnet (including a network interface created by 'RunInstances' ) receives a customer-owned IPv4 address.
--
-- * 'subMapPublicIPOnLaunch' - Indicates whether instances launched in this subnet receive a public IPv4 address.
--
-- * 'subDefaultForAz' - Indicates whether this is the default subnet for the Availability Zone.
--
-- * 'subTags' - Any tags assigned to the subnet.
--
-- * 'subAvailabilityZone' - The Availability Zone of the subnet.
--
-- * 'subAvailableIPAddressCount' - The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.
--
-- * 'subCidrBlock' - The IPv4 CIDR block assigned to the subnet.
--
-- * 'subState' - The current state of the subnet.
--
-- * 'subSubnetId' - The ID of the subnet.
--
-- * 'subVPCId' - The ID of the VPC the subnet is in.
subnet
    :: Text -- ^ 'subAvailabilityZone'
    -> Int -- ^ 'subAvailableIPAddressCount'
    -> Text -- ^ 'subCidrBlock'
    -> SubnetState -- ^ 'subState'
    -> Text -- ^ 'subSubnetId'
    -> Text -- ^ 'subVPCId'
    -> Subnet
subnet pAvailabilityZone_ pAvailableIPAddressCount_ pCidrBlock_ pState_ pSubnetId_ pVPCId_ =
  Subnet'
    { _subIPv6CidrBlockAssociationSet = Nothing
    , _subAvailabilityZoneId = Nothing
    , _subOutpostARN = Nothing
    , _subAssignIPv6AddressOnCreation = Nothing
    , _subSubnetARN = Nothing
    , _subOwnerId = Nothing
    , _subCustomerOwnedIPv4Pool = Nothing
    , _subMapCustomerOwnedIPOnLaunch = Nothing
    , _subMapPublicIPOnLaunch = Nothing
    , _subDefaultForAz = Nothing
    , _subTags = Nothing
    , _subAvailabilityZone = pAvailabilityZone_
    , _subAvailableIPAddressCount = pAvailableIPAddressCount_
    , _subCidrBlock = pCidrBlock_
    , _subState = pState_
    , _subSubnetId = pSubnetId_
    , _subVPCId = pVPCId_
    }


-- | Information about the IPv6 CIDR blocks associated with the subnet.
subIPv6CidrBlockAssociationSet :: Lens' Subnet [SubnetIPv6CidrBlockAssociation]
subIPv6CidrBlockAssociationSet = lens _subIPv6CidrBlockAssociationSet (\ s a -> s{_subIPv6CidrBlockAssociationSet = a}) . _Default . _Coerce

-- | The AZ ID of the subnet.
subAvailabilityZoneId :: Lens' Subnet (Maybe Text)
subAvailabilityZoneId = lens _subAvailabilityZoneId (\ s a -> s{_subAvailabilityZoneId = a})

-- | The Amazon Resource Name (ARN) of the Outpost.
subOutpostARN :: Lens' Subnet (Maybe Text)
subOutpostARN = lens _subOutpostARN (\ s a -> s{_subOutpostARN = a})

-- | Indicates whether a network interface created in this subnet (including a network interface created by 'RunInstances' ) receives an IPv6 address.
subAssignIPv6AddressOnCreation :: Lens' Subnet (Maybe Bool)
subAssignIPv6AddressOnCreation = lens _subAssignIPv6AddressOnCreation (\ s a -> s{_subAssignIPv6AddressOnCreation = a})

-- | The Amazon Resource Name (ARN) of the subnet.
subSubnetARN :: Lens' Subnet (Maybe Text)
subSubnetARN = lens _subSubnetARN (\ s a -> s{_subSubnetARN = a})

-- | The ID of the AWS account that owns the subnet.
subOwnerId :: Lens' Subnet (Maybe Text)
subOwnerId = lens _subOwnerId (\ s a -> s{_subOwnerId = a})

-- | The customer-owned IPv4 address pool associated with the subnet.
subCustomerOwnedIPv4Pool :: Lens' Subnet (Maybe Text)
subCustomerOwnedIPv4Pool = lens _subCustomerOwnedIPv4Pool (\ s a -> s{_subCustomerOwnedIPv4Pool = a})

-- | Indicates whether a network interface created in this subnet (including a network interface created by 'RunInstances' ) receives a customer-owned IPv4 address.
subMapCustomerOwnedIPOnLaunch :: Lens' Subnet (Maybe Bool)
subMapCustomerOwnedIPOnLaunch = lens _subMapCustomerOwnedIPOnLaunch (\ s a -> s{_subMapCustomerOwnedIPOnLaunch = a})

-- | Indicates whether instances launched in this subnet receive a public IPv4 address.
subMapPublicIPOnLaunch :: Lens' Subnet (Maybe Bool)
subMapPublicIPOnLaunch = lens _subMapPublicIPOnLaunch (\ s a -> s{_subMapPublicIPOnLaunch = a})

-- | Indicates whether this is the default subnet for the Availability Zone.
subDefaultForAz :: Lens' Subnet (Maybe Bool)
subDefaultForAz = lens _subDefaultForAz (\ s a -> s{_subDefaultForAz = a})

-- | Any tags assigned to the subnet.
subTags :: Lens' Subnet [Tag]
subTags = lens _subTags (\ s a -> s{_subTags = a}) . _Default . _Coerce

-- | The Availability Zone of the subnet.
subAvailabilityZone :: Lens' Subnet Text
subAvailabilityZone = lens _subAvailabilityZone (\ s a -> s{_subAvailabilityZone = a})

-- | The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.
subAvailableIPAddressCount :: Lens' Subnet Int
subAvailableIPAddressCount = lens _subAvailableIPAddressCount (\ s a -> s{_subAvailableIPAddressCount = a})

-- | The IPv4 CIDR block assigned to the subnet.
subCidrBlock :: Lens' Subnet Text
subCidrBlock = lens _subCidrBlock (\ s a -> s{_subCidrBlock = a})

-- | The current state of the subnet.
subState :: Lens' Subnet SubnetState
subState = lens _subState (\ s a -> s{_subState = a})

-- | The ID of the subnet.
subSubnetId :: Lens' Subnet Text
subSubnetId = lens _subSubnetId (\ s a -> s{_subSubnetId = a})

-- | The ID of the VPC the subnet is in.
subVPCId :: Lens' Subnet Text
subVPCId = lens _subVPCId (\ s a -> s{_subVPCId = a})

instance FromXML Subnet where
        parseXML x
          = Subnet' <$>
              (x .@? "ipv6CidrBlockAssociationSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "availabilityZoneId")
                <*> (x .@? "outpostArn")
                <*> (x .@? "assignIpv6AddressOnCreation")
                <*> (x .@? "subnetArn")
                <*> (x .@? "ownerId")
                <*> (x .@? "customerOwnedIpv4Pool")
                <*> (x .@? "mapCustomerOwnedIpOnLaunch")
                <*> (x .@? "mapPublicIpOnLaunch")
                <*> (x .@? "defaultForAz")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@ "availabilityZone")
                <*> (x .@ "availableIpAddressCount")
                <*> (x .@ "cidrBlock")
                <*> (x .@ "state")
                <*> (x .@ "subnetId")
                <*> (x .@ "vpcId")

instance Hashable Subnet where

instance NFData Subnet where

-- | Describes the subnet association with the transit gateway multicast domain.
--
--
--
-- /See:/ 'subnetAssociation' smart constructor.
data SubnetAssociation = SubnetAssociation'
  { _saState    :: !(Maybe TransitGatewayMulitcastDomainAssociationState)
  , _saSubnetId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SubnetAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'saState' - The state of the subnet association.
--
-- * 'saSubnetId' - The ID of the subnet.
subnetAssociation
    :: SubnetAssociation
subnetAssociation =
  SubnetAssociation' {_saState = Nothing, _saSubnetId = Nothing}


-- | The state of the subnet association.
saState :: Lens' SubnetAssociation (Maybe TransitGatewayMulitcastDomainAssociationState)
saState = lens _saState (\ s a -> s{_saState = a})

-- | The ID of the subnet.
saSubnetId :: Lens' SubnetAssociation (Maybe Text)
saSubnetId = lens _saSubnetId (\ s a -> s{_saSubnetId = a})

instance FromXML SubnetAssociation where
        parseXML x
          = SubnetAssociation' <$>
              (x .@? "state") <*> (x .@? "subnetId")

instance Hashable SubnetAssociation where

instance NFData SubnetAssociation where

-- | Describes the state of a CIDR block.
--
--
--
-- /See:/ 'subnetCidrBlockState' smart constructor.
data SubnetCidrBlockState = SubnetCidrBlockState'
  { _scbsState         :: !(Maybe SubnetCidrBlockStateCode)
  , _scbsStatusMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SubnetCidrBlockState' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'scbsState' - The state of a CIDR block.
--
-- * 'scbsStatusMessage' - A message about the status of the CIDR block, if applicable.
subnetCidrBlockState
    :: SubnetCidrBlockState
subnetCidrBlockState =
  SubnetCidrBlockState' {_scbsState = Nothing, _scbsStatusMessage = Nothing}


-- | The state of a CIDR block.
scbsState :: Lens' SubnetCidrBlockState (Maybe SubnetCidrBlockStateCode)
scbsState = lens _scbsState (\ s a -> s{_scbsState = a})

-- | A message about the status of the CIDR block, if applicable.
scbsStatusMessage :: Lens' SubnetCidrBlockState (Maybe Text)
scbsStatusMessage = lens _scbsStatusMessage (\ s a -> s{_scbsStatusMessage = a})

instance FromXML SubnetCidrBlockState where
        parseXML x
          = SubnetCidrBlockState' <$>
              (x .@? "state") <*> (x .@? "statusMessage")

instance Hashable SubnetCidrBlockState where

instance NFData SubnetCidrBlockState where

-- | Describes an IPv6 CIDR block associated with a subnet.
--
--
--
-- /See:/ 'subnetIPv6CidrBlockAssociation' smart constructor.
data SubnetIPv6CidrBlockAssociation = SubnetIPv6CidrBlockAssociation'
  { _sicbaAssociationId      :: !(Maybe Text)
  , _sicbaIPv6CidrBlock      :: !(Maybe Text)
  , _sicbaIPv6CidrBlockState :: !(Maybe SubnetCidrBlockState)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SubnetIPv6CidrBlockAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sicbaAssociationId' - The association ID for the CIDR block.
--
-- * 'sicbaIPv6CidrBlock' - The IPv6 CIDR block.
--
-- * 'sicbaIPv6CidrBlockState' - Information about the state of the CIDR block.
subnetIPv6CidrBlockAssociation
    :: SubnetIPv6CidrBlockAssociation
subnetIPv6CidrBlockAssociation =
  SubnetIPv6CidrBlockAssociation'
    { _sicbaAssociationId = Nothing
    , _sicbaIPv6CidrBlock = Nothing
    , _sicbaIPv6CidrBlockState = Nothing
    }


-- | The association ID for the CIDR block.
sicbaAssociationId :: Lens' SubnetIPv6CidrBlockAssociation (Maybe Text)
sicbaAssociationId = lens _sicbaAssociationId (\ s a -> s{_sicbaAssociationId = a})

-- | The IPv6 CIDR block.
sicbaIPv6CidrBlock :: Lens' SubnetIPv6CidrBlockAssociation (Maybe Text)
sicbaIPv6CidrBlock = lens _sicbaIPv6CidrBlock (\ s a -> s{_sicbaIPv6CidrBlock = a})

-- | Information about the state of the CIDR block.
sicbaIPv6CidrBlockState :: Lens' SubnetIPv6CidrBlockAssociation (Maybe SubnetCidrBlockState)
sicbaIPv6CidrBlockState = lens _sicbaIPv6CidrBlockState (\ s a -> s{_sicbaIPv6CidrBlockState = a})

instance FromXML SubnetIPv6CidrBlockAssociation where
        parseXML x
          = SubnetIPv6CidrBlockAssociation' <$>
              (x .@? "associationId") <*> (x .@? "ipv6CidrBlock")
                <*> (x .@? "ipv6CidrBlockState")

instance Hashable SubnetIPv6CidrBlockAssociation
         where

instance NFData SubnetIPv6CidrBlockAssociation where

-- | Describes the burstable performance instance whose credit option for CPU usage was successfully modified.
--
--
--
-- /See:/ 'successfulInstanceCreditSpecificationItem' smart constructor.
newtype SuccessfulInstanceCreditSpecificationItem = SuccessfulInstanceCreditSpecificationItem'
  { _sicsiInstanceId :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SuccessfulInstanceCreditSpecificationItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sicsiInstanceId' - The ID of the instance.
successfulInstanceCreditSpecificationItem
    :: SuccessfulInstanceCreditSpecificationItem
successfulInstanceCreditSpecificationItem =
  SuccessfulInstanceCreditSpecificationItem' {_sicsiInstanceId = Nothing}


-- | The ID of the instance.
sicsiInstanceId :: Lens' SuccessfulInstanceCreditSpecificationItem (Maybe Text)
sicsiInstanceId = lens _sicsiInstanceId (\ s a -> s{_sicsiInstanceId = a})

instance FromXML
           SuccessfulInstanceCreditSpecificationItem
         where
        parseXML x
          = SuccessfulInstanceCreditSpecificationItem' <$>
              (x .@? "instanceId")

instance Hashable
           SuccessfulInstanceCreditSpecificationItem
         where

instance NFData
           SuccessfulInstanceCreditSpecificationItem
         where

-- | Describes a Reserved Instance whose queued purchase was successfully deleted.
--
--
--
-- /See:/ 'successfulQueuedPurchaseDeletion' smart constructor.
newtype SuccessfulQueuedPurchaseDeletion = SuccessfulQueuedPurchaseDeletion'
  { _sqpdReservedInstancesId :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'SuccessfulQueuedPurchaseDeletion' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'sqpdReservedInstancesId' - The ID of the Reserved Instance.
successfulQueuedPurchaseDeletion
    :: SuccessfulQueuedPurchaseDeletion
successfulQueuedPurchaseDeletion =
  SuccessfulQueuedPurchaseDeletion' {_sqpdReservedInstancesId = Nothing}


-- | The ID of the Reserved Instance.
sqpdReservedInstancesId :: Lens' SuccessfulQueuedPurchaseDeletion (Maybe Text)
sqpdReservedInstancesId = lens _sqpdReservedInstancesId (\ s a -> s{_sqpdReservedInstancesId = a})

instance FromXML SuccessfulQueuedPurchaseDeletion
         where
        parseXML x
          = SuccessfulQueuedPurchaseDeletion' <$>
              (x .@? "reservedInstancesId")

instance Hashable SuccessfulQueuedPurchaseDeletion
         where

instance NFData SuccessfulQueuedPurchaseDeletion
         where

-- | Describes a tag.
--
--
--
-- /See:/ 'tag' smart constructor.
data Tag = Tag'
  { _tagKey   :: !Text
  , _tagValue :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Tag' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tagKey' - The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with @aws:@ .
--
-- * 'tagValue' - The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
tag
    :: Text -- ^ 'tagKey'
    -> Text -- ^ 'tagValue'
    -> Tag
tag pKey_ pValue_ = Tag' {_tagKey = pKey_, _tagValue = pValue_}


-- | The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with @aws:@ .
tagKey :: Lens' Tag Text
tagKey = lens _tagKey (\ s a -> s{_tagKey = a})

-- | The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
tagValue :: Lens' Tag Text
tagValue = lens _tagValue (\ s a -> s{_tagValue = a})

instance FromXML Tag where
        parseXML x = Tag' <$> (x .@ "key") <*> (x .@ "value")

instance Hashable Tag where

instance NFData Tag where

instance ToQuery Tag where
        toQuery Tag'{..}
          = mconcat ["Key" =: _tagKey, "Value" =: _tagValue]

-- | Describes a tag.
--
--
--
-- /See:/ 'tagDescription' smart constructor.
data TagDescription = TagDescription'
  { _tdResourceId   :: !Text
  , _tdResourceType :: !ResourceType
  , _tdKey          :: !Text
  , _tdValue        :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TagDescription' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tdResourceId' - The ID of the resource.
--
-- * 'tdResourceType' - The resource type.
--
-- * 'tdKey' - The tag key.
--
-- * 'tdValue' - The tag value.
tagDescription
    :: Text -- ^ 'tdResourceId'
    -> ResourceType -- ^ 'tdResourceType'
    -> Text -- ^ 'tdKey'
    -> Text -- ^ 'tdValue'
    -> TagDescription
tagDescription pResourceId_ pResourceType_ pKey_ pValue_ =
  TagDescription'
    { _tdResourceId = pResourceId_
    , _tdResourceType = pResourceType_
    , _tdKey = pKey_
    , _tdValue = pValue_
    }


-- | The ID of the resource.
tdResourceId :: Lens' TagDescription Text
tdResourceId = lens _tdResourceId (\ s a -> s{_tdResourceId = a})

-- | The resource type.
tdResourceType :: Lens' TagDescription ResourceType
tdResourceType = lens _tdResourceType (\ s a -> s{_tdResourceType = a})

-- | The tag key.
tdKey :: Lens' TagDescription Text
tdKey = lens _tdKey (\ s a -> s{_tdKey = a})

-- | The tag value.
tdValue :: Lens' TagDescription Text
tdValue = lens _tdValue (\ s a -> s{_tdValue = a})

instance FromXML TagDescription where
        parseXML x
          = TagDescription' <$>
              (x .@ "resourceId") <*> (x .@ "resourceType") <*>
                (x .@ "key")
                <*> (x .@ "value")

instance Hashable TagDescription where

instance NFData TagDescription where

-- | The tags to apply to a resource when the resource is being created.
--
--
--
-- /See:/ 'tagSpecification' smart constructor.
data TagSpecification = TagSpecification'
  { _tsResourceType :: !(Maybe ResourceType)
  , _tsTags         :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TagSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tsResourceType' - The type of resource to tag. Currently, the resource types that support tagging on creation are: @capacity-reservation@ | @carrier-gateway@ | @client-vpn-endpoint@ | @customer-gateway@ | @dedicated-host@ | @dhcp-options@ | @egress-only-internet-gateway@ | @elastic-ip@ | @elastic-gpu@ | @export-image-task@ | @export-instance-task@ | @fleet@ | @fpga-image@ | @host-reservation@ | @image@ | @import-image-task@ | @import-snapshot-task@ | @instance@ | @internet-gateway@ | @ipv4pool-ec2@ | @ipv6pool-ec2@ | @key-pair@ | @launch-template@ | @local-gateway-route-table-vpc-association@ | @placement-group@ | @prefix-list@ | @natgateway@ | @network-acl@ | @network-interface@ | @reserved-instances@ |@route-table@ | @security-group@ | @snapshot@ | @spot-fleet-request@ | @spot-instances-request@ | @snapshot@ | @subnet@ | @traffic-mirror-filter@ | @traffic-mirror-session@ | @traffic-mirror-target@ | @transit-gateway@ | @transit-gateway-attachment@ | @transit-gateway-multicast-domain@ | @transit-gateway-route-table@ | @volume@ |@vpc@ | @vpc-peering-connection@ | @vpc-endpoint@ (for interface and gateway endpoints) | @vpc-endpoint-service@ (for AWS PrivateLink) | @vpc-flow-log@ | @vpn-connection@ | @vpn-gateway@ . To tag a resource after it has been created, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html CreateTags> .
--
-- * 'tsTags' - The tags to apply to the resource.
tagSpecification
    :: TagSpecification
tagSpecification =
  TagSpecification' {_tsResourceType = Nothing, _tsTags = Nothing}


-- | The type of resource to tag. Currently, the resource types that support tagging on creation are: @capacity-reservation@ | @carrier-gateway@ | @client-vpn-endpoint@ | @customer-gateway@ | @dedicated-host@ | @dhcp-options@ | @egress-only-internet-gateway@ | @elastic-ip@ | @elastic-gpu@ | @export-image-task@ | @export-instance-task@ | @fleet@ | @fpga-image@ | @host-reservation@ | @image@ | @import-image-task@ | @import-snapshot-task@ | @instance@ | @internet-gateway@ | @ipv4pool-ec2@ | @ipv6pool-ec2@ | @key-pair@ | @launch-template@ | @local-gateway-route-table-vpc-association@ | @placement-group@ | @prefix-list@ | @natgateway@ | @network-acl@ | @network-interface@ | @reserved-instances@ |@route-table@ | @security-group@ | @snapshot@ | @spot-fleet-request@ | @spot-instances-request@ | @snapshot@ | @subnet@ | @traffic-mirror-filter@ | @traffic-mirror-session@ | @traffic-mirror-target@ | @transit-gateway@ | @transit-gateway-attachment@ | @transit-gateway-multicast-domain@ | @transit-gateway-route-table@ | @volume@ |@vpc@ | @vpc-peering-connection@ | @vpc-endpoint@ (for interface and gateway endpoints) | @vpc-endpoint-service@ (for AWS PrivateLink) | @vpc-flow-log@ | @vpn-connection@ | @vpn-gateway@ . To tag a resource after it has been created, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html CreateTags> .
tsResourceType :: Lens' TagSpecification (Maybe ResourceType)
tsResourceType = lens _tsResourceType (\ s a -> s{_tsResourceType = a})

-- | The tags to apply to the resource.
tsTags :: Lens' TagSpecification [Tag]
tsTags = lens _tsTags (\ s a -> s{_tsTags = a}) . _Default . _Coerce

instance FromXML TagSpecification where
        parseXML x
          = TagSpecification' <$>
              (x .@? "resourceType") <*>
                (x .@? "Tag" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TagSpecification where

instance NFData TagSpecification where

instance ToQuery TagSpecification where
        toQuery TagSpecification'{..}
          = mconcat
              ["ResourceType" =: _tsResourceType,
               toQuery (toQueryList "Tag" <$> _tsTags)]

-- | The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is @maintain@ , you can specify a target capacity of 0 and add capacity later.
--
--
-- You can use the On-Demand Instance @MaxTotalPrice@ parameter, the Spot Instance @MaxTotalPrice@ , or both to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The @MaxTotalPrice@ parameters are located in <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptions.html OnDemandOptions> and <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptions SpotOptions> .
--
--
-- /See:/ 'targetCapacitySpecification' smart constructor.
data TargetCapacitySpecification = TargetCapacitySpecification'
  { _tcsOnDemandTargetCapacity    :: !(Maybe Int)
  , _tcsDefaultTargetCapacityType :: !(Maybe DefaultTargetCapacityType)
  , _tcsTotalTargetCapacity       :: !(Maybe Int)
  , _tcsSpotTargetCapacity        :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TargetCapacitySpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tcsOnDemandTargetCapacity' - The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.
--
-- * 'tcsDefaultTargetCapacityType' - The default @TotalTargetCapacity@ , which is either @Spot@ or @On-Demand@ .
--
-- * 'tcsTotalTargetCapacity' - The number of units to request, filled using @DefaultTargetCapacityType@ .
--
-- * 'tcsSpotTargetCapacity' - The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.
targetCapacitySpecification
    :: TargetCapacitySpecification
targetCapacitySpecification =
  TargetCapacitySpecification'
    { _tcsOnDemandTargetCapacity = Nothing
    , _tcsDefaultTargetCapacityType = Nothing
    , _tcsTotalTargetCapacity = Nothing
    , _tcsSpotTargetCapacity = Nothing
    }


-- | The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.
tcsOnDemandTargetCapacity :: Lens' TargetCapacitySpecification (Maybe Int)
tcsOnDemandTargetCapacity = lens _tcsOnDemandTargetCapacity (\ s a -> s{_tcsOnDemandTargetCapacity = a})

-- | The default @TotalTargetCapacity@ , which is either @Spot@ or @On-Demand@ .
tcsDefaultTargetCapacityType :: Lens' TargetCapacitySpecification (Maybe DefaultTargetCapacityType)
tcsDefaultTargetCapacityType = lens _tcsDefaultTargetCapacityType (\ s a -> s{_tcsDefaultTargetCapacityType = a})

-- | The number of units to request, filled using @DefaultTargetCapacityType@ .
tcsTotalTargetCapacity :: Lens' TargetCapacitySpecification (Maybe Int)
tcsTotalTargetCapacity = lens _tcsTotalTargetCapacity (\ s a -> s{_tcsTotalTargetCapacity = a})

-- | The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.
tcsSpotTargetCapacity :: Lens' TargetCapacitySpecification (Maybe Int)
tcsSpotTargetCapacity = lens _tcsSpotTargetCapacity (\ s a -> s{_tcsSpotTargetCapacity = a})

instance FromXML TargetCapacitySpecification where
        parseXML x
          = TargetCapacitySpecification' <$>
              (x .@? "onDemandTargetCapacity") <*>
                (x .@? "defaultTargetCapacityType")
                <*> (x .@? "totalTargetCapacity")
                <*> (x .@? "spotTargetCapacity")

instance Hashable TargetCapacitySpecification where

instance NFData TargetCapacitySpecification where

-- | The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is @maintain@ , you can specify a target capacity of 0 and add capacity later.
--
--
-- You can use the On-Demand Instance @MaxTotalPrice@ parameter, the Spot Instance @MaxTotalPrice@ parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The @MaxTotalPrice@ parameters are located in <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_OnDemandOptionsRequest OnDemandOptionsRequest> and <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SpotOptionsRequest SpotOptionsRequest> .
--
--
-- /See:/ 'targetCapacitySpecificationRequest' smart constructor.
data TargetCapacitySpecificationRequest = TargetCapacitySpecificationRequest'
  { _tcsrOnDemandTargetCapacity    :: !(Maybe Int)
  , _tcsrDefaultTargetCapacityType :: !(Maybe DefaultTargetCapacityType)
  , _tcsrSpotTargetCapacity        :: !(Maybe Int)
  , _tcsrTotalTargetCapacity       :: !Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TargetCapacitySpecificationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tcsrOnDemandTargetCapacity' - The number of On-Demand units to request.
--
-- * 'tcsrDefaultTargetCapacityType' - The default @TotalTargetCapacity@ , which is either @Spot@ or @On-Demand@ .
--
-- * 'tcsrSpotTargetCapacity' - The number of Spot units to request.
--
-- * 'tcsrTotalTargetCapacity' - The number of units to request, filled using @DefaultTargetCapacityType@ .
targetCapacitySpecificationRequest
    :: Int -- ^ 'tcsrTotalTargetCapacity'
    -> TargetCapacitySpecificationRequest
targetCapacitySpecificationRequest pTotalTargetCapacity_ =
  TargetCapacitySpecificationRequest'
    { _tcsrOnDemandTargetCapacity = Nothing
    , _tcsrDefaultTargetCapacityType = Nothing
    , _tcsrSpotTargetCapacity = Nothing
    , _tcsrTotalTargetCapacity = pTotalTargetCapacity_
    }


-- | The number of On-Demand units to request.
tcsrOnDemandTargetCapacity :: Lens' TargetCapacitySpecificationRequest (Maybe Int)
tcsrOnDemandTargetCapacity = lens _tcsrOnDemandTargetCapacity (\ s a -> s{_tcsrOnDemandTargetCapacity = a})

-- | The default @TotalTargetCapacity@ , which is either @Spot@ or @On-Demand@ .
tcsrDefaultTargetCapacityType :: Lens' TargetCapacitySpecificationRequest (Maybe DefaultTargetCapacityType)
tcsrDefaultTargetCapacityType = lens _tcsrDefaultTargetCapacityType (\ s a -> s{_tcsrDefaultTargetCapacityType = a})

-- | The number of Spot units to request.
tcsrSpotTargetCapacity :: Lens' TargetCapacitySpecificationRequest (Maybe Int)
tcsrSpotTargetCapacity = lens _tcsrSpotTargetCapacity (\ s a -> s{_tcsrSpotTargetCapacity = a})

-- | The number of units to request, filled using @DefaultTargetCapacityType@ .
tcsrTotalTargetCapacity :: Lens' TargetCapacitySpecificationRequest Int
tcsrTotalTargetCapacity = lens _tcsrTotalTargetCapacity (\ s a -> s{_tcsrTotalTargetCapacity = a})

instance Hashable TargetCapacitySpecificationRequest
         where

instance NFData TargetCapacitySpecificationRequest
         where

instance ToQuery TargetCapacitySpecificationRequest
         where
        toQuery TargetCapacitySpecificationRequest'{..}
          = mconcat
              ["OnDemandTargetCapacity" =:
                 _tcsrOnDemandTargetCapacity,
               "DefaultTargetCapacityType" =:
                 _tcsrDefaultTargetCapacityType,
               "SpotTargetCapacity" =: _tcsrSpotTargetCapacity,
               "TotalTargetCapacity" =: _tcsrTotalTargetCapacity]

-- | Information about the Convertible Reserved Instance offering.
--
--
--
-- /See:/ 'targetConfiguration' smart constructor.
data TargetConfiguration = TargetConfiguration'
  { _tcInstanceCount :: !(Maybe Int)
  , _tcOfferingId    :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TargetConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tcInstanceCount' - The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
--
-- * 'tcOfferingId' - The ID of the Convertible Reserved Instance offering.
targetConfiguration
    :: TargetConfiguration
targetConfiguration =
  TargetConfiguration' {_tcInstanceCount = Nothing, _tcOfferingId = Nothing}


-- | The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
tcInstanceCount :: Lens' TargetConfiguration (Maybe Int)
tcInstanceCount = lens _tcInstanceCount (\ s a -> s{_tcInstanceCount = a})

-- | The ID of the Convertible Reserved Instance offering.
tcOfferingId :: Lens' TargetConfiguration (Maybe Text)
tcOfferingId = lens _tcOfferingId (\ s a -> s{_tcOfferingId = a})

instance FromXML TargetConfiguration where
        parseXML x
          = TargetConfiguration' <$>
              (x .@? "instanceCount") <*> (x .@? "offeringId")

instance Hashable TargetConfiguration where

instance NFData TargetConfiguration where

-- | Details about the target configuration.
--
--
--
-- /See:/ 'targetConfigurationRequest' smart constructor.
data TargetConfigurationRequest = TargetConfigurationRequest'
  { _tcrInstanceCount :: !(Maybe Int)
  , _tcrOfferingId    :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TargetConfigurationRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tcrInstanceCount' - The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
--
-- * 'tcrOfferingId' - The Convertible Reserved Instance offering ID.
targetConfigurationRequest
    :: Text -- ^ 'tcrOfferingId'
    -> TargetConfigurationRequest
targetConfigurationRequest pOfferingId_ =
  TargetConfigurationRequest'
    {_tcrInstanceCount = Nothing, _tcrOfferingId = pOfferingId_}


-- | The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
tcrInstanceCount :: Lens' TargetConfigurationRequest (Maybe Int)
tcrInstanceCount = lens _tcrInstanceCount (\ s a -> s{_tcrInstanceCount = a})

-- | The Convertible Reserved Instance offering ID.
tcrOfferingId :: Lens' TargetConfigurationRequest Text
tcrOfferingId = lens _tcrOfferingId (\ s a -> s{_tcrOfferingId = a})

instance Hashable TargetConfigurationRequest where

instance NFData TargetConfigurationRequest where

instance ToQuery TargetConfigurationRequest where
        toQuery TargetConfigurationRequest'{..}
          = mconcat
              ["InstanceCount" =: _tcrInstanceCount,
               "OfferingId" =: _tcrOfferingId]

-- | Describes a load balancer target group.
--
--
--
-- /See:/ 'targetGroup' smart constructor.
newtype TargetGroup = TargetGroup'
  { _tgARN :: Maybe Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TargetGroup' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgARN' - The Amazon Resource Name (ARN) of the target group.
targetGroup
    :: TargetGroup
targetGroup = TargetGroup' {_tgARN = Nothing}


-- | The Amazon Resource Name (ARN) of the target group.
tgARN :: Lens' TargetGroup (Maybe Text)
tgARN = lens _tgARN (\ s a -> s{_tgARN = a})

instance FromXML TargetGroup where
        parseXML x = TargetGroup' <$> (x .@? "arn")

instance Hashable TargetGroup where

instance NFData TargetGroup where

instance ToQuery TargetGroup where
        toQuery TargetGroup'{..} = mconcat ["Arn" =: _tgARN]

-- | Describes the target groups to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these target groups.
--
--
--
-- /See:/ 'targetGroupsConfig' smart constructor.
newtype TargetGroupsConfig = TargetGroupsConfig'
  { _tgcTargetGroups :: Maybe (List1 TargetGroup)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TargetGroupsConfig' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgcTargetGroups' - One or more target groups.
targetGroupsConfig
    :: TargetGroupsConfig
targetGroupsConfig = TargetGroupsConfig' {_tgcTargetGroups = Nothing}


-- | One or more target groups.
tgcTargetGroups :: Lens' TargetGroupsConfig (Maybe (NonEmpty TargetGroup))
tgcTargetGroups = lens _tgcTargetGroups (\ s a -> s{_tgcTargetGroups = a}) . mapping _List1

instance FromXML TargetGroupsConfig where
        parseXML x
          = TargetGroupsConfig' <$>
              (x .@? "targetGroups" .!@ mempty >>=
                 may (parseXMLList1 "item"))

instance Hashable TargetGroupsConfig where

instance NFData TargetGroupsConfig where

instance ToQuery TargetGroupsConfig where
        toQuery TargetGroupsConfig'{..}
          = mconcat
              [toQuery
                 (toQueryList "TargetGroups" <$> _tgcTargetGroups)]

-- | Describes a target network associated with a Client VPN endpoint.
--
--
--
-- /See:/ 'targetNetwork' smart constructor.
data TargetNetwork = TargetNetwork'
  { _tnAssociationId       :: !(Maybe Text)
  , _tnStatus              :: !(Maybe AssociationStatus)
  , _tnSecurityGroups      :: !(Maybe [Text])
  , _tnTargetNetworkId     :: !(Maybe Text)
  , _tnVPCId               :: !(Maybe Text)
  , _tnClientVPNEndpointId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TargetNetwork' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tnAssociationId' - The ID of the association.
--
-- * 'tnStatus' - The current state of the target network association.
--
-- * 'tnSecurityGroups' - The IDs of the security groups applied to the target network association.
--
-- * 'tnTargetNetworkId' - The ID of the subnet specified as the target network.
--
-- * 'tnVPCId' - The ID of the VPC in which the target network (subnet) is located.
--
-- * 'tnClientVPNEndpointId' - The ID of the Client VPN endpoint with which the target network is associated.
targetNetwork
    :: TargetNetwork
targetNetwork =
  TargetNetwork'
    { _tnAssociationId = Nothing
    , _tnStatus = Nothing
    , _tnSecurityGroups = Nothing
    , _tnTargetNetworkId = Nothing
    , _tnVPCId = Nothing
    , _tnClientVPNEndpointId = Nothing
    }


-- | The ID of the association.
tnAssociationId :: Lens' TargetNetwork (Maybe Text)
tnAssociationId = lens _tnAssociationId (\ s a -> s{_tnAssociationId = a})

-- | The current state of the target network association.
tnStatus :: Lens' TargetNetwork (Maybe AssociationStatus)
tnStatus = lens _tnStatus (\ s a -> s{_tnStatus = a})

-- | The IDs of the security groups applied to the target network association.
tnSecurityGroups :: Lens' TargetNetwork [Text]
tnSecurityGroups = lens _tnSecurityGroups (\ s a -> s{_tnSecurityGroups = a}) . _Default . _Coerce

-- | The ID of the subnet specified as the target network.
tnTargetNetworkId :: Lens' TargetNetwork (Maybe Text)
tnTargetNetworkId = lens _tnTargetNetworkId (\ s a -> s{_tnTargetNetworkId = a})

-- | The ID of the VPC in which the target network (subnet) is located.
tnVPCId :: Lens' TargetNetwork (Maybe Text)
tnVPCId = lens _tnVPCId (\ s a -> s{_tnVPCId = a})

-- | The ID of the Client VPN endpoint with which the target network is associated.
tnClientVPNEndpointId :: Lens' TargetNetwork (Maybe Text)
tnClientVPNEndpointId = lens _tnClientVPNEndpointId (\ s a -> s{_tnClientVPNEndpointId = a})

instance FromXML TargetNetwork where
        parseXML x
          = TargetNetwork' <$>
              (x .@? "associationId") <*> (x .@? "status") <*>
                (x .@? "securityGroups" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "targetNetworkId")
                <*> (x .@? "vpcId")
                <*> (x .@? "clientVpnEndpointId")

instance Hashable TargetNetwork where

instance NFData TargetNetwork where

-- | The total value of the new Convertible Reserved Instances.
--
--
--
-- /See:/ 'targetReservationValue' smart constructor.
data TargetReservationValue = TargetReservationValue'
  { _trvReservationValue    :: !(Maybe ReservationValue)
  , _trvTargetConfiguration :: !(Maybe TargetConfiguration)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TargetReservationValue' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'trvReservationValue' - The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.
--
-- * 'trvTargetConfiguration' - The configuration of the Convertible Reserved Instances that make up the exchange.
targetReservationValue
    :: TargetReservationValue
targetReservationValue =
  TargetReservationValue'
    {_trvReservationValue = Nothing, _trvTargetConfiguration = Nothing}


-- | The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.
trvReservationValue :: Lens' TargetReservationValue (Maybe ReservationValue)
trvReservationValue = lens _trvReservationValue (\ s a -> s{_trvReservationValue = a})

-- | The configuration of the Convertible Reserved Instances that make up the exchange.
trvTargetConfiguration :: Lens' TargetReservationValue (Maybe TargetConfiguration)
trvTargetConfiguration = lens _trvTargetConfiguration (\ s a -> s{_trvTargetConfiguration = a})

instance FromXML TargetReservationValue where
        parseXML x
          = TargetReservationValue' <$>
              (x .@? "reservationValue") <*>
                (x .@? "targetConfiguration")

instance Hashable TargetReservationValue where

instance NFData TargetReservationValue where

-- | Information about a terminated Client VPN endpoint client connection.
--
--
--
-- /See:/ 'terminateConnectionStatus' smart constructor.
data TerminateConnectionStatus = TerminateConnectionStatus'
  { _tcsCurrentStatus  :: !(Maybe ClientVPNConnectionStatus)
  , _tcsConnectionId   :: !(Maybe Text)
  , _tcsPreviousStatus :: !(Maybe ClientVPNConnectionStatus)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TerminateConnectionStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tcsCurrentStatus' - A message about the status of the client connection, if applicable.
--
-- * 'tcsConnectionId' - The ID of the client connection.
--
-- * 'tcsPreviousStatus' - The state of the client connection.
terminateConnectionStatus
    :: TerminateConnectionStatus
terminateConnectionStatus =
  TerminateConnectionStatus'
    { _tcsCurrentStatus = Nothing
    , _tcsConnectionId = Nothing
    , _tcsPreviousStatus = Nothing
    }


-- | A message about the status of the client connection, if applicable.
tcsCurrentStatus :: Lens' TerminateConnectionStatus (Maybe ClientVPNConnectionStatus)
tcsCurrentStatus = lens _tcsCurrentStatus (\ s a -> s{_tcsCurrentStatus = a})

-- | The ID of the client connection.
tcsConnectionId :: Lens' TerminateConnectionStatus (Maybe Text)
tcsConnectionId = lens _tcsConnectionId (\ s a -> s{_tcsConnectionId = a})

-- | The state of the client connection.
tcsPreviousStatus :: Lens' TerminateConnectionStatus (Maybe ClientVPNConnectionStatus)
tcsPreviousStatus = lens _tcsPreviousStatus (\ s a -> s{_tcsPreviousStatus = a})

instance FromXML TerminateConnectionStatus where
        parseXML x
          = TerminateConnectionStatus' <$>
              (x .@? "currentStatus") <*> (x .@? "connectionId")
                <*> (x .@? "previousStatus")

instance Hashable TerminateConnectionStatus where

instance NFData TerminateConnectionStatus where

-- | Describes the Traffic Mirror filter.
--
--
--
-- /See:/ 'trafficMirrorFilter' smart constructor.
data TrafficMirrorFilter = TrafficMirrorFilter'
  { _tmfTrafficMirrorFilterId :: !(Maybe Text)
  , _tmfIngressFilterRules    :: !(Maybe [TrafficMirrorFilterRule])
  , _tmfNetworkServices       :: !(Maybe [TrafficMirrorNetworkService])
  , _tmfEgressFilterRules     :: !(Maybe [TrafficMirrorFilterRule])
  , _tmfDescription           :: !(Maybe Text)
  , _tmfTags                  :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TrafficMirrorFilter' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tmfTrafficMirrorFilterId' - The ID of the Traffic Mirror filter.
--
-- * 'tmfIngressFilterRules' - Information about the ingress rules that are associated with the Traffic Mirror filter.
--
-- * 'tmfNetworkServices' - The network service traffic that is associated with the Traffic Mirror filter.
--
-- * 'tmfEgressFilterRules' - Information about the egress rules that are associated with the Traffic Mirror filter.
--
-- * 'tmfDescription' - The description of the Traffic Mirror filter.
--
-- * 'tmfTags' - The tags assigned to the Traffic Mirror filter.
trafficMirrorFilter
    :: TrafficMirrorFilter
trafficMirrorFilter =
  TrafficMirrorFilter'
    { _tmfTrafficMirrorFilterId = Nothing
    , _tmfIngressFilterRules = Nothing
    , _tmfNetworkServices = Nothing
    , _tmfEgressFilterRules = Nothing
    , _tmfDescription = Nothing
    , _tmfTags = Nothing
    }


-- | The ID of the Traffic Mirror filter.
tmfTrafficMirrorFilterId :: Lens' TrafficMirrorFilter (Maybe Text)
tmfTrafficMirrorFilterId = lens _tmfTrafficMirrorFilterId (\ s a -> s{_tmfTrafficMirrorFilterId = a})

-- | Information about the ingress rules that are associated with the Traffic Mirror filter.
tmfIngressFilterRules :: Lens' TrafficMirrorFilter [TrafficMirrorFilterRule]
tmfIngressFilterRules = lens _tmfIngressFilterRules (\ s a -> s{_tmfIngressFilterRules = a}) . _Default . _Coerce

-- | The network service traffic that is associated with the Traffic Mirror filter.
tmfNetworkServices :: Lens' TrafficMirrorFilter [TrafficMirrorNetworkService]
tmfNetworkServices = lens _tmfNetworkServices (\ s a -> s{_tmfNetworkServices = a}) . _Default . _Coerce

-- | Information about the egress rules that are associated with the Traffic Mirror filter.
tmfEgressFilterRules :: Lens' TrafficMirrorFilter [TrafficMirrorFilterRule]
tmfEgressFilterRules = lens _tmfEgressFilterRules (\ s a -> s{_tmfEgressFilterRules = a}) . _Default . _Coerce

-- | The description of the Traffic Mirror filter.
tmfDescription :: Lens' TrafficMirrorFilter (Maybe Text)
tmfDescription = lens _tmfDescription (\ s a -> s{_tmfDescription = a})

-- | The tags assigned to the Traffic Mirror filter.
tmfTags :: Lens' TrafficMirrorFilter [Tag]
tmfTags = lens _tmfTags (\ s a -> s{_tmfTags = a}) . _Default . _Coerce

instance FromXML TrafficMirrorFilter where
        parseXML x
          = TrafficMirrorFilter' <$>
              (x .@? "trafficMirrorFilterId") <*>
                (x .@? "ingressFilterRuleSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "networkServiceSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "egressFilterRuleSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TrafficMirrorFilter where

instance NFData TrafficMirrorFilter where

-- | Describes the Traffic Mirror rule.
--
--
--
-- /See:/ 'trafficMirrorFilterRule' smart constructor.
data TrafficMirrorFilterRule = TrafficMirrorFilterRule'
  { _tmfrRuleNumber                :: !(Maybe Int)
  , _tmfrTrafficDirection          :: !(Maybe TrafficDirection)
  , _tmfrRuleAction                :: !(Maybe TrafficMirrorRuleAction)
  , _tmfrProtocol                  :: !(Maybe Int)
  , _tmfrTrafficMirrorFilterId     :: !(Maybe Text)
  , _tmfrTrafficMirrorFilterRuleId :: !(Maybe Text)
  , _tmfrDestinationPortRange      :: !(Maybe TrafficMirrorPortRange)
  , _tmfrSourceCidrBlock           :: !(Maybe Text)
  , _tmfrSourcePortRange           :: !(Maybe TrafficMirrorPortRange)
  , _tmfrDescription               :: !(Maybe Text)
  , _tmfrDestinationCidrBlock      :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TrafficMirrorFilterRule' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tmfrRuleNumber' - The rule number of the Traffic Mirror rule.
--
-- * 'tmfrTrafficDirection' - The traffic direction assigned to the Traffic Mirror rule.
--
-- * 'tmfrRuleAction' - The action assigned to the Traffic Mirror rule.
--
-- * 'tmfrProtocol' - The protocol assigned to the Traffic Mirror rule.
--
-- * 'tmfrTrafficMirrorFilterId' - The ID of the Traffic Mirror filter that the rule is associated with.
--
-- * 'tmfrTrafficMirrorFilterRuleId' - The ID of the Traffic Mirror rule.
--
-- * 'tmfrDestinationPortRange' - The destination port range assigned to the Traffic Mirror rule.
--
-- * 'tmfrSourceCidrBlock' - The source CIDR block assigned to the Traffic Mirror rule.
--
-- * 'tmfrSourcePortRange' - The source port range assigned to the Traffic Mirror rule.
--
-- * 'tmfrDescription' - The description of the Traffic Mirror rule.
--
-- * 'tmfrDestinationCidrBlock' - The destination CIDR block assigned to the Traffic Mirror rule.
trafficMirrorFilterRule
    :: TrafficMirrorFilterRule
trafficMirrorFilterRule =
  TrafficMirrorFilterRule'
    { _tmfrRuleNumber = Nothing
    , _tmfrTrafficDirection = Nothing
    , _tmfrRuleAction = Nothing
    , _tmfrProtocol = Nothing
    , _tmfrTrafficMirrorFilterId = Nothing
    , _tmfrTrafficMirrorFilterRuleId = Nothing
    , _tmfrDestinationPortRange = Nothing
    , _tmfrSourceCidrBlock = Nothing
    , _tmfrSourcePortRange = Nothing
    , _tmfrDescription = Nothing
    , _tmfrDestinationCidrBlock = Nothing
    }


-- | The rule number of the Traffic Mirror rule.
tmfrRuleNumber :: Lens' TrafficMirrorFilterRule (Maybe Int)
tmfrRuleNumber = lens _tmfrRuleNumber (\ s a -> s{_tmfrRuleNumber = a})

-- | The traffic direction assigned to the Traffic Mirror rule.
tmfrTrafficDirection :: Lens' TrafficMirrorFilterRule (Maybe TrafficDirection)
tmfrTrafficDirection = lens _tmfrTrafficDirection (\ s a -> s{_tmfrTrafficDirection = a})

-- | The action assigned to the Traffic Mirror rule.
tmfrRuleAction :: Lens' TrafficMirrorFilterRule (Maybe TrafficMirrorRuleAction)
tmfrRuleAction = lens _tmfrRuleAction (\ s a -> s{_tmfrRuleAction = a})

-- | The protocol assigned to the Traffic Mirror rule.
tmfrProtocol :: Lens' TrafficMirrorFilterRule (Maybe Int)
tmfrProtocol = lens _tmfrProtocol (\ s a -> s{_tmfrProtocol = a})

-- | The ID of the Traffic Mirror filter that the rule is associated with.
tmfrTrafficMirrorFilterId :: Lens' TrafficMirrorFilterRule (Maybe Text)
tmfrTrafficMirrorFilterId = lens _tmfrTrafficMirrorFilterId (\ s a -> s{_tmfrTrafficMirrorFilterId = a})

-- | The ID of the Traffic Mirror rule.
tmfrTrafficMirrorFilterRuleId :: Lens' TrafficMirrorFilterRule (Maybe Text)
tmfrTrafficMirrorFilterRuleId = lens _tmfrTrafficMirrorFilterRuleId (\ s a -> s{_tmfrTrafficMirrorFilterRuleId = a})

-- | The destination port range assigned to the Traffic Mirror rule.
tmfrDestinationPortRange :: Lens' TrafficMirrorFilterRule (Maybe TrafficMirrorPortRange)
tmfrDestinationPortRange = lens _tmfrDestinationPortRange (\ s a -> s{_tmfrDestinationPortRange = a})

-- | The source CIDR block assigned to the Traffic Mirror rule.
tmfrSourceCidrBlock :: Lens' TrafficMirrorFilterRule (Maybe Text)
tmfrSourceCidrBlock = lens _tmfrSourceCidrBlock (\ s a -> s{_tmfrSourceCidrBlock = a})

-- | The source port range assigned to the Traffic Mirror rule.
tmfrSourcePortRange :: Lens' TrafficMirrorFilterRule (Maybe TrafficMirrorPortRange)
tmfrSourcePortRange = lens _tmfrSourcePortRange (\ s a -> s{_tmfrSourcePortRange = a})

-- | The description of the Traffic Mirror rule.
tmfrDescription :: Lens' TrafficMirrorFilterRule (Maybe Text)
tmfrDescription = lens _tmfrDescription (\ s a -> s{_tmfrDescription = a})

-- | The destination CIDR block assigned to the Traffic Mirror rule.
tmfrDestinationCidrBlock :: Lens' TrafficMirrorFilterRule (Maybe Text)
tmfrDestinationCidrBlock = lens _tmfrDestinationCidrBlock (\ s a -> s{_tmfrDestinationCidrBlock = a})

instance FromXML TrafficMirrorFilterRule where
        parseXML x
          = TrafficMirrorFilterRule' <$>
              (x .@? "ruleNumber") <*> (x .@? "trafficDirection")
                <*> (x .@? "ruleAction")
                <*> (x .@? "protocol")
                <*> (x .@? "trafficMirrorFilterId")
                <*> (x .@? "trafficMirrorFilterRuleId")
                <*> (x .@? "destinationPortRange")
                <*> (x .@? "sourceCidrBlock")
                <*> (x .@? "sourcePortRange")
                <*> (x .@? "description")
                <*> (x .@? "destinationCidrBlock")

instance Hashable TrafficMirrorFilterRule where

instance NFData TrafficMirrorFilterRule where

-- | Describes the Traffic Mirror port range.
--
--
--
-- /See:/ 'trafficMirrorPortRange' smart constructor.
data TrafficMirrorPortRange = TrafficMirrorPortRange'
  { _tmprFromPort :: !(Maybe Int)
  , _tmprToPort   :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TrafficMirrorPortRange' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tmprFromPort' - The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
--
-- * 'tmprToPort' - The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
trafficMirrorPortRange
    :: TrafficMirrorPortRange
trafficMirrorPortRange =
  TrafficMirrorPortRange' {_tmprFromPort = Nothing, _tmprToPort = Nothing}


-- | The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
tmprFromPort :: Lens' TrafficMirrorPortRange (Maybe Int)
tmprFromPort = lens _tmprFromPort (\ s a -> s{_tmprFromPort = a})

-- | The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
tmprToPort :: Lens' TrafficMirrorPortRange (Maybe Int)
tmprToPort = lens _tmprToPort (\ s a -> s{_tmprToPort = a})

instance FromXML TrafficMirrorPortRange where
        parseXML x
          = TrafficMirrorPortRange' <$>
              (x .@? "fromPort") <*> (x .@? "toPort")

instance Hashable TrafficMirrorPortRange where

instance NFData TrafficMirrorPortRange where

-- | Information about the Traffic Mirror filter rule port range.
--
--
--
-- /See:/ 'trafficMirrorPortRangeRequest' smart constructor.
data TrafficMirrorPortRangeRequest = TrafficMirrorPortRangeRequest'
  { _tmprrFromPort :: !(Maybe Int)
  , _tmprrToPort   :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TrafficMirrorPortRangeRequest' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tmprrFromPort' - The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
--
-- * 'tmprrToPort' - The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
trafficMirrorPortRangeRequest
    :: TrafficMirrorPortRangeRequest
trafficMirrorPortRangeRequest =
  TrafficMirrorPortRangeRequest'
    {_tmprrFromPort = Nothing, _tmprrToPort = Nothing}


-- | The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
tmprrFromPort :: Lens' TrafficMirrorPortRangeRequest (Maybe Int)
tmprrFromPort = lens _tmprrFromPort (\ s a -> s{_tmprrFromPort = a})

-- | The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
tmprrToPort :: Lens' TrafficMirrorPortRangeRequest (Maybe Int)
tmprrToPort = lens _tmprrToPort (\ s a -> s{_tmprrToPort = a})

instance Hashable TrafficMirrorPortRangeRequest where

instance NFData TrafficMirrorPortRangeRequest where

instance ToQuery TrafficMirrorPortRangeRequest where
        toQuery TrafficMirrorPortRangeRequest'{..}
          = mconcat
              ["FromPort" =: _tmprrFromPort,
               "ToPort" =: _tmprrToPort]

-- | Describes a Traffic Mirror session.
--
--
--
-- /See:/ 'trafficMirrorSession' smart constructor.
data TrafficMirrorSession = TrafficMirrorSession'
  { _tmsTrafficMirrorTargetId  :: !(Maybe Text)
  , _tmsNetworkInterfaceId     :: !(Maybe Text)
  , _tmsTrafficMirrorFilterId  :: !(Maybe Text)
  , _tmsPacketLength           :: !(Maybe Int)
  , _tmsOwnerId                :: !(Maybe Text)
  , _tmsTrafficMirrorSessionId :: !(Maybe Text)
  , _tmsVirtualNetworkId       :: !(Maybe Int)
  , _tmsSessionNumber          :: !(Maybe Int)
  , _tmsDescription            :: !(Maybe Text)
  , _tmsTags                   :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TrafficMirrorSession' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tmsTrafficMirrorTargetId' - The ID of the Traffic Mirror target.
--
-- * 'tmsNetworkInterfaceId' - The ID of the Traffic Mirror session's network interface.
--
-- * 'tmsTrafficMirrorFilterId' - The ID of the Traffic Mirror filter.
--
-- * 'tmsPacketLength' - The number of bytes in each packet to mirror. These are the bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet
--
-- * 'tmsOwnerId' - The ID of the account that owns the Traffic Mirror session.
--
-- * 'tmsTrafficMirrorSessionId' - The ID for the Traffic Mirror session.
--
-- * 'tmsVirtualNetworkId' - The virtual network ID associated with the Traffic Mirror session.
--
-- * 'tmsSessionNumber' - The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
--
-- * 'tmsDescription' - The description of the Traffic Mirror session.
--
-- * 'tmsTags' - The tags assigned to the Traffic Mirror session.
trafficMirrorSession
    :: TrafficMirrorSession
trafficMirrorSession =
  TrafficMirrorSession'
    { _tmsTrafficMirrorTargetId = Nothing
    , _tmsNetworkInterfaceId = Nothing
    , _tmsTrafficMirrorFilterId = Nothing
    , _tmsPacketLength = Nothing
    , _tmsOwnerId = Nothing
    , _tmsTrafficMirrorSessionId = Nothing
    , _tmsVirtualNetworkId = Nothing
    , _tmsSessionNumber = Nothing
    , _tmsDescription = Nothing
    , _tmsTags = Nothing
    }


-- | The ID of the Traffic Mirror target.
tmsTrafficMirrorTargetId :: Lens' TrafficMirrorSession (Maybe Text)
tmsTrafficMirrorTargetId = lens _tmsTrafficMirrorTargetId (\ s a -> s{_tmsTrafficMirrorTargetId = a})

-- | The ID of the Traffic Mirror session's network interface.
tmsNetworkInterfaceId :: Lens' TrafficMirrorSession (Maybe Text)
tmsNetworkInterfaceId = lens _tmsNetworkInterfaceId (\ s a -> s{_tmsNetworkInterfaceId = a})

-- | The ID of the Traffic Mirror filter.
tmsTrafficMirrorFilterId :: Lens' TrafficMirrorSession (Maybe Text)
tmsTrafficMirrorFilterId = lens _tmsTrafficMirrorFilterId (\ s a -> s{_tmsTrafficMirrorFilterId = a})

-- | The number of bytes in each packet to mirror. These are the bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet
tmsPacketLength :: Lens' TrafficMirrorSession (Maybe Int)
tmsPacketLength = lens _tmsPacketLength (\ s a -> s{_tmsPacketLength = a})

-- | The ID of the account that owns the Traffic Mirror session.
tmsOwnerId :: Lens' TrafficMirrorSession (Maybe Text)
tmsOwnerId = lens _tmsOwnerId (\ s a -> s{_tmsOwnerId = a})

-- | The ID for the Traffic Mirror session.
tmsTrafficMirrorSessionId :: Lens' TrafficMirrorSession (Maybe Text)
tmsTrafficMirrorSessionId = lens _tmsTrafficMirrorSessionId (\ s a -> s{_tmsTrafficMirrorSessionId = a})

-- | The virtual network ID associated with the Traffic Mirror session.
tmsVirtualNetworkId :: Lens' TrafficMirrorSession (Maybe Int)
tmsVirtualNetworkId = lens _tmsVirtualNetworkId (\ s a -> s{_tmsVirtualNetworkId = a})

-- | The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
tmsSessionNumber :: Lens' TrafficMirrorSession (Maybe Int)
tmsSessionNumber = lens _tmsSessionNumber (\ s a -> s{_tmsSessionNumber = a})

-- | The description of the Traffic Mirror session.
tmsDescription :: Lens' TrafficMirrorSession (Maybe Text)
tmsDescription = lens _tmsDescription (\ s a -> s{_tmsDescription = a})

-- | The tags assigned to the Traffic Mirror session.
tmsTags :: Lens' TrafficMirrorSession [Tag]
tmsTags = lens _tmsTags (\ s a -> s{_tmsTags = a}) . _Default . _Coerce

instance FromXML TrafficMirrorSession where
        parseXML x
          = TrafficMirrorSession' <$>
              (x .@? "trafficMirrorTargetId") <*>
                (x .@? "networkInterfaceId")
                <*> (x .@? "trafficMirrorFilterId")
                <*> (x .@? "packetLength")
                <*> (x .@? "ownerId")
                <*> (x .@? "trafficMirrorSessionId")
                <*> (x .@? "virtualNetworkId")
                <*> (x .@? "sessionNumber")
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TrafficMirrorSession where

instance NFData TrafficMirrorSession where

-- | Describes a Traffic Mirror target.
--
--
--
-- /See:/ 'trafficMirrorTarget' smart constructor.
data TrafficMirrorTarget = TrafficMirrorTarget'
  { _tmtTrafficMirrorTargetId  :: !(Maybe Text)
  , _tmtNetworkInterfaceId     :: !(Maybe Text)
  , _tmtNetworkLoadBalancerARN :: !(Maybe Text)
  , _tmtOwnerId                :: !(Maybe Text)
  , _tmtType                   :: !(Maybe TrafficMirrorTargetType)
  , _tmtDescription            :: !(Maybe Text)
  , _tmtTags                   :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TrafficMirrorTarget' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tmtTrafficMirrorTargetId' - The ID of the Traffic Mirror target.
--
-- * 'tmtNetworkInterfaceId' - The network interface ID that is attached to the target.
--
-- * 'tmtNetworkLoadBalancerARN' - The Amazon Resource Name (ARN) of the Network Load Balancer.
--
-- * 'tmtOwnerId' - The ID of the account that owns the Traffic Mirror target.
--
-- * 'tmtType' - The type of Traffic Mirror target.
--
-- * 'tmtDescription' - Information about the Traffic Mirror target.
--
-- * 'tmtTags' - The tags assigned to the Traffic Mirror target.
trafficMirrorTarget
    :: TrafficMirrorTarget
trafficMirrorTarget =
  TrafficMirrorTarget'
    { _tmtTrafficMirrorTargetId = Nothing
    , _tmtNetworkInterfaceId = Nothing
    , _tmtNetworkLoadBalancerARN = Nothing
    , _tmtOwnerId = Nothing
    , _tmtType = Nothing
    , _tmtDescription = Nothing
    , _tmtTags = Nothing
    }


-- | The ID of the Traffic Mirror target.
tmtTrafficMirrorTargetId :: Lens' TrafficMirrorTarget (Maybe Text)
tmtTrafficMirrorTargetId = lens _tmtTrafficMirrorTargetId (\ s a -> s{_tmtTrafficMirrorTargetId = a})

-- | The network interface ID that is attached to the target.
tmtNetworkInterfaceId :: Lens' TrafficMirrorTarget (Maybe Text)
tmtNetworkInterfaceId = lens _tmtNetworkInterfaceId (\ s a -> s{_tmtNetworkInterfaceId = a})

-- | The Amazon Resource Name (ARN) of the Network Load Balancer.
tmtNetworkLoadBalancerARN :: Lens' TrafficMirrorTarget (Maybe Text)
tmtNetworkLoadBalancerARN = lens _tmtNetworkLoadBalancerARN (\ s a -> s{_tmtNetworkLoadBalancerARN = a})

-- | The ID of the account that owns the Traffic Mirror target.
tmtOwnerId :: Lens' TrafficMirrorTarget (Maybe Text)
tmtOwnerId = lens _tmtOwnerId (\ s a -> s{_tmtOwnerId = a})

-- | The type of Traffic Mirror target.
tmtType :: Lens' TrafficMirrorTarget (Maybe TrafficMirrorTargetType)
tmtType = lens _tmtType (\ s a -> s{_tmtType = a})

-- | Information about the Traffic Mirror target.
tmtDescription :: Lens' TrafficMirrorTarget (Maybe Text)
tmtDescription = lens _tmtDescription (\ s a -> s{_tmtDescription = a})

-- | The tags assigned to the Traffic Mirror target.
tmtTags :: Lens' TrafficMirrorTarget [Tag]
tmtTags = lens _tmtTags (\ s a -> s{_tmtTags = a}) . _Default . _Coerce

instance FromXML TrafficMirrorTarget where
        parseXML x
          = TrafficMirrorTarget' <$>
              (x .@? "trafficMirrorTargetId") <*>
                (x .@? "networkInterfaceId")
                <*> (x .@? "networkLoadBalancerArn")
                <*> (x .@? "ownerId")
                <*> (x .@? "type")
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TrafficMirrorTarget where

instance NFData TrafficMirrorTarget where

-- | Describes a transit gateway.
--
--
--
-- /See:/ 'transitGateway' smart constructor.
data TransitGateway = TransitGateway'
  { _tgCreationTime      :: !(Maybe ISO8601)
  , _tgState             :: !(Maybe TransitGatewayState)
  , _tgOwnerId           :: !(Maybe Text)
  , _tgTransitGatewayARN :: !(Maybe Text)
  , _tgTransitGatewayId  :: !(Maybe Text)
  , _tgOptions           :: !(Maybe TransitGatewayOptions)
  , _tgDescription       :: !(Maybe Text)
  , _tgTags              :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGateway' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgCreationTime' - The creation time.
--
-- * 'tgState' - The state of the transit gateway.
--
-- * 'tgOwnerId' - The ID of the AWS account ID that owns the transit gateway.
--
-- * 'tgTransitGatewayARN' - The Amazon Resource Name (ARN) of the transit gateway.
--
-- * 'tgTransitGatewayId' - The ID of the transit gateway.
--
-- * 'tgOptions' - The transit gateway options.
--
-- * 'tgDescription' - The description of the transit gateway.
--
-- * 'tgTags' - The tags for the transit gateway.
transitGateway
    :: TransitGateway
transitGateway =
  TransitGateway'
    { _tgCreationTime = Nothing
    , _tgState = Nothing
    , _tgOwnerId = Nothing
    , _tgTransitGatewayARN = Nothing
    , _tgTransitGatewayId = Nothing
    , _tgOptions = Nothing
    , _tgDescription = Nothing
    , _tgTags = Nothing
    }


-- | The creation time.
tgCreationTime :: Lens' TransitGateway (Maybe UTCTime)
tgCreationTime = lens _tgCreationTime (\ s a -> s{_tgCreationTime = a}) . mapping _Time

-- | The state of the transit gateway.
tgState :: Lens' TransitGateway (Maybe TransitGatewayState)
tgState = lens _tgState (\ s a -> s{_tgState = a})

-- | The ID of the AWS account ID that owns the transit gateway.
tgOwnerId :: Lens' TransitGateway (Maybe Text)
tgOwnerId = lens _tgOwnerId (\ s a -> s{_tgOwnerId = a})

-- | The Amazon Resource Name (ARN) of the transit gateway.
tgTransitGatewayARN :: Lens' TransitGateway (Maybe Text)
tgTransitGatewayARN = lens _tgTransitGatewayARN (\ s a -> s{_tgTransitGatewayARN = a})

-- | The ID of the transit gateway.
tgTransitGatewayId :: Lens' TransitGateway (Maybe Text)
tgTransitGatewayId = lens _tgTransitGatewayId (\ s a -> s{_tgTransitGatewayId = a})

-- | The transit gateway options.
tgOptions :: Lens' TransitGateway (Maybe TransitGatewayOptions)
tgOptions = lens _tgOptions (\ s a -> s{_tgOptions = a})

-- | The description of the transit gateway.
tgDescription :: Lens' TransitGateway (Maybe Text)
tgDescription = lens _tgDescription (\ s a -> s{_tgDescription = a})

-- | The tags for the transit gateway.
tgTags :: Lens' TransitGateway [Tag]
tgTags = lens _tgTags (\ s a -> s{_tgTags = a}) . _Default . _Coerce

instance FromXML TransitGateway where
        parseXML x
          = TransitGateway' <$>
              (x .@? "creationTime") <*> (x .@? "state") <*>
                (x .@? "ownerId")
                <*> (x .@? "transitGatewayArn")
                <*> (x .@? "transitGatewayId")
                <*> (x .@? "options")
                <*> (x .@? "description")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TransitGateway where

instance NFData TransitGateway where

-- | Describes an association between a resource attachment and a transit gateway route table.
--
--
--
-- /See:/ 'transitGatewayAssociation' smart constructor.
data TransitGatewayAssociation = TransitGatewayAssociation'
  { _traState :: !(Maybe TransitGatewayAssociationState)
  , _traResourceId :: !(Maybe Text)
  , _traResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _traTransitGatewayRouteTableId :: !(Maybe Text)
  , _traTransitGatewayAttachmentId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'traState' - The state of the association.
--
-- * 'traResourceId' - The ID of the resource.
--
-- * 'traResourceType' - The resource type. Note that the @tgw-peering@ resource type has been deprecated.
--
-- * 'traTransitGatewayRouteTableId' - The ID of the transit gateway route table.
--
-- * 'traTransitGatewayAttachmentId' - The ID of the attachment.
transitGatewayAssociation
    :: TransitGatewayAssociation
transitGatewayAssociation =
  TransitGatewayAssociation'
    { _traState = Nothing
    , _traResourceId = Nothing
    , _traResourceType = Nothing
    , _traTransitGatewayRouteTableId = Nothing
    , _traTransitGatewayAttachmentId = Nothing
    }


-- | The state of the association.
traState :: Lens' TransitGatewayAssociation (Maybe TransitGatewayAssociationState)
traState = lens _traState (\ s a -> s{_traState = a})

-- | The ID of the resource.
traResourceId :: Lens' TransitGatewayAssociation (Maybe Text)
traResourceId = lens _traResourceId (\ s a -> s{_traResourceId = a})

-- | The resource type. Note that the @tgw-peering@ resource type has been deprecated.
traResourceType :: Lens' TransitGatewayAssociation (Maybe TransitGatewayAttachmentResourceType)
traResourceType = lens _traResourceType (\ s a -> s{_traResourceType = a})

-- | The ID of the transit gateway route table.
traTransitGatewayRouteTableId :: Lens' TransitGatewayAssociation (Maybe Text)
traTransitGatewayRouteTableId = lens _traTransitGatewayRouteTableId (\ s a -> s{_traTransitGatewayRouteTableId = a})

-- | The ID of the attachment.
traTransitGatewayAttachmentId :: Lens' TransitGatewayAssociation (Maybe Text)
traTransitGatewayAttachmentId = lens _traTransitGatewayAttachmentId (\ s a -> s{_traTransitGatewayAttachmentId = a})

instance FromXML TransitGatewayAssociation where
        parseXML x
          = TransitGatewayAssociation' <$>
              (x .@? "state") <*> (x .@? "resourceId") <*>
                (x .@? "resourceType")
                <*> (x .@? "transitGatewayRouteTableId")
                <*> (x .@? "transitGatewayAttachmentId")

instance Hashable TransitGatewayAssociation where

instance NFData TransitGatewayAssociation where

-- | Describes an attachment between a resource and a transit gateway.
--
--
--
-- /See:/ 'transitGatewayAttachment' smart constructor.
data TransitGatewayAttachment = TransitGatewayAttachment'
  { _tgaCreationTime :: !(Maybe ISO8601)
  , _tgaState :: !(Maybe TransitGatewayAttachmentState)
  , _tgaResourceId :: !(Maybe Text)
  , _tgaResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _tgaTransitGatewayOwnerId :: !(Maybe Text)
  , _tgaTransitGatewayId :: !(Maybe Text)
  , _tgaTransitGatewayAttachmentId :: !(Maybe Text)
  , _tgaResourceOwnerId :: !(Maybe Text)
  , _tgaTags :: !(Maybe [Tag])
  , _tgaAssociation :: !(Maybe TransitGatewayAttachmentAssociation)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgaCreationTime' - The creation time.
--
-- * 'tgaState' - The attachment state. Note that the @initiating@ state has been deprecated.
--
-- * 'tgaResourceId' - The ID of the resource.
--
-- * 'tgaResourceType' - The resource type. Note that the @tgw-peering@ resource type has been deprecated.
--
-- * 'tgaTransitGatewayOwnerId' - The ID of the AWS account that owns the transit gateway.
--
-- * 'tgaTransitGatewayId' - The ID of the transit gateway.
--
-- * 'tgaTransitGatewayAttachmentId' - The ID of the attachment.
--
-- * 'tgaResourceOwnerId' - The ID of the AWS account that owns the resource.
--
-- * 'tgaTags' - The tags for the attachment.
--
-- * 'tgaAssociation' - The association.
transitGatewayAttachment
    :: TransitGatewayAttachment
transitGatewayAttachment =
  TransitGatewayAttachment'
    { _tgaCreationTime = Nothing
    , _tgaState = Nothing
    , _tgaResourceId = Nothing
    , _tgaResourceType = Nothing
    , _tgaTransitGatewayOwnerId = Nothing
    , _tgaTransitGatewayId = Nothing
    , _tgaTransitGatewayAttachmentId = Nothing
    , _tgaResourceOwnerId = Nothing
    , _tgaTags = Nothing
    , _tgaAssociation = Nothing
    }


-- | The creation time.
tgaCreationTime :: Lens' TransitGatewayAttachment (Maybe UTCTime)
tgaCreationTime = lens _tgaCreationTime (\ s a -> s{_tgaCreationTime = a}) . mapping _Time

-- | The attachment state. Note that the @initiating@ state has been deprecated.
tgaState :: Lens' TransitGatewayAttachment (Maybe TransitGatewayAttachmentState)
tgaState = lens _tgaState (\ s a -> s{_tgaState = a})

-- | The ID of the resource.
tgaResourceId :: Lens' TransitGatewayAttachment (Maybe Text)
tgaResourceId = lens _tgaResourceId (\ s a -> s{_tgaResourceId = a})

-- | The resource type. Note that the @tgw-peering@ resource type has been deprecated.
tgaResourceType :: Lens' TransitGatewayAttachment (Maybe TransitGatewayAttachmentResourceType)
tgaResourceType = lens _tgaResourceType (\ s a -> s{_tgaResourceType = a})

-- | The ID of the AWS account that owns the transit gateway.
tgaTransitGatewayOwnerId :: Lens' TransitGatewayAttachment (Maybe Text)
tgaTransitGatewayOwnerId = lens _tgaTransitGatewayOwnerId (\ s a -> s{_tgaTransitGatewayOwnerId = a})

-- | The ID of the transit gateway.
tgaTransitGatewayId :: Lens' TransitGatewayAttachment (Maybe Text)
tgaTransitGatewayId = lens _tgaTransitGatewayId (\ s a -> s{_tgaTransitGatewayId = a})

-- | The ID of the attachment.
tgaTransitGatewayAttachmentId :: Lens' TransitGatewayAttachment (Maybe Text)
tgaTransitGatewayAttachmentId = lens _tgaTransitGatewayAttachmentId (\ s a -> s{_tgaTransitGatewayAttachmentId = a})

-- | The ID of the AWS account that owns the resource.
tgaResourceOwnerId :: Lens' TransitGatewayAttachment (Maybe Text)
tgaResourceOwnerId = lens _tgaResourceOwnerId (\ s a -> s{_tgaResourceOwnerId = a})

-- | The tags for the attachment.
tgaTags :: Lens' TransitGatewayAttachment [Tag]
tgaTags = lens _tgaTags (\ s a -> s{_tgaTags = a}) . _Default . _Coerce

-- | The association.
tgaAssociation :: Lens' TransitGatewayAttachment (Maybe TransitGatewayAttachmentAssociation)
tgaAssociation = lens _tgaAssociation (\ s a -> s{_tgaAssociation = a})

instance FromXML TransitGatewayAttachment where
        parseXML x
          = TransitGatewayAttachment' <$>
              (x .@? "creationTime") <*> (x .@? "state") <*>
                (x .@? "resourceId")
                <*> (x .@? "resourceType")
                <*> (x .@? "transitGatewayOwnerId")
                <*> (x .@? "transitGatewayId")
                <*> (x .@? "transitGatewayAttachmentId")
                <*> (x .@? "resourceOwnerId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "association")

instance Hashable TransitGatewayAttachment where

instance NFData TransitGatewayAttachment where

-- | Describes an association.
--
--
--
-- /See:/ 'transitGatewayAttachmentAssociation' smart constructor.
data TransitGatewayAttachmentAssociation = TransitGatewayAttachmentAssociation'
  { _tgaaState                      :: !(Maybe TransitGatewayAssociationState)
  , _tgaaTransitGatewayRouteTableId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayAttachmentAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgaaState' - The state of the association.
--
-- * 'tgaaTransitGatewayRouteTableId' - The ID of the route table for the transit gateway.
transitGatewayAttachmentAssociation
    :: TransitGatewayAttachmentAssociation
transitGatewayAttachmentAssociation =
  TransitGatewayAttachmentAssociation'
    {_tgaaState = Nothing, _tgaaTransitGatewayRouteTableId = Nothing}


-- | The state of the association.
tgaaState :: Lens' TransitGatewayAttachmentAssociation (Maybe TransitGatewayAssociationState)
tgaaState = lens _tgaaState (\ s a -> s{_tgaaState = a})

-- | The ID of the route table for the transit gateway.
tgaaTransitGatewayRouteTableId :: Lens' TransitGatewayAttachmentAssociation (Maybe Text)
tgaaTransitGatewayRouteTableId = lens _tgaaTransitGatewayRouteTableId (\ s a -> s{_tgaaTransitGatewayRouteTableId = a})

instance FromXML TransitGatewayAttachmentAssociation
         where
        parseXML x
          = TransitGatewayAttachmentAssociation' <$>
              (x .@? "state") <*>
                (x .@? "transitGatewayRouteTableId")

instance Hashable TransitGatewayAttachmentAssociation
         where

instance NFData TransitGatewayAttachmentAssociation
         where

-- | The BGP configuration information.
--
--
--
-- /See:/ 'transitGatewayAttachmentBGPConfiguration' smart constructor.
data TransitGatewayAttachmentBGPConfiguration = TransitGatewayAttachmentBGPConfiguration'
  { _tgabcTransitGatewayASN     :: !(Maybe Integer)
  , _tgabcPeerASN               :: !(Maybe Integer)
  , _tgabcTransitGatewayAddress :: !(Maybe Text)
  , _tgabcBGPStatus             :: !(Maybe BGPStatus)
  , _tgabcPeerAddress           :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayAttachmentBGPConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgabcTransitGatewayASN' - The transit gateway Autonomous System Number (ASN).
--
-- * 'tgabcPeerASN' - The peer Autonomous System Number (ASN).
--
-- * 'tgabcTransitGatewayAddress' - The interior BGP peer IP address for the transit gateway.
--
-- * 'tgabcBGPStatus' - The BGP status.
--
-- * 'tgabcPeerAddress' - The interior BGP peer IP address for the appliance.
transitGatewayAttachmentBGPConfiguration
    :: TransitGatewayAttachmentBGPConfiguration
transitGatewayAttachmentBGPConfiguration =
  TransitGatewayAttachmentBGPConfiguration'
    { _tgabcTransitGatewayASN = Nothing
    , _tgabcPeerASN = Nothing
    , _tgabcTransitGatewayAddress = Nothing
    , _tgabcBGPStatus = Nothing
    , _tgabcPeerAddress = Nothing
    }


-- | The transit gateway Autonomous System Number (ASN).
tgabcTransitGatewayASN :: Lens' TransitGatewayAttachmentBGPConfiguration (Maybe Integer)
tgabcTransitGatewayASN = lens _tgabcTransitGatewayASN (\ s a -> s{_tgabcTransitGatewayASN = a})

-- | The peer Autonomous System Number (ASN).
tgabcPeerASN :: Lens' TransitGatewayAttachmentBGPConfiguration (Maybe Integer)
tgabcPeerASN = lens _tgabcPeerASN (\ s a -> s{_tgabcPeerASN = a})

-- | The interior BGP peer IP address for the transit gateway.
tgabcTransitGatewayAddress :: Lens' TransitGatewayAttachmentBGPConfiguration (Maybe Text)
tgabcTransitGatewayAddress = lens _tgabcTransitGatewayAddress (\ s a -> s{_tgabcTransitGatewayAddress = a})

-- | The BGP status.
tgabcBGPStatus :: Lens' TransitGatewayAttachmentBGPConfiguration (Maybe BGPStatus)
tgabcBGPStatus = lens _tgabcBGPStatus (\ s a -> s{_tgabcBGPStatus = a})

-- | The interior BGP peer IP address for the appliance.
tgabcPeerAddress :: Lens' TransitGatewayAttachmentBGPConfiguration (Maybe Text)
tgabcPeerAddress = lens _tgabcPeerAddress (\ s a -> s{_tgabcPeerAddress = a})

instance FromXML
           TransitGatewayAttachmentBGPConfiguration
         where
        parseXML x
          = TransitGatewayAttachmentBGPConfiguration' <$>
              (x .@? "transitGatewayAsn") <*> (x .@? "peerAsn") <*>
                (x .@? "transitGatewayAddress")
                <*> (x .@? "bgpStatus")
                <*> (x .@? "peerAddress")

instance Hashable
           TransitGatewayAttachmentBGPConfiguration
         where

instance NFData
           TransitGatewayAttachmentBGPConfiguration
         where

-- | Describes a propagation route table.
--
--
--
-- /See:/ 'transitGatewayAttachmentPropagation' smart constructor.
data TransitGatewayAttachmentPropagation = TransitGatewayAttachmentPropagation'
  { _tgapState                      :: !(Maybe TransitGatewayPropagationState)
  , _tgapTransitGatewayRouteTableId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayAttachmentPropagation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgapState' - The state of the propagation route table.
--
-- * 'tgapTransitGatewayRouteTableId' - The ID of the propagation route table.
transitGatewayAttachmentPropagation
    :: TransitGatewayAttachmentPropagation
transitGatewayAttachmentPropagation =
  TransitGatewayAttachmentPropagation'
    {_tgapState = Nothing, _tgapTransitGatewayRouteTableId = Nothing}


-- | The state of the propagation route table.
tgapState :: Lens' TransitGatewayAttachmentPropagation (Maybe TransitGatewayPropagationState)
tgapState = lens _tgapState (\ s a -> s{_tgapState = a})

-- | The ID of the propagation route table.
tgapTransitGatewayRouteTableId :: Lens' TransitGatewayAttachmentPropagation (Maybe Text)
tgapTransitGatewayRouteTableId = lens _tgapTransitGatewayRouteTableId (\ s a -> s{_tgapTransitGatewayRouteTableId = a})

instance FromXML TransitGatewayAttachmentPropagation
         where
        parseXML x
          = TransitGatewayAttachmentPropagation' <$>
              (x .@? "state") <*>
                (x .@? "transitGatewayRouteTableId")

instance Hashable TransitGatewayAttachmentPropagation
         where

instance NFData TransitGatewayAttachmentPropagation
         where

-- | Describes a transit gateway Connect attachment.
--
--
--
-- /See:/ 'transitGatewayConnect' smart constructor.
data TransitGatewayConnect = TransitGatewayConnect'
  { _tgcCreationTime :: !(Maybe ISO8601)
  , _tgcState :: !(Maybe TransitGatewayAttachmentState)
  , _tgcTransportTransitGatewayAttachmentId :: !(Maybe Text)
  , _tgcTransitGatewayId :: !(Maybe Text)
  , _tgcOptions :: !(Maybe TransitGatewayConnectOptions)
  , _tgcTransitGatewayAttachmentId :: !(Maybe Text)
  , _tgcTags :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayConnect' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgcCreationTime' - The creation time.
--
-- * 'tgcState' - The state of the attachment.
--
-- * 'tgcTransportTransitGatewayAttachmentId' - The ID of the attachment from which the Connect attachment was created.
--
-- * 'tgcTransitGatewayId' - The ID of the transit gateway.
--
-- * 'tgcOptions' - The Connect attachment options.
--
-- * 'tgcTransitGatewayAttachmentId' - The ID of the Connect attachment.
--
-- * 'tgcTags' - The tags for the attachment.
transitGatewayConnect
    :: TransitGatewayConnect
transitGatewayConnect =
  TransitGatewayConnect'
    { _tgcCreationTime = Nothing
    , _tgcState = Nothing
    , _tgcTransportTransitGatewayAttachmentId = Nothing
    , _tgcTransitGatewayId = Nothing
    , _tgcOptions = Nothing
    , _tgcTransitGatewayAttachmentId = Nothing
    , _tgcTags = Nothing
    }


-- | The creation time.
tgcCreationTime :: Lens' TransitGatewayConnect (Maybe UTCTime)
tgcCreationTime = lens _tgcCreationTime (\ s a -> s{_tgcCreationTime = a}) . mapping _Time

-- | The state of the attachment.
tgcState :: Lens' TransitGatewayConnect (Maybe TransitGatewayAttachmentState)
tgcState = lens _tgcState (\ s a -> s{_tgcState = a})

-- | The ID of the attachment from which the Connect attachment was created.
tgcTransportTransitGatewayAttachmentId :: Lens' TransitGatewayConnect (Maybe Text)
tgcTransportTransitGatewayAttachmentId = lens _tgcTransportTransitGatewayAttachmentId (\ s a -> s{_tgcTransportTransitGatewayAttachmentId = a})

-- | The ID of the transit gateway.
tgcTransitGatewayId :: Lens' TransitGatewayConnect (Maybe Text)
tgcTransitGatewayId = lens _tgcTransitGatewayId (\ s a -> s{_tgcTransitGatewayId = a})

-- | The Connect attachment options.
tgcOptions :: Lens' TransitGatewayConnect (Maybe TransitGatewayConnectOptions)
tgcOptions = lens _tgcOptions (\ s a -> s{_tgcOptions = a})

-- | The ID of the Connect attachment.
tgcTransitGatewayAttachmentId :: Lens' TransitGatewayConnect (Maybe Text)
tgcTransitGatewayAttachmentId = lens _tgcTransitGatewayAttachmentId (\ s a -> s{_tgcTransitGatewayAttachmentId = a})

-- | The tags for the attachment.
tgcTags :: Lens' TransitGatewayConnect [Tag]
tgcTags = lens _tgcTags (\ s a -> s{_tgcTags = a}) . _Default . _Coerce

instance FromXML TransitGatewayConnect where
        parseXML x
          = TransitGatewayConnect' <$>
              (x .@? "creationTime") <*> (x .@? "state") <*>
                (x .@? "transportTransitGatewayAttachmentId")
                <*> (x .@? "transitGatewayId")
                <*> (x .@? "options")
                <*> (x .@? "transitGatewayAttachmentId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TransitGatewayConnect where

instance NFData TransitGatewayConnect where

-- | Describes the Connect attachment options.
--
--
--
-- /See:/ 'transitGatewayConnectOptions' smart constructor.
newtype TransitGatewayConnectOptions = TransitGatewayConnectOptions'
  { _tgcoProtocol :: Maybe ProtocolValue
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayConnectOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgcoProtocol' - The tunnel protocol.
transitGatewayConnectOptions
    :: TransitGatewayConnectOptions
transitGatewayConnectOptions =
  TransitGatewayConnectOptions' {_tgcoProtocol = Nothing}


-- | The tunnel protocol.
tgcoProtocol :: Lens' TransitGatewayConnectOptions (Maybe ProtocolValue)
tgcoProtocol = lens _tgcoProtocol (\ s a -> s{_tgcoProtocol = a})

instance FromXML TransitGatewayConnectOptions where
        parseXML x
          = TransitGatewayConnectOptions' <$>
              (x .@? "protocol")

instance Hashable TransitGatewayConnectOptions where

instance NFData TransitGatewayConnectOptions where

-- | Describes a transit gateway Connect peer.
--
--
--
-- /See:/ 'transitGatewayConnectPeer' smart constructor.
data TransitGatewayConnectPeer = TransitGatewayConnectPeer'
  { _tgcpConnectPeerConfiguration :: !(Maybe TransitGatewayConnectPeerConfiguration)
  , _tgcpCreationTime :: !(Maybe ISO8601)
  , _tgcpState :: !(Maybe TransitGatewayConnectPeerState)
  , _tgcpTransitGatewayConnectPeerId :: !(Maybe Text)
  , _tgcpTransitGatewayAttachmentId :: !(Maybe Text)
  , _tgcpTags :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayConnectPeer' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgcpConnectPeerConfiguration' - The Connect peer details.
--
-- * 'tgcpCreationTime' - The creation time.
--
-- * 'tgcpState' - The state of the Connect peer.
--
-- * 'tgcpTransitGatewayConnectPeerId' - The ID of the Connect peer.
--
-- * 'tgcpTransitGatewayAttachmentId' - The ID of the Connect attachment.
--
-- * 'tgcpTags' - The tags for the Connect peer.
transitGatewayConnectPeer
    :: TransitGatewayConnectPeer
transitGatewayConnectPeer =
  TransitGatewayConnectPeer'
    { _tgcpConnectPeerConfiguration = Nothing
    , _tgcpCreationTime = Nothing
    , _tgcpState = Nothing
    , _tgcpTransitGatewayConnectPeerId = Nothing
    , _tgcpTransitGatewayAttachmentId = Nothing
    , _tgcpTags = Nothing
    }


-- | The Connect peer details.
tgcpConnectPeerConfiguration :: Lens' TransitGatewayConnectPeer (Maybe TransitGatewayConnectPeerConfiguration)
tgcpConnectPeerConfiguration = lens _tgcpConnectPeerConfiguration (\ s a -> s{_tgcpConnectPeerConfiguration = a})

-- | The creation time.
tgcpCreationTime :: Lens' TransitGatewayConnectPeer (Maybe UTCTime)
tgcpCreationTime = lens _tgcpCreationTime (\ s a -> s{_tgcpCreationTime = a}) . mapping _Time

-- | The state of the Connect peer.
tgcpState :: Lens' TransitGatewayConnectPeer (Maybe TransitGatewayConnectPeerState)
tgcpState = lens _tgcpState (\ s a -> s{_tgcpState = a})

-- | The ID of the Connect peer.
tgcpTransitGatewayConnectPeerId :: Lens' TransitGatewayConnectPeer (Maybe Text)
tgcpTransitGatewayConnectPeerId = lens _tgcpTransitGatewayConnectPeerId (\ s a -> s{_tgcpTransitGatewayConnectPeerId = a})

-- | The ID of the Connect attachment.
tgcpTransitGatewayAttachmentId :: Lens' TransitGatewayConnectPeer (Maybe Text)
tgcpTransitGatewayAttachmentId = lens _tgcpTransitGatewayAttachmentId (\ s a -> s{_tgcpTransitGatewayAttachmentId = a})

-- | The tags for the Connect peer.
tgcpTags :: Lens' TransitGatewayConnectPeer [Tag]
tgcpTags = lens _tgcpTags (\ s a -> s{_tgcpTags = a}) . _Default . _Coerce

instance FromXML TransitGatewayConnectPeer where
        parseXML x
          = TransitGatewayConnectPeer' <$>
              (x .@? "connectPeerConfiguration") <*>
                (x .@? "creationTime")
                <*> (x .@? "state")
                <*> (x .@? "transitGatewayConnectPeerId")
                <*> (x .@? "transitGatewayAttachmentId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TransitGatewayConnectPeer where

instance NFData TransitGatewayConnectPeer where

-- | Describes the Connect peer details.
--
--
--
-- /See:/ 'transitGatewayConnectPeerConfiguration' smart constructor.
data TransitGatewayConnectPeerConfiguration = TransitGatewayConnectPeerConfiguration'
  { _tgcpcProtocol :: !(Maybe ProtocolValue)
  , _tgcpcTransitGatewayAddress :: !(Maybe Text)
  , _tgcpcPeerAddress :: !(Maybe Text)
  , _tgcpcInsideCidrBlocks :: !(Maybe [Text])
  , _tgcpcBGPConfigurations :: !(Maybe [TransitGatewayAttachmentBGPConfiguration])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayConnectPeerConfiguration' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgcpcProtocol' - The tunnel protocol.
--
-- * 'tgcpcTransitGatewayAddress' - The Connect peer IP address on the transit gateway side of the tunnel.
--
-- * 'tgcpcPeerAddress' - The Connect peer IP address on the appliance side of the tunnel.
--
-- * 'tgcpcInsideCidrBlocks' - The range of interior BGP peer IP addresses.
--
-- * 'tgcpcBGPConfigurations' - The BGP configuration details.
transitGatewayConnectPeerConfiguration
    :: TransitGatewayConnectPeerConfiguration
transitGatewayConnectPeerConfiguration =
  TransitGatewayConnectPeerConfiguration'
    { _tgcpcProtocol = Nothing
    , _tgcpcTransitGatewayAddress = Nothing
    , _tgcpcPeerAddress = Nothing
    , _tgcpcInsideCidrBlocks = Nothing
    , _tgcpcBGPConfigurations = Nothing
    }


-- | The tunnel protocol.
tgcpcProtocol :: Lens' TransitGatewayConnectPeerConfiguration (Maybe ProtocolValue)
tgcpcProtocol = lens _tgcpcProtocol (\ s a -> s{_tgcpcProtocol = a})

-- | The Connect peer IP address on the transit gateway side of the tunnel.
tgcpcTransitGatewayAddress :: Lens' TransitGatewayConnectPeerConfiguration (Maybe Text)
tgcpcTransitGatewayAddress = lens _tgcpcTransitGatewayAddress (\ s a -> s{_tgcpcTransitGatewayAddress = a})

-- | The Connect peer IP address on the appliance side of the tunnel.
tgcpcPeerAddress :: Lens' TransitGatewayConnectPeerConfiguration (Maybe Text)
tgcpcPeerAddress = lens _tgcpcPeerAddress (\ s a -> s{_tgcpcPeerAddress = a})

-- | The range of interior BGP peer IP addresses.
tgcpcInsideCidrBlocks :: Lens' TransitGatewayConnectPeerConfiguration [Text]
tgcpcInsideCidrBlocks = lens _tgcpcInsideCidrBlocks (\ s a -> s{_tgcpcInsideCidrBlocks = a}) . _Default . _Coerce

-- | The BGP configuration details.
tgcpcBGPConfigurations :: Lens' TransitGatewayConnectPeerConfiguration [TransitGatewayAttachmentBGPConfiguration]
tgcpcBGPConfigurations = lens _tgcpcBGPConfigurations (\ s a -> s{_tgcpcBGPConfigurations = a}) . _Default . _Coerce

instance FromXML
           TransitGatewayConnectPeerConfiguration
         where
        parseXML x
          = TransitGatewayConnectPeerConfiguration' <$>
              (x .@? "protocol") <*>
                (x .@? "transitGatewayAddress")
                <*> (x .@? "peerAddress")
                <*>
                (x .@? "insideCidrBlocks" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "bgpConfigurations" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable
           TransitGatewayConnectPeerConfiguration
         where

instance NFData
           TransitGatewayConnectPeerConfiguration
         where

-- | The BGP options for the Connect attachment.
--
--
--
-- /See:/ 'transitGatewayConnectRequestBGPOptions' smart constructor.
newtype TransitGatewayConnectRequestBGPOptions = TransitGatewayConnectRequestBGPOptions'
  { _tgcrboPeerASN :: Maybe Integer
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayConnectRequestBGPOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgcrboPeerASN' - The peer Autonomous System Number (ASN).
transitGatewayConnectRequestBGPOptions
    :: TransitGatewayConnectRequestBGPOptions
transitGatewayConnectRequestBGPOptions =
  TransitGatewayConnectRequestBGPOptions' {_tgcrboPeerASN = Nothing}


-- | The peer Autonomous System Number (ASN).
tgcrboPeerASN :: Lens' TransitGatewayConnectRequestBGPOptions (Maybe Integer)
tgcrboPeerASN = lens _tgcrboPeerASN (\ s a -> s{_tgcrboPeerASN = a})

instance Hashable
           TransitGatewayConnectRequestBGPOptions
         where

instance NFData
           TransitGatewayConnectRequestBGPOptions
         where

instance ToQuery
           TransitGatewayConnectRequestBGPOptions
         where
        toQuery TransitGatewayConnectRequestBGPOptions'{..}
          = mconcat ["PeerAsn" =: _tgcrboPeerASN]

-- | Describes the deregistered transit gateway multicast group members.
--
--
--
-- /See:/ 'transitGatewayMulticastDeregisteredGroupMembers' smart constructor.
data TransitGatewayMulticastDeregisteredGroupMembers = TransitGatewayMulticastDeregisteredGroupMembers'
  { _tgmdgmDeregisteredNetworkInterfaceIds :: !(Maybe [Text])
  , _tgmdgmTransitGatewayMulticastDomainId :: !(Maybe Text)
  , _tgmdgmGroupIPAddress                  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayMulticastDeregisteredGroupMembers' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgmdgmDeregisteredNetworkInterfaceIds' - The network interface IDs of the deregistered members.
--
-- * 'tgmdgmTransitGatewayMulticastDomainId' - The ID of the transit gateway multicast domain.
--
-- * 'tgmdgmGroupIPAddress' - The IP address assigned to the transit gateway multicast group.
transitGatewayMulticastDeregisteredGroupMembers
    :: TransitGatewayMulticastDeregisteredGroupMembers
transitGatewayMulticastDeregisteredGroupMembers =
  TransitGatewayMulticastDeregisteredGroupMembers'
    { _tgmdgmDeregisteredNetworkInterfaceIds = Nothing
    , _tgmdgmTransitGatewayMulticastDomainId = Nothing
    , _tgmdgmGroupIPAddress = Nothing
    }


-- | The network interface IDs of the deregistered members.
tgmdgmDeregisteredNetworkInterfaceIds :: Lens' TransitGatewayMulticastDeregisteredGroupMembers [Text]
tgmdgmDeregisteredNetworkInterfaceIds = lens _tgmdgmDeregisteredNetworkInterfaceIds (\ s a -> s{_tgmdgmDeregisteredNetworkInterfaceIds = a}) . _Default . _Coerce

-- | The ID of the transit gateway multicast domain.
tgmdgmTransitGatewayMulticastDomainId :: Lens' TransitGatewayMulticastDeregisteredGroupMembers (Maybe Text)
tgmdgmTransitGatewayMulticastDomainId = lens _tgmdgmTransitGatewayMulticastDomainId (\ s a -> s{_tgmdgmTransitGatewayMulticastDomainId = a})

-- | The IP address assigned to the transit gateway multicast group.
tgmdgmGroupIPAddress :: Lens' TransitGatewayMulticastDeregisteredGroupMembers (Maybe Text)
tgmdgmGroupIPAddress = lens _tgmdgmGroupIPAddress (\ s a -> s{_tgmdgmGroupIPAddress = a})

instance FromXML
           TransitGatewayMulticastDeregisteredGroupMembers
         where
        parseXML x
          = TransitGatewayMulticastDeregisteredGroupMembers'
              <$>
              (x .@? "deregisteredNetworkInterfaceIds" .!@ mempty
                 >>= may (parseXMLList "item"))
                <*> (x .@? "transitGatewayMulticastDomainId")
                <*> (x .@? "groupIpAddress")

instance Hashable
           TransitGatewayMulticastDeregisteredGroupMembers
         where

instance NFData
           TransitGatewayMulticastDeregisteredGroupMembers
         where

-- | Describes the deregistered transit gateway multicast group sources.
--
--
--
-- /See:/ 'transitGatewayMulticastDeregisteredGroupSources' smart constructor.
data TransitGatewayMulticastDeregisteredGroupSources = TransitGatewayMulticastDeregisteredGroupSources'
  { _tgmdgsDeregisteredNetworkInterfaceIds :: !(Maybe [Text])
  , _tgmdgsTransitGatewayMulticastDomainId :: !(Maybe Text)
  , _tgmdgsGroupIPAddress                  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayMulticastDeregisteredGroupSources' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgmdgsDeregisteredNetworkInterfaceIds' - The network interface IDs of the non-registered members.
--
-- * 'tgmdgsTransitGatewayMulticastDomainId' - The ID of the transit gateway multicast domain.
--
-- * 'tgmdgsGroupIPAddress' - The IP address assigned to the transit gateway multicast group.
transitGatewayMulticastDeregisteredGroupSources
    :: TransitGatewayMulticastDeregisteredGroupSources
transitGatewayMulticastDeregisteredGroupSources =
  TransitGatewayMulticastDeregisteredGroupSources'
    { _tgmdgsDeregisteredNetworkInterfaceIds = Nothing
    , _tgmdgsTransitGatewayMulticastDomainId = Nothing
    , _tgmdgsGroupIPAddress = Nothing
    }


-- | The network interface IDs of the non-registered members.
tgmdgsDeregisteredNetworkInterfaceIds :: Lens' TransitGatewayMulticastDeregisteredGroupSources [Text]
tgmdgsDeregisteredNetworkInterfaceIds = lens _tgmdgsDeregisteredNetworkInterfaceIds (\ s a -> s{_tgmdgsDeregisteredNetworkInterfaceIds = a}) . _Default . _Coerce

-- | The ID of the transit gateway multicast domain.
tgmdgsTransitGatewayMulticastDomainId :: Lens' TransitGatewayMulticastDeregisteredGroupSources (Maybe Text)
tgmdgsTransitGatewayMulticastDomainId = lens _tgmdgsTransitGatewayMulticastDomainId (\ s a -> s{_tgmdgsTransitGatewayMulticastDomainId = a})

-- | The IP address assigned to the transit gateway multicast group.
tgmdgsGroupIPAddress :: Lens' TransitGatewayMulticastDeregisteredGroupSources (Maybe Text)
tgmdgsGroupIPAddress = lens _tgmdgsGroupIPAddress (\ s a -> s{_tgmdgsGroupIPAddress = a})

instance FromXML
           TransitGatewayMulticastDeregisteredGroupSources
         where
        parseXML x
          = TransitGatewayMulticastDeregisteredGroupSources'
              <$>
              (x .@? "deregisteredNetworkInterfaceIds" .!@ mempty
                 >>= may (parseXMLList "item"))
                <*> (x .@? "transitGatewayMulticastDomainId")
                <*> (x .@? "groupIpAddress")

instance Hashable
           TransitGatewayMulticastDeregisteredGroupSources
         where

instance NFData
           TransitGatewayMulticastDeregisteredGroupSources
         where

-- | Describes the transit gateway multicast domain.
--
--
--
-- /See:/ 'transitGatewayMulticastDomain' smart constructor.
data TransitGatewayMulticastDomain = TransitGatewayMulticastDomain'
  { _tgmdCreationTime :: !(Maybe ISO8601)
  , _tgmdState :: !(Maybe TransitGatewayMulticastDomainState)
  , _tgmdTransitGatewayMulticastDomainId :: !(Maybe Text)
  , _tgmdTransitGatewayMulticastDomainARN :: !(Maybe Text)
  , _tgmdOwnerId :: !(Maybe Text)
  , _tgmdTransitGatewayId :: !(Maybe Text)
  , _tgmdOptions :: !(Maybe TransitGatewayMulticastDomainOptions)
  , _tgmdTags :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayMulticastDomain' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgmdCreationTime' - The time the transit gateway multicast domain was created.
--
-- * 'tgmdState' - The state of the transit gateway multicast domain.
--
-- * 'tgmdTransitGatewayMulticastDomainId' - The ID of the transit gateway multicast domain.
--
-- * 'tgmdTransitGatewayMulticastDomainARN' - The Amazon Resource Name (ARN) of the transit gateway multicast domain.
--
-- * 'tgmdOwnerId' - The ID of the AWS account that owns the transit gateway multiicast domain.
--
-- * 'tgmdTransitGatewayId' - The ID of the transit gateway.
--
-- * 'tgmdOptions' - The options for the transit gateway multicast domain.
--
-- * 'tgmdTags' - The tags for the transit gateway multicast domain.
transitGatewayMulticastDomain
    :: TransitGatewayMulticastDomain
transitGatewayMulticastDomain =
  TransitGatewayMulticastDomain'
    { _tgmdCreationTime = Nothing
    , _tgmdState = Nothing
    , _tgmdTransitGatewayMulticastDomainId = Nothing
    , _tgmdTransitGatewayMulticastDomainARN = Nothing
    , _tgmdOwnerId = Nothing
    , _tgmdTransitGatewayId = Nothing
    , _tgmdOptions = Nothing
    , _tgmdTags = Nothing
    }


-- | The time the transit gateway multicast domain was created.
tgmdCreationTime :: Lens' TransitGatewayMulticastDomain (Maybe UTCTime)
tgmdCreationTime = lens _tgmdCreationTime (\ s a -> s{_tgmdCreationTime = a}) . mapping _Time

-- | The state of the transit gateway multicast domain.
tgmdState :: Lens' TransitGatewayMulticastDomain (Maybe TransitGatewayMulticastDomainState)
tgmdState = lens _tgmdState (\ s a -> s{_tgmdState = a})

-- | The ID of the transit gateway multicast domain.
tgmdTransitGatewayMulticastDomainId :: Lens' TransitGatewayMulticastDomain (Maybe Text)
tgmdTransitGatewayMulticastDomainId = lens _tgmdTransitGatewayMulticastDomainId (\ s a -> s{_tgmdTransitGatewayMulticastDomainId = a})

-- | The Amazon Resource Name (ARN) of the transit gateway multicast domain.
tgmdTransitGatewayMulticastDomainARN :: Lens' TransitGatewayMulticastDomain (Maybe Text)
tgmdTransitGatewayMulticastDomainARN = lens _tgmdTransitGatewayMulticastDomainARN (\ s a -> s{_tgmdTransitGatewayMulticastDomainARN = a})

-- | The ID of the AWS account that owns the transit gateway multiicast domain.
tgmdOwnerId :: Lens' TransitGatewayMulticastDomain (Maybe Text)
tgmdOwnerId = lens _tgmdOwnerId (\ s a -> s{_tgmdOwnerId = a})

-- | The ID of the transit gateway.
tgmdTransitGatewayId :: Lens' TransitGatewayMulticastDomain (Maybe Text)
tgmdTransitGatewayId = lens _tgmdTransitGatewayId (\ s a -> s{_tgmdTransitGatewayId = a})

-- | The options for the transit gateway multicast domain.
tgmdOptions :: Lens' TransitGatewayMulticastDomain (Maybe TransitGatewayMulticastDomainOptions)
tgmdOptions = lens _tgmdOptions (\ s a -> s{_tgmdOptions = a})

-- | The tags for the transit gateway multicast domain.
tgmdTags :: Lens' TransitGatewayMulticastDomain [Tag]
tgmdTags = lens _tgmdTags (\ s a -> s{_tgmdTags = a}) . _Default . _Coerce

instance FromXML TransitGatewayMulticastDomain where
        parseXML x
          = TransitGatewayMulticastDomain' <$>
              (x .@? "creationTime") <*> (x .@? "state") <*>
                (x .@? "transitGatewayMulticastDomainId")
                <*> (x .@? "transitGatewayMulticastDomainArn")
                <*> (x .@? "ownerId")
                <*> (x .@? "transitGatewayId")
                <*> (x .@? "options")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TransitGatewayMulticastDomain where

instance NFData TransitGatewayMulticastDomain where

-- | Describes the resources associated with the transit gateway multicast domain.
--
--
--
-- /See:/ 'transitGatewayMulticastDomainAssociation' smart constructor.
data TransitGatewayMulticastDomainAssociation = TransitGatewayMulticastDomainAssociation'
  { _tgmdaResourceId :: !(Maybe Text)
  , _tgmdaResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _tgmdaSubnet :: !(Maybe SubnetAssociation)
  , _tgmdaTransitGatewayAttachmentId :: !(Maybe Text)
  , _tgmdaResourceOwnerId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayMulticastDomainAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgmdaResourceId' - The ID of the resource.
--
-- * 'tgmdaResourceType' - The type of resource, for example a VPC attachment.
--
-- * 'tgmdaSubnet' - The subnet associated with the transit gateway multicast domain.
--
-- * 'tgmdaTransitGatewayAttachmentId' - The ID of the transit gateway attachment.
--
-- * 'tgmdaResourceOwnerId' - The ID of the AWS account that owns the transit gateway multicast domain association resource.
transitGatewayMulticastDomainAssociation
    :: TransitGatewayMulticastDomainAssociation
transitGatewayMulticastDomainAssociation =
  TransitGatewayMulticastDomainAssociation'
    { _tgmdaResourceId = Nothing
    , _tgmdaResourceType = Nothing
    , _tgmdaSubnet = Nothing
    , _tgmdaTransitGatewayAttachmentId = Nothing
    , _tgmdaResourceOwnerId = Nothing
    }


-- | The ID of the resource.
tgmdaResourceId :: Lens' TransitGatewayMulticastDomainAssociation (Maybe Text)
tgmdaResourceId = lens _tgmdaResourceId (\ s a -> s{_tgmdaResourceId = a})

-- | The type of resource, for example a VPC attachment.
tgmdaResourceType :: Lens' TransitGatewayMulticastDomainAssociation (Maybe TransitGatewayAttachmentResourceType)
tgmdaResourceType = lens _tgmdaResourceType (\ s a -> s{_tgmdaResourceType = a})

-- | The subnet associated with the transit gateway multicast domain.
tgmdaSubnet :: Lens' TransitGatewayMulticastDomainAssociation (Maybe SubnetAssociation)
tgmdaSubnet = lens _tgmdaSubnet (\ s a -> s{_tgmdaSubnet = a})

-- | The ID of the transit gateway attachment.
tgmdaTransitGatewayAttachmentId :: Lens' TransitGatewayMulticastDomainAssociation (Maybe Text)
tgmdaTransitGatewayAttachmentId = lens _tgmdaTransitGatewayAttachmentId (\ s a -> s{_tgmdaTransitGatewayAttachmentId = a})

-- | The ID of the AWS account that owns the transit gateway multicast domain association resource.
tgmdaResourceOwnerId :: Lens' TransitGatewayMulticastDomainAssociation (Maybe Text)
tgmdaResourceOwnerId = lens _tgmdaResourceOwnerId (\ s a -> s{_tgmdaResourceOwnerId = a})

instance FromXML
           TransitGatewayMulticastDomainAssociation
         where
        parseXML x
          = TransitGatewayMulticastDomainAssociation' <$>
              (x .@? "resourceId") <*> (x .@? "resourceType") <*>
                (x .@? "subnet")
                <*> (x .@? "transitGatewayAttachmentId")
                <*> (x .@? "resourceOwnerId")

instance Hashable
           TransitGatewayMulticastDomainAssociation
         where

instance NFData
           TransitGatewayMulticastDomainAssociation
         where

-- | Describes the multicast domain associations.
--
--
--
-- /See:/ 'transitGatewayMulticastDomainAssociations' smart constructor.
data TransitGatewayMulticastDomainAssociations = TransitGatewayMulticastDomainAssociations'
  { _tResourceId :: !(Maybe Text)
  , _tResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _tSubnets :: !(Maybe [SubnetAssociation])
  , _tTransitGatewayMulticastDomainId :: !(Maybe Text)
  , _tTransitGatewayAttachmentId :: !(Maybe Text)
  , _tResourceOwnerId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayMulticastDomainAssociations' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tResourceId' - The ID of the resource.
--
-- * 'tResourceType' - The type of resource, for example a VPC attachment.
--
-- * 'tSubnets' - The subnets associated with the multicast domain.
--
-- * 'tTransitGatewayMulticastDomainId' - The ID of the transit gateway multicast domain.
--
-- * 'tTransitGatewayAttachmentId' - The ID of the transit gateway attachment.
--
-- * 'tResourceOwnerId' - The ID of the AWS account that owns the resource.
transitGatewayMulticastDomainAssociations
    :: TransitGatewayMulticastDomainAssociations
transitGatewayMulticastDomainAssociations =
  TransitGatewayMulticastDomainAssociations'
    { _tResourceId = Nothing
    , _tResourceType = Nothing
    , _tSubnets = Nothing
    , _tTransitGatewayMulticastDomainId = Nothing
    , _tTransitGatewayAttachmentId = Nothing
    , _tResourceOwnerId = Nothing
    }


-- | The ID of the resource.
tResourceId :: Lens' TransitGatewayMulticastDomainAssociations (Maybe Text)
tResourceId = lens _tResourceId (\ s a -> s{_tResourceId = a})

-- | The type of resource, for example a VPC attachment.
tResourceType :: Lens' TransitGatewayMulticastDomainAssociations (Maybe TransitGatewayAttachmentResourceType)
tResourceType = lens _tResourceType (\ s a -> s{_tResourceType = a})

-- | The subnets associated with the multicast domain.
tSubnets :: Lens' TransitGatewayMulticastDomainAssociations [SubnetAssociation]
tSubnets = lens _tSubnets (\ s a -> s{_tSubnets = a}) . _Default . _Coerce

-- | The ID of the transit gateway multicast domain.
tTransitGatewayMulticastDomainId :: Lens' TransitGatewayMulticastDomainAssociations (Maybe Text)
tTransitGatewayMulticastDomainId = lens _tTransitGatewayMulticastDomainId (\ s a -> s{_tTransitGatewayMulticastDomainId = a})

-- | The ID of the transit gateway attachment.
tTransitGatewayAttachmentId :: Lens' TransitGatewayMulticastDomainAssociations (Maybe Text)
tTransitGatewayAttachmentId = lens _tTransitGatewayAttachmentId (\ s a -> s{_tTransitGatewayAttachmentId = a})

-- | The ID of the AWS account that owns the resource.
tResourceOwnerId :: Lens' TransitGatewayMulticastDomainAssociations (Maybe Text)
tResourceOwnerId = lens _tResourceOwnerId (\ s a -> s{_tResourceOwnerId = a})

instance FromXML
           TransitGatewayMulticastDomainAssociations
         where
        parseXML x
          = TransitGatewayMulticastDomainAssociations' <$>
              (x .@? "resourceId") <*> (x .@? "resourceType") <*>
                (x .@? "subnets" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "transitGatewayMulticastDomainId")
                <*> (x .@? "transitGatewayAttachmentId")
                <*> (x .@? "resourceOwnerId")

instance Hashable
           TransitGatewayMulticastDomainAssociations
         where

instance NFData
           TransitGatewayMulticastDomainAssociations
         where

-- | Describes the options for a transit gateway multicast domain.
--
--
--
-- /See:/ 'transitGatewayMulticastDomainOptions' smart constructor.
data TransitGatewayMulticastDomainOptions = TransitGatewayMulticastDomainOptions'
  { _tgmdoAutoAcceptSharedAssociations :: !(Maybe AutoAcceptSharedAssociationsValue)
  , _tgmdoIgmpv2Support :: !(Maybe Igmpv2SupportValue)
  , _tgmdoStaticSourcesSupport :: !(Maybe StaticSourcesSupportValue)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayMulticastDomainOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgmdoAutoAcceptSharedAssociations' - Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain.
--
-- * 'tgmdoIgmpv2Support' - Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain.
--
-- * 'tgmdoStaticSourcesSupport' - Indicates whether support for statically configuring transit gateway multicast group sources is turned on.
transitGatewayMulticastDomainOptions
    :: TransitGatewayMulticastDomainOptions
transitGatewayMulticastDomainOptions =
  TransitGatewayMulticastDomainOptions'
    { _tgmdoAutoAcceptSharedAssociations = Nothing
    , _tgmdoIgmpv2Support = Nothing
    , _tgmdoStaticSourcesSupport = Nothing
    }


-- | Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain.
tgmdoAutoAcceptSharedAssociations :: Lens' TransitGatewayMulticastDomainOptions (Maybe AutoAcceptSharedAssociationsValue)
tgmdoAutoAcceptSharedAssociations = lens _tgmdoAutoAcceptSharedAssociations (\ s a -> s{_tgmdoAutoAcceptSharedAssociations = a})

-- | Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain.
tgmdoIgmpv2Support :: Lens' TransitGatewayMulticastDomainOptions (Maybe Igmpv2SupportValue)
tgmdoIgmpv2Support = lens _tgmdoIgmpv2Support (\ s a -> s{_tgmdoIgmpv2Support = a})

-- | Indicates whether support for statically configuring transit gateway multicast group sources is turned on.
tgmdoStaticSourcesSupport :: Lens' TransitGatewayMulticastDomainOptions (Maybe StaticSourcesSupportValue)
tgmdoStaticSourcesSupport = lens _tgmdoStaticSourcesSupport (\ s a -> s{_tgmdoStaticSourcesSupport = a})

instance FromXML TransitGatewayMulticastDomainOptions
         where
        parseXML x
          = TransitGatewayMulticastDomainOptions' <$>
              (x .@? "autoAcceptSharedAssociations") <*>
                (x .@? "igmpv2Support")
                <*> (x .@? "staticSourcesSupport")

instance Hashable
           TransitGatewayMulticastDomainOptions
         where

instance NFData TransitGatewayMulticastDomainOptions
         where

-- | Describes the transit gateway multicast group resources.
--
--
--
-- /See:/ 'transitGatewayMulticastGroup' smart constructor.
data TransitGatewayMulticastGroup = TransitGatewayMulticastGroup'
  { _tgmgResourceId :: !(Maybe Text)
  , _tgmgResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _tgmgSourceType :: !(Maybe MembershipType)
  , _tgmgMemberType :: !(Maybe MembershipType)
  , _tgmgNetworkInterfaceId :: !(Maybe Text)
  , _tgmgSubnetId :: !(Maybe Text)
  , _tgmgGroupMember :: !(Maybe Bool)
  , _tgmgGroupSource :: !(Maybe Bool)
  , _tgmgGroupIPAddress :: !(Maybe Text)
  , _tgmgTransitGatewayAttachmentId :: !(Maybe Text)
  , _tgmgResourceOwnerId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayMulticastGroup' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgmgResourceId' - The ID of the resource.
--
-- * 'tgmgResourceType' - The type of resource, for example a VPC attachment.
--
-- * 'tgmgSourceType' - The source type.
--
-- * 'tgmgMemberType' - The member type (for example, @static@ ).
--
-- * 'tgmgNetworkInterfaceId' - The ID of the transit gateway attachment.
--
-- * 'tgmgSubnetId' - The ID of the subnet.
--
-- * 'tgmgGroupMember' - Indicates that the resource is a transit gateway multicast group member.
--
-- * 'tgmgGroupSource' - Indicates that the resource is a transit gateway multicast group member.
--
-- * 'tgmgGroupIPAddress' - The IP address assigned to the transit gateway multicast group.
--
-- * 'tgmgTransitGatewayAttachmentId' - The ID of the transit gateway attachment.
--
-- * 'tgmgResourceOwnerId' - The ID of the AWS account that owns the transit gateway multicast domain group resource.
transitGatewayMulticastGroup
    :: TransitGatewayMulticastGroup
transitGatewayMulticastGroup =
  TransitGatewayMulticastGroup'
    { _tgmgResourceId = Nothing
    , _tgmgResourceType = Nothing
    , _tgmgSourceType = Nothing
    , _tgmgMemberType = Nothing
    , _tgmgNetworkInterfaceId = Nothing
    , _tgmgSubnetId = Nothing
    , _tgmgGroupMember = Nothing
    , _tgmgGroupSource = Nothing
    , _tgmgGroupIPAddress = Nothing
    , _tgmgTransitGatewayAttachmentId = Nothing
    , _tgmgResourceOwnerId = Nothing
    }


-- | The ID of the resource.
tgmgResourceId :: Lens' TransitGatewayMulticastGroup (Maybe Text)
tgmgResourceId = lens _tgmgResourceId (\ s a -> s{_tgmgResourceId = a})

-- | The type of resource, for example a VPC attachment.
tgmgResourceType :: Lens' TransitGatewayMulticastGroup (Maybe TransitGatewayAttachmentResourceType)
tgmgResourceType = lens _tgmgResourceType (\ s a -> s{_tgmgResourceType = a})

-- | The source type.
tgmgSourceType :: Lens' TransitGatewayMulticastGroup (Maybe MembershipType)
tgmgSourceType = lens _tgmgSourceType (\ s a -> s{_tgmgSourceType = a})

-- | The member type (for example, @static@ ).
tgmgMemberType :: Lens' TransitGatewayMulticastGroup (Maybe MembershipType)
tgmgMemberType = lens _tgmgMemberType (\ s a -> s{_tgmgMemberType = a})

-- | The ID of the transit gateway attachment.
tgmgNetworkInterfaceId :: Lens' TransitGatewayMulticastGroup (Maybe Text)
tgmgNetworkInterfaceId = lens _tgmgNetworkInterfaceId (\ s a -> s{_tgmgNetworkInterfaceId = a})

-- | The ID of the subnet.
tgmgSubnetId :: Lens' TransitGatewayMulticastGroup (Maybe Text)
tgmgSubnetId = lens _tgmgSubnetId (\ s a -> s{_tgmgSubnetId = a})

-- | Indicates that the resource is a transit gateway multicast group member.
tgmgGroupMember :: Lens' TransitGatewayMulticastGroup (Maybe Bool)
tgmgGroupMember = lens _tgmgGroupMember (\ s a -> s{_tgmgGroupMember = a})

-- | Indicates that the resource is a transit gateway multicast group member.
tgmgGroupSource :: Lens' TransitGatewayMulticastGroup (Maybe Bool)
tgmgGroupSource = lens _tgmgGroupSource (\ s a -> s{_tgmgGroupSource = a})

-- | The IP address assigned to the transit gateway multicast group.
tgmgGroupIPAddress :: Lens' TransitGatewayMulticastGroup (Maybe Text)
tgmgGroupIPAddress = lens _tgmgGroupIPAddress (\ s a -> s{_tgmgGroupIPAddress = a})

-- | The ID of the transit gateway attachment.
tgmgTransitGatewayAttachmentId :: Lens' TransitGatewayMulticastGroup (Maybe Text)
tgmgTransitGatewayAttachmentId = lens _tgmgTransitGatewayAttachmentId (\ s a -> s{_tgmgTransitGatewayAttachmentId = a})

-- | The ID of the AWS account that owns the transit gateway multicast domain group resource.
tgmgResourceOwnerId :: Lens' TransitGatewayMulticastGroup (Maybe Text)
tgmgResourceOwnerId = lens _tgmgResourceOwnerId (\ s a -> s{_tgmgResourceOwnerId = a})

instance FromXML TransitGatewayMulticastGroup where
        parseXML x
          = TransitGatewayMulticastGroup' <$>
              (x .@? "resourceId") <*> (x .@? "resourceType") <*>
                (x .@? "sourceType")
                <*> (x .@? "memberType")
                <*> (x .@? "networkInterfaceId")
                <*> (x .@? "subnetId")
                <*> (x .@? "groupMember")
                <*> (x .@? "groupSource")
                <*> (x .@? "groupIpAddress")
                <*> (x .@? "transitGatewayAttachmentId")
                <*> (x .@? "resourceOwnerId")

instance Hashable TransitGatewayMulticastGroup where

instance NFData TransitGatewayMulticastGroup where

-- | Describes the registered transit gateway multicast group members.
--
--
--
-- /See:/ 'transitGatewayMulticastRegisteredGroupMembers' smart constructor.
data TransitGatewayMulticastRegisteredGroupMembers = TransitGatewayMulticastRegisteredGroupMembers'
  { _tgmrgmTransitGatewayMulticastDomainId :: !(Maybe Text)
  , _tgmrgmRegisteredNetworkInterfaceIds   :: !(Maybe [Text])
  , _tgmrgmGroupIPAddress                  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayMulticastRegisteredGroupMembers' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgmrgmTransitGatewayMulticastDomainId' - The ID of the transit gateway multicast domain.
--
-- * 'tgmrgmRegisteredNetworkInterfaceIds' - The ID of the registered network interfaces.
--
-- * 'tgmrgmGroupIPAddress' - The IP address assigned to the transit gateway multicast group.
transitGatewayMulticastRegisteredGroupMembers
    :: TransitGatewayMulticastRegisteredGroupMembers
transitGatewayMulticastRegisteredGroupMembers =
  TransitGatewayMulticastRegisteredGroupMembers'
    { _tgmrgmTransitGatewayMulticastDomainId = Nothing
    , _tgmrgmRegisteredNetworkInterfaceIds = Nothing
    , _tgmrgmGroupIPAddress = Nothing
    }


-- | The ID of the transit gateway multicast domain.
tgmrgmTransitGatewayMulticastDomainId :: Lens' TransitGatewayMulticastRegisteredGroupMembers (Maybe Text)
tgmrgmTransitGatewayMulticastDomainId = lens _tgmrgmTransitGatewayMulticastDomainId (\ s a -> s{_tgmrgmTransitGatewayMulticastDomainId = a})

-- | The ID of the registered network interfaces.
tgmrgmRegisteredNetworkInterfaceIds :: Lens' TransitGatewayMulticastRegisteredGroupMembers [Text]
tgmrgmRegisteredNetworkInterfaceIds = lens _tgmrgmRegisteredNetworkInterfaceIds (\ s a -> s{_tgmrgmRegisteredNetworkInterfaceIds = a}) . _Default . _Coerce

-- | The IP address assigned to the transit gateway multicast group.
tgmrgmGroupIPAddress :: Lens' TransitGatewayMulticastRegisteredGroupMembers (Maybe Text)
tgmrgmGroupIPAddress = lens _tgmrgmGroupIPAddress (\ s a -> s{_tgmrgmGroupIPAddress = a})

instance FromXML
           TransitGatewayMulticastRegisteredGroupMembers
         where
        parseXML x
          = TransitGatewayMulticastRegisteredGroupMembers' <$>
              (x .@? "transitGatewayMulticastDomainId") <*>
                (x .@? "registeredNetworkInterfaceIds" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "groupIpAddress")

instance Hashable
           TransitGatewayMulticastRegisteredGroupMembers
         where

instance NFData
           TransitGatewayMulticastRegisteredGroupMembers
         where

-- | Describes the members registered with the transit gateway multicast group.
--
--
--
-- /See:/ 'transitGatewayMulticastRegisteredGroupSources' smart constructor.
data TransitGatewayMulticastRegisteredGroupSources = TransitGatewayMulticastRegisteredGroupSources'
  { _tgmrgsTransitGatewayMulticastDomainId :: !(Maybe Text)
  , _tgmrgsRegisteredNetworkInterfaceIds   :: !(Maybe [Text])
  , _tgmrgsGroupIPAddress                  :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayMulticastRegisteredGroupSources' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgmrgsTransitGatewayMulticastDomainId' - The ID of the transit gateway multicast domain.
--
-- * 'tgmrgsRegisteredNetworkInterfaceIds' - The IDs of the network interfaces members registered with the transit gateway multicast group.
--
-- * 'tgmrgsGroupIPAddress' - The IP address assigned to the transit gateway multicast group.
transitGatewayMulticastRegisteredGroupSources
    :: TransitGatewayMulticastRegisteredGroupSources
transitGatewayMulticastRegisteredGroupSources =
  TransitGatewayMulticastRegisteredGroupSources'
    { _tgmrgsTransitGatewayMulticastDomainId = Nothing
    , _tgmrgsRegisteredNetworkInterfaceIds = Nothing
    , _tgmrgsGroupIPAddress = Nothing
    }


-- | The ID of the transit gateway multicast domain.
tgmrgsTransitGatewayMulticastDomainId :: Lens' TransitGatewayMulticastRegisteredGroupSources (Maybe Text)
tgmrgsTransitGatewayMulticastDomainId = lens _tgmrgsTransitGatewayMulticastDomainId (\ s a -> s{_tgmrgsTransitGatewayMulticastDomainId = a})

-- | The IDs of the network interfaces members registered with the transit gateway multicast group.
tgmrgsRegisteredNetworkInterfaceIds :: Lens' TransitGatewayMulticastRegisteredGroupSources [Text]
tgmrgsRegisteredNetworkInterfaceIds = lens _tgmrgsRegisteredNetworkInterfaceIds (\ s a -> s{_tgmrgsRegisteredNetworkInterfaceIds = a}) . _Default . _Coerce

-- | The IP address assigned to the transit gateway multicast group.
tgmrgsGroupIPAddress :: Lens' TransitGatewayMulticastRegisteredGroupSources (Maybe Text)
tgmrgsGroupIPAddress = lens _tgmrgsGroupIPAddress (\ s a -> s{_tgmrgsGroupIPAddress = a})

instance FromXML
           TransitGatewayMulticastRegisteredGroupSources
         where
        parseXML x
          = TransitGatewayMulticastRegisteredGroupSources' <$>
              (x .@? "transitGatewayMulticastDomainId") <*>
                (x .@? "registeredNetworkInterfaceIds" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "groupIpAddress")

instance Hashable
           TransitGatewayMulticastRegisteredGroupSources
         where

instance NFData
           TransitGatewayMulticastRegisteredGroupSources
         where

-- | Describes the options for a transit gateway.
--
--
--
-- /See:/ 'transitGatewayOptions' smart constructor.
data TransitGatewayOptions = TransitGatewayOptions'
  { _tgoVPNEcmpSupport :: !(Maybe VPNEcmpSupportValue)
  , _tgoAutoAcceptSharedAttachments :: !(Maybe AutoAcceptSharedAttachmentsValue)
  , _tgoPropagationDefaultRouteTableId :: !(Maybe Text)
  , _tgoDefaultRouteTableAssociation :: !(Maybe DefaultRouteTableAssociationValue)
  , _tgoAssociationDefaultRouteTableId :: !(Maybe Text)
  , _tgoAmazonSideASN :: !(Maybe Integer)
  , _tgoDefaultRouteTablePropagation :: !(Maybe DefaultRouteTablePropagationValue)
  , _tgoMulticastSupport :: !(Maybe MulticastSupportValue)
  , _tgoDNSSupport :: !(Maybe DNSSupportValue)
  , _tgoTransitGatewayCidrBlocks :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgoVPNEcmpSupport' - Indicates whether Equal Cost Multipath Protocol support is enabled.
--
-- * 'tgoAutoAcceptSharedAttachments' - Indicates whether attachment requests are automatically accepted.
--
-- * 'tgoPropagationDefaultRouteTableId' - The ID of the default propagation route table.
--
-- * 'tgoDefaultRouteTableAssociation' - Indicates whether resource attachments are automatically associated with the default association route table.
--
-- * 'tgoAssociationDefaultRouteTableId' - The ID of the default association route table.
--
-- * 'tgoAmazonSideASN' - A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
--
-- * 'tgoDefaultRouteTablePropagation' - Indicates whether resource attachments automatically propagate routes to the default propagation route table.
--
-- * 'tgoMulticastSupport' - Indicates whether multicast is enabled on the transit gateway
--
-- * 'tgoDNSSupport' - Indicates whether DNS support is enabled.
--
-- * 'tgoTransitGatewayCidrBlocks' - The transit gateway CIDR blocks.
transitGatewayOptions
    :: TransitGatewayOptions
transitGatewayOptions =
  TransitGatewayOptions'
    { _tgoVPNEcmpSupport = Nothing
    , _tgoAutoAcceptSharedAttachments = Nothing
    , _tgoPropagationDefaultRouteTableId = Nothing
    , _tgoDefaultRouteTableAssociation = Nothing
    , _tgoAssociationDefaultRouteTableId = Nothing
    , _tgoAmazonSideASN = Nothing
    , _tgoDefaultRouteTablePropagation = Nothing
    , _tgoMulticastSupport = Nothing
    , _tgoDNSSupport = Nothing
    , _tgoTransitGatewayCidrBlocks = Nothing
    }


-- | Indicates whether Equal Cost Multipath Protocol support is enabled.
tgoVPNEcmpSupport :: Lens' TransitGatewayOptions (Maybe VPNEcmpSupportValue)
tgoVPNEcmpSupport = lens _tgoVPNEcmpSupport (\ s a -> s{_tgoVPNEcmpSupport = a})

-- | Indicates whether attachment requests are automatically accepted.
tgoAutoAcceptSharedAttachments :: Lens' TransitGatewayOptions (Maybe AutoAcceptSharedAttachmentsValue)
tgoAutoAcceptSharedAttachments = lens _tgoAutoAcceptSharedAttachments (\ s a -> s{_tgoAutoAcceptSharedAttachments = a})

-- | The ID of the default propagation route table.
tgoPropagationDefaultRouteTableId :: Lens' TransitGatewayOptions (Maybe Text)
tgoPropagationDefaultRouteTableId = lens _tgoPropagationDefaultRouteTableId (\ s a -> s{_tgoPropagationDefaultRouteTableId = a})

-- | Indicates whether resource attachments are automatically associated with the default association route table.
tgoDefaultRouteTableAssociation :: Lens' TransitGatewayOptions (Maybe DefaultRouteTableAssociationValue)
tgoDefaultRouteTableAssociation = lens _tgoDefaultRouteTableAssociation (\ s a -> s{_tgoDefaultRouteTableAssociation = a})

-- | The ID of the default association route table.
tgoAssociationDefaultRouteTableId :: Lens' TransitGatewayOptions (Maybe Text)
tgoAssociationDefaultRouteTableId = lens _tgoAssociationDefaultRouteTableId (\ s a -> s{_tgoAssociationDefaultRouteTableId = a})

-- | A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
tgoAmazonSideASN :: Lens' TransitGatewayOptions (Maybe Integer)
tgoAmazonSideASN = lens _tgoAmazonSideASN (\ s a -> s{_tgoAmazonSideASN = a})

-- | Indicates whether resource attachments automatically propagate routes to the default propagation route table.
tgoDefaultRouteTablePropagation :: Lens' TransitGatewayOptions (Maybe DefaultRouteTablePropagationValue)
tgoDefaultRouteTablePropagation = lens _tgoDefaultRouteTablePropagation (\ s a -> s{_tgoDefaultRouteTablePropagation = a})

-- | Indicates whether multicast is enabled on the transit gateway
tgoMulticastSupport :: Lens' TransitGatewayOptions (Maybe MulticastSupportValue)
tgoMulticastSupport = lens _tgoMulticastSupport (\ s a -> s{_tgoMulticastSupport = a})

-- | Indicates whether DNS support is enabled.
tgoDNSSupport :: Lens' TransitGatewayOptions (Maybe DNSSupportValue)
tgoDNSSupport = lens _tgoDNSSupport (\ s a -> s{_tgoDNSSupport = a})

-- | The transit gateway CIDR blocks.
tgoTransitGatewayCidrBlocks :: Lens' TransitGatewayOptions [Text]
tgoTransitGatewayCidrBlocks = lens _tgoTransitGatewayCidrBlocks (\ s a -> s{_tgoTransitGatewayCidrBlocks = a}) . _Default . _Coerce

instance FromXML TransitGatewayOptions where
        parseXML x
          = TransitGatewayOptions' <$>
              (x .@? "vpnEcmpSupport") <*>
                (x .@? "autoAcceptSharedAttachments")
                <*> (x .@? "propagationDefaultRouteTableId")
                <*> (x .@? "defaultRouteTableAssociation")
                <*> (x .@? "associationDefaultRouteTableId")
                <*> (x .@? "amazonSideAsn")
                <*> (x .@? "defaultRouteTablePropagation")
                <*> (x .@? "multicastSupport")
                <*> (x .@? "dnsSupport")
                <*>
                (x .@? "transitGatewayCidrBlocks" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TransitGatewayOptions where

instance NFData TransitGatewayOptions where

-- | Describes the transit gateway peering attachment.
--
--
--
-- /See:/ 'transitGatewayPeeringAttachment' smart constructor.
data TransitGatewayPeeringAttachment = TransitGatewayPeeringAttachment'
  { _tgpaCreationTime               :: !(Maybe ISO8601)
  , _tgpaRequesterTgwInfo           :: !(Maybe PeeringTgwInfo)
  , _tgpaStatus                     :: !(Maybe PeeringAttachmentStatus)
  , _tgpaState                      :: !(Maybe TransitGatewayAttachmentState)
  , _tgpaAccepterTgwInfo            :: !(Maybe PeeringTgwInfo)
  , _tgpaTransitGatewayAttachmentId :: !(Maybe Text)
  , _tgpaTags                       :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayPeeringAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgpaCreationTime' - The time the transit gateway peering attachment was created.
--
-- * 'tgpaRequesterTgwInfo' - Information about the requester transit gateway.
--
-- * 'tgpaStatus' - The status of the transit gateway peering attachment.
--
-- * 'tgpaState' - The state of the transit gateway peering attachment. Note that the @initiating@ state has been deprecated.
--
-- * 'tgpaAccepterTgwInfo' - Information about the accepter transit gateway.
--
-- * 'tgpaTransitGatewayAttachmentId' - The ID of the transit gateway peering attachment.
--
-- * 'tgpaTags' - The tags for the transit gateway peering attachment.
transitGatewayPeeringAttachment
    :: TransitGatewayPeeringAttachment
transitGatewayPeeringAttachment =
  TransitGatewayPeeringAttachment'
    { _tgpaCreationTime = Nothing
    , _tgpaRequesterTgwInfo = Nothing
    , _tgpaStatus = Nothing
    , _tgpaState = Nothing
    , _tgpaAccepterTgwInfo = Nothing
    , _tgpaTransitGatewayAttachmentId = Nothing
    , _tgpaTags = Nothing
    }


-- | The time the transit gateway peering attachment was created.
tgpaCreationTime :: Lens' TransitGatewayPeeringAttachment (Maybe UTCTime)
tgpaCreationTime = lens _tgpaCreationTime (\ s a -> s{_tgpaCreationTime = a}) . mapping _Time

-- | Information about the requester transit gateway.
tgpaRequesterTgwInfo :: Lens' TransitGatewayPeeringAttachment (Maybe PeeringTgwInfo)
tgpaRequesterTgwInfo = lens _tgpaRequesterTgwInfo (\ s a -> s{_tgpaRequesterTgwInfo = a})

-- | The status of the transit gateway peering attachment.
tgpaStatus :: Lens' TransitGatewayPeeringAttachment (Maybe PeeringAttachmentStatus)
tgpaStatus = lens _tgpaStatus (\ s a -> s{_tgpaStatus = a})

-- | The state of the transit gateway peering attachment. Note that the @initiating@ state has been deprecated.
tgpaState :: Lens' TransitGatewayPeeringAttachment (Maybe TransitGatewayAttachmentState)
tgpaState = lens _tgpaState (\ s a -> s{_tgpaState = a})

-- | Information about the accepter transit gateway.
tgpaAccepterTgwInfo :: Lens' TransitGatewayPeeringAttachment (Maybe PeeringTgwInfo)
tgpaAccepterTgwInfo = lens _tgpaAccepterTgwInfo (\ s a -> s{_tgpaAccepterTgwInfo = a})

-- | The ID of the transit gateway peering attachment.
tgpaTransitGatewayAttachmentId :: Lens' TransitGatewayPeeringAttachment (Maybe Text)
tgpaTransitGatewayAttachmentId = lens _tgpaTransitGatewayAttachmentId (\ s a -> s{_tgpaTransitGatewayAttachmentId = a})

-- | The tags for the transit gateway peering attachment.
tgpaTags :: Lens' TransitGatewayPeeringAttachment [Tag]
tgpaTags = lens _tgpaTags (\ s a -> s{_tgpaTags = a}) . _Default . _Coerce

instance FromXML TransitGatewayPeeringAttachment
         where
        parseXML x
          = TransitGatewayPeeringAttachment' <$>
              (x .@? "creationTime") <*> (x .@? "requesterTgwInfo")
                <*> (x .@? "status")
                <*> (x .@? "state")
                <*> (x .@? "accepterTgwInfo")
                <*> (x .@? "transitGatewayAttachmentId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TransitGatewayPeeringAttachment
         where

instance NFData TransitGatewayPeeringAttachment where

-- | Describes a transit gateway prefix list attachment.
--
--
--
-- /See:/ 'transitGatewayPrefixListAttachment' smart constructor.
data TransitGatewayPrefixListAttachment = TransitGatewayPrefixListAttachment'
  { _tgplaResourceId :: !(Maybe Text)
  , _tgplaResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _tgplaTransitGatewayAttachmentId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayPrefixListAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgplaResourceId' - The ID of the resource.
--
-- * 'tgplaResourceType' - The resource type. Note that the @tgw-peering@ resource type has been deprecated.
--
-- * 'tgplaTransitGatewayAttachmentId' - The ID of the attachment.
transitGatewayPrefixListAttachment
    :: TransitGatewayPrefixListAttachment
transitGatewayPrefixListAttachment =
  TransitGatewayPrefixListAttachment'
    { _tgplaResourceId = Nothing
    , _tgplaResourceType = Nothing
    , _tgplaTransitGatewayAttachmentId = Nothing
    }


-- | The ID of the resource.
tgplaResourceId :: Lens' TransitGatewayPrefixListAttachment (Maybe Text)
tgplaResourceId = lens _tgplaResourceId (\ s a -> s{_tgplaResourceId = a})

-- | The resource type. Note that the @tgw-peering@ resource type has been deprecated.
tgplaResourceType :: Lens' TransitGatewayPrefixListAttachment (Maybe TransitGatewayAttachmentResourceType)
tgplaResourceType = lens _tgplaResourceType (\ s a -> s{_tgplaResourceType = a})

-- | The ID of the attachment.
tgplaTransitGatewayAttachmentId :: Lens' TransitGatewayPrefixListAttachment (Maybe Text)
tgplaTransitGatewayAttachmentId = lens _tgplaTransitGatewayAttachmentId (\ s a -> s{_tgplaTransitGatewayAttachmentId = a})

instance FromXML TransitGatewayPrefixListAttachment
         where
        parseXML x
          = TransitGatewayPrefixListAttachment' <$>
              (x .@? "resourceId") <*> (x .@? "resourceType") <*>
                (x .@? "transitGatewayAttachmentId")

instance Hashable TransitGatewayPrefixListAttachment
         where

instance NFData TransitGatewayPrefixListAttachment
         where

-- | Describes a prefix list reference.
--
--
--
-- /See:/ 'transitGatewayPrefixListReference' smart constructor.
data TransitGatewayPrefixListReference = TransitGatewayPrefixListReference'
  { _tgplrState :: !(Maybe TransitGatewayPrefixListReferenceState)
  , _tgplrTransitGatewayRouteTableId :: !(Maybe Text)
  , _tgplrPrefixListOwnerId :: !(Maybe Text)
  , _tgplrBlackhole :: !(Maybe Bool)
  , _tgplrPrefixListId :: !(Maybe Text)
  , _tgplrTransitGatewayAttachment :: !(Maybe TransitGatewayPrefixListAttachment)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayPrefixListReference' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgplrState' - The state of the prefix list reference.
--
-- * 'tgplrTransitGatewayRouteTableId' - The ID of the transit gateway route table.
--
-- * 'tgplrPrefixListOwnerId' - The ID of the prefix list owner.
--
-- * 'tgplrBlackhole' - Indicates whether traffic that matches this route is dropped.
--
-- * 'tgplrPrefixListId' - The ID of the prefix list.
--
-- * 'tgplrTransitGatewayAttachment' - Information about the transit gateway attachment.
transitGatewayPrefixListReference
    :: TransitGatewayPrefixListReference
transitGatewayPrefixListReference =
  TransitGatewayPrefixListReference'
    { _tgplrState = Nothing
    , _tgplrTransitGatewayRouteTableId = Nothing
    , _tgplrPrefixListOwnerId = Nothing
    , _tgplrBlackhole = Nothing
    , _tgplrPrefixListId = Nothing
    , _tgplrTransitGatewayAttachment = Nothing
    }


-- | The state of the prefix list reference.
tgplrState :: Lens' TransitGatewayPrefixListReference (Maybe TransitGatewayPrefixListReferenceState)
tgplrState = lens _tgplrState (\ s a -> s{_tgplrState = a})

-- | The ID of the transit gateway route table.
tgplrTransitGatewayRouteTableId :: Lens' TransitGatewayPrefixListReference (Maybe Text)
tgplrTransitGatewayRouteTableId = lens _tgplrTransitGatewayRouteTableId (\ s a -> s{_tgplrTransitGatewayRouteTableId = a})

-- | The ID of the prefix list owner.
tgplrPrefixListOwnerId :: Lens' TransitGatewayPrefixListReference (Maybe Text)
tgplrPrefixListOwnerId = lens _tgplrPrefixListOwnerId (\ s a -> s{_tgplrPrefixListOwnerId = a})

-- | Indicates whether traffic that matches this route is dropped.
tgplrBlackhole :: Lens' TransitGatewayPrefixListReference (Maybe Bool)
tgplrBlackhole = lens _tgplrBlackhole (\ s a -> s{_tgplrBlackhole = a})

-- | The ID of the prefix list.
tgplrPrefixListId :: Lens' TransitGatewayPrefixListReference (Maybe Text)
tgplrPrefixListId = lens _tgplrPrefixListId (\ s a -> s{_tgplrPrefixListId = a})

-- | Information about the transit gateway attachment.
tgplrTransitGatewayAttachment :: Lens' TransitGatewayPrefixListReference (Maybe TransitGatewayPrefixListAttachment)
tgplrTransitGatewayAttachment = lens _tgplrTransitGatewayAttachment (\ s a -> s{_tgplrTransitGatewayAttachment = a})

instance FromXML TransitGatewayPrefixListReference
         where
        parseXML x
          = TransitGatewayPrefixListReference' <$>
              (x .@? "state") <*>
                (x .@? "transitGatewayRouteTableId")
                <*> (x .@? "prefixListOwnerId")
                <*> (x .@? "blackhole")
                <*> (x .@? "prefixListId")
                <*> (x .@? "transitGatewayAttachment")

instance Hashable TransitGatewayPrefixListReference
         where

instance NFData TransitGatewayPrefixListReference
         where

-- | Describes route propagation.
--
--
--
-- /See:/ 'transitGatewayPropagation' smart constructor.
data TransitGatewayPropagation = TransitGatewayPropagation'
  { _tgpState :: !(Maybe TransitGatewayPropagationState)
  , _tgpResourceId :: !(Maybe Text)
  , _tgpResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _tgpTransitGatewayRouteTableId :: !(Maybe Text)
  , _tgpTransitGatewayAttachmentId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayPropagation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgpState' - The state.
--
-- * 'tgpResourceId' - The ID of the resource.
--
-- * 'tgpResourceType' - The resource type. Note that the @tgw-peering@ resource type has been deprecated.
--
-- * 'tgpTransitGatewayRouteTableId' - The ID of the transit gateway route table.
--
-- * 'tgpTransitGatewayAttachmentId' - The ID of the attachment.
transitGatewayPropagation
    :: TransitGatewayPropagation
transitGatewayPropagation =
  TransitGatewayPropagation'
    { _tgpState = Nothing
    , _tgpResourceId = Nothing
    , _tgpResourceType = Nothing
    , _tgpTransitGatewayRouteTableId = Nothing
    , _tgpTransitGatewayAttachmentId = Nothing
    }


-- | The state.
tgpState :: Lens' TransitGatewayPropagation (Maybe TransitGatewayPropagationState)
tgpState = lens _tgpState (\ s a -> s{_tgpState = a})

-- | The ID of the resource.
tgpResourceId :: Lens' TransitGatewayPropagation (Maybe Text)
tgpResourceId = lens _tgpResourceId (\ s a -> s{_tgpResourceId = a})

-- | The resource type. Note that the @tgw-peering@ resource type has been deprecated.
tgpResourceType :: Lens' TransitGatewayPropagation (Maybe TransitGatewayAttachmentResourceType)
tgpResourceType = lens _tgpResourceType (\ s a -> s{_tgpResourceType = a})

-- | The ID of the transit gateway route table.
tgpTransitGatewayRouteTableId :: Lens' TransitGatewayPropagation (Maybe Text)
tgpTransitGatewayRouteTableId = lens _tgpTransitGatewayRouteTableId (\ s a -> s{_tgpTransitGatewayRouteTableId = a})

-- | The ID of the attachment.
tgpTransitGatewayAttachmentId :: Lens' TransitGatewayPropagation (Maybe Text)
tgpTransitGatewayAttachmentId = lens _tgpTransitGatewayAttachmentId (\ s a -> s{_tgpTransitGatewayAttachmentId = a})

instance FromXML TransitGatewayPropagation where
        parseXML x
          = TransitGatewayPropagation' <$>
              (x .@? "state") <*> (x .@? "resourceId") <*>
                (x .@? "resourceType")
                <*> (x .@? "transitGatewayRouteTableId")
                <*> (x .@? "transitGatewayAttachmentId")

instance Hashable TransitGatewayPropagation where

instance NFData TransitGatewayPropagation where

-- | Describes the options for a transit gateway.
--
--
--
-- /See:/ 'transitGatewayRequestOptions' smart constructor.
data TransitGatewayRequestOptions = TransitGatewayRequestOptions'
  { _tgroVPNEcmpSupport :: !(Maybe VPNEcmpSupportValue)
  , _tgroAutoAcceptSharedAttachments :: !(Maybe AutoAcceptSharedAttachmentsValue)
  , _tgroDefaultRouteTableAssociation :: !(Maybe DefaultRouteTableAssociationValue)
  , _tgroAmazonSideASN :: !(Maybe Integer)
  , _tgroDefaultRouteTablePropagation :: !(Maybe DefaultRouteTablePropagationValue)
  , _tgroMulticastSupport :: !(Maybe MulticastSupportValue)
  , _tgroDNSSupport :: !(Maybe DNSSupportValue)
  , _tgroTransitGatewayCidrBlocks :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayRequestOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgroVPNEcmpSupport' - Enable or disable Equal Cost Multipath Protocol support. Enabled by default.
--
-- * 'tgroAutoAcceptSharedAttachments' - Enable or disable automatic acceptance of attachment requests. Disabled by default.
--
-- * 'tgroDefaultRouteTableAssociation' - Enable or disable automatic association with the default association route table. Enabled by default.
--
-- * 'tgroAmazonSideASN' - A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs. The default is @64512@ .
--
-- * 'tgroDefaultRouteTablePropagation' - Enable or disable automatic propagation of routes to the default propagation route table. Enabled by default.
--
-- * 'tgroMulticastSupport' - Indicates whether multicast is enabled on the transit gateway
--
-- * 'tgroDNSSupport' - Enable or disable DNS support. Enabled by default.
--
-- * 'tgroTransitGatewayCidrBlocks' - One or more IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
transitGatewayRequestOptions
    :: TransitGatewayRequestOptions
transitGatewayRequestOptions =
  TransitGatewayRequestOptions'
    { _tgroVPNEcmpSupport = Nothing
    , _tgroAutoAcceptSharedAttachments = Nothing
    , _tgroDefaultRouteTableAssociation = Nothing
    , _tgroAmazonSideASN = Nothing
    , _tgroDefaultRouteTablePropagation = Nothing
    , _tgroMulticastSupport = Nothing
    , _tgroDNSSupport = Nothing
    , _tgroTransitGatewayCidrBlocks = Nothing
    }


-- | Enable or disable Equal Cost Multipath Protocol support. Enabled by default.
tgroVPNEcmpSupport :: Lens' TransitGatewayRequestOptions (Maybe VPNEcmpSupportValue)
tgroVPNEcmpSupport = lens _tgroVPNEcmpSupport (\ s a -> s{_tgroVPNEcmpSupport = a})

-- | Enable or disable automatic acceptance of attachment requests. Disabled by default.
tgroAutoAcceptSharedAttachments :: Lens' TransitGatewayRequestOptions (Maybe AutoAcceptSharedAttachmentsValue)
tgroAutoAcceptSharedAttachments = lens _tgroAutoAcceptSharedAttachments (\ s a -> s{_tgroAutoAcceptSharedAttachments = a})

-- | Enable or disable automatic association with the default association route table. Enabled by default.
tgroDefaultRouteTableAssociation :: Lens' TransitGatewayRequestOptions (Maybe DefaultRouteTableAssociationValue)
tgroDefaultRouteTableAssociation = lens _tgroDefaultRouteTableAssociation (\ s a -> s{_tgroDefaultRouteTableAssociation = a})

-- | A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs. The default is @64512@ .
tgroAmazonSideASN :: Lens' TransitGatewayRequestOptions (Maybe Integer)
tgroAmazonSideASN = lens _tgroAmazonSideASN (\ s a -> s{_tgroAmazonSideASN = a})

-- | Enable or disable automatic propagation of routes to the default propagation route table. Enabled by default.
tgroDefaultRouteTablePropagation :: Lens' TransitGatewayRequestOptions (Maybe DefaultRouteTablePropagationValue)
tgroDefaultRouteTablePropagation = lens _tgroDefaultRouteTablePropagation (\ s a -> s{_tgroDefaultRouteTablePropagation = a})

-- | Indicates whether multicast is enabled on the transit gateway
tgroMulticastSupport :: Lens' TransitGatewayRequestOptions (Maybe MulticastSupportValue)
tgroMulticastSupport = lens _tgroMulticastSupport (\ s a -> s{_tgroMulticastSupport = a})

-- | Enable or disable DNS support. Enabled by default.
tgroDNSSupport :: Lens' TransitGatewayRequestOptions (Maybe DNSSupportValue)
tgroDNSSupport = lens _tgroDNSSupport (\ s a -> s{_tgroDNSSupport = a})

-- | One or more IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
tgroTransitGatewayCidrBlocks :: Lens' TransitGatewayRequestOptions [Text]
tgroTransitGatewayCidrBlocks = lens _tgroTransitGatewayCidrBlocks (\ s a -> s{_tgroTransitGatewayCidrBlocks = a}) . _Default . _Coerce

instance Hashable TransitGatewayRequestOptions where

instance NFData TransitGatewayRequestOptions where

instance ToQuery TransitGatewayRequestOptions where
        toQuery TransitGatewayRequestOptions'{..}
          = mconcat
              ["VpnEcmpSupport" =: _tgroVPNEcmpSupport,
               "AutoAcceptSharedAttachments" =:
                 _tgroAutoAcceptSharedAttachments,
               "DefaultRouteTableAssociation" =:
                 _tgroDefaultRouteTableAssociation,
               "AmazonSideAsn" =: _tgroAmazonSideASN,
               "DefaultRouteTablePropagation" =:
                 _tgroDefaultRouteTablePropagation,
               "MulticastSupport" =: _tgroMulticastSupport,
               "DnsSupport" =: _tgroDNSSupport,
               toQuery
                 (toQueryList "TransitGatewayCidrBlocks" <$>
                    _tgroTransitGatewayCidrBlocks)]

-- | Describes a route for a transit gateway route table.
--
--
--
-- /See:/ 'transitGatewayRoute' smart constructor.
data TransitGatewayRoute = TransitGatewayRoute'
  { _tgrState                     :: !(Maybe TransitGatewayRouteState)
  , _tgrPrefixListId              :: !(Maybe Text)
  , _tgrTransitGatewayAttachments :: !(Maybe [TransitGatewayRouteAttachment])
  , _tgrType                      :: !(Maybe TransitGatewayRouteType)
  , _tgrDestinationCidrBlock      :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayRoute' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgrState' - The state of the route.
--
-- * 'tgrPrefixListId' - The ID of the prefix list used for destination matches.
--
-- * 'tgrTransitGatewayAttachments' - The attachments.
--
-- * 'tgrType' - The route type.
--
-- * 'tgrDestinationCidrBlock' - The CIDR block used for destination matches.
transitGatewayRoute
    :: TransitGatewayRoute
transitGatewayRoute =
  TransitGatewayRoute'
    { _tgrState = Nothing
    , _tgrPrefixListId = Nothing
    , _tgrTransitGatewayAttachments = Nothing
    , _tgrType = Nothing
    , _tgrDestinationCidrBlock = Nothing
    }


-- | The state of the route.
tgrState :: Lens' TransitGatewayRoute (Maybe TransitGatewayRouteState)
tgrState = lens _tgrState (\ s a -> s{_tgrState = a})

-- | The ID of the prefix list used for destination matches.
tgrPrefixListId :: Lens' TransitGatewayRoute (Maybe Text)
tgrPrefixListId = lens _tgrPrefixListId (\ s a -> s{_tgrPrefixListId = a})

-- | The attachments.
tgrTransitGatewayAttachments :: Lens' TransitGatewayRoute [TransitGatewayRouteAttachment]
tgrTransitGatewayAttachments = lens _tgrTransitGatewayAttachments (\ s a -> s{_tgrTransitGatewayAttachments = a}) . _Default . _Coerce

-- | The route type.
tgrType :: Lens' TransitGatewayRoute (Maybe TransitGatewayRouteType)
tgrType = lens _tgrType (\ s a -> s{_tgrType = a})

-- | The CIDR block used for destination matches.
tgrDestinationCidrBlock :: Lens' TransitGatewayRoute (Maybe Text)
tgrDestinationCidrBlock = lens _tgrDestinationCidrBlock (\ s a -> s{_tgrDestinationCidrBlock = a})

instance FromXML TransitGatewayRoute where
        parseXML x
          = TransitGatewayRoute' <$>
              (x .@? "state") <*> (x .@? "prefixListId") <*>
                (x .@? "transitGatewayAttachments" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "type")
                <*> (x .@? "destinationCidrBlock")

instance Hashable TransitGatewayRoute where

instance NFData TransitGatewayRoute where

-- | Describes a route attachment.
--
--
--
-- /See:/ 'transitGatewayRouteAttachment' smart constructor.
data TransitGatewayRouteAttachment = TransitGatewayRouteAttachment'
  { _tgraResourceId :: !(Maybe Text)
  , _tgraResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _tgraTransitGatewayAttachmentId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayRouteAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgraResourceId' - The ID of the resource.
--
-- * 'tgraResourceType' - The resource type. Note that the @tgw-peering@ resource type has been deprecated.
--
-- * 'tgraTransitGatewayAttachmentId' - The ID of the attachment.
transitGatewayRouteAttachment
    :: TransitGatewayRouteAttachment
transitGatewayRouteAttachment =
  TransitGatewayRouteAttachment'
    { _tgraResourceId = Nothing
    , _tgraResourceType = Nothing
    , _tgraTransitGatewayAttachmentId = Nothing
    }


-- | The ID of the resource.
tgraResourceId :: Lens' TransitGatewayRouteAttachment (Maybe Text)
tgraResourceId = lens _tgraResourceId (\ s a -> s{_tgraResourceId = a})

-- | The resource type. Note that the @tgw-peering@ resource type has been deprecated.
tgraResourceType :: Lens' TransitGatewayRouteAttachment (Maybe TransitGatewayAttachmentResourceType)
tgraResourceType = lens _tgraResourceType (\ s a -> s{_tgraResourceType = a})

-- | The ID of the attachment.
tgraTransitGatewayAttachmentId :: Lens' TransitGatewayRouteAttachment (Maybe Text)
tgraTransitGatewayAttachmentId = lens _tgraTransitGatewayAttachmentId (\ s a -> s{_tgraTransitGatewayAttachmentId = a})

instance FromXML TransitGatewayRouteAttachment where
        parseXML x
          = TransitGatewayRouteAttachment' <$>
              (x .@? "resourceId") <*> (x .@? "resourceType") <*>
                (x .@? "transitGatewayAttachmentId")

instance Hashable TransitGatewayRouteAttachment where

instance NFData TransitGatewayRouteAttachment where

-- | Describes a transit gateway route table.
--
--
--
-- /See:/ 'transitGatewayRouteTable' smart constructor.
data TransitGatewayRouteTable = TransitGatewayRouteTable'
  { _tgrtCreationTime                 :: !(Maybe ISO8601)
  , _tgrtState                        :: !(Maybe TransitGatewayRouteTableState)
  , _tgrtDefaultPropagationRouteTable :: !(Maybe Bool)
  , _tgrtTransitGatewayRouteTableId   :: !(Maybe Text)
  , _tgrtTransitGatewayId             :: !(Maybe Text)
  , _tgrtDefaultAssociationRouteTable :: !(Maybe Bool)
  , _tgrtTags                         :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayRouteTable' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgrtCreationTime' - The creation time.
--
-- * 'tgrtState' - The state of the transit gateway route table.
--
-- * 'tgrtDefaultPropagationRouteTable' - Indicates whether this is the default propagation route table for the transit gateway.
--
-- * 'tgrtTransitGatewayRouteTableId' - The ID of the transit gateway route table.
--
-- * 'tgrtTransitGatewayId' - The ID of the transit gateway.
--
-- * 'tgrtDefaultAssociationRouteTable' - Indicates whether this is the default association route table for the transit gateway.
--
-- * 'tgrtTags' - Any tags assigned to the route table.
transitGatewayRouteTable
    :: TransitGatewayRouteTable
transitGatewayRouteTable =
  TransitGatewayRouteTable'
    { _tgrtCreationTime = Nothing
    , _tgrtState = Nothing
    , _tgrtDefaultPropagationRouteTable = Nothing
    , _tgrtTransitGatewayRouteTableId = Nothing
    , _tgrtTransitGatewayId = Nothing
    , _tgrtDefaultAssociationRouteTable = Nothing
    , _tgrtTags = Nothing
    }


-- | The creation time.
tgrtCreationTime :: Lens' TransitGatewayRouteTable (Maybe UTCTime)
tgrtCreationTime = lens _tgrtCreationTime (\ s a -> s{_tgrtCreationTime = a}) . mapping _Time

-- | The state of the transit gateway route table.
tgrtState :: Lens' TransitGatewayRouteTable (Maybe TransitGatewayRouteTableState)
tgrtState = lens _tgrtState (\ s a -> s{_tgrtState = a})

-- | Indicates whether this is the default propagation route table for the transit gateway.
tgrtDefaultPropagationRouteTable :: Lens' TransitGatewayRouteTable (Maybe Bool)
tgrtDefaultPropagationRouteTable = lens _tgrtDefaultPropagationRouteTable (\ s a -> s{_tgrtDefaultPropagationRouteTable = a})

-- | The ID of the transit gateway route table.
tgrtTransitGatewayRouteTableId :: Lens' TransitGatewayRouteTable (Maybe Text)
tgrtTransitGatewayRouteTableId = lens _tgrtTransitGatewayRouteTableId (\ s a -> s{_tgrtTransitGatewayRouteTableId = a})

-- | The ID of the transit gateway.
tgrtTransitGatewayId :: Lens' TransitGatewayRouteTable (Maybe Text)
tgrtTransitGatewayId = lens _tgrtTransitGatewayId (\ s a -> s{_tgrtTransitGatewayId = a})

-- | Indicates whether this is the default association route table for the transit gateway.
tgrtDefaultAssociationRouteTable :: Lens' TransitGatewayRouteTable (Maybe Bool)
tgrtDefaultAssociationRouteTable = lens _tgrtDefaultAssociationRouteTable (\ s a -> s{_tgrtDefaultAssociationRouteTable = a})

-- | Any tags assigned to the route table.
tgrtTags :: Lens' TransitGatewayRouteTable [Tag]
tgrtTags = lens _tgrtTags (\ s a -> s{_tgrtTags = a}) . _Default . _Coerce

instance FromXML TransitGatewayRouteTable where
        parseXML x
          = TransitGatewayRouteTable' <$>
              (x .@? "creationTime") <*> (x .@? "state") <*>
                (x .@? "defaultPropagationRouteTable")
                <*> (x .@? "transitGatewayRouteTableId")
                <*> (x .@? "transitGatewayId")
                <*> (x .@? "defaultAssociationRouteTable")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable TransitGatewayRouteTable where

instance NFData TransitGatewayRouteTable where

-- | Describes an association between a route table and a resource attachment.
--
--
--
-- /See:/ 'transitGatewayRouteTableAssociation' smart constructor.
data TransitGatewayRouteTableAssociation = TransitGatewayRouteTableAssociation'
  { _tgrtaState :: !(Maybe TransitGatewayAssociationState)
  , _tgrtaResourceId :: !(Maybe Text)
  , _tgrtaResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _tgrtaTransitGatewayAttachmentId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayRouteTableAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgrtaState' - The state of the association.
--
-- * 'tgrtaResourceId' - The ID of the resource.
--
-- * 'tgrtaResourceType' - The resource type. Note that the @tgw-peering@ resource type has been deprecated.
--
-- * 'tgrtaTransitGatewayAttachmentId' - The ID of the attachment.
transitGatewayRouteTableAssociation
    :: TransitGatewayRouteTableAssociation
transitGatewayRouteTableAssociation =
  TransitGatewayRouteTableAssociation'
    { _tgrtaState = Nothing
    , _tgrtaResourceId = Nothing
    , _tgrtaResourceType = Nothing
    , _tgrtaTransitGatewayAttachmentId = Nothing
    }


-- | The state of the association.
tgrtaState :: Lens' TransitGatewayRouteTableAssociation (Maybe TransitGatewayAssociationState)
tgrtaState = lens _tgrtaState (\ s a -> s{_tgrtaState = a})

-- | The ID of the resource.
tgrtaResourceId :: Lens' TransitGatewayRouteTableAssociation (Maybe Text)
tgrtaResourceId = lens _tgrtaResourceId (\ s a -> s{_tgrtaResourceId = a})

-- | The resource type. Note that the @tgw-peering@ resource type has been deprecated.
tgrtaResourceType :: Lens' TransitGatewayRouteTableAssociation (Maybe TransitGatewayAttachmentResourceType)
tgrtaResourceType = lens _tgrtaResourceType (\ s a -> s{_tgrtaResourceType = a})

-- | The ID of the attachment.
tgrtaTransitGatewayAttachmentId :: Lens' TransitGatewayRouteTableAssociation (Maybe Text)
tgrtaTransitGatewayAttachmentId = lens _tgrtaTransitGatewayAttachmentId (\ s a -> s{_tgrtaTransitGatewayAttachmentId = a})

instance FromXML TransitGatewayRouteTableAssociation
         where
        parseXML x
          = TransitGatewayRouteTableAssociation' <$>
              (x .@? "state") <*> (x .@? "resourceId") <*>
                (x .@? "resourceType")
                <*> (x .@? "transitGatewayAttachmentId")

instance Hashable TransitGatewayRouteTableAssociation
         where

instance NFData TransitGatewayRouteTableAssociation
         where

-- | Describes a route table propagation.
--
--
--
-- /See:/ 'transitGatewayRouteTablePropagation' smart constructor.
data TransitGatewayRouteTablePropagation = TransitGatewayRouteTablePropagation'
  { _tgrtpState :: !(Maybe TransitGatewayPropagationState)
  , _tgrtpResourceId :: !(Maybe Text)
  , _tgrtpResourceType :: !(Maybe TransitGatewayAttachmentResourceType)
  , _tgrtpTransitGatewayAttachmentId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayRouteTablePropagation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgrtpState' - The state of the resource.
--
-- * 'tgrtpResourceId' - The ID of the resource.
--
-- * 'tgrtpResourceType' - The type of resource. Note that the @tgw-peering@ resource type has been deprecated.
--
-- * 'tgrtpTransitGatewayAttachmentId' - The ID of the attachment.
transitGatewayRouteTablePropagation
    :: TransitGatewayRouteTablePropagation
transitGatewayRouteTablePropagation =
  TransitGatewayRouteTablePropagation'
    { _tgrtpState = Nothing
    , _tgrtpResourceId = Nothing
    , _tgrtpResourceType = Nothing
    , _tgrtpTransitGatewayAttachmentId = Nothing
    }


-- | The state of the resource.
tgrtpState :: Lens' TransitGatewayRouteTablePropagation (Maybe TransitGatewayPropagationState)
tgrtpState = lens _tgrtpState (\ s a -> s{_tgrtpState = a})

-- | The ID of the resource.
tgrtpResourceId :: Lens' TransitGatewayRouteTablePropagation (Maybe Text)
tgrtpResourceId = lens _tgrtpResourceId (\ s a -> s{_tgrtpResourceId = a})

-- | The type of resource. Note that the @tgw-peering@ resource type has been deprecated.
tgrtpResourceType :: Lens' TransitGatewayRouteTablePropagation (Maybe TransitGatewayAttachmentResourceType)
tgrtpResourceType = lens _tgrtpResourceType (\ s a -> s{_tgrtpResourceType = a})

-- | The ID of the attachment.
tgrtpTransitGatewayAttachmentId :: Lens' TransitGatewayRouteTablePropagation (Maybe Text)
tgrtpTransitGatewayAttachmentId = lens _tgrtpTransitGatewayAttachmentId (\ s a -> s{_tgrtpTransitGatewayAttachmentId = a})

instance FromXML TransitGatewayRouteTablePropagation
         where
        parseXML x
          = TransitGatewayRouteTablePropagation' <$>
              (x .@? "state") <*> (x .@? "resourceId") <*>
                (x .@? "resourceType")
                <*> (x .@? "transitGatewayAttachmentId")

instance Hashable TransitGatewayRouteTablePropagation
         where

instance NFData TransitGatewayRouteTablePropagation
         where

-- | Describes a VPC attachment.
--
--
--
-- /See:/ 'transitGatewayVPCAttachment' smart constructor.
data TransitGatewayVPCAttachment = TransitGatewayVPCAttachment'
  { _tgvaCreationTime :: !(Maybe ISO8601)
  , _tgvaState :: !(Maybe TransitGatewayAttachmentState)
  , _tgvaSubnetIds :: !(Maybe [Text])
  , _tgvaVPCId :: !(Maybe Text)
  , _tgvaTransitGatewayId :: !(Maybe Text)
  , _tgvaOptions :: !(Maybe TransitGatewayVPCAttachmentOptions)
  , _tgvaTransitGatewayAttachmentId :: !(Maybe Text)
  , _tgvaTags :: !(Maybe [Tag])
  , _tgvaVPCOwnerId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayVPCAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgvaCreationTime' - The creation time.
--
-- * 'tgvaState' - The state of the VPC attachment. Note that the @initiating@ state has been deprecated.
--
-- * 'tgvaSubnetIds' - The IDs of the subnets.
--
-- * 'tgvaVPCId' - The ID of the VPC.
--
-- * 'tgvaTransitGatewayId' - The ID of the transit gateway.
--
-- * 'tgvaOptions' - The VPC attachment options.
--
-- * 'tgvaTransitGatewayAttachmentId' - The ID of the attachment.
--
-- * 'tgvaTags' - The tags for the VPC attachment.
--
-- * 'tgvaVPCOwnerId' - The ID of the AWS account that owns the VPC.
transitGatewayVPCAttachment
    :: TransitGatewayVPCAttachment
transitGatewayVPCAttachment =
  TransitGatewayVPCAttachment'
    { _tgvaCreationTime = Nothing
    , _tgvaState = Nothing
    , _tgvaSubnetIds = Nothing
    , _tgvaVPCId = Nothing
    , _tgvaTransitGatewayId = Nothing
    , _tgvaOptions = Nothing
    , _tgvaTransitGatewayAttachmentId = Nothing
    , _tgvaTags = Nothing
    , _tgvaVPCOwnerId = Nothing
    }


-- | The creation time.
tgvaCreationTime :: Lens' TransitGatewayVPCAttachment (Maybe UTCTime)
tgvaCreationTime = lens _tgvaCreationTime (\ s a -> s{_tgvaCreationTime = a}) . mapping _Time

-- | The state of the VPC attachment. Note that the @initiating@ state has been deprecated.
tgvaState :: Lens' TransitGatewayVPCAttachment (Maybe TransitGatewayAttachmentState)
tgvaState = lens _tgvaState (\ s a -> s{_tgvaState = a})

-- | The IDs of the subnets.
tgvaSubnetIds :: Lens' TransitGatewayVPCAttachment [Text]
tgvaSubnetIds = lens _tgvaSubnetIds (\ s a -> s{_tgvaSubnetIds = a}) . _Default . _Coerce

-- | The ID of the VPC.
tgvaVPCId :: Lens' TransitGatewayVPCAttachment (Maybe Text)
tgvaVPCId = lens _tgvaVPCId (\ s a -> s{_tgvaVPCId = a})

-- | The ID of the transit gateway.
tgvaTransitGatewayId :: Lens' TransitGatewayVPCAttachment (Maybe Text)
tgvaTransitGatewayId = lens _tgvaTransitGatewayId (\ s a -> s{_tgvaTransitGatewayId = a})

-- | The VPC attachment options.
tgvaOptions :: Lens' TransitGatewayVPCAttachment (Maybe TransitGatewayVPCAttachmentOptions)
tgvaOptions = lens _tgvaOptions (\ s a -> s{_tgvaOptions = a})

-- | The ID of the attachment.
tgvaTransitGatewayAttachmentId :: Lens' TransitGatewayVPCAttachment (Maybe Text)
tgvaTransitGatewayAttachmentId = lens _tgvaTransitGatewayAttachmentId (\ s a -> s{_tgvaTransitGatewayAttachmentId = a})

-- | The tags for the VPC attachment.
tgvaTags :: Lens' TransitGatewayVPCAttachment [Tag]
tgvaTags = lens _tgvaTags (\ s a -> s{_tgvaTags = a}) . _Default . _Coerce

-- | The ID of the AWS account that owns the VPC.
tgvaVPCOwnerId :: Lens' TransitGatewayVPCAttachment (Maybe Text)
tgvaVPCOwnerId = lens _tgvaVPCOwnerId (\ s a -> s{_tgvaVPCOwnerId = a})

instance FromXML TransitGatewayVPCAttachment where
        parseXML x
          = TransitGatewayVPCAttachment' <$>
              (x .@? "creationTime") <*> (x .@? "state") <*>
                (x .@? "subnetIds" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpcId")
                <*> (x .@? "transitGatewayId")
                <*> (x .@? "options")
                <*> (x .@? "transitGatewayAttachmentId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpcOwnerId")

instance Hashable TransitGatewayVPCAttachment where

instance NFData TransitGatewayVPCAttachment where

-- | Describes the VPC attachment options.
--
--
--
-- /See:/ 'transitGatewayVPCAttachmentOptions' smart constructor.
data TransitGatewayVPCAttachmentOptions = TransitGatewayVPCAttachmentOptions'
  { _tgvaoIPv6Support          :: !(Maybe IPv6SupportValue)
  , _tgvaoApplianceModeSupport :: !(Maybe ApplianceModeSupportValue)
  , _tgvaoDNSSupport           :: !(Maybe DNSSupportValue)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TransitGatewayVPCAttachmentOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'tgvaoIPv6Support' - Indicates whether IPv6 support is disabled.
--
-- * 'tgvaoApplianceModeSupport' - Indicates whether appliance mode support is enabled.
--
-- * 'tgvaoDNSSupport' - Indicates whether DNS support is enabled.
transitGatewayVPCAttachmentOptions
    :: TransitGatewayVPCAttachmentOptions
transitGatewayVPCAttachmentOptions =
  TransitGatewayVPCAttachmentOptions'
    { _tgvaoIPv6Support = Nothing
    , _tgvaoApplianceModeSupport = Nothing
    , _tgvaoDNSSupport = Nothing
    }


-- | Indicates whether IPv6 support is disabled.
tgvaoIPv6Support :: Lens' TransitGatewayVPCAttachmentOptions (Maybe IPv6SupportValue)
tgvaoIPv6Support = lens _tgvaoIPv6Support (\ s a -> s{_tgvaoIPv6Support = a})

-- | Indicates whether appliance mode support is enabled.
tgvaoApplianceModeSupport :: Lens' TransitGatewayVPCAttachmentOptions (Maybe ApplianceModeSupportValue)
tgvaoApplianceModeSupport = lens _tgvaoApplianceModeSupport (\ s a -> s{_tgvaoApplianceModeSupport = a})

-- | Indicates whether DNS support is enabled.
tgvaoDNSSupport :: Lens' TransitGatewayVPCAttachmentOptions (Maybe DNSSupportValue)
tgvaoDNSSupport = lens _tgvaoDNSSupport (\ s a -> s{_tgvaoDNSSupport = a})

instance FromXML TransitGatewayVPCAttachmentOptions
         where
        parseXML x
          = TransitGatewayVPCAttachmentOptions' <$>
              (x .@? "ipv6Support") <*>
                (x .@? "applianceModeSupport")
                <*> (x .@? "dnsSupport")

instance Hashable TransitGatewayVPCAttachmentOptions
         where

instance NFData TransitGatewayVPCAttachmentOptions
         where

-- | The VPN tunnel options.
--
--
--
-- /See:/ 'tunnelOption' smart constructor.
data TunnelOption = TunnelOption'
  { _toOutsideIPAddress :: !(Maybe Text)
  , _toReplayWindowSize :: !(Maybe Int)
  , _toDpdTimeoutAction :: !(Maybe Text)
  , _toRekeyFuzzPercentage :: !(Maybe Int)
  , _toPhase1LifetimeSeconds :: !(Maybe Int)
  , _toIkeVersions :: !(Maybe [IKEVersionsListValue])
  , _toPhase2IntegrityAlgorithms :: !(Maybe [Phase2IntegrityAlgorithmsListValue])
  , _toPhase2LifetimeSeconds :: !(Maybe Int)
  , _toPhase1EncryptionAlgorithms :: !(Maybe [Phase1EncryptionAlgorithmsListValue])
  , _toPhase1DHGroupNumbers :: !(Maybe [Phase1DHGroupNumbersListValue])
  , _toPhase1IntegrityAlgorithms :: !(Maybe [Phase1IntegrityAlgorithmsListValue])
  , _toRekeyMarginTimeSeconds :: !(Maybe Int)
  , _toDpdTimeoutSeconds :: !(Maybe Int)
  , _toTunnelInsideCidr :: !(Maybe Text)
  , _toStartupAction :: !(Maybe Text)
  , _toPhase2EncryptionAlgorithms :: !(Maybe [Phase2EncryptionAlgorithmsListValue])
  , _toPhase2DHGroupNumbers :: !(Maybe [Phase2DHGroupNumbersListValue])
  , _toPreSharedKey :: !(Maybe Text)
  , _toTunnelInsideIPv6Cidr :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'TunnelOption' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'toOutsideIPAddress' - The external IP address of the VPN tunnel.
--
-- * 'toReplayWindowSize' - The number of packets in an IKE replay window.
--
-- * 'toDpdTimeoutAction' - The action to take after a DPD timeout occurs.
--
-- * 'toRekeyFuzzPercentage' - The percentage of the rekey window determined by @RekeyMarginTimeSeconds@ during which the rekey time is randomly selected.
--
-- * 'toPhase1LifetimeSeconds' - The lifetime for phase 1 of the IKE negotiation, in seconds.
--
-- * 'toIkeVersions' - The IKE versions that are permitted for the VPN tunnel.
--
-- * 'toPhase2IntegrityAlgorithms' - The permitted integrity algorithms for the VPN tunnel for phase 2 IKE negotiations.
--
-- * 'toPhase2LifetimeSeconds' - The lifetime for phase 2 of the IKE negotiation, in seconds.
--
-- * 'toPhase1EncryptionAlgorithms' - The permitted encryption algorithms for the VPN tunnel for phase 1 IKE negotiations.
--
-- * 'toPhase1DHGroupNumbers' - The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1 IKE negotiations.
--
-- * 'toPhase1IntegrityAlgorithms' - The permitted integrity algorithms for the VPN tunnel for phase 1 IKE negotiations.
--
-- * 'toRekeyMarginTimeSeconds' - The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey.
--
-- * 'toDpdTimeoutSeconds' - The number of seconds after which a DPD timeout occurs.
--
-- * 'toTunnelInsideCidr' - The range of inside IPv4 addresses for the tunnel.
--
-- * 'toStartupAction' - The action to take when the establishing the VPN tunnels for a VPN connection.
--
-- * 'toPhase2EncryptionAlgorithms' - The permitted encryption algorithms for the VPN tunnel for phase 2 IKE negotiations.
--
-- * 'toPhase2DHGroupNumbers' - The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2 IKE negotiations.
--
-- * 'toPreSharedKey' - The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway.
--
-- * 'toTunnelInsideIPv6Cidr' - The range of inside IPv6 addresses for the tunnel.
tunnelOption
    :: TunnelOption
tunnelOption =
  TunnelOption'
    { _toOutsideIPAddress = Nothing
    , _toReplayWindowSize = Nothing
    , _toDpdTimeoutAction = Nothing
    , _toRekeyFuzzPercentage = Nothing
    , _toPhase1LifetimeSeconds = Nothing
    , _toIkeVersions = Nothing
    , _toPhase2IntegrityAlgorithms = Nothing
    , _toPhase2LifetimeSeconds = Nothing
    , _toPhase1EncryptionAlgorithms = Nothing
    , _toPhase1DHGroupNumbers = Nothing
    , _toPhase1IntegrityAlgorithms = Nothing
    , _toRekeyMarginTimeSeconds = Nothing
    , _toDpdTimeoutSeconds = Nothing
    , _toTunnelInsideCidr = Nothing
    , _toStartupAction = Nothing
    , _toPhase2EncryptionAlgorithms = Nothing
    , _toPhase2DHGroupNumbers = Nothing
    , _toPreSharedKey = Nothing
    , _toTunnelInsideIPv6Cidr = Nothing
    }


-- | The external IP address of the VPN tunnel.
toOutsideIPAddress :: Lens' TunnelOption (Maybe Text)
toOutsideIPAddress = lens _toOutsideIPAddress (\ s a -> s{_toOutsideIPAddress = a})

-- | The number of packets in an IKE replay window.
toReplayWindowSize :: Lens' TunnelOption (Maybe Int)
toReplayWindowSize = lens _toReplayWindowSize (\ s a -> s{_toReplayWindowSize = a})

-- | The action to take after a DPD timeout occurs.
toDpdTimeoutAction :: Lens' TunnelOption (Maybe Text)
toDpdTimeoutAction = lens _toDpdTimeoutAction (\ s a -> s{_toDpdTimeoutAction = a})

-- | The percentage of the rekey window determined by @RekeyMarginTimeSeconds@ during which the rekey time is randomly selected.
toRekeyFuzzPercentage :: Lens' TunnelOption (Maybe Int)
toRekeyFuzzPercentage = lens _toRekeyFuzzPercentage (\ s a -> s{_toRekeyFuzzPercentage = a})

-- | The lifetime for phase 1 of the IKE negotiation, in seconds.
toPhase1LifetimeSeconds :: Lens' TunnelOption (Maybe Int)
toPhase1LifetimeSeconds = lens _toPhase1LifetimeSeconds (\ s a -> s{_toPhase1LifetimeSeconds = a})

-- | The IKE versions that are permitted for the VPN tunnel.
toIkeVersions :: Lens' TunnelOption [IKEVersionsListValue]
toIkeVersions = lens _toIkeVersions (\ s a -> s{_toIkeVersions = a}) . _Default . _Coerce

-- | The permitted integrity algorithms for the VPN tunnel for phase 2 IKE negotiations.
toPhase2IntegrityAlgorithms :: Lens' TunnelOption [Phase2IntegrityAlgorithmsListValue]
toPhase2IntegrityAlgorithms = lens _toPhase2IntegrityAlgorithms (\ s a -> s{_toPhase2IntegrityAlgorithms = a}) . _Default . _Coerce

-- | The lifetime for phase 2 of the IKE negotiation, in seconds.
toPhase2LifetimeSeconds :: Lens' TunnelOption (Maybe Int)
toPhase2LifetimeSeconds = lens _toPhase2LifetimeSeconds (\ s a -> s{_toPhase2LifetimeSeconds = a})

-- | The permitted encryption algorithms for the VPN tunnel for phase 1 IKE negotiations.
toPhase1EncryptionAlgorithms :: Lens' TunnelOption [Phase1EncryptionAlgorithmsListValue]
toPhase1EncryptionAlgorithms = lens _toPhase1EncryptionAlgorithms (\ s a -> s{_toPhase1EncryptionAlgorithms = a}) . _Default . _Coerce

-- | The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1 IKE negotiations.
toPhase1DHGroupNumbers :: Lens' TunnelOption [Phase1DHGroupNumbersListValue]
toPhase1DHGroupNumbers = lens _toPhase1DHGroupNumbers (\ s a -> s{_toPhase1DHGroupNumbers = a}) . _Default . _Coerce

-- | The permitted integrity algorithms for the VPN tunnel for phase 1 IKE negotiations.
toPhase1IntegrityAlgorithms :: Lens' TunnelOption [Phase1IntegrityAlgorithmsListValue]
toPhase1IntegrityAlgorithms = lens _toPhase1IntegrityAlgorithms (\ s a -> s{_toPhase1IntegrityAlgorithms = a}) . _Default . _Coerce

-- | The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey.
toRekeyMarginTimeSeconds :: Lens' TunnelOption (Maybe Int)
toRekeyMarginTimeSeconds = lens _toRekeyMarginTimeSeconds (\ s a -> s{_toRekeyMarginTimeSeconds = a})

-- | The number of seconds after which a DPD timeout occurs.
toDpdTimeoutSeconds :: Lens' TunnelOption (Maybe Int)
toDpdTimeoutSeconds = lens _toDpdTimeoutSeconds (\ s a -> s{_toDpdTimeoutSeconds = a})

-- | The range of inside IPv4 addresses for the tunnel.
toTunnelInsideCidr :: Lens' TunnelOption (Maybe Text)
toTunnelInsideCidr = lens _toTunnelInsideCidr (\ s a -> s{_toTunnelInsideCidr = a})

-- | The action to take when the establishing the VPN tunnels for a VPN connection.
toStartupAction :: Lens' TunnelOption (Maybe Text)
toStartupAction = lens _toStartupAction (\ s a -> s{_toStartupAction = a})

-- | The permitted encryption algorithms for the VPN tunnel for phase 2 IKE negotiations.
toPhase2EncryptionAlgorithms :: Lens' TunnelOption [Phase2EncryptionAlgorithmsListValue]
toPhase2EncryptionAlgorithms = lens _toPhase2EncryptionAlgorithms (\ s a -> s{_toPhase2EncryptionAlgorithms = a}) . _Default . _Coerce

-- | The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2 IKE negotiations.
toPhase2DHGroupNumbers :: Lens' TunnelOption [Phase2DHGroupNumbersListValue]
toPhase2DHGroupNumbers = lens _toPhase2DHGroupNumbers (\ s a -> s{_toPhase2DHGroupNumbers = a}) . _Default . _Coerce

-- | The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway.
toPreSharedKey :: Lens' TunnelOption (Maybe Text)
toPreSharedKey = lens _toPreSharedKey (\ s a -> s{_toPreSharedKey = a})

-- | The range of inside IPv6 addresses for the tunnel.
toTunnelInsideIPv6Cidr :: Lens' TunnelOption (Maybe Text)
toTunnelInsideIPv6Cidr = lens _toTunnelInsideIPv6Cidr (\ s a -> s{_toTunnelInsideIPv6Cidr = a})

instance FromXML TunnelOption where
        parseXML x
          = TunnelOption' <$>
              (x .@? "outsideIpAddress") <*>
                (x .@? "replayWindowSize")
                <*> (x .@? "dpdTimeoutAction")
                <*> (x .@? "rekeyFuzzPercentage")
                <*> (x .@? "phase1LifetimeSeconds")
                <*>
                (x .@? "ikeVersionSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "phase2IntegrityAlgorithmSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "phase2LifetimeSeconds")
                <*>
                (x .@? "phase1EncryptionAlgorithmSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "phase1DHGroupNumberSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "phase1IntegrityAlgorithmSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "rekeyMarginTimeSeconds")
                <*> (x .@? "dpdTimeoutSeconds")
                <*> (x .@? "tunnelInsideCidr")
                <*> (x .@? "startupAction")
                <*>
                (x .@? "phase2EncryptionAlgorithmSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "phase2DHGroupNumberSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "preSharedKey")
                <*> (x .@? "tunnelInsideIpv6Cidr")

instance Hashable TunnelOption where

instance NFData TunnelOption where

-- | Describes the burstable performance instance whose credit option for CPU usage was not modified.
--
--
--
-- /See:/ 'unsuccessfulInstanceCreditSpecificationItem' smart constructor.
data UnsuccessfulInstanceCreditSpecificationItem = UnsuccessfulInstanceCreditSpecificationItem'
  { _uicsiInstanceId :: !(Maybe Text)
  , _uicsiError :: !(Maybe UnsuccessfulInstanceCreditSpecificationItemError)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'UnsuccessfulInstanceCreditSpecificationItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'uicsiInstanceId' - The ID of the instance.
--
-- * 'uicsiError' - The applicable error for the burstable performance instance whose credit option for CPU usage was not modified.
unsuccessfulInstanceCreditSpecificationItem
    :: UnsuccessfulInstanceCreditSpecificationItem
unsuccessfulInstanceCreditSpecificationItem =
  UnsuccessfulInstanceCreditSpecificationItem'
    {_uicsiInstanceId = Nothing, _uicsiError = Nothing}


-- | The ID of the instance.
uicsiInstanceId :: Lens' UnsuccessfulInstanceCreditSpecificationItem (Maybe Text)
uicsiInstanceId = lens _uicsiInstanceId (\ s a -> s{_uicsiInstanceId = a})

-- | The applicable error for the burstable performance instance whose credit option for CPU usage was not modified.
uicsiError :: Lens' UnsuccessfulInstanceCreditSpecificationItem (Maybe UnsuccessfulInstanceCreditSpecificationItemError)
uicsiError = lens _uicsiError (\ s a -> s{_uicsiError = a})

instance FromXML
           UnsuccessfulInstanceCreditSpecificationItem
         where
        parseXML x
          = UnsuccessfulInstanceCreditSpecificationItem' <$>
              (x .@? "instanceId") <*> (x .@? "error")

instance Hashable
           UnsuccessfulInstanceCreditSpecificationItem
         where

instance NFData
           UnsuccessfulInstanceCreditSpecificationItem
         where

-- | Information about the error for the burstable performance instance whose credit option for CPU usage was not modified.
--
--
--
-- /See:/ 'unsuccessfulInstanceCreditSpecificationItemError' smart constructor.
data UnsuccessfulInstanceCreditSpecificationItemError = UnsuccessfulInstanceCreditSpecificationItemError'
  { _uicsieCode    :: !(Maybe UnsuccessfulInstanceCreditSpecificationErrorCode)
  , _uicsieMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'UnsuccessfulInstanceCreditSpecificationItemError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'uicsieCode' - The error code.
--
-- * 'uicsieMessage' - The applicable error message.
unsuccessfulInstanceCreditSpecificationItemError
    :: UnsuccessfulInstanceCreditSpecificationItemError
unsuccessfulInstanceCreditSpecificationItemError =
  UnsuccessfulInstanceCreditSpecificationItemError'
    {_uicsieCode = Nothing, _uicsieMessage = Nothing}


-- | The error code.
uicsieCode :: Lens' UnsuccessfulInstanceCreditSpecificationItemError (Maybe UnsuccessfulInstanceCreditSpecificationErrorCode)
uicsieCode = lens _uicsieCode (\ s a -> s{_uicsieCode = a})

-- | The applicable error message.
uicsieMessage :: Lens' UnsuccessfulInstanceCreditSpecificationItemError (Maybe Text)
uicsieMessage = lens _uicsieMessage (\ s a -> s{_uicsieMessage = a})

instance FromXML
           UnsuccessfulInstanceCreditSpecificationItemError
         where
        parseXML x
          = UnsuccessfulInstanceCreditSpecificationItemError'
              <$> (x .@? "code") <*> (x .@? "message")

instance Hashable
           UnsuccessfulInstanceCreditSpecificationItemError
         where

instance NFData
           UnsuccessfulInstanceCreditSpecificationItemError
         where

-- | Information about items that were not successfully processed in a batch call.
--
--
--
-- /See:/ 'unsuccessfulItem' smart constructor.
data UnsuccessfulItem = UnsuccessfulItem'
  { _uiResourceId :: !(Maybe Text)
  , _uiError      :: !(Maybe UnsuccessfulItemError)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'UnsuccessfulItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'uiResourceId' - The ID of the resource.
--
-- * 'uiError' - Information about the error.
unsuccessfulItem
    :: UnsuccessfulItem
unsuccessfulItem =
  UnsuccessfulItem' {_uiResourceId = Nothing, _uiError = Nothing}


-- | The ID of the resource.
uiResourceId :: Lens' UnsuccessfulItem (Maybe Text)
uiResourceId = lens _uiResourceId (\ s a -> s{_uiResourceId = a})

-- | Information about the error.
uiError :: Lens' UnsuccessfulItem (Maybe UnsuccessfulItemError)
uiError = lens _uiError (\ s a -> s{_uiError = a})

instance FromXML UnsuccessfulItem where
        parseXML x
          = UnsuccessfulItem' <$>
              (x .@? "resourceId") <*> (x .@? "error")

instance Hashable UnsuccessfulItem where

instance NFData UnsuccessfulItem where

-- | Information about the error that occurred. For more information about errors, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html Error Codes> .
--
--
--
-- /See:/ 'unsuccessfulItemError' smart constructor.
data UnsuccessfulItemError = UnsuccessfulItemError'
  { _uieCode    :: !(Maybe Text)
  , _uieMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'UnsuccessfulItemError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'uieCode' - The error code.
--
-- * 'uieMessage' - The error message accompanying the error code.
unsuccessfulItemError
    :: UnsuccessfulItemError
unsuccessfulItemError =
  UnsuccessfulItemError' {_uieCode = Nothing, _uieMessage = Nothing}


-- | The error code.
uieCode :: Lens' UnsuccessfulItemError (Maybe Text)
uieCode = lens _uieCode (\ s a -> s{_uieCode = a})

-- | The error message accompanying the error code.
uieMessage :: Lens' UnsuccessfulItemError (Maybe Text)
uieMessage = lens _uieMessage (\ s a -> s{_uieMessage = a})

instance FromXML UnsuccessfulItemError where
        parseXML x
          = UnsuccessfulItemError' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable UnsuccessfulItemError where

instance NFData UnsuccessfulItemError where

-- | Describes the Amazon S3 bucket for the disk image.
--
--
--
-- /See:/ 'userBucket' smart constructor.
data UserBucket = UserBucket'
  { _ubS3Key    :: !(Maybe Text)
  , _ubS3Bucket :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'UserBucket' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ubS3Key' - The file name of the disk image.
--
-- * 'ubS3Bucket' - The name of the Amazon S3 bucket where the disk image is located.
userBucket
    :: UserBucket
userBucket = UserBucket' {_ubS3Key = Nothing, _ubS3Bucket = Nothing}


-- | The file name of the disk image.
ubS3Key :: Lens' UserBucket (Maybe Text)
ubS3Key = lens _ubS3Key (\ s a -> s{_ubS3Key = a})

-- | The name of the Amazon S3 bucket where the disk image is located.
ubS3Bucket :: Lens' UserBucket (Maybe Text)
ubS3Bucket = lens _ubS3Bucket (\ s a -> s{_ubS3Bucket = a})

instance Hashable UserBucket where

instance NFData UserBucket where

instance ToQuery UserBucket where
        toQuery UserBucket'{..}
          = mconcat
              ["S3Key" =: _ubS3Key, "S3Bucket" =: _ubS3Bucket]

-- | Describes the Amazon S3 bucket for the disk image.
--
--
--
-- /See:/ 'userBucketDetails' smart constructor.
data UserBucketDetails = UserBucketDetails'
  { _ubdS3Key    :: !(Maybe Text)
  , _ubdS3Bucket :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'UserBucketDetails' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ubdS3Key' - The file name of the disk image.
--
-- * 'ubdS3Bucket' - The Amazon S3 bucket from which the disk image was created.
userBucketDetails
    :: UserBucketDetails
userBucketDetails =
  UserBucketDetails' {_ubdS3Key = Nothing, _ubdS3Bucket = Nothing}


-- | The file name of the disk image.
ubdS3Key :: Lens' UserBucketDetails (Maybe Text)
ubdS3Key = lens _ubdS3Key (\ s a -> s{_ubdS3Key = a})

-- | The Amazon S3 bucket from which the disk image was created.
ubdS3Bucket :: Lens' UserBucketDetails (Maybe Text)
ubdS3Bucket = lens _ubdS3Bucket (\ s a -> s{_ubdS3Bucket = a})

instance FromXML UserBucketDetails where
        parseXML x
          = UserBucketDetails' <$>
              (x .@? "s3Key") <*> (x .@? "s3Bucket")

instance Hashable UserBucketDetails where

instance NFData UserBucketDetails where

-- | Describes the user data for an instance.
--
--
--
-- /See:/ 'userData' smart constructor.
newtype UserData = UserData'
  { _udData :: Maybe Text
  } deriving (Eq, Show, Data, Typeable, Generic)


-- | Creates a value of 'UserData' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'udData' - The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
userData
    :: UserData
userData = UserData' {_udData = Nothing}


-- | The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
udData :: Lens' UserData (Maybe Text)
udData = lens _udData (\ s a -> s{_udData = a})

instance Hashable UserData where

instance NFData UserData where

instance ToQuery UserData where
        toQuery UserData'{..} = mconcat ["Data" =: _udData]

-- | Describes a security group and AWS account ID pair.
--
--
--
-- /See:/ 'userIdGroupPair' smart constructor.
data UserIdGroupPair = UserIdGroupPair'
  { _uigpVPCPeeringConnectionId :: !(Maybe Text)
  , _uigpVPCId                  :: !(Maybe Text)
  , _uigpUserId                 :: !(Maybe Text)
  , _uigpGroupId                :: !(Maybe Text)
  , _uigpGroupName              :: !(Maybe Text)
  , _uigpDescription            :: !(Maybe Text)
  , _uigpPeeringStatus          :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'UserIdGroupPair' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'uigpVPCPeeringConnectionId' - The ID of the VPC peering connection, if applicable.
--
-- * 'uigpVPCId' - The ID of the VPC for the referenced security group, if applicable.
--
-- * 'uigpUserId' - The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
--
-- * 'uigpGroupId' - The ID of the security group.
--
-- * 'uigpGroupName' - The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID.  For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
--
-- * 'uigpDescription' - A description for the security group rule that references this user ID group pair. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
--
-- * 'uigpPeeringStatus' - The status of a VPC peering connection, if applicable.
userIdGroupPair
    :: UserIdGroupPair
userIdGroupPair =
  UserIdGroupPair'
    { _uigpVPCPeeringConnectionId = Nothing
    , _uigpVPCId = Nothing
    , _uigpUserId = Nothing
    , _uigpGroupId = Nothing
    , _uigpGroupName = Nothing
    , _uigpDescription = Nothing
    , _uigpPeeringStatus = Nothing
    }


-- | The ID of the VPC peering connection, if applicable.
uigpVPCPeeringConnectionId :: Lens' UserIdGroupPair (Maybe Text)
uigpVPCPeeringConnectionId = lens _uigpVPCPeeringConnectionId (\ s a -> s{_uigpVPCPeeringConnectionId = a})

-- | The ID of the VPC for the referenced security group, if applicable.
uigpVPCId :: Lens' UserIdGroupPair (Maybe Text)
uigpVPCId = lens _uigpVPCId (\ s a -> s{_uigpVPCId = a})

-- | The ID of an AWS account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
uigpUserId :: Lens' UserIdGroupPair (Maybe Text)
uigpUserId = lens _uigpUserId (\ s a -> s{_uigpUserId = a})

-- | The ID of the security group.
uigpGroupId :: Lens' UserIdGroupPair (Maybe Text)
uigpGroupId = lens _uigpGroupId (\ s a -> s{_uigpGroupId = a})

-- | The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID.  For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
uigpGroupName :: Lens' UserIdGroupPair (Maybe Text)
uigpGroupName = lens _uigpGroupName (\ s a -> s{_uigpGroupName = a})

-- | A description for the security group rule that references this user ID group pair. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
uigpDescription :: Lens' UserIdGroupPair (Maybe Text)
uigpDescription = lens _uigpDescription (\ s a -> s{_uigpDescription = a})

-- | The status of a VPC peering connection, if applicable.
uigpPeeringStatus :: Lens' UserIdGroupPair (Maybe Text)
uigpPeeringStatus = lens _uigpPeeringStatus (\ s a -> s{_uigpPeeringStatus = a})

instance FromXML UserIdGroupPair where
        parseXML x
          = UserIdGroupPair' <$>
              (x .@? "vpcPeeringConnectionId") <*> (x .@? "vpcId")
                <*> (x .@? "userId")
                <*> (x .@? "groupId")
                <*> (x .@? "groupName")
                <*> (x .@? "description")
                <*> (x .@? "peeringStatus")

instance Hashable UserIdGroupPair where

instance NFData UserIdGroupPair where

instance ToQuery UserIdGroupPair where
        toQuery UserIdGroupPair'{..}
          = mconcat
              ["VpcPeeringConnectionId" =:
                 _uigpVPCPeeringConnectionId,
               "VpcId" =: _uigpVPCId, "UserId" =: _uigpUserId,
               "GroupId" =: _uigpGroupId,
               "GroupName" =: _uigpGroupName,
               "Description" =: _uigpDescription,
               "PeeringStatus" =: _uigpPeeringStatus]

-- | Describes the vCPU configurations for the instance type.
--
--
--
-- /See:/ 'vCPUInfo' smart constructor.
data VCPUInfo = VCPUInfo'
  { _vciValidThreadsPerCore   :: !(Maybe [Int])
  , _vciDefaultThreadsPerCore :: !(Maybe Int)
  , _vciDefaultVCPUs          :: !(Maybe Int)
  , _vciDefaultCores          :: !(Maybe Int)
  , _vciValidCores            :: !(Maybe [Int])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VCPUInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vciValidThreadsPerCore' - The valid number of threads per core that can be configured for the instance type.
--
-- * 'vciDefaultThreadsPerCore' - The default number of threads per core for the instance type.
--
-- * 'vciDefaultVCPUs' - The default number of vCPUs for the instance type.
--
-- * 'vciDefaultCores' - The default number of cores for the instance type.
--
-- * 'vciValidCores' - The valid number of cores that can be configured for the instance type.
vCPUInfo
    :: VCPUInfo
vCPUInfo =
  VCPUInfo'
    { _vciValidThreadsPerCore = Nothing
    , _vciDefaultThreadsPerCore = Nothing
    , _vciDefaultVCPUs = Nothing
    , _vciDefaultCores = Nothing
    , _vciValidCores = Nothing
    }


-- | The valid number of threads per core that can be configured for the instance type.
vciValidThreadsPerCore :: Lens' VCPUInfo [Int]
vciValidThreadsPerCore = lens _vciValidThreadsPerCore (\ s a -> s{_vciValidThreadsPerCore = a}) . _Default . _Coerce

-- | The default number of threads per core for the instance type.
vciDefaultThreadsPerCore :: Lens' VCPUInfo (Maybe Int)
vciDefaultThreadsPerCore = lens _vciDefaultThreadsPerCore (\ s a -> s{_vciDefaultThreadsPerCore = a})

-- | The default number of vCPUs for the instance type.
vciDefaultVCPUs :: Lens' VCPUInfo (Maybe Int)
vciDefaultVCPUs = lens _vciDefaultVCPUs (\ s a -> s{_vciDefaultVCPUs = a})

-- | The default number of cores for the instance type.
vciDefaultCores :: Lens' VCPUInfo (Maybe Int)
vciDefaultCores = lens _vciDefaultCores (\ s a -> s{_vciDefaultCores = a})

-- | The valid number of cores that can be configured for the instance type.
vciValidCores :: Lens' VCPUInfo [Int]
vciValidCores = lens _vciValidCores (\ s a -> s{_vciValidCores = a}) . _Default . _Coerce

instance FromXML VCPUInfo where
        parseXML x
          = VCPUInfo' <$>
              (x .@? "validThreadsPerCore" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "defaultThreadsPerCore")
                <*> (x .@? "defaultVCpus")
                <*> (x .@? "defaultCores")
                <*>
                (x .@? "validCores" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable VCPUInfo where

instance NFData VCPUInfo where

-- | Describes telemetry for a VPN tunnel.
--
--
--
-- /See:/ 'vgwTelemetry' smart constructor.
data VGWTelemetry = VGWTelemetry'
  { _vtStatus             :: !(Maybe TelemetryStatus)
  , _vtOutsideIPAddress   :: !(Maybe Text)
  , _vtCertificateARN     :: !(Maybe Text)
  , _vtLastStatusChange   :: !(Maybe ISO8601)
  , _vtAcceptedRouteCount :: !(Maybe Int)
  , _vtStatusMessage      :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VGWTelemetry' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vtStatus' - The status of the VPN tunnel.
--
-- * 'vtOutsideIPAddress' - The Internet-routable IP address of the virtual private gateway's outside interface.
--
-- * 'vtCertificateARN' - The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
--
-- * 'vtLastStatusChange' - The date and time of the last change in status.
--
-- * 'vtAcceptedRouteCount' - The number of accepted routes.
--
-- * 'vtStatusMessage' - If an error occurs, a description of the error.
vgwTelemetry
    :: VGWTelemetry
vgwTelemetry =
  VGWTelemetry'
    { _vtStatus = Nothing
    , _vtOutsideIPAddress = Nothing
    , _vtCertificateARN = Nothing
    , _vtLastStatusChange = Nothing
    , _vtAcceptedRouteCount = Nothing
    , _vtStatusMessage = Nothing
    }


-- | The status of the VPN tunnel.
vtStatus :: Lens' VGWTelemetry (Maybe TelemetryStatus)
vtStatus = lens _vtStatus (\ s a -> s{_vtStatus = a})

-- | The Internet-routable IP address of the virtual private gateway's outside interface.
vtOutsideIPAddress :: Lens' VGWTelemetry (Maybe Text)
vtOutsideIPAddress = lens _vtOutsideIPAddress (\ s a -> s{_vtOutsideIPAddress = a})

-- | The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
vtCertificateARN :: Lens' VGWTelemetry (Maybe Text)
vtCertificateARN = lens _vtCertificateARN (\ s a -> s{_vtCertificateARN = a})

-- | The date and time of the last change in status.
vtLastStatusChange :: Lens' VGWTelemetry (Maybe UTCTime)
vtLastStatusChange = lens _vtLastStatusChange (\ s a -> s{_vtLastStatusChange = a}) . mapping _Time

-- | The number of accepted routes.
vtAcceptedRouteCount :: Lens' VGWTelemetry (Maybe Int)
vtAcceptedRouteCount = lens _vtAcceptedRouteCount (\ s a -> s{_vtAcceptedRouteCount = a})

-- | If an error occurs, a description of the error.
vtStatusMessage :: Lens' VGWTelemetry (Maybe Text)
vtStatusMessage = lens _vtStatusMessage (\ s a -> s{_vtStatusMessage = a})

instance FromXML VGWTelemetry where
        parseXML x
          = VGWTelemetry' <$>
              (x .@? "status") <*> (x .@? "outsideIpAddress") <*>
                (x .@? "certificateArn")
                <*> (x .@? "lastStatusChange")
                <*> (x .@? "acceptedRouteCount")
                <*> (x .@? "statusMessage")

instance Hashable VGWTelemetry where

instance NFData VGWTelemetry where

-- | Describes a VPC.
--
--
--
-- /See:/ 'vpc' smart constructor.
data VPC = VPC'
  { _vpcIPv6CidrBlockAssociationSet :: !(Maybe [VPCIPv6CidrBlockAssociation])
  , _vpcCidrBlockAssociationSet     :: !(Maybe [VPCCidrBlockAssociation])
  , _vpcOwnerId                     :: !(Maybe Text)
  , _vpcTags                        :: !(Maybe [Tag])
  , _vpcIsDefault                   :: !(Maybe Bool)
  , _vpcCidrBlock                   :: !Text
  , _vpcDHCPOptionsId               :: !Text
  , _vpcInstanceTenancy             :: !Tenancy
  , _vpcState                       :: !VPCState
  , _vpcVPCId                       :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPC' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vpcIPv6CidrBlockAssociationSet' - Information about the IPv6 CIDR blocks associated with the VPC.
--
-- * 'vpcCidrBlockAssociationSet' - Information about the IPv4 CIDR blocks associated with the VPC.
--
-- * 'vpcOwnerId' - The ID of the AWS account that owns the VPC.
--
-- * 'vpcTags' - Any tags assigned to the VPC.
--
-- * 'vpcIsDefault' - Indicates whether the VPC is the default VPC.
--
-- * 'vpcCidrBlock' - The primary IPv4 CIDR block for the VPC.
--
-- * 'vpcDHCPOptionsId' - The ID of the set of DHCP options you've associated with the VPC.
--
-- * 'vpcInstanceTenancy' - The allowed tenancy of instances launched into the VPC.
--
-- * 'vpcState' - The current state of the VPC.
--
-- * 'vpcVPCId' - The ID of the VPC.
vpc
    :: Text -- ^ 'vpcCidrBlock'
    -> Text -- ^ 'vpcDHCPOptionsId'
    -> Tenancy -- ^ 'vpcInstanceTenancy'
    -> VPCState -- ^ 'vpcState'
    -> Text -- ^ 'vpcVPCId'
    -> VPC
vpc pCidrBlock_ pDHCPOptionsId_ pInstanceTenancy_ pState_ pVPCId_ =
  VPC'
    { _vpcIPv6CidrBlockAssociationSet = Nothing
    , _vpcCidrBlockAssociationSet = Nothing
    , _vpcOwnerId = Nothing
    , _vpcTags = Nothing
    , _vpcIsDefault = Nothing
    , _vpcCidrBlock = pCidrBlock_
    , _vpcDHCPOptionsId = pDHCPOptionsId_
    , _vpcInstanceTenancy = pInstanceTenancy_
    , _vpcState = pState_
    , _vpcVPCId = pVPCId_
    }


-- | Information about the IPv6 CIDR blocks associated with the VPC.
vpcIPv6CidrBlockAssociationSet :: Lens' VPC [VPCIPv6CidrBlockAssociation]
vpcIPv6CidrBlockAssociationSet = lens _vpcIPv6CidrBlockAssociationSet (\ s a -> s{_vpcIPv6CidrBlockAssociationSet = a}) . _Default . _Coerce

-- | Information about the IPv4 CIDR blocks associated with the VPC.
vpcCidrBlockAssociationSet :: Lens' VPC [VPCCidrBlockAssociation]
vpcCidrBlockAssociationSet = lens _vpcCidrBlockAssociationSet (\ s a -> s{_vpcCidrBlockAssociationSet = a}) . _Default . _Coerce

-- | The ID of the AWS account that owns the VPC.
vpcOwnerId :: Lens' VPC (Maybe Text)
vpcOwnerId = lens _vpcOwnerId (\ s a -> s{_vpcOwnerId = a})

-- | Any tags assigned to the VPC.
vpcTags :: Lens' VPC [Tag]
vpcTags = lens _vpcTags (\ s a -> s{_vpcTags = a}) . _Default . _Coerce

-- | Indicates whether the VPC is the default VPC.
vpcIsDefault :: Lens' VPC (Maybe Bool)
vpcIsDefault = lens _vpcIsDefault (\ s a -> s{_vpcIsDefault = a})

-- | The primary IPv4 CIDR block for the VPC.
vpcCidrBlock :: Lens' VPC Text
vpcCidrBlock = lens _vpcCidrBlock (\ s a -> s{_vpcCidrBlock = a})

-- | The ID of the set of DHCP options you've associated with the VPC.
vpcDHCPOptionsId :: Lens' VPC Text
vpcDHCPOptionsId = lens _vpcDHCPOptionsId (\ s a -> s{_vpcDHCPOptionsId = a})

-- | The allowed tenancy of instances launched into the VPC.
vpcInstanceTenancy :: Lens' VPC Tenancy
vpcInstanceTenancy = lens _vpcInstanceTenancy (\ s a -> s{_vpcInstanceTenancy = a})

-- | The current state of the VPC.
vpcState :: Lens' VPC VPCState
vpcState = lens _vpcState (\ s a -> s{_vpcState = a})

-- | The ID of the VPC.
vpcVPCId :: Lens' VPC Text
vpcVPCId = lens _vpcVPCId (\ s a -> s{_vpcVPCId = a})

instance FromXML VPC where
        parseXML x
          = VPC' <$>
              (x .@? "ipv6CidrBlockAssociationSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*>
                (x .@? "cidrBlockAssociationSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "ownerId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "isDefault")
                <*> (x .@ "cidrBlock")
                <*> (x .@ "dhcpOptionsId")
                <*> (x .@ "instanceTenancy")
                <*> (x .@ "state")
                <*> (x .@ "vpcId")

instance Hashable VPC where

instance NFData VPC where

-- | Describes an attachment between a virtual private gateway and a VPC.
--
--
--
-- /See:/ 'vpcAttachment' smart constructor.
data VPCAttachment = VPCAttachment'
  { _vaState :: !(Maybe AttachmentStatus)
  , _vaVPCId :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vaState' - The current state of the attachment.
--
-- * 'vaVPCId' - The ID of the VPC.
vpcAttachment
    :: VPCAttachment
vpcAttachment = VPCAttachment' {_vaState = Nothing, _vaVPCId = Nothing}


-- | The current state of the attachment.
vaState :: Lens' VPCAttachment (Maybe AttachmentStatus)
vaState = lens _vaState (\ s a -> s{_vaState = a})

-- | The ID of the VPC.
vaVPCId :: Lens' VPCAttachment (Maybe Text)
vaVPCId = lens _vaVPCId (\ s a -> s{_vaVPCId = a})

instance FromXML VPCAttachment where
        parseXML x
          = VPCAttachment' <$>
              (x .@? "state") <*> (x .@? "vpcId")

instance Hashable VPCAttachment where

instance NFData VPCAttachment where

-- | Describes an IPv4 CIDR block associated with a VPC.
--
--
--
-- /See:/ 'vpcCidrBlockAssociation' smart constructor.
data VPCCidrBlockAssociation = VPCCidrBlockAssociation'
  { _vcbaAssociationId  :: !(Maybe Text)
  , _vcbaCidrBlockState :: !(Maybe VPCCidrBlockState)
  , _vcbaCidrBlock      :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCCidrBlockAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vcbaAssociationId' - The association ID for the IPv4 CIDR block.
--
-- * 'vcbaCidrBlockState' - Information about the state of the CIDR block.
--
-- * 'vcbaCidrBlock' - The IPv4 CIDR block.
vpcCidrBlockAssociation
    :: VPCCidrBlockAssociation
vpcCidrBlockAssociation =
  VPCCidrBlockAssociation'
    { _vcbaAssociationId = Nothing
    , _vcbaCidrBlockState = Nothing
    , _vcbaCidrBlock = Nothing
    }


-- | The association ID for the IPv4 CIDR block.
vcbaAssociationId :: Lens' VPCCidrBlockAssociation (Maybe Text)
vcbaAssociationId = lens _vcbaAssociationId (\ s a -> s{_vcbaAssociationId = a})

-- | Information about the state of the CIDR block.
vcbaCidrBlockState :: Lens' VPCCidrBlockAssociation (Maybe VPCCidrBlockState)
vcbaCidrBlockState = lens _vcbaCidrBlockState (\ s a -> s{_vcbaCidrBlockState = a})

-- | The IPv4 CIDR block.
vcbaCidrBlock :: Lens' VPCCidrBlockAssociation (Maybe Text)
vcbaCidrBlock = lens _vcbaCidrBlock (\ s a -> s{_vcbaCidrBlock = a})

instance FromXML VPCCidrBlockAssociation where
        parseXML x
          = VPCCidrBlockAssociation' <$>
              (x .@? "associationId") <*> (x .@? "cidrBlockState")
                <*> (x .@? "cidrBlock")

instance Hashable VPCCidrBlockAssociation where

instance NFData VPCCidrBlockAssociation where

-- | Describes the state of a CIDR block.
--
--
--
-- /See:/ 'vpcCidrBlockState' smart constructor.
data VPCCidrBlockState = VPCCidrBlockState'
  { _vcbsState         :: !(Maybe VPCCidrBlockStateCode)
  , _vcbsStatusMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCCidrBlockState' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vcbsState' - The state of the CIDR block.
--
-- * 'vcbsStatusMessage' - A message about the status of the CIDR block, if applicable.
vpcCidrBlockState
    :: VPCCidrBlockState
vpcCidrBlockState =
  VPCCidrBlockState' {_vcbsState = Nothing, _vcbsStatusMessage = Nothing}


-- | The state of the CIDR block.
vcbsState :: Lens' VPCCidrBlockState (Maybe VPCCidrBlockStateCode)
vcbsState = lens _vcbsState (\ s a -> s{_vcbsState = a})

-- | A message about the status of the CIDR block, if applicable.
vcbsStatusMessage :: Lens' VPCCidrBlockState (Maybe Text)
vcbsStatusMessage = lens _vcbsStatusMessage (\ s a -> s{_vcbsStatusMessage = a})

instance FromXML VPCCidrBlockState where
        parseXML x
          = VPCCidrBlockState' <$>
              (x .@? "state") <*> (x .@? "statusMessage")

instance Hashable VPCCidrBlockState where

instance NFData VPCCidrBlockState where

-- | Describes whether a VPC is enabled for ClassicLink.
--
--
--
-- /See:/ 'vpcClassicLink' smart constructor.
data VPCClassicLink = VPCClassicLink'
  { _vclVPCId              :: !(Maybe Text)
  , _vclTags               :: !(Maybe [Tag])
  , _vclClassicLinkEnabled :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCClassicLink' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vclVPCId' - The ID of the VPC.
--
-- * 'vclTags' - Any tags assigned to the VPC.
--
-- * 'vclClassicLinkEnabled' - Indicates whether the VPC is enabled for ClassicLink.
vpcClassicLink
    :: VPCClassicLink
vpcClassicLink =
  VPCClassicLink'
    {_vclVPCId = Nothing, _vclTags = Nothing, _vclClassicLinkEnabled = Nothing}


-- | The ID of the VPC.
vclVPCId :: Lens' VPCClassicLink (Maybe Text)
vclVPCId = lens _vclVPCId (\ s a -> s{_vclVPCId = a})

-- | Any tags assigned to the VPC.
vclTags :: Lens' VPCClassicLink [Tag]
vclTags = lens _vclTags (\ s a -> s{_vclTags = a}) . _Default . _Coerce

-- | Indicates whether the VPC is enabled for ClassicLink.
vclClassicLinkEnabled :: Lens' VPCClassicLink (Maybe Bool)
vclClassicLinkEnabled = lens _vclClassicLinkEnabled (\ s a -> s{_vclClassicLinkEnabled = a})

instance FromXML VPCClassicLink where
        parseXML x
          = VPCClassicLink' <$>
              (x .@? "vpcId") <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "classicLinkEnabled")

instance Hashable VPCClassicLink where

instance NFData VPCClassicLink where

-- | Describes a VPC endpoint.
--
--
--
-- /See:/ 'vpcEndpoint' smart constructor.
data VPCEndpoint = VPCEndpoint'
  { _veGroups              :: !(Maybe [SecurityGroupIdentifier])
  , _veState               :: !(Maybe State)
  , _vePolicyDocument      :: !(Maybe Text)
  , _veSubnetIds           :: !(Maybe [Text])
  , _veNetworkInterfaceIds :: !(Maybe [Text])
  , _veVPCId               :: !(Maybe Text)
  , _veRequesterManaged    :: !(Maybe Bool)
  , _veDNSEntries          :: !(Maybe [DNSEntry])
  , _veVPCEndpointType     :: !(Maybe VPCEndpointType)
  , _vePrivateDNSEnabled   :: !(Maybe Bool)
  , _veOwnerId             :: !(Maybe Text)
  , _veCreationTimestamp   :: !(Maybe ISO8601)
  , _veServiceName         :: !(Maybe Text)
  , _veLastError           :: !(Maybe LastError)
  , _veVPCEndpointId       :: !(Maybe Text)
  , _veTags                :: !(Maybe [Tag])
  , _veRouteTableIds       :: !(Maybe [Text])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCEndpoint' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'veGroups' - (Interface endpoint) Information about the security groups that are associated with the network interface.
--
-- * 'veState' - The state of the VPC endpoint.
--
-- * 'vePolicyDocument' - The policy document associated with the endpoint, if applicable.
--
-- * 'veSubnetIds' - (Interface endpoint) One or more subnets in which the endpoint is located.
--
-- * 'veNetworkInterfaceIds' - (Interface endpoint) One or more network interfaces for the endpoint.
--
-- * 'veVPCId' - The ID of the VPC to which the endpoint is associated.
--
-- * 'veRequesterManaged' - Indicates whether the VPC endpoint is being managed by its service.
--
-- * 'veDNSEntries' - (Interface endpoint) The DNS entries for the endpoint.
--
-- * 'veVPCEndpointType' - The type of endpoint.
--
-- * 'vePrivateDNSEnabled' - (Interface endpoint) Indicates whether the VPC is associated with a private hosted zone.
--
-- * 'veOwnerId' - The ID of the AWS account that owns the VPC endpoint.
--
-- * 'veCreationTimestamp' - The date and time that the VPC endpoint was created.
--
-- * 'veServiceName' - The name of the service to which the endpoint is associated.
--
-- * 'veLastError' - The last error that occurred for VPC endpoint.
--
-- * 'veVPCEndpointId' - The ID of the VPC endpoint.
--
-- * 'veTags' - Any tags assigned to the VPC endpoint.
--
-- * 'veRouteTableIds' - (Gateway endpoint) One or more route tables associated with the endpoint.
vpcEndpoint
    :: VPCEndpoint
vpcEndpoint =
  VPCEndpoint'
    { _veGroups = Nothing
    , _veState = Nothing
    , _vePolicyDocument = Nothing
    , _veSubnetIds = Nothing
    , _veNetworkInterfaceIds = Nothing
    , _veVPCId = Nothing
    , _veRequesterManaged = Nothing
    , _veDNSEntries = Nothing
    , _veVPCEndpointType = Nothing
    , _vePrivateDNSEnabled = Nothing
    , _veOwnerId = Nothing
    , _veCreationTimestamp = Nothing
    , _veServiceName = Nothing
    , _veLastError = Nothing
    , _veVPCEndpointId = Nothing
    , _veTags = Nothing
    , _veRouteTableIds = Nothing
    }


-- | (Interface endpoint) Information about the security groups that are associated with the network interface.
veGroups :: Lens' VPCEndpoint [SecurityGroupIdentifier]
veGroups = lens _veGroups (\ s a -> s{_veGroups = a}) . _Default . _Coerce

-- | The state of the VPC endpoint.
veState :: Lens' VPCEndpoint (Maybe State)
veState = lens _veState (\ s a -> s{_veState = a})

-- | The policy document associated with the endpoint, if applicable.
vePolicyDocument :: Lens' VPCEndpoint (Maybe Text)
vePolicyDocument = lens _vePolicyDocument (\ s a -> s{_vePolicyDocument = a})

-- | (Interface endpoint) One or more subnets in which the endpoint is located.
veSubnetIds :: Lens' VPCEndpoint [Text]
veSubnetIds = lens _veSubnetIds (\ s a -> s{_veSubnetIds = a}) . _Default . _Coerce

-- | (Interface endpoint) One or more network interfaces for the endpoint.
veNetworkInterfaceIds :: Lens' VPCEndpoint [Text]
veNetworkInterfaceIds = lens _veNetworkInterfaceIds (\ s a -> s{_veNetworkInterfaceIds = a}) . _Default . _Coerce

-- | The ID of the VPC to which the endpoint is associated.
veVPCId :: Lens' VPCEndpoint (Maybe Text)
veVPCId = lens _veVPCId (\ s a -> s{_veVPCId = a})

-- | Indicates whether the VPC endpoint is being managed by its service.
veRequesterManaged :: Lens' VPCEndpoint (Maybe Bool)
veRequesterManaged = lens _veRequesterManaged (\ s a -> s{_veRequesterManaged = a})

-- | (Interface endpoint) The DNS entries for the endpoint.
veDNSEntries :: Lens' VPCEndpoint [DNSEntry]
veDNSEntries = lens _veDNSEntries (\ s a -> s{_veDNSEntries = a}) . _Default . _Coerce

-- | The type of endpoint.
veVPCEndpointType :: Lens' VPCEndpoint (Maybe VPCEndpointType)
veVPCEndpointType = lens _veVPCEndpointType (\ s a -> s{_veVPCEndpointType = a})

-- | (Interface endpoint) Indicates whether the VPC is associated with a private hosted zone.
vePrivateDNSEnabled :: Lens' VPCEndpoint (Maybe Bool)
vePrivateDNSEnabled = lens _vePrivateDNSEnabled (\ s a -> s{_vePrivateDNSEnabled = a})

-- | The ID of the AWS account that owns the VPC endpoint.
veOwnerId :: Lens' VPCEndpoint (Maybe Text)
veOwnerId = lens _veOwnerId (\ s a -> s{_veOwnerId = a})

-- | The date and time that the VPC endpoint was created.
veCreationTimestamp :: Lens' VPCEndpoint (Maybe UTCTime)
veCreationTimestamp = lens _veCreationTimestamp (\ s a -> s{_veCreationTimestamp = a}) . mapping _Time

-- | The name of the service to which the endpoint is associated.
veServiceName :: Lens' VPCEndpoint (Maybe Text)
veServiceName = lens _veServiceName (\ s a -> s{_veServiceName = a})

-- | The last error that occurred for VPC endpoint.
veLastError :: Lens' VPCEndpoint (Maybe LastError)
veLastError = lens _veLastError (\ s a -> s{_veLastError = a})

-- | The ID of the VPC endpoint.
veVPCEndpointId :: Lens' VPCEndpoint (Maybe Text)
veVPCEndpointId = lens _veVPCEndpointId (\ s a -> s{_veVPCEndpointId = a})

-- | Any tags assigned to the VPC endpoint.
veTags :: Lens' VPCEndpoint [Tag]
veTags = lens _veTags (\ s a -> s{_veTags = a}) . _Default . _Coerce

-- | (Gateway endpoint) One or more route tables associated with the endpoint.
veRouteTableIds :: Lens' VPCEndpoint [Text]
veRouteTableIds = lens _veRouteTableIds (\ s a -> s{_veRouteTableIds = a}) . _Default . _Coerce

instance FromXML VPCEndpoint where
        parseXML x
          = VPCEndpoint' <$>
              (x .@? "groupSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "state")
                <*> (x .@? "policyDocument")
                <*>
                (x .@? "subnetIdSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "networkInterfaceIdSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpcId")
                <*> (x .@? "requesterManaged")
                <*>
                (x .@? "dnsEntrySet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpcEndpointType")
                <*> (x .@? "privateDnsEnabled")
                <*> (x .@? "ownerId")
                <*> (x .@? "creationTimestamp")
                <*> (x .@? "serviceName")
                <*> (x .@? "lastError")
                <*> (x .@? "vpcEndpointId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "routeTableIdSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable VPCEndpoint where

instance NFData VPCEndpoint where

-- | Describes a VPC endpoint connection to a service.
--
--
--
-- /See:/ 'vpcEndpointConnection' smart constructor.
data VPCEndpointConnection = VPCEndpointConnection'
  { _vecVPCEndpointOwner        :: !(Maybe Text)
  , _vecNetworkLoadBalancerARNs :: !(Maybe [Text])
  , _vecDNSEntries              :: !(Maybe [DNSEntry])
  , _vecVPCEndpointState        :: !(Maybe State)
  , _vecGatewayLoadBalancerARNs :: !(Maybe [Text])
  , _vecCreationTimestamp       :: !(Maybe ISO8601)
  , _vecServiceId               :: !(Maybe Text)
  , _vecVPCEndpointId           :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCEndpointConnection' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vecVPCEndpointOwner' - The AWS account ID of the owner of the VPC endpoint.
--
-- * 'vecNetworkLoadBalancerARNs' - The Amazon Resource Names (ARNs) of the network load balancers for the service.
--
-- * 'vecDNSEntries' - The DNS entries for the VPC endpoint.
--
-- * 'vecVPCEndpointState' - The state of the VPC endpoint.
--
-- * 'vecGatewayLoadBalancerARNs' - The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
--
-- * 'vecCreationTimestamp' - The date and time that the VPC endpoint was created.
--
-- * 'vecServiceId' - The ID of the service to which the endpoint is connected.
--
-- * 'vecVPCEndpointId' - The ID of the VPC endpoint.
vpcEndpointConnection
    :: VPCEndpointConnection
vpcEndpointConnection =
  VPCEndpointConnection'
    { _vecVPCEndpointOwner = Nothing
    , _vecNetworkLoadBalancerARNs = Nothing
    , _vecDNSEntries = Nothing
    , _vecVPCEndpointState = Nothing
    , _vecGatewayLoadBalancerARNs = Nothing
    , _vecCreationTimestamp = Nothing
    , _vecServiceId = Nothing
    , _vecVPCEndpointId = Nothing
    }


-- | The AWS account ID of the owner of the VPC endpoint.
vecVPCEndpointOwner :: Lens' VPCEndpointConnection (Maybe Text)
vecVPCEndpointOwner = lens _vecVPCEndpointOwner (\ s a -> s{_vecVPCEndpointOwner = a})

-- | The Amazon Resource Names (ARNs) of the network load balancers for the service.
vecNetworkLoadBalancerARNs :: Lens' VPCEndpointConnection [Text]
vecNetworkLoadBalancerARNs = lens _vecNetworkLoadBalancerARNs (\ s a -> s{_vecNetworkLoadBalancerARNs = a}) . _Default . _Coerce

-- | The DNS entries for the VPC endpoint.
vecDNSEntries :: Lens' VPCEndpointConnection [DNSEntry]
vecDNSEntries = lens _vecDNSEntries (\ s a -> s{_vecDNSEntries = a}) . _Default . _Coerce

-- | The state of the VPC endpoint.
vecVPCEndpointState :: Lens' VPCEndpointConnection (Maybe State)
vecVPCEndpointState = lens _vecVPCEndpointState (\ s a -> s{_vecVPCEndpointState = a})

-- | The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
vecGatewayLoadBalancerARNs :: Lens' VPCEndpointConnection [Text]
vecGatewayLoadBalancerARNs = lens _vecGatewayLoadBalancerARNs (\ s a -> s{_vecGatewayLoadBalancerARNs = a}) . _Default . _Coerce

-- | The date and time that the VPC endpoint was created.
vecCreationTimestamp :: Lens' VPCEndpointConnection (Maybe UTCTime)
vecCreationTimestamp = lens _vecCreationTimestamp (\ s a -> s{_vecCreationTimestamp = a}) . mapping _Time

-- | The ID of the service to which the endpoint is connected.
vecServiceId :: Lens' VPCEndpointConnection (Maybe Text)
vecServiceId = lens _vecServiceId (\ s a -> s{_vecServiceId = a})

-- | The ID of the VPC endpoint.
vecVPCEndpointId :: Lens' VPCEndpointConnection (Maybe Text)
vecVPCEndpointId = lens _vecVPCEndpointId (\ s a -> s{_vecVPCEndpointId = a})

instance FromXML VPCEndpointConnection where
        parseXML x
          = VPCEndpointConnection' <$>
              (x .@? "vpcEndpointOwner") <*>
                (x .@? "networkLoadBalancerArnSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "dnsEntrySet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpcEndpointState")
                <*>
                (x .@? "gatewayLoadBalancerArnSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "creationTimestamp")
                <*> (x .@? "serviceId")
                <*> (x .@? "vpcEndpointId")

instance Hashable VPCEndpointConnection where

instance NFData VPCEndpointConnection where

-- | Describes an IPv6 CIDR block associated with a VPC.
--
--
--
-- /See:/ 'vpcIPv6CidrBlockAssociation' smart constructor.
data VPCIPv6CidrBlockAssociation = VPCIPv6CidrBlockAssociation'
  { _vicbaAssociationId      :: !(Maybe Text)
  , _vicbaIPv6CidrBlock      :: !(Maybe Text)
  , _vicbaNetworkBorderGroup :: !(Maybe Text)
  , _vicbaIPv6CidrBlockState :: !(Maybe VPCCidrBlockState)
  , _vicbaIPv6Pool           :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCIPv6CidrBlockAssociation' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vicbaAssociationId' - The association ID for the IPv6 CIDR block.
--
-- * 'vicbaIPv6CidrBlock' - The IPv6 CIDR block.
--
-- * 'vicbaNetworkBorderGroup' - The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses, for example, @us-east-1-wl1-bos-wlz-1@ .
--
-- * 'vicbaIPv6CidrBlockState' - Information about the state of the CIDR block.
--
-- * 'vicbaIPv6Pool' - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.
vpcIPv6CidrBlockAssociation
    :: VPCIPv6CidrBlockAssociation
vpcIPv6CidrBlockAssociation =
  VPCIPv6CidrBlockAssociation'
    { _vicbaAssociationId = Nothing
    , _vicbaIPv6CidrBlock = Nothing
    , _vicbaNetworkBorderGroup = Nothing
    , _vicbaIPv6CidrBlockState = Nothing
    , _vicbaIPv6Pool = Nothing
    }


-- | The association ID for the IPv6 CIDR block.
vicbaAssociationId :: Lens' VPCIPv6CidrBlockAssociation (Maybe Text)
vicbaAssociationId = lens _vicbaAssociationId (\ s a -> s{_vicbaAssociationId = a})

-- | The IPv6 CIDR block.
vicbaIPv6CidrBlock :: Lens' VPCIPv6CidrBlockAssociation (Maybe Text)
vicbaIPv6CidrBlock = lens _vicbaIPv6CidrBlock (\ s a -> s{_vicbaIPv6CidrBlock = a})

-- | The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses, for example, @us-east-1-wl1-bos-wlz-1@ .
vicbaNetworkBorderGroup :: Lens' VPCIPv6CidrBlockAssociation (Maybe Text)
vicbaNetworkBorderGroup = lens _vicbaNetworkBorderGroup (\ s a -> s{_vicbaNetworkBorderGroup = a})

-- | Information about the state of the CIDR block.
vicbaIPv6CidrBlockState :: Lens' VPCIPv6CidrBlockAssociation (Maybe VPCCidrBlockState)
vicbaIPv6CidrBlockState = lens _vicbaIPv6CidrBlockState (\ s a -> s{_vicbaIPv6CidrBlockState = a})

-- | The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.
vicbaIPv6Pool :: Lens' VPCIPv6CidrBlockAssociation (Maybe Text)
vicbaIPv6Pool = lens _vicbaIPv6Pool (\ s a -> s{_vicbaIPv6Pool = a})

instance FromXML VPCIPv6CidrBlockAssociation where
        parseXML x
          = VPCIPv6CidrBlockAssociation' <$>
              (x .@? "associationId") <*> (x .@? "ipv6CidrBlock")
                <*> (x .@? "networkBorderGroup")
                <*> (x .@? "ipv6CidrBlockState")
                <*> (x .@? "ipv6Pool")

instance Hashable VPCIPv6CidrBlockAssociation where

instance NFData VPCIPv6CidrBlockAssociation where

-- | Describes a VPC peering connection.
--
--
--
-- /See:/ 'vpcPeeringConnection' smart constructor.
data VPCPeeringConnection = VPCPeeringConnection'
  { _vpcpcVPCPeeringConnectionId :: !(Maybe Text)
  , _vpcpcStatus                 :: !(Maybe VPCPeeringConnectionStateReason)
  , _vpcpcAccepterVPCInfo        :: !(Maybe VPCPeeringConnectionVPCInfo)
  , _vpcpcRequesterVPCInfo       :: !(Maybe VPCPeeringConnectionVPCInfo)
  , _vpcpcExpirationTime         :: !(Maybe ISO8601)
  , _vpcpcTags                   :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCPeeringConnection' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vpcpcVPCPeeringConnectionId' - The ID of the VPC peering connection.
--
-- * 'vpcpcStatus' - The status of the VPC peering connection.
--
-- * 'vpcpcAccepterVPCInfo' - Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
--
-- * 'vpcpcRequesterVPCInfo' - Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
--
-- * 'vpcpcExpirationTime' - The time that an unaccepted VPC peering connection will expire.
--
-- * 'vpcpcTags' - Any tags assigned to the resource.
vpcPeeringConnection
    :: VPCPeeringConnection
vpcPeeringConnection =
  VPCPeeringConnection'
    { _vpcpcVPCPeeringConnectionId = Nothing
    , _vpcpcStatus = Nothing
    , _vpcpcAccepterVPCInfo = Nothing
    , _vpcpcRequesterVPCInfo = Nothing
    , _vpcpcExpirationTime = Nothing
    , _vpcpcTags = Nothing
    }


-- | The ID of the VPC peering connection.
vpcpcVPCPeeringConnectionId :: Lens' VPCPeeringConnection (Maybe Text)
vpcpcVPCPeeringConnectionId = lens _vpcpcVPCPeeringConnectionId (\ s a -> s{_vpcpcVPCPeeringConnectionId = a})

-- | The status of the VPC peering connection.
vpcpcStatus :: Lens' VPCPeeringConnection (Maybe VPCPeeringConnectionStateReason)
vpcpcStatus = lens _vpcpcStatus (\ s a -> s{_vpcpcStatus = a})

-- | Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
vpcpcAccepterVPCInfo :: Lens' VPCPeeringConnection (Maybe VPCPeeringConnectionVPCInfo)
vpcpcAccepterVPCInfo = lens _vpcpcAccepterVPCInfo (\ s a -> s{_vpcpcAccepterVPCInfo = a})

-- | Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
vpcpcRequesterVPCInfo :: Lens' VPCPeeringConnection (Maybe VPCPeeringConnectionVPCInfo)
vpcpcRequesterVPCInfo = lens _vpcpcRequesterVPCInfo (\ s a -> s{_vpcpcRequesterVPCInfo = a})

-- | The time that an unaccepted VPC peering connection will expire.
vpcpcExpirationTime :: Lens' VPCPeeringConnection (Maybe UTCTime)
vpcpcExpirationTime = lens _vpcpcExpirationTime (\ s a -> s{_vpcpcExpirationTime = a}) . mapping _Time

-- | Any tags assigned to the resource.
vpcpcTags :: Lens' VPCPeeringConnection [Tag]
vpcpcTags = lens _vpcpcTags (\ s a -> s{_vpcpcTags = a}) . _Default . _Coerce

instance FromXML VPCPeeringConnection where
        parseXML x
          = VPCPeeringConnection' <$>
              (x .@? "vpcPeeringConnectionId") <*> (x .@? "status")
                <*> (x .@? "accepterVpcInfo")
                <*> (x .@? "requesterVpcInfo")
                <*> (x .@? "expirationTime")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable VPCPeeringConnection where

instance NFData VPCPeeringConnection where

-- | Describes the VPC peering connection options.
--
--
--
-- /See:/ 'vpcPeeringConnectionOptionsDescription' smart constructor.
data VPCPeeringConnectionOptionsDescription = VPCPeeringConnectionOptionsDescription'
  { _vpcodAllowEgressFromLocalVPCToRemoteClassicLink :: !(Maybe Bool)
  , _vpcodAllowEgressFromLocalClassicLinkToRemoteVPC :: !(Maybe Bool)
  , _vpcodAllowDNSResolutionFromRemoteVPC            :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCPeeringConnectionOptionsDescription' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vpcodAllowEgressFromLocalVPCToRemoteClassicLink' - Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.
--
-- * 'vpcodAllowEgressFromLocalClassicLinkToRemoteVPC' - Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.
--
-- * 'vpcodAllowDNSResolutionFromRemoteVPC' - Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.
vpcPeeringConnectionOptionsDescription
    :: VPCPeeringConnectionOptionsDescription
vpcPeeringConnectionOptionsDescription =
  VPCPeeringConnectionOptionsDescription'
    { _vpcodAllowEgressFromLocalVPCToRemoteClassicLink = Nothing
    , _vpcodAllowEgressFromLocalClassicLinkToRemoteVPC = Nothing
    , _vpcodAllowDNSResolutionFromRemoteVPC = Nothing
    }


-- | Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.
vpcodAllowEgressFromLocalVPCToRemoteClassicLink :: Lens' VPCPeeringConnectionOptionsDescription (Maybe Bool)
vpcodAllowEgressFromLocalVPCToRemoteClassicLink = lens _vpcodAllowEgressFromLocalVPCToRemoteClassicLink (\ s a -> s{_vpcodAllowEgressFromLocalVPCToRemoteClassicLink = a})

-- | Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.
vpcodAllowEgressFromLocalClassicLinkToRemoteVPC :: Lens' VPCPeeringConnectionOptionsDescription (Maybe Bool)
vpcodAllowEgressFromLocalClassicLinkToRemoteVPC = lens _vpcodAllowEgressFromLocalClassicLinkToRemoteVPC (\ s a -> s{_vpcodAllowEgressFromLocalClassicLinkToRemoteVPC = a})

-- | Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.
vpcodAllowDNSResolutionFromRemoteVPC :: Lens' VPCPeeringConnectionOptionsDescription (Maybe Bool)
vpcodAllowDNSResolutionFromRemoteVPC = lens _vpcodAllowDNSResolutionFromRemoteVPC (\ s a -> s{_vpcodAllowDNSResolutionFromRemoteVPC = a})

instance FromXML
           VPCPeeringConnectionOptionsDescription
         where
        parseXML x
          = VPCPeeringConnectionOptionsDescription' <$>
              (x .@? "allowEgressFromLocalVpcToRemoteClassicLink")
                <*>
                (x .@? "allowEgressFromLocalClassicLinkToRemoteVpc")
                <*> (x .@? "allowDnsResolutionFromRemoteVpc")

instance Hashable
           VPCPeeringConnectionOptionsDescription
         where

instance NFData
           VPCPeeringConnectionOptionsDescription
         where

-- | Describes the status of a VPC peering connection.
--
--
--
-- /See:/ 'vpcPeeringConnectionStateReason' smart constructor.
data VPCPeeringConnectionStateReason = VPCPeeringConnectionStateReason'
  { _vpcsrCode    :: !(Maybe VPCPeeringConnectionStateReasonCode)
  , _vpcsrMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCPeeringConnectionStateReason' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vpcsrCode' - The status of the VPC peering connection.
--
-- * 'vpcsrMessage' - A message that provides more information about the status, if applicable.
vpcPeeringConnectionStateReason
    :: VPCPeeringConnectionStateReason
vpcPeeringConnectionStateReason =
  VPCPeeringConnectionStateReason'
    {_vpcsrCode = Nothing, _vpcsrMessage = Nothing}


-- | The status of the VPC peering connection.
vpcsrCode :: Lens' VPCPeeringConnectionStateReason (Maybe VPCPeeringConnectionStateReasonCode)
vpcsrCode = lens _vpcsrCode (\ s a -> s{_vpcsrCode = a})

-- | A message that provides more information about the status, if applicable.
vpcsrMessage :: Lens' VPCPeeringConnectionStateReason (Maybe Text)
vpcsrMessage = lens _vpcsrMessage (\ s a -> s{_vpcsrMessage = a})

instance FromXML VPCPeeringConnectionStateReason
         where
        parseXML x
          = VPCPeeringConnectionStateReason' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable VPCPeeringConnectionStateReason
         where

instance NFData VPCPeeringConnectionStateReason where

-- | Describes a VPC in a VPC peering connection.
--
--
--
-- /See:/ 'vpcPeeringConnectionVPCInfo' smart constructor.
data VPCPeeringConnectionVPCInfo = VPCPeeringConnectionVPCInfo'
  { _vpcviCidrBlockSet     :: !(Maybe [CidrBlock])
  , _vpcviVPCId            :: !(Maybe Text)
  , _vpcviOwnerId          :: !(Maybe Text)
  , _vpcviPeeringOptions   :: !(Maybe VPCPeeringConnectionOptionsDescription)
  , _vpcviCidrBlock        :: !(Maybe Text)
  , _vpcviRegion           :: !(Maybe Text)
  , _vpcviIPv6CidrBlockSet :: !(Maybe [IPv6CidrBlock])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPCPeeringConnectionVPCInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vpcviCidrBlockSet' - Information about the IPv4 CIDR blocks for the VPC.
--
-- * 'vpcviVPCId' - The ID of the VPC.
--
-- * 'vpcviOwnerId' - The AWS account ID of the VPC owner.
--
-- * 'vpcviPeeringOptions' - Information about the VPC peering connection options for the accepter or requester VPC.
--
-- * 'vpcviCidrBlock' - The IPv4 CIDR block for the VPC.
--
-- * 'vpcviRegion' - The Region in which the VPC is located.
--
-- * 'vpcviIPv6CidrBlockSet' - The IPv6 CIDR block for the VPC.
vpcPeeringConnectionVPCInfo
    :: VPCPeeringConnectionVPCInfo
vpcPeeringConnectionVPCInfo =
  VPCPeeringConnectionVPCInfo'
    { _vpcviCidrBlockSet = Nothing
    , _vpcviVPCId = Nothing
    , _vpcviOwnerId = Nothing
    , _vpcviPeeringOptions = Nothing
    , _vpcviCidrBlock = Nothing
    , _vpcviRegion = Nothing
    , _vpcviIPv6CidrBlockSet = Nothing
    }


-- | Information about the IPv4 CIDR blocks for the VPC.
vpcviCidrBlockSet :: Lens' VPCPeeringConnectionVPCInfo [CidrBlock]
vpcviCidrBlockSet = lens _vpcviCidrBlockSet (\ s a -> s{_vpcviCidrBlockSet = a}) . _Default . _Coerce

-- | The ID of the VPC.
vpcviVPCId :: Lens' VPCPeeringConnectionVPCInfo (Maybe Text)
vpcviVPCId = lens _vpcviVPCId (\ s a -> s{_vpcviVPCId = a})

-- | The AWS account ID of the VPC owner.
vpcviOwnerId :: Lens' VPCPeeringConnectionVPCInfo (Maybe Text)
vpcviOwnerId = lens _vpcviOwnerId (\ s a -> s{_vpcviOwnerId = a})

-- | Information about the VPC peering connection options for the accepter or requester VPC.
vpcviPeeringOptions :: Lens' VPCPeeringConnectionVPCInfo (Maybe VPCPeeringConnectionOptionsDescription)
vpcviPeeringOptions = lens _vpcviPeeringOptions (\ s a -> s{_vpcviPeeringOptions = a})

-- | The IPv4 CIDR block for the VPC.
vpcviCidrBlock :: Lens' VPCPeeringConnectionVPCInfo (Maybe Text)
vpcviCidrBlock = lens _vpcviCidrBlock (\ s a -> s{_vpcviCidrBlock = a})

-- | The Region in which the VPC is located.
vpcviRegion :: Lens' VPCPeeringConnectionVPCInfo (Maybe Text)
vpcviRegion = lens _vpcviRegion (\ s a -> s{_vpcviRegion = a})

-- | The IPv6 CIDR block for the VPC.
vpcviIPv6CidrBlockSet :: Lens' VPCPeeringConnectionVPCInfo [IPv6CidrBlock]
vpcviIPv6CidrBlockSet = lens _vpcviIPv6CidrBlockSet (\ s a -> s{_vpcviIPv6CidrBlockSet = a}) . _Default . _Coerce

instance FromXML VPCPeeringConnectionVPCInfo where
        parseXML x
          = VPCPeeringConnectionVPCInfo' <$>
              (x .@? "cidrBlockSet" .!@ mempty >>=
                 may (parseXMLList "item"))
                <*> (x .@? "vpcId")
                <*> (x .@? "ownerId")
                <*> (x .@? "peeringOptions")
                <*> (x .@? "cidrBlock")
                <*> (x .@? "region")
                <*>
                (x .@? "ipv6CidrBlockSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable VPCPeeringConnectionVPCInfo where

instance NFData VPCPeeringConnectionVPCInfo where

-- | Describes a VPN connection.
--
--
--
-- /See:/ 'vpnConnection' smart constructor.
data VPNConnection = VPNConnection'
  { _vcCustomerGatewayConfiguration :: !(Maybe Text)
  , _vcRoutes                       :: !(Maybe [VPNStaticRoute])
  , _vcVPNGatewayId                 :: !(Maybe Text)
  , _vcCategory                     :: !(Maybe Text)
  , _vcTransitGatewayId             :: !(Maybe Text)
  , _vcOptions                      :: !(Maybe VPNConnectionOptions)
  , _vcTags                         :: !(Maybe [Tag])
  , _vcVGWTelemetry                 :: !(Maybe [VGWTelemetry])
  , _vcVPNConnectionId              :: !Text
  , _vcCustomerGatewayId            :: !Text
  , _vcState                        :: !VPNState
  , _vcType                         :: !GatewayType
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPNConnection' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vcCustomerGatewayConfiguration' - The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the 'CreateVpnConnection' response; however, it's present in the 'DescribeVpnConnections' response only if the VPN connection is in the @pending@ or @available@ state.
--
-- * 'vcRoutes' - The static routes associated with the VPN connection.
--
-- * 'vcVPNGatewayId' - The ID of the virtual private gateway at the AWS side of the VPN connection.
--
-- * 'vcCategory' - The category of the VPN connection. A value of @VPN@ indicates an AWS VPN connection. A value of @VPN-Classic@ indicates an AWS Classic VPN connection.
--
-- * 'vcTransitGatewayId' - The ID of the transit gateway associated with the VPN connection.
--
-- * 'vcOptions' - The VPN connection options.
--
-- * 'vcTags' - Any tags assigned to the VPN connection.
--
-- * 'vcVGWTelemetry' - Information about the VPN tunnel.
--
-- * 'vcVPNConnectionId' - The ID of the VPN connection.
--
-- * 'vcCustomerGatewayId' - The ID of the customer gateway at your end of the VPN connection.
--
-- * 'vcState' - The current state of the VPN connection.
--
-- * 'vcType' - The type of VPN connection.
vpnConnection
    :: Text -- ^ 'vcVPNConnectionId'
    -> Text -- ^ 'vcCustomerGatewayId'
    -> VPNState -- ^ 'vcState'
    -> GatewayType -- ^ 'vcType'
    -> VPNConnection
vpnConnection pVPNConnectionId_ pCustomerGatewayId_ pState_ pType_ =
  VPNConnection'
    { _vcCustomerGatewayConfiguration = Nothing
    , _vcRoutes = Nothing
    , _vcVPNGatewayId = Nothing
    , _vcCategory = Nothing
    , _vcTransitGatewayId = Nothing
    , _vcOptions = Nothing
    , _vcTags = Nothing
    , _vcVGWTelemetry = Nothing
    , _vcVPNConnectionId = pVPNConnectionId_
    , _vcCustomerGatewayId = pCustomerGatewayId_
    , _vcState = pState_
    , _vcType = pType_
    }


-- | The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the 'CreateVpnConnection' response; however, it's present in the 'DescribeVpnConnections' response only if the VPN connection is in the @pending@ or @available@ state.
vcCustomerGatewayConfiguration :: Lens' VPNConnection (Maybe Text)
vcCustomerGatewayConfiguration = lens _vcCustomerGatewayConfiguration (\ s a -> s{_vcCustomerGatewayConfiguration = a})

-- | The static routes associated with the VPN connection.
vcRoutes :: Lens' VPNConnection [VPNStaticRoute]
vcRoutes = lens _vcRoutes (\ s a -> s{_vcRoutes = a}) . _Default . _Coerce

-- | The ID of the virtual private gateway at the AWS side of the VPN connection.
vcVPNGatewayId :: Lens' VPNConnection (Maybe Text)
vcVPNGatewayId = lens _vcVPNGatewayId (\ s a -> s{_vcVPNGatewayId = a})

-- | The category of the VPN connection. A value of @VPN@ indicates an AWS VPN connection. A value of @VPN-Classic@ indicates an AWS Classic VPN connection.
vcCategory :: Lens' VPNConnection (Maybe Text)
vcCategory = lens _vcCategory (\ s a -> s{_vcCategory = a})

-- | The ID of the transit gateway associated with the VPN connection.
vcTransitGatewayId :: Lens' VPNConnection (Maybe Text)
vcTransitGatewayId = lens _vcTransitGatewayId (\ s a -> s{_vcTransitGatewayId = a})

-- | The VPN connection options.
vcOptions :: Lens' VPNConnection (Maybe VPNConnectionOptions)
vcOptions = lens _vcOptions (\ s a -> s{_vcOptions = a})

-- | Any tags assigned to the VPN connection.
vcTags :: Lens' VPNConnection [Tag]
vcTags = lens _vcTags (\ s a -> s{_vcTags = a}) . _Default . _Coerce

-- | Information about the VPN tunnel.
vcVGWTelemetry :: Lens' VPNConnection [VGWTelemetry]
vcVGWTelemetry = lens _vcVGWTelemetry (\ s a -> s{_vcVGWTelemetry = a}) . _Default . _Coerce

-- | The ID of the VPN connection.
vcVPNConnectionId :: Lens' VPNConnection Text
vcVPNConnectionId = lens _vcVPNConnectionId (\ s a -> s{_vcVPNConnectionId = a})

-- | The ID of the customer gateway at your end of the VPN connection.
vcCustomerGatewayId :: Lens' VPNConnection Text
vcCustomerGatewayId = lens _vcCustomerGatewayId (\ s a -> s{_vcCustomerGatewayId = a})

-- | The current state of the VPN connection.
vcState :: Lens' VPNConnection VPNState
vcState = lens _vcState (\ s a -> s{_vcState = a})

-- | The type of VPN connection.
vcType :: Lens' VPNConnection GatewayType
vcType = lens _vcType (\ s a -> s{_vcType = a})

instance FromXML VPNConnection where
        parseXML x
          = VPNConnection' <$>
              (x .@? "customerGatewayConfiguration") <*>
                (x .@? "routes" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpnGatewayId")
                <*> (x .@? "category")
                <*> (x .@? "transitGatewayId")
                <*> (x .@? "options")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*>
                (x .@? "vgwTelemetry" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@ "vpnConnectionId")
                <*> (x .@ "customerGatewayId")
                <*> (x .@ "state")
                <*> (x .@ "type")

instance Hashable VPNConnection where

instance NFData VPNConnection where

-- | Describes VPN connection options.
--
--
--
-- /See:/ 'vpnConnectionOptions' smart constructor.
data VPNConnectionOptions = VPNConnectionOptions'
  { _vcoTunnelInsideIPVersion :: !(Maybe TunnelInsideIPVersion)
  , _vcoRemoteIPv4NetworkCidr :: !(Maybe Text)
  , _vcoEnableAcceleration    :: !(Maybe Bool)
  , _vcoLocalIPv4NetworkCidr  :: !(Maybe Text)
  , _vcoRemoteIPv6NetworkCidr :: !(Maybe Text)
  , _vcoTunnelOptions         :: !(Maybe [TunnelOption])
  , _vcoLocalIPv6NetworkCidr  :: !(Maybe Text)
  , _vcoStaticRoutesOnly      :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPNConnectionOptions' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vcoTunnelInsideIPVersion' - Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
--
-- * 'vcoRemoteIPv4NetworkCidr' - The IPv4 CIDR on the AWS side of the VPN connection.
--
-- * 'vcoEnableAcceleration' - Indicates whether acceleration is enabled for the VPN connection.
--
-- * 'vcoLocalIPv4NetworkCidr' - The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
--
-- * 'vcoRemoteIPv6NetworkCidr' - The IPv6 CIDR on the AWS side of the VPN connection.
--
-- * 'vcoTunnelOptions' - Indicates the VPN tunnel options.
--
-- * 'vcoLocalIPv6NetworkCidr' - The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
--
-- * 'vcoStaticRoutesOnly' - Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
vpnConnectionOptions
    :: VPNConnectionOptions
vpnConnectionOptions =
  VPNConnectionOptions'
    { _vcoTunnelInsideIPVersion = Nothing
    , _vcoRemoteIPv4NetworkCidr = Nothing
    , _vcoEnableAcceleration = Nothing
    , _vcoLocalIPv4NetworkCidr = Nothing
    , _vcoRemoteIPv6NetworkCidr = Nothing
    , _vcoTunnelOptions = Nothing
    , _vcoLocalIPv6NetworkCidr = Nothing
    , _vcoStaticRoutesOnly = Nothing
    }


-- | Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
vcoTunnelInsideIPVersion :: Lens' VPNConnectionOptions (Maybe TunnelInsideIPVersion)
vcoTunnelInsideIPVersion = lens _vcoTunnelInsideIPVersion (\ s a -> s{_vcoTunnelInsideIPVersion = a})

-- | The IPv4 CIDR on the AWS side of the VPN connection.
vcoRemoteIPv4NetworkCidr :: Lens' VPNConnectionOptions (Maybe Text)
vcoRemoteIPv4NetworkCidr = lens _vcoRemoteIPv4NetworkCidr (\ s a -> s{_vcoRemoteIPv4NetworkCidr = a})

-- | Indicates whether acceleration is enabled for the VPN connection.
vcoEnableAcceleration :: Lens' VPNConnectionOptions (Maybe Bool)
vcoEnableAcceleration = lens _vcoEnableAcceleration (\ s a -> s{_vcoEnableAcceleration = a})

-- | The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
vcoLocalIPv4NetworkCidr :: Lens' VPNConnectionOptions (Maybe Text)
vcoLocalIPv4NetworkCidr = lens _vcoLocalIPv4NetworkCidr (\ s a -> s{_vcoLocalIPv4NetworkCidr = a})

-- | The IPv6 CIDR on the AWS side of the VPN connection.
vcoRemoteIPv6NetworkCidr :: Lens' VPNConnectionOptions (Maybe Text)
vcoRemoteIPv6NetworkCidr = lens _vcoRemoteIPv6NetworkCidr (\ s a -> s{_vcoRemoteIPv6NetworkCidr = a})

-- | Indicates the VPN tunnel options.
vcoTunnelOptions :: Lens' VPNConnectionOptions [TunnelOption]
vcoTunnelOptions = lens _vcoTunnelOptions (\ s a -> s{_vcoTunnelOptions = a}) . _Default . _Coerce

-- | The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
vcoLocalIPv6NetworkCidr :: Lens' VPNConnectionOptions (Maybe Text)
vcoLocalIPv6NetworkCidr = lens _vcoLocalIPv6NetworkCidr (\ s a -> s{_vcoLocalIPv6NetworkCidr = a})

-- | Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
vcoStaticRoutesOnly :: Lens' VPNConnectionOptions (Maybe Bool)
vcoStaticRoutesOnly = lens _vcoStaticRoutesOnly (\ s a -> s{_vcoStaticRoutesOnly = a})

instance FromXML VPNConnectionOptions where
        parseXML x
          = VPNConnectionOptions' <$>
              (x .@? "tunnelInsideIpVersion") <*>
                (x .@? "remoteIpv4NetworkCidr")
                <*> (x .@? "enableAcceleration")
                <*> (x .@? "localIpv4NetworkCidr")
                <*> (x .@? "remoteIpv6NetworkCidr")
                <*>
                (x .@? "tunnelOptionSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "localIpv6NetworkCidr")
                <*> (x .@? "staticRoutesOnly")

instance Hashable VPNConnectionOptions where

instance NFData VPNConnectionOptions where

-- | Describes VPN connection options.
--
--
--
-- /See:/ 'vpnConnectionOptionsSpecification' smart constructor.
data VPNConnectionOptionsSpecification = VPNConnectionOptionsSpecification'
  { _vcosTunnelInsideIPVersion :: !(Maybe TunnelInsideIPVersion)
  , _vcosRemoteIPv4NetworkCidr :: !(Maybe Text)
  , _vcosEnableAcceleration    :: !(Maybe Bool)
  , _vcosLocalIPv4NetworkCidr  :: !(Maybe Text)
  , _vcosRemoteIPv6NetworkCidr :: !(Maybe Text)
  , _vcosTunnelOptions         :: !(Maybe [VPNTunnelOptionsSpecification])
  , _vcosLocalIPv6NetworkCidr  :: !(Maybe Text)
  , _vcosStaticRoutesOnly      :: !(Maybe Bool)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPNConnectionOptionsSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vcosTunnelInsideIPVersion' - Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Default: @ipv4@
--
-- * 'vcosRemoteIPv4NetworkCidr' - The IPv4 CIDR on the AWS side of the VPN connection. Default: @0.0.0.0/0@
--
-- * 'vcosEnableAcceleration' - Indicate whether to enable acceleration for the VPN connection. Default: @false@
--
-- * 'vcosLocalIPv4NetworkCidr' - The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: @0.0.0.0/0@
--
-- * 'vcosRemoteIPv6NetworkCidr' - The IPv6 CIDR on the AWS side of the VPN connection. Default: @::/0@
--
-- * 'vcosTunnelOptions' - The tunnel options for the VPN connection.
--
-- * 'vcosLocalIPv6NetworkCidr' - The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: @::/0@
--
-- * 'vcosStaticRoutesOnly' - Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify @true@ . Use 'CreateVpnConnectionRoute' to create a static route. Default: @false@
vpnConnectionOptionsSpecification
    :: VPNConnectionOptionsSpecification
vpnConnectionOptionsSpecification =
  VPNConnectionOptionsSpecification'
    { _vcosTunnelInsideIPVersion = Nothing
    , _vcosRemoteIPv4NetworkCidr = Nothing
    , _vcosEnableAcceleration = Nothing
    , _vcosLocalIPv4NetworkCidr = Nothing
    , _vcosRemoteIPv6NetworkCidr = Nothing
    , _vcosTunnelOptions = Nothing
    , _vcosLocalIPv6NetworkCidr = Nothing
    , _vcosStaticRoutesOnly = Nothing
    }


-- | Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Default: @ipv4@
vcosTunnelInsideIPVersion :: Lens' VPNConnectionOptionsSpecification (Maybe TunnelInsideIPVersion)
vcosTunnelInsideIPVersion = lens _vcosTunnelInsideIPVersion (\ s a -> s{_vcosTunnelInsideIPVersion = a})

-- | The IPv4 CIDR on the AWS side of the VPN connection. Default: @0.0.0.0/0@
vcosRemoteIPv4NetworkCidr :: Lens' VPNConnectionOptionsSpecification (Maybe Text)
vcosRemoteIPv4NetworkCidr = lens _vcosRemoteIPv4NetworkCidr (\ s a -> s{_vcosRemoteIPv4NetworkCidr = a})

-- | Indicate whether to enable acceleration for the VPN connection. Default: @false@
vcosEnableAcceleration :: Lens' VPNConnectionOptionsSpecification (Maybe Bool)
vcosEnableAcceleration = lens _vcosEnableAcceleration (\ s a -> s{_vcosEnableAcceleration = a})

-- | The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: @0.0.0.0/0@
vcosLocalIPv4NetworkCidr :: Lens' VPNConnectionOptionsSpecification (Maybe Text)
vcosLocalIPv4NetworkCidr = lens _vcosLocalIPv4NetworkCidr (\ s a -> s{_vcosLocalIPv4NetworkCidr = a})

-- | The IPv6 CIDR on the AWS side of the VPN connection. Default: @::/0@
vcosRemoteIPv6NetworkCidr :: Lens' VPNConnectionOptionsSpecification (Maybe Text)
vcosRemoteIPv6NetworkCidr = lens _vcosRemoteIPv6NetworkCidr (\ s a -> s{_vcosRemoteIPv6NetworkCidr = a})

-- | The tunnel options for the VPN connection.
vcosTunnelOptions :: Lens' VPNConnectionOptionsSpecification [VPNTunnelOptionsSpecification]
vcosTunnelOptions = lens _vcosTunnelOptions (\ s a -> s{_vcosTunnelOptions = a}) . _Default . _Coerce

-- | The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: @::/0@
vcosLocalIPv6NetworkCidr :: Lens' VPNConnectionOptionsSpecification (Maybe Text)
vcosLocalIPv6NetworkCidr = lens _vcosLocalIPv6NetworkCidr (\ s a -> s{_vcosLocalIPv6NetworkCidr = a})

-- | Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify @true@ . Use 'CreateVpnConnectionRoute' to create a static route. Default: @false@
vcosStaticRoutesOnly :: Lens' VPNConnectionOptionsSpecification (Maybe Bool)
vcosStaticRoutesOnly = lens _vcosStaticRoutesOnly (\ s a -> s{_vcosStaticRoutesOnly = a})

instance Hashable VPNConnectionOptionsSpecification
         where

instance NFData VPNConnectionOptionsSpecification
         where

instance ToQuery VPNConnectionOptionsSpecification
         where
        toQuery VPNConnectionOptionsSpecification'{..}
          = mconcat
              ["TunnelInsideIpVersion" =:
                 _vcosTunnelInsideIPVersion,
               "RemoteIpv4NetworkCidr" =:
                 _vcosRemoteIPv4NetworkCidr,
               "EnableAcceleration" =: _vcosEnableAcceleration,
               "LocalIpv4NetworkCidr" =: _vcosLocalIPv4NetworkCidr,
               "RemoteIpv6NetworkCidr" =:
                 _vcosRemoteIPv6NetworkCidr,
               toQuery
                 (toQueryList "TunnelOptions" <$> _vcosTunnelOptions),
               "LocalIpv6NetworkCidr" =: _vcosLocalIPv6NetworkCidr,
               "StaticRoutesOnly" =: _vcosStaticRoutesOnly]

-- | Describes a virtual private gateway.
--
--
--
-- /See:/ 'vpnGateway' smart constructor.
data VPNGateway = VPNGateway'
  { _vgState            :: !(Maybe VPNState)
  , _vgVPCAttachments   :: !(Maybe [VPCAttachment])
  , _vgVPNGatewayId     :: !(Maybe Text)
  , _vgAmazonSideASN    :: !(Maybe Integer)
  , _vgAvailabilityZone :: !(Maybe Text)
  , _vgType             :: !(Maybe GatewayType)
  , _vgTags             :: !(Maybe [Tag])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPNGateway' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vgState' - The current state of the virtual private gateway.
--
-- * 'vgVPCAttachments' - Any VPCs attached to the virtual private gateway.
--
-- * 'vgVPNGatewayId' - The ID of the virtual private gateway.
--
-- * 'vgAmazonSideASN' - The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
--
-- * 'vgAvailabilityZone' - The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.
--
-- * 'vgType' - The type of VPN connection the virtual private gateway supports.
--
-- * 'vgTags' - Any tags assigned to the virtual private gateway.
vpnGateway
    :: VPNGateway
vpnGateway =
  VPNGateway'
    { _vgState = Nothing
    , _vgVPCAttachments = Nothing
    , _vgVPNGatewayId = Nothing
    , _vgAmazonSideASN = Nothing
    , _vgAvailabilityZone = Nothing
    , _vgType = Nothing
    , _vgTags = Nothing
    }


-- | The current state of the virtual private gateway.
vgState :: Lens' VPNGateway (Maybe VPNState)
vgState = lens _vgState (\ s a -> s{_vgState = a})

-- | Any VPCs attached to the virtual private gateway.
vgVPCAttachments :: Lens' VPNGateway [VPCAttachment]
vgVPCAttachments = lens _vgVPCAttachments (\ s a -> s{_vgVPCAttachments = a}) . _Default . _Coerce

-- | The ID of the virtual private gateway.
vgVPNGatewayId :: Lens' VPNGateway (Maybe Text)
vgVPNGatewayId = lens _vgVPNGatewayId (\ s a -> s{_vgVPNGatewayId = a})

-- | The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
vgAmazonSideASN :: Lens' VPNGateway (Maybe Integer)
vgAmazonSideASN = lens _vgAmazonSideASN (\ s a -> s{_vgAmazonSideASN = a})

-- | The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.
vgAvailabilityZone :: Lens' VPNGateway (Maybe Text)
vgAvailabilityZone = lens _vgAvailabilityZone (\ s a -> s{_vgAvailabilityZone = a})

-- | The type of VPN connection the virtual private gateway supports.
vgType :: Lens' VPNGateway (Maybe GatewayType)
vgType = lens _vgType (\ s a -> s{_vgType = a})

-- | Any tags assigned to the virtual private gateway.
vgTags :: Lens' VPNGateway [Tag]
vgTags = lens _vgTags (\ s a -> s{_vgTags = a}) . _Default . _Coerce

instance FromXML VPNGateway where
        parseXML x
          = VPNGateway' <$>
              (x .@? "state") <*>
                (x .@? "attachments" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "vpnGatewayId")
                <*> (x .@? "amazonSideAsn")
                <*> (x .@? "availabilityZone")
                <*> (x .@? "type")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable VPNGateway where

instance NFData VPNGateway where

-- | Describes a static route for a VPN connection.
--
--
--
-- /See:/ 'vpnStaticRoute' smart constructor.
data VPNStaticRoute = VPNStaticRoute'
  { _vsrState                :: !(Maybe VPNState)
  , _vsrSource               :: !(Maybe VPNStaticRouteSource)
  , _vsrDestinationCidrBlock :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPNStaticRoute' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vsrState' - The current state of the static route.
--
-- * 'vsrSource' - Indicates how the routes were provided.
--
-- * 'vsrDestinationCidrBlock' - The CIDR block associated with the local subnet of the customer data center.
vpnStaticRoute
    :: VPNStaticRoute
vpnStaticRoute =
  VPNStaticRoute'
    { _vsrState = Nothing
    , _vsrSource = Nothing
    , _vsrDestinationCidrBlock = Nothing
    }


-- | The current state of the static route.
vsrState :: Lens' VPNStaticRoute (Maybe VPNState)
vsrState = lens _vsrState (\ s a -> s{_vsrState = a})

-- | Indicates how the routes were provided.
vsrSource :: Lens' VPNStaticRoute (Maybe VPNStaticRouteSource)
vsrSource = lens _vsrSource (\ s a -> s{_vsrSource = a})

-- | The CIDR block associated with the local subnet of the customer data center.
vsrDestinationCidrBlock :: Lens' VPNStaticRoute (Maybe Text)
vsrDestinationCidrBlock = lens _vsrDestinationCidrBlock (\ s a -> s{_vsrDestinationCidrBlock = a})

instance FromXML VPNStaticRoute where
        parseXML x
          = VPNStaticRoute' <$>
              (x .@? "state") <*> (x .@? "source") <*>
                (x .@? "destinationCidrBlock")

instance Hashable VPNStaticRoute where

instance NFData VPNStaticRoute where

-- | The tunnel options for a single VPN tunnel.
--
--
--
-- /See:/ 'vpnTunnelOptionsSpecification' smart constructor.
data VPNTunnelOptionsSpecification = VPNTunnelOptionsSpecification'
  { _vtosReplayWindowSize :: !(Maybe Int)
  , _vtosDPDTimeoutAction :: !(Maybe Text)
  , _vtosRekeyFuzzPercentage :: !(Maybe Int)
  , _vtosPhase1LifetimeSeconds :: !(Maybe Int)
  , _vtosIKEVersions :: !(Maybe [IKEVersionsRequestListValue])
  , _vtosPhase2IntegrityAlgorithms :: !(Maybe [Phase2IntegrityAlgorithmsRequestListValue])
  , _vtosPhase2LifetimeSeconds :: !(Maybe Int)
  , _vtosPhase1EncryptionAlgorithms :: !(Maybe [Phase1EncryptionAlgorithmsRequestListValue])
  , _vtosPhase1DHGroupNumbers :: !(Maybe [Phase1DHGroupNumbersRequestListValue])
  , _vtosPhase1IntegrityAlgorithms :: !(Maybe [Phase1IntegrityAlgorithmsRequestListValue])
  , _vtosRekeyMarginTimeSeconds :: !(Maybe Int)
  , _vtosDPDTimeoutSeconds :: !(Maybe Int)
  , _vtosTunnelInsideCidr :: !(Maybe Text)
  , _vtosStartupAction :: !(Maybe Text)
  , _vtosPhase2EncryptionAlgorithms :: !(Maybe [Phase2EncryptionAlgorithmsRequestListValue])
  , _vtosPhase2DHGroupNumbers :: !(Maybe [Phase2DHGroupNumbersRequestListValue])
  , _vtosPreSharedKey :: !(Maybe Text)
  , _vtosTunnelInsideIPv6Cidr :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VPNTunnelOptionsSpecification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vtosReplayWindowSize' - The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: @1024@
--
-- * 'vtosDPDTimeoutAction' - The action to take after DPD timeout occurs. Specify @restart@ to restart the IKE initiation. Specify @clear@ to end the IKE session. Valid Values: @clear@ | @none@ | @restart@  Default: @clear@
--
-- * 'vtosRekeyFuzzPercentage' - The percentage of the rekey window (determined by @RekeyMarginTimeSeconds@ ) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: @100@
--
-- * 'vtosPhase1LifetimeSeconds' - The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: @28800@
--
-- * 'vtosIKEVersions' - The IKE versions that are permitted for the VPN tunnel. Valid values: @ikev1@ | @ikev2@
--
-- * 'vtosPhase2IntegrityAlgorithms' - One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @SHA1@ | @SHA2-256@ | @SHA2-384@ | @SHA2-512@
--
-- * 'vtosPhase2LifetimeSeconds' - The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for @Phase1LifetimeSeconds@ . Default: @3600@
--
-- * 'vtosPhase1EncryptionAlgorithms' - One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @AES128@ | @AES256@ | @AES128-GCM-16@ | @AES256-GCM-16@
--
-- * 'vtosPhase1DHGroupNumbers' - One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @2@ | @14@ | @15@ | @16@ | @17@ | @18@ | @19@ | @20@ | @21@ | @22@ | @23@ | @24@
--
-- * 'vtosPhase1IntegrityAlgorithms' - One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @SHA1@ | @SHA2-256@ | @SHA2-384@ | @SHA2-512@
--
-- * 'vtosRekeyMarginTimeSeconds' - The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for @RekeyFuzzPercentage@ . Constraints: A value between 60 and half of @Phase2LifetimeSeconds@ . Default: @540@
--
-- * 'vtosDPDTimeoutSeconds' - The number of seconds after which a DPD timeout occurs. Constraints: A value between 0 and 30. Default: @30@
--
-- * 'vtosTunnelInsideCidr' - The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the @169.254.0.0/16@ range. The following CIDR blocks are reserved and cannot be used:     * @169.254.0.0/30@      * @169.254.1.0/30@      * @169.254.2.0/30@      * @169.254.3.0/30@      * @169.254.4.0/30@      * @169.254.5.0/30@      * @169.254.169.252/30@
--
-- * 'vtosStartupAction' - The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify @start@ for AWS to initiate the IKE negotiation. Valid Values: @add@ | @start@  Default: @add@
--
-- * 'vtosPhase2EncryptionAlgorithms' - One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @AES128@ | @AES256@ | @AES128-GCM-16@ | @AES256-GCM-16@
--
-- * 'vtosPhase2DHGroupNumbers' - One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @2@ | @5@ | @14@ | @15@ | @16@ | @17@ | @18@ | @19@ | @20@ | @21@ | @22@ | @23@ | @24@
--
-- * 'vtosPreSharedKey' - The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
--
-- * 'vtosTunnelInsideIPv6Cidr' - The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local @fd00::/8@ range.
vpnTunnelOptionsSpecification
    :: VPNTunnelOptionsSpecification
vpnTunnelOptionsSpecification =
  VPNTunnelOptionsSpecification'
    { _vtosReplayWindowSize = Nothing
    , _vtosDPDTimeoutAction = Nothing
    , _vtosRekeyFuzzPercentage = Nothing
    , _vtosPhase1LifetimeSeconds = Nothing
    , _vtosIKEVersions = Nothing
    , _vtosPhase2IntegrityAlgorithms = Nothing
    , _vtosPhase2LifetimeSeconds = Nothing
    , _vtosPhase1EncryptionAlgorithms = Nothing
    , _vtosPhase1DHGroupNumbers = Nothing
    , _vtosPhase1IntegrityAlgorithms = Nothing
    , _vtosRekeyMarginTimeSeconds = Nothing
    , _vtosDPDTimeoutSeconds = Nothing
    , _vtosTunnelInsideCidr = Nothing
    , _vtosStartupAction = Nothing
    , _vtosPhase2EncryptionAlgorithms = Nothing
    , _vtosPhase2DHGroupNumbers = Nothing
    , _vtosPreSharedKey = Nothing
    , _vtosTunnelInsideIPv6Cidr = Nothing
    }


-- | The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: @1024@
vtosReplayWindowSize :: Lens' VPNTunnelOptionsSpecification (Maybe Int)
vtosReplayWindowSize = lens _vtosReplayWindowSize (\ s a -> s{_vtosReplayWindowSize = a})

-- | The action to take after DPD timeout occurs. Specify @restart@ to restart the IKE initiation. Specify @clear@ to end the IKE session. Valid Values: @clear@ | @none@ | @restart@  Default: @clear@
vtosDPDTimeoutAction :: Lens' VPNTunnelOptionsSpecification (Maybe Text)
vtosDPDTimeoutAction = lens _vtosDPDTimeoutAction (\ s a -> s{_vtosDPDTimeoutAction = a})

-- | The percentage of the rekey window (determined by @RekeyMarginTimeSeconds@ ) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: @100@
vtosRekeyFuzzPercentage :: Lens' VPNTunnelOptionsSpecification (Maybe Int)
vtosRekeyFuzzPercentage = lens _vtosRekeyFuzzPercentage (\ s a -> s{_vtosRekeyFuzzPercentage = a})

-- | The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: @28800@
vtosPhase1LifetimeSeconds :: Lens' VPNTunnelOptionsSpecification (Maybe Int)
vtosPhase1LifetimeSeconds = lens _vtosPhase1LifetimeSeconds (\ s a -> s{_vtosPhase1LifetimeSeconds = a})

-- | The IKE versions that are permitted for the VPN tunnel. Valid values: @ikev1@ | @ikev2@
vtosIKEVersions :: Lens' VPNTunnelOptionsSpecification [IKEVersionsRequestListValue]
vtosIKEVersions = lens _vtosIKEVersions (\ s a -> s{_vtosIKEVersions = a}) . _Default . _Coerce

-- | One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @SHA1@ | @SHA2-256@ | @SHA2-384@ | @SHA2-512@
vtosPhase2IntegrityAlgorithms :: Lens' VPNTunnelOptionsSpecification [Phase2IntegrityAlgorithmsRequestListValue]
vtosPhase2IntegrityAlgorithms = lens _vtosPhase2IntegrityAlgorithms (\ s a -> s{_vtosPhase2IntegrityAlgorithms = a}) . _Default . _Coerce

-- | The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for @Phase1LifetimeSeconds@ . Default: @3600@
vtosPhase2LifetimeSeconds :: Lens' VPNTunnelOptionsSpecification (Maybe Int)
vtosPhase2LifetimeSeconds = lens _vtosPhase2LifetimeSeconds (\ s a -> s{_vtosPhase2LifetimeSeconds = a})

-- | One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @AES128@ | @AES256@ | @AES128-GCM-16@ | @AES256-GCM-16@
vtosPhase1EncryptionAlgorithms :: Lens' VPNTunnelOptionsSpecification [Phase1EncryptionAlgorithmsRequestListValue]
vtosPhase1EncryptionAlgorithms = lens _vtosPhase1EncryptionAlgorithms (\ s a -> s{_vtosPhase1EncryptionAlgorithms = a}) . _Default . _Coerce

-- | One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @2@ | @14@ | @15@ | @16@ | @17@ | @18@ | @19@ | @20@ | @21@ | @22@ | @23@ | @24@
vtosPhase1DHGroupNumbers :: Lens' VPNTunnelOptionsSpecification [Phase1DHGroupNumbersRequestListValue]
vtosPhase1DHGroupNumbers = lens _vtosPhase1DHGroupNumbers (\ s a -> s{_vtosPhase1DHGroupNumbers = a}) . _Default . _Coerce

-- | One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: @SHA1@ | @SHA2-256@ | @SHA2-384@ | @SHA2-512@
vtosPhase1IntegrityAlgorithms :: Lens' VPNTunnelOptionsSpecification [Phase1IntegrityAlgorithmsRequestListValue]
vtosPhase1IntegrityAlgorithms = lens _vtosPhase1IntegrityAlgorithms (\ s a -> s{_vtosPhase1IntegrityAlgorithms = a}) . _Default . _Coerce

-- | The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for @RekeyFuzzPercentage@ . Constraints: A value between 60 and half of @Phase2LifetimeSeconds@ . Default: @540@
vtosRekeyMarginTimeSeconds :: Lens' VPNTunnelOptionsSpecification (Maybe Int)
vtosRekeyMarginTimeSeconds = lens _vtosRekeyMarginTimeSeconds (\ s a -> s{_vtosRekeyMarginTimeSeconds = a})

-- | The number of seconds after which a DPD timeout occurs. Constraints: A value between 0 and 30. Default: @30@
vtosDPDTimeoutSeconds :: Lens' VPNTunnelOptionsSpecification (Maybe Int)
vtosDPDTimeoutSeconds = lens _vtosDPDTimeoutSeconds (\ s a -> s{_vtosDPDTimeoutSeconds = a})

-- | The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the @169.254.0.0/16@ range. The following CIDR blocks are reserved and cannot be used:     * @169.254.0.0/30@      * @169.254.1.0/30@      * @169.254.2.0/30@      * @169.254.3.0/30@      * @169.254.4.0/30@      * @169.254.5.0/30@      * @169.254.169.252/30@
vtosTunnelInsideCidr :: Lens' VPNTunnelOptionsSpecification (Maybe Text)
vtosTunnelInsideCidr = lens _vtosTunnelInsideCidr (\ s a -> s{_vtosTunnelInsideCidr = a})

-- | The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify @start@ for AWS to initiate the IKE negotiation. Valid Values: @add@ | @start@  Default: @add@
vtosStartupAction :: Lens' VPNTunnelOptionsSpecification (Maybe Text)
vtosStartupAction = lens _vtosStartupAction (\ s a -> s{_vtosStartupAction = a})

-- | One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @AES128@ | @AES256@ | @AES128-GCM-16@ | @AES256-GCM-16@
vtosPhase2EncryptionAlgorithms :: Lens' VPNTunnelOptionsSpecification [Phase2EncryptionAlgorithmsRequestListValue]
vtosPhase2EncryptionAlgorithms = lens _vtosPhase2EncryptionAlgorithms (\ s a -> s{_vtosPhase2EncryptionAlgorithms = a}) . _Default . _Coerce

-- | One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: @2@ | @5@ | @14@ | @15@ | @16@ | @17@ | @18@ | @19@ | @20@ | @21@ | @22@ | @23@ | @24@
vtosPhase2DHGroupNumbers :: Lens' VPNTunnelOptionsSpecification [Phase2DHGroupNumbersRequestListValue]
vtosPhase2DHGroupNumbers = lens _vtosPhase2DHGroupNumbers (\ s a -> s{_vtosPhase2DHGroupNumbers = a}) . _Default . _Coerce

-- | The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
vtosPreSharedKey :: Lens' VPNTunnelOptionsSpecification (Maybe Text)
vtosPreSharedKey = lens _vtosPreSharedKey (\ s a -> s{_vtosPreSharedKey = a})

-- | The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local @fd00::/8@ range.
vtosTunnelInsideIPv6Cidr :: Lens' VPNTunnelOptionsSpecification (Maybe Text)
vtosTunnelInsideIPv6Cidr = lens _vtosTunnelInsideIPv6Cidr (\ s a -> s{_vtosTunnelInsideIPv6Cidr = a})

instance Hashable VPNTunnelOptionsSpecification where

instance NFData VPNTunnelOptionsSpecification where

instance ToQuery VPNTunnelOptionsSpecification where
        toQuery VPNTunnelOptionsSpecification'{..}
          = mconcat
              ["ReplayWindowSize" =: _vtosReplayWindowSize,
               "DPDTimeoutAction" =: _vtosDPDTimeoutAction,
               "RekeyFuzzPercentage" =: _vtosRekeyFuzzPercentage,
               "Phase1LifetimeSeconds" =:
                 _vtosPhase1LifetimeSeconds,
               toQuery
                 (toQueryList "IKEVersion" <$> _vtosIKEVersions),
               toQuery
                 (toQueryList "Phase2IntegrityAlgorithm" <$>
                    _vtosPhase2IntegrityAlgorithms),
               "Phase2LifetimeSeconds" =:
                 _vtosPhase2LifetimeSeconds,
               toQuery
                 (toQueryList "Phase1EncryptionAlgorithm" <$>
                    _vtosPhase1EncryptionAlgorithms),
               toQuery
                 (toQueryList "Phase1DHGroupNumber" <$>
                    _vtosPhase1DHGroupNumbers),
               toQuery
                 (toQueryList "Phase1IntegrityAlgorithm" <$>
                    _vtosPhase1IntegrityAlgorithms),
               "RekeyMarginTimeSeconds" =:
                 _vtosRekeyMarginTimeSeconds,
               "DPDTimeoutSeconds" =: _vtosDPDTimeoutSeconds,
               "TunnelInsideCidr" =: _vtosTunnelInsideCidr,
               "StartupAction" =: _vtosStartupAction,
               toQuery
                 (toQueryList "Phase2EncryptionAlgorithm" <$>
                    _vtosPhase2EncryptionAlgorithms),
               toQuery
                 (toQueryList "Phase2DHGroupNumber" <$>
                    _vtosPhase2DHGroupNumbers),
               "PreSharedKey" =: _vtosPreSharedKey,
               "TunnelInsideIpv6Cidr" =: _vtosTunnelInsideIPv6Cidr]

-- | The error code and error message that is returned for a parameter or parameter combination that is not valid when a new launch template or new version of a launch template is created.
--
--
--
-- /See:/ 'validationError' smart constructor.
data ValidationError = ValidationError'
  { _veCode    :: !(Maybe Text)
  , _veMessage :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ValidationError' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'veCode' - The error code that indicates why the parameter or parameter combination is not valid. For more information about error codes, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
--
-- * 'veMessage' - The error message that describes why the parameter or parameter combination is not valid. For more information about error messages, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
validationError
    :: ValidationError
validationError = ValidationError' {_veCode = Nothing, _veMessage = Nothing}


-- | The error code that indicates why the parameter or parameter combination is not valid. For more information about error codes, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
veCode :: Lens' ValidationError (Maybe Text)
veCode = lens _veCode (\ s a -> s{_veCode = a})

-- | The error message that describes why the parameter or parameter combination is not valid. For more information about error messages, see <https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html Error Codes> .
veMessage :: Lens' ValidationError (Maybe Text)
veMessage = lens _veMessage (\ s a -> s{_veMessage = a})

instance FromXML ValidationError where
        parseXML x
          = ValidationError' <$>
              (x .@? "code") <*> (x .@? "message")

instance Hashable ValidationError where

instance NFData ValidationError where

-- | The error codes and error messages that are returned for the parameters or parameter combinations that are not valid when a new launch template or new version of a launch template is created.
--
--
--
-- /See:/ 'validationWarning' smart constructor.
newtype ValidationWarning = ValidationWarning'
  { _vwErrors :: Maybe [ValidationError]
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'ValidationWarning' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vwErrors' - The error codes and error messages.
validationWarning
    :: ValidationWarning
validationWarning = ValidationWarning' {_vwErrors = Nothing}


-- | The error codes and error messages.
vwErrors :: Lens' ValidationWarning [ValidationError]
vwErrors = lens _vwErrors (\ s a -> s{_vwErrors = a}) . _Default . _Coerce

instance FromXML ValidationWarning where
        parseXML x
          = ValidationWarning' <$>
              (x .@? "errorSet" .!@ mempty >>=
                 may (parseXMLList "item"))

instance Hashable ValidationWarning where

instance NFData ValidationWarning where

-- | Describes a volume.
--
--
--
-- /See:/ 'volume' smart constructor.
data Volume = Volume'
  { _vFastRestored       :: !(Maybe Bool)
  , _vMultiAttachEnabled :: !(Maybe Bool)
  , _vAttachments        :: !(Maybe [VolumeAttachment])
  , _vThroughput         :: !(Maybe Int)
  , _vIOPS               :: !(Maybe Int)
  , _vOutpostARN         :: !(Maybe Text)
  , _vKMSKeyId           :: !(Maybe Text)
  , _vTags               :: !(Maybe [Tag])
  , _vAvailabilityZone   :: !Text
  , _vCreateTime         :: !ISO8601
  , _vEncrypted          :: !Bool
  , _vSize               :: !Int
  , _vSnapshotId         :: !Text
  , _vState              :: !VolumeState
  , _vVolumeId           :: !Text
  , _vVolumeType         :: !VolumeType
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'Volume' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vFastRestored' - Indicates whether the volume was created using fast snapshot restore.
--
-- * 'vMultiAttachEnabled' - Indicates whether Amazon EBS Multi-Attach is enabled.
--
-- * 'vAttachments' - Information about the volume attachments.
--
-- * 'vThroughput' - The throughput that the volume supports, in MiB/s.
--
-- * 'vIOPS' - The number of I/O operations per second (IOPS). For @gp3@ , @io1@ , and @io2@ volumes, this represents the number of IOPS that are provisioned for the volume. For @gp2@ volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
--
-- * 'vOutpostARN' - The Amazon Resource Name (ARN) of the Outpost.
--
-- * 'vKMSKeyId' - The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.
--
-- * 'vTags' - Any tags assigned to the volume.
--
-- * 'vAvailabilityZone' - The Availability Zone for the volume.
--
-- * 'vCreateTime' - The time stamp when volume creation was initiated.
--
-- * 'vEncrypted' - Indicates whether the volume is encrypted.
--
-- * 'vSize' - The size of the volume, in GiBs.
--
-- * 'vSnapshotId' - The snapshot from which the volume was created, if applicable.
--
-- * 'vState' - The volume state.
--
-- * 'vVolumeId' - The ID of the volume.
--
-- * 'vVolumeType' - The volume type.
volume
    :: Text -- ^ 'vAvailabilityZone'
    -> UTCTime -- ^ 'vCreateTime'
    -> Bool -- ^ 'vEncrypted'
    -> Int -- ^ 'vSize'
    -> Text -- ^ 'vSnapshotId'
    -> VolumeState -- ^ 'vState'
    -> Text -- ^ 'vVolumeId'
    -> VolumeType -- ^ 'vVolumeType'
    -> Volume
volume pAvailabilityZone_ pCreateTime_ pEncrypted_ pSize_ pSnapshotId_ pState_ pVolumeId_ pVolumeType_ =
  Volume'
    { _vFastRestored = Nothing
    , _vMultiAttachEnabled = Nothing
    , _vAttachments = Nothing
    , _vThroughput = Nothing
    , _vIOPS = Nothing
    , _vOutpostARN = Nothing
    , _vKMSKeyId = Nothing
    , _vTags = Nothing
    , _vAvailabilityZone = pAvailabilityZone_
    , _vCreateTime = _Time # pCreateTime_
    , _vEncrypted = pEncrypted_
    , _vSize = pSize_
    , _vSnapshotId = pSnapshotId_
    , _vState = pState_
    , _vVolumeId = pVolumeId_
    , _vVolumeType = pVolumeType_
    }


-- | Indicates whether the volume was created using fast snapshot restore.
vFastRestored :: Lens' Volume (Maybe Bool)
vFastRestored = lens _vFastRestored (\ s a -> s{_vFastRestored = a})

-- | Indicates whether Amazon EBS Multi-Attach is enabled.
vMultiAttachEnabled :: Lens' Volume (Maybe Bool)
vMultiAttachEnabled = lens _vMultiAttachEnabled (\ s a -> s{_vMultiAttachEnabled = a})

-- | Information about the volume attachments.
vAttachments :: Lens' Volume [VolumeAttachment]
vAttachments = lens _vAttachments (\ s a -> s{_vAttachments = a}) . _Default . _Coerce

-- | The throughput that the volume supports, in MiB/s.
vThroughput :: Lens' Volume (Maybe Int)
vThroughput = lens _vThroughput (\ s a -> s{_vThroughput = a})

-- | The number of I/O operations per second (IOPS). For @gp3@ , @io1@ , and @io2@ volumes, this represents the number of IOPS that are provisioned for the volume. For @gp2@ volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
vIOPS :: Lens' Volume (Maybe Int)
vIOPS = lens _vIOPS (\ s a -> s{_vIOPS = a})

-- | The Amazon Resource Name (ARN) of the Outpost.
vOutpostARN :: Lens' Volume (Maybe Text)
vOutpostARN = lens _vOutpostARN (\ s a -> s{_vOutpostARN = a})

-- | The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.
vKMSKeyId :: Lens' Volume (Maybe Text)
vKMSKeyId = lens _vKMSKeyId (\ s a -> s{_vKMSKeyId = a})

-- | Any tags assigned to the volume.
vTags :: Lens' Volume [Tag]
vTags = lens _vTags (\ s a -> s{_vTags = a}) . _Default . _Coerce

-- | The Availability Zone for the volume.
vAvailabilityZone :: Lens' Volume Text
vAvailabilityZone = lens _vAvailabilityZone (\ s a -> s{_vAvailabilityZone = a})

-- | The time stamp when volume creation was initiated.
vCreateTime :: Lens' Volume UTCTime
vCreateTime = lens _vCreateTime (\ s a -> s{_vCreateTime = a}) . _Time

-- | Indicates whether the volume is encrypted.
vEncrypted :: Lens' Volume Bool
vEncrypted = lens _vEncrypted (\ s a -> s{_vEncrypted = a})

-- | The size of the volume, in GiBs.
vSize :: Lens' Volume Int
vSize = lens _vSize (\ s a -> s{_vSize = a})

-- | The snapshot from which the volume was created, if applicable.
vSnapshotId :: Lens' Volume Text
vSnapshotId = lens _vSnapshotId (\ s a -> s{_vSnapshotId = a})

-- | The volume state.
vState :: Lens' Volume VolumeState
vState = lens _vState (\ s a -> s{_vState = a})

-- | The ID of the volume.
vVolumeId :: Lens' Volume Text
vVolumeId = lens _vVolumeId (\ s a -> s{_vVolumeId = a})

-- | The volume type.
vVolumeType :: Lens' Volume VolumeType
vVolumeType = lens _vVolumeType (\ s a -> s{_vVolumeType = a})

instance FromXML Volume where
        parseXML x
          = Volume' <$>
              (x .@? "fastRestored") <*>
                (x .@? "multiAttachEnabled")
                <*>
                (x .@? "attachmentSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "throughput")
                <*> (x .@? "iops")
                <*> (x .@? "outpostArn")
                <*> (x .@? "kmsKeyId")
                <*>
                (x .@? "tagSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@ "availabilityZone")
                <*> (x .@ "createTime")
                <*> (x .@ "encrypted")
                <*> (x .@ "size")
                <*> (x .@ "snapshotId")
                <*> (x .@ "status")
                <*> (x .@ "volumeId")
                <*> (x .@ "volumeType")

instance Hashable Volume where

instance NFData Volume where

-- | Describes volume attachment details.
--
--
--
-- /See:/ 'volumeAttachment' smart constructor.
data VolumeAttachment = VolumeAttachment'
  { _volInstanceId          :: !(Maybe Text)
  , _volDeleteOnTermination :: !(Maybe Bool)
  , _volState               :: !(Maybe VolumeAttachmentState)
  , _volDevice              :: !(Maybe Text)
  , _volVolumeId            :: !(Maybe Text)
  , _volAttachTime          :: !(Maybe ISO8601)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VolumeAttachment' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'volInstanceId' - The ID of the instance.
--
-- * 'volDeleteOnTermination' - Indicates whether the EBS volume is deleted on instance termination.
--
-- * 'volState' - The attachment state of the volume.
--
-- * 'volDevice' - The device name.
--
-- * 'volVolumeId' - The ID of the volume.
--
-- * 'volAttachTime' - The time stamp when the attachment initiated.
volumeAttachment
    :: VolumeAttachment
volumeAttachment =
  VolumeAttachment'
    { _volInstanceId = Nothing
    , _volDeleteOnTermination = Nothing
    , _volState = Nothing
    , _volDevice = Nothing
    , _volVolumeId = Nothing
    , _volAttachTime = Nothing
    }


-- | The ID of the instance.
volInstanceId :: Lens' VolumeAttachment (Maybe Text)
volInstanceId = lens _volInstanceId (\ s a -> s{_volInstanceId = a})

-- | Indicates whether the EBS volume is deleted on instance termination.
volDeleteOnTermination :: Lens' VolumeAttachment (Maybe Bool)
volDeleteOnTermination = lens _volDeleteOnTermination (\ s a -> s{_volDeleteOnTermination = a})

-- | The attachment state of the volume.
volState :: Lens' VolumeAttachment (Maybe VolumeAttachmentState)
volState = lens _volState (\ s a -> s{_volState = a})

-- | The device name.
volDevice :: Lens' VolumeAttachment (Maybe Text)
volDevice = lens _volDevice (\ s a -> s{_volDevice = a})

-- | The ID of the volume.
volVolumeId :: Lens' VolumeAttachment (Maybe Text)
volVolumeId = lens _volVolumeId (\ s a -> s{_volVolumeId = a})

-- | The time stamp when the attachment initiated.
volAttachTime :: Lens' VolumeAttachment (Maybe UTCTime)
volAttachTime = lens _volAttachTime (\ s a -> s{_volAttachTime = a}) . mapping _Time

instance FromXML VolumeAttachment where
        parseXML x
          = VolumeAttachment' <$>
              (x .@? "instanceId") <*>
                (x .@? "deleteOnTermination")
                <*> (x .@? "status")
                <*> (x .@? "device")
                <*> (x .@? "volumeId")
                <*> (x .@? "attachTime")

instance Hashable VolumeAttachment where

instance NFData VolumeAttachment where

-- | Describes an EBS volume.
--
--
--
-- /See:/ 'volumeDetail' smart constructor.
newtype VolumeDetail = VolumeDetail'
  { _vdSize :: Integer
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VolumeDetail' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vdSize' - The size of the volume, in GiB.
volumeDetail
    :: Integer -- ^ 'vdSize'
    -> VolumeDetail
volumeDetail pSize_ = VolumeDetail' {_vdSize = pSize_}


-- | The size of the volume, in GiB.
vdSize :: Lens' VolumeDetail Integer
vdSize = lens _vdSize (\ s a -> s{_vdSize = a})

instance Hashable VolumeDetail where

instance NFData VolumeDetail where

instance ToQuery VolumeDetail where
        toQuery VolumeDetail'{..}
          = mconcat ["Size" =: _vdSize]

-- | Describes the modification status of an EBS volume.
--
--
-- If the volume has never been modified, some element values will be null.
--
--
-- /See:/ 'volumeModification' smart constructor.
data VolumeModification = VolumeModification'
  { _vmProgress                   :: !(Maybe Integer)
  , _vmStartTime                  :: !(Maybe ISO8601)
  , _vmTargetMultiAttachEnabled   :: !(Maybe Bool)
  , _vmOriginalMultiAttachEnabled :: !(Maybe Bool)
  , _vmModificationState          :: !(Maybe VolumeModificationState)
  , _vmTargetVolumeType           :: !(Maybe VolumeType)
  , _vmOriginalVolumeType         :: !(Maybe VolumeType)
  , _vmTargetSize                 :: !(Maybe Int)
  , _vmTargetIOPS                 :: !(Maybe Int)
  , _vmOriginalSize               :: !(Maybe Int)
  , _vmOriginalIOPS               :: !(Maybe Int)
  , _vmStatusMessage              :: !(Maybe Text)
  , _vmEndTime                    :: !(Maybe ISO8601)
  , _vmVolumeId                   :: !(Maybe Text)
  , _vmOriginalThroughput         :: !(Maybe Int)
  , _vmTargetThroughput           :: !(Maybe Int)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VolumeModification' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vmProgress' - The modification progress, from 0 to 100 percent complete.
--
-- * 'vmStartTime' - The modification start time.
--
-- * 'vmTargetMultiAttachEnabled' - The target setting for Amazon EBS Multi-Attach.
--
-- * 'vmOriginalMultiAttachEnabled' - The original setting for Amazon EBS Multi-Attach.
--
-- * 'vmModificationState' - The current modification state. The modification state is null for unmodified volumes.
--
-- * 'vmTargetVolumeType' - The target EBS volume type of the volume.
--
-- * 'vmOriginalVolumeType' - The original EBS volume type of the volume.
--
-- * 'vmTargetSize' - The target size of the volume, in GiB.
--
-- * 'vmTargetIOPS' - The target IOPS rate of the volume.
--
-- * 'vmOriginalSize' - The original size of the volume, in GiB.
--
-- * 'vmOriginalIOPS' - The original IOPS rate of the volume.
--
-- * 'vmStatusMessage' - A status message about the modification progress or failure.
--
-- * 'vmEndTime' - The modification completion or failure time.
--
-- * 'vmVolumeId' - The ID of the volume.
--
-- * 'vmOriginalThroughput' - The original throughput of the volume, in MiB/s.
--
-- * 'vmTargetThroughput' - The target throughput of the volume, in MiB/s.
volumeModification
    :: VolumeModification
volumeModification =
  VolumeModification'
    { _vmProgress = Nothing
    , _vmStartTime = Nothing
    , _vmTargetMultiAttachEnabled = Nothing
    , _vmOriginalMultiAttachEnabled = Nothing
    , _vmModificationState = Nothing
    , _vmTargetVolumeType = Nothing
    , _vmOriginalVolumeType = Nothing
    , _vmTargetSize = Nothing
    , _vmTargetIOPS = Nothing
    , _vmOriginalSize = Nothing
    , _vmOriginalIOPS = Nothing
    , _vmStatusMessage = Nothing
    , _vmEndTime = Nothing
    , _vmVolumeId = Nothing
    , _vmOriginalThroughput = Nothing
    , _vmTargetThroughput = Nothing
    }


-- | The modification progress, from 0 to 100 percent complete.
vmProgress :: Lens' VolumeModification (Maybe Integer)
vmProgress = lens _vmProgress (\ s a -> s{_vmProgress = a})

-- | The modification start time.
vmStartTime :: Lens' VolumeModification (Maybe UTCTime)
vmStartTime = lens _vmStartTime (\ s a -> s{_vmStartTime = a}) . mapping _Time

-- | The target setting for Amazon EBS Multi-Attach.
vmTargetMultiAttachEnabled :: Lens' VolumeModification (Maybe Bool)
vmTargetMultiAttachEnabled = lens _vmTargetMultiAttachEnabled (\ s a -> s{_vmTargetMultiAttachEnabled = a})

-- | The original setting for Amazon EBS Multi-Attach.
vmOriginalMultiAttachEnabled :: Lens' VolumeModification (Maybe Bool)
vmOriginalMultiAttachEnabled = lens _vmOriginalMultiAttachEnabled (\ s a -> s{_vmOriginalMultiAttachEnabled = a})

-- | The current modification state. The modification state is null for unmodified volumes.
vmModificationState :: Lens' VolumeModification (Maybe VolumeModificationState)
vmModificationState = lens _vmModificationState (\ s a -> s{_vmModificationState = a})

-- | The target EBS volume type of the volume.
vmTargetVolumeType :: Lens' VolumeModification (Maybe VolumeType)
vmTargetVolumeType = lens _vmTargetVolumeType (\ s a -> s{_vmTargetVolumeType = a})

-- | The original EBS volume type of the volume.
vmOriginalVolumeType :: Lens' VolumeModification (Maybe VolumeType)
vmOriginalVolumeType = lens _vmOriginalVolumeType (\ s a -> s{_vmOriginalVolumeType = a})

-- | The target size of the volume, in GiB.
vmTargetSize :: Lens' VolumeModification (Maybe Int)
vmTargetSize = lens _vmTargetSize (\ s a -> s{_vmTargetSize = a})

-- | The target IOPS rate of the volume.
vmTargetIOPS :: Lens' VolumeModification (Maybe Int)
vmTargetIOPS = lens _vmTargetIOPS (\ s a -> s{_vmTargetIOPS = a})

-- | The original size of the volume, in GiB.
vmOriginalSize :: Lens' VolumeModification (Maybe Int)
vmOriginalSize = lens _vmOriginalSize (\ s a -> s{_vmOriginalSize = a})

-- | The original IOPS rate of the volume.
vmOriginalIOPS :: Lens' VolumeModification (Maybe Int)
vmOriginalIOPS = lens _vmOriginalIOPS (\ s a -> s{_vmOriginalIOPS = a})

-- | A status message about the modification progress or failure.
vmStatusMessage :: Lens' VolumeModification (Maybe Text)
vmStatusMessage = lens _vmStatusMessage (\ s a -> s{_vmStatusMessage = a})

-- | The modification completion or failure time.
vmEndTime :: Lens' VolumeModification (Maybe UTCTime)
vmEndTime = lens _vmEndTime (\ s a -> s{_vmEndTime = a}) . mapping _Time

-- | The ID of the volume.
vmVolumeId :: Lens' VolumeModification (Maybe Text)
vmVolumeId = lens _vmVolumeId (\ s a -> s{_vmVolumeId = a})

-- | The original throughput of the volume, in MiB/s.
vmOriginalThroughput :: Lens' VolumeModification (Maybe Int)
vmOriginalThroughput = lens _vmOriginalThroughput (\ s a -> s{_vmOriginalThroughput = a})

-- | The target throughput of the volume, in MiB/s.
vmTargetThroughput :: Lens' VolumeModification (Maybe Int)
vmTargetThroughput = lens _vmTargetThroughput (\ s a -> s{_vmTargetThroughput = a})

instance FromXML VolumeModification where
        parseXML x
          = VolumeModification' <$>
              (x .@? "progress") <*> (x .@? "startTime") <*>
                (x .@? "targetMultiAttachEnabled")
                <*> (x .@? "originalMultiAttachEnabled")
                <*> (x .@? "modificationState")
                <*> (x .@? "targetVolumeType")
                <*> (x .@? "originalVolumeType")
                <*> (x .@? "targetSize")
                <*> (x .@? "targetIops")
                <*> (x .@? "originalSize")
                <*> (x .@? "originalIops")
                <*> (x .@? "statusMessage")
                <*> (x .@? "endTime")
                <*> (x .@? "volumeId")
                <*> (x .@? "originalThroughput")
                <*> (x .@? "targetThroughput")

instance Hashable VolumeModification where

instance NFData VolumeModification where

-- | Describes a volume status operation code.
--
--
--
-- /See:/ 'volumeStatusAction' smart constructor.
data VolumeStatusAction = VolumeStatusAction'
  { _vsaEventType   :: !(Maybe Text)
  , _vsaCode        :: !(Maybe Text)
  , _vsaDescription :: !(Maybe Text)
  , _vsaEventId     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VolumeStatusAction' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vsaEventType' - The event type associated with this operation.
--
-- * 'vsaCode' - The code identifying the operation, for example, @enable-volume-io@ .
--
-- * 'vsaDescription' - A description of the operation.
--
-- * 'vsaEventId' - The ID of the event associated with this operation.
volumeStatusAction
    :: VolumeStatusAction
volumeStatusAction =
  VolumeStatusAction'
    { _vsaEventType = Nothing
    , _vsaCode = Nothing
    , _vsaDescription = Nothing
    , _vsaEventId = Nothing
    }


-- | The event type associated with this operation.
vsaEventType :: Lens' VolumeStatusAction (Maybe Text)
vsaEventType = lens _vsaEventType (\ s a -> s{_vsaEventType = a})

-- | The code identifying the operation, for example, @enable-volume-io@ .
vsaCode :: Lens' VolumeStatusAction (Maybe Text)
vsaCode = lens _vsaCode (\ s a -> s{_vsaCode = a})

-- | A description of the operation.
vsaDescription :: Lens' VolumeStatusAction (Maybe Text)
vsaDescription = lens _vsaDescription (\ s a -> s{_vsaDescription = a})

-- | The ID of the event associated with this operation.
vsaEventId :: Lens' VolumeStatusAction (Maybe Text)
vsaEventId = lens _vsaEventId (\ s a -> s{_vsaEventId = a})

instance FromXML VolumeStatusAction where
        parseXML x
          = VolumeStatusAction' <$>
              (x .@? "eventType") <*> (x .@? "code") <*>
                (x .@? "description")
                <*> (x .@? "eventId")

instance Hashable VolumeStatusAction where

instance NFData VolumeStatusAction where

-- | Information about the instances to which the volume is attached.
--
--
--
-- /See:/ 'volumeStatusAttachmentStatus' smart constructor.
data VolumeStatusAttachmentStatus = VolumeStatusAttachmentStatus'
  { _vsasInstanceId    :: !(Maybe Text)
  , _vsasIOPerformance :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VolumeStatusAttachmentStatus' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vsasInstanceId' - The ID of the attached instance.
--
-- * 'vsasIOPerformance' - The maximum IOPS supported by the attached instance.
volumeStatusAttachmentStatus
    :: VolumeStatusAttachmentStatus
volumeStatusAttachmentStatus =
  VolumeStatusAttachmentStatus'
    {_vsasInstanceId = Nothing, _vsasIOPerformance = Nothing}


-- | The ID of the attached instance.
vsasInstanceId :: Lens' VolumeStatusAttachmentStatus (Maybe Text)
vsasInstanceId = lens _vsasInstanceId (\ s a -> s{_vsasInstanceId = a})

-- | The maximum IOPS supported by the attached instance.
vsasIOPerformance :: Lens' VolumeStatusAttachmentStatus (Maybe Text)
vsasIOPerformance = lens _vsasIOPerformance (\ s a -> s{_vsasIOPerformance = a})

instance FromXML VolumeStatusAttachmentStatus where
        parseXML x
          = VolumeStatusAttachmentStatus' <$>
              (x .@? "instanceId") <*> (x .@? "ioPerformance")

instance Hashable VolumeStatusAttachmentStatus where

instance NFData VolumeStatusAttachmentStatus where

-- | Describes a volume status.
--
--
--
-- /See:/ 'volumeStatusDetails' smart constructor.
data VolumeStatusDetails = VolumeStatusDetails'
  { _vsdStatus :: !(Maybe Text)
  , _vsdName   :: !(Maybe VolumeStatusName)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VolumeStatusDetails' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vsdStatus' - The intended status of the volume status.
--
-- * 'vsdName' - The name of the volume status.
volumeStatusDetails
    :: VolumeStatusDetails
volumeStatusDetails =
  VolumeStatusDetails' {_vsdStatus = Nothing, _vsdName = Nothing}


-- | The intended status of the volume status.
vsdStatus :: Lens' VolumeStatusDetails (Maybe Text)
vsdStatus = lens _vsdStatus (\ s a -> s{_vsdStatus = a})

-- | The name of the volume status.
vsdName :: Lens' VolumeStatusDetails (Maybe VolumeStatusName)
vsdName = lens _vsdName (\ s a -> s{_vsdName = a})

instance FromXML VolumeStatusDetails where
        parseXML x
          = VolumeStatusDetails' <$>
              (x .@? "status") <*> (x .@? "name")

instance Hashable VolumeStatusDetails where

instance NFData VolumeStatusDetails where

-- | Describes a volume status event.
--
--
--
-- /See:/ 'volumeStatusEvent' smart constructor.
data VolumeStatusEvent = VolumeStatusEvent'
  { _vseInstanceId  :: !(Maybe Text)
  , _vseNotBefore   :: !(Maybe ISO8601)
  , _vseEventType   :: !(Maybe Text)
  , _vseDescription :: !(Maybe Text)
  , _vseNotAfter    :: !(Maybe ISO8601)
  , _vseEventId     :: !(Maybe Text)
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VolumeStatusEvent' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vseInstanceId' - The ID of the instance associated with the event.
--
-- * 'vseNotBefore' - The earliest start time of the event.
--
-- * 'vseEventType' - The type of this event.
--
-- * 'vseDescription' - A description of the event.
--
-- * 'vseNotAfter' - The latest end time of the event.
--
-- * 'vseEventId' - The ID of this event.
volumeStatusEvent
    :: VolumeStatusEvent
volumeStatusEvent =
  VolumeStatusEvent'
    { _vseInstanceId = Nothing
    , _vseNotBefore = Nothing
    , _vseEventType = Nothing
    , _vseDescription = Nothing
    , _vseNotAfter = Nothing
    , _vseEventId = Nothing
    }


-- | The ID of the instance associated with the event.
vseInstanceId :: Lens' VolumeStatusEvent (Maybe Text)
vseInstanceId = lens _vseInstanceId (\ s a -> s{_vseInstanceId = a})

-- | The earliest start time of the event.
vseNotBefore :: Lens' VolumeStatusEvent (Maybe UTCTime)
vseNotBefore = lens _vseNotBefore (\ s a -> s{_vseNotBefore = a}) . mapping _Time

-- | The type of this event.
vseEventType :: Lens' VolumeStatusEvent (Maybe Text)
vseEventType = lens _vseEventType (\ s a -> s{_vseEventType = a})

-- | A description of the event.
vseDescription :: Lens' VolumeStatusEvent (Maybe Text)
vseDescription = lens _vseDescription (\ s a -> s{_vseDescription = a})

-- | The latest end time of the event.
vseNotAfter :: Lens' VolumeStatusEvent (Maybe UTCTime)
vseNotAfter = lens _vseNotAfter (\ s a -> s{_vseNotAfter = a}) . mapping _Time

-- | The ID of this event.
vseEventId :: Lens' VolumeStatusEvent (Maybe Text)
vseEventId = lens _vseEventId (\ s a -> s{_vseEventId = a})

instance FromXML VolumeStatusEvent where
        parseXML x
          = VolumeStatusEvent' <$>
              (x .@? "instanceId") <*> (x .@? "notBefore") <*>
                (x .@? "eventType")
                <*> (x .@? "description")
                <*> (x .@? "notAfter")
                <*> (x .@? "eventId")

instance Hashable VolumeStatusEvent where

instance NFData VolumeStatusEvent where

-- | Describes the status of a volume.
--
--
--
-- /See:/ 'volumeStatusInfo' smart constructor.
data VolumeStatusInfo = VolumeStatusInfo'
  { _vsiStatus  :: !(Maybe VolumeStatusInfoStatus)
  , _vsiDetails :: !(Maybe [VolumeStatusDetails])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VolumeStatusInfo' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vsiStatus' - The status of the volume.
--
-- * 'vsiDetails' - The details of the volume status.
volumeStatusInfo
    :: VolumeStatusInfo
volumeStatusInfo =
  VolumeStatusInfo' {_vsiStatus = Nothing, _vsiDetails = Nothing}


-- | The status of the volume.
vsiStatus :: Lens' VolumeStatusInfo (Maybe VolumeStatusInfoStatus)
vsiStatus = lens _vsiStatus (\ s a -> s{_vsiStatus = a})

-- | The details of the volume status.
vsiDetails :: Lens' VolumeStatusInfo [VolumeStatusDetails]
vsiDetails = lens _vsiDetails (\ s a -> s{_vsiDetails = a}) . _Default . _Coerce

instance FromXML VolumeStatusInfo where
        parseXML x
          = VolumeStatusInfo' <$>
              (x .@? "status") <*>
                (x .@? "details" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable VolumeStatusInfo where

instance NFData VolumeStatusInfo where

-- | Describes the volume status.
--
--
--
-- /See:/ 'volumeStatusItem' smart constructor.
data VolumeStatusItem = VolumeStatusItem'
  { _vsiVolumeStatus       :: !(Maybe VolumeStatusInfo)
  , _vsiActions            :: !(Maybe [VolumeStatusAction])
  , _vsiOutpostARN         :: !(Maybe Text)
  , _vsiEvents             :: !(Maybe [VolumeStatusEvent])
  , _vsiAvailabilityZone   :: !(Maybe Text)
  , _vsiVolumeId           :: !(Maybe Text)
  , _vsiAttachmentStatuses :: !(Maybe [VolumeStatusAttachmentStatus])
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'VolumeStatusItem' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'vsiVolumeStatus' - The volume status.
--
-- * 'vsiActions' - The details of the operation.
--
-- * 'vsiOutpostARN' - The Amazon Resource Name (ARN) of the Outpost.
--
-- * 'vsiEvents' - A list of events associated with the volume.
--
-- * 'vsiAvailabilityZone' - The Availability Zone of the volume.
--
-- * 'vsiVolumeId' - The volume ID.
--
-- * 'vsiAttachmentStatuses' - Information about the instances to which the volume is attached.
volumeStatusItem
    :: VolumeStatusItem
volumeStatusItem =
  VolumeStatusItem'
    { _vsiVolumeStatus = Nothing
    , _vsiActions = Nothing
    , _vsiOutpostARN = Nothing
    , _vsiEvents = Nothing
    , _vsiAvailabilityZone = Nothing
    , _vsiVolumeId = Nothing
    , _vsiAttachmentStatuses = Nothing
    }


-- | The volume status.
vsiVolumeStatus :: Lens' VolumeStatusItem (Maybe VolumeStatusInfo)
vsiVolumeStatus = lens _vsiVolumeStatus (\ s a -> s{_vsiVolumeStatus = a})

-- | The details of the operation.
vsiActions :: Lens' VolumeStatusItem [VolumeStatusAction]
vsiActions = lens _vsiActions (\ s a -> s{_vsiActions = a}) . _Default . _Coerce

-- | The Amazon Resource Name (ARN) of the Outpost.
vsiOutpostARN :: Lens' VolumeStatusItem (Maybe Text)
vsiOutpostARN = lens _vsiOutpostARN (\ s a -> s{_vsiOutpostARN = a})

-- | A list of events associated with the volume.
vsiEvents :: Lens' VolumeStatusItem [VolumeStatusEvent]
vsiEvents = lens _vsiEvents (\ s a -> s{_vsiEvents = a}) . _Default . _Coerce

-- | The Availability Zone of the volume.
vsiAvailabilityZone :: Lens' VolumeStatusItem (Maybe Text)
vsiAvailabilityZone = lens _vsiAvailabilityZone (\ s a -> s{_vsiAvailabilityZone = a})

-- | The volume ID.
vsiVolumeId :: Lens' VolumeStatusItem (Maybe Text)
vsiVolumeId = lens _vsiVolumeId (\ s a -> s{_vsiVolumeId = a})

-- | Information about the instances to which the volume is attached.
vsiAttachmentStatuses :: Lens' VolumeStatusItem [VolumeStatusAttachmentStatus]
vsiAttachmentStatuses = lens _vsiAttachmentStatuses (\ s a -> s{_vsiAttachmentStatuses = a}) . _Default . _Coerce

instance FromXML VolumeStatusItem where
        parseXML x
          = VolumeStatusItem' <$>
              (x .@? "volumeStatus") <*>
                (x .@? "actionsSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "outpostArn")
                <*>
                (x .@? "eventsSet" .!@ mempty >>=
                   may (parseXMLList "item"))
                <*> (x .@? "availabilityZone")
                <*> (x .@? "volumeId")
                <*>
                (x .@? "attachmentStatuses" .!@ mempty >>=
                   may (parseXMLList "item"))

instance Hashable VolumeStatusItem where

instance NFData VolumeStatusItem where
